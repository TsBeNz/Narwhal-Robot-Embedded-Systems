
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015324  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080155f8  080155f8  000255f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015820  08015820  00025820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015828  08015828  00025828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801582c  0801582c  0002582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08015830  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000014  08015844  00030014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000f30  20000048  08015878  00030048  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000f78  08015878  00030f78  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030048  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b89e  00000000  00000000  00030076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000049d5  00000000  00000000  0005b914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d58  00000000  00000000  000602f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b60  00000000  00000000  00062048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039747  00000000  00000000  00063ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bb5a  00000000  00000000  0009d2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cb03  00000000  00000000  000c8e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0023594c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007e64  00000000  00000000  0023599c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000048 	.word	0x20000048
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080155dc 	.word	0x080155dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2000004c 	.word	0x2000004c
 800030c:	080155dc 	.word	0x080155dc

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8e7 	bl	80007f8 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <EncPulse2Rad_Read+0x40>
 800063a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	edd3 7a07 	vldr	s15, [r3, #28]
 8000644:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 8000648:	eeb0 0a67 	vmov.f32	s0, s15
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	39c90fd4 	.word	0x39c90fd4

08000658 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6178      	str	r0, [r7, #20]
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	8c3a      	ldrh	r2, [r7, #32]
 8000680:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f009 feb5 	bl	800a3f8 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2200      	movs	r2, #0
 80006c2:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006e4 <AS5047U_init+0x8c>
 80006d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	39c90fd4 	.word	0x39c90fd4

080006e8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	807b      	strh	r3, [r7, #2]
 80006f4:	4613      	mov	r3, r2
 80006f6:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <AS5047U_Write+0x10c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	723b      	strb	r3, [r7, #8]
 80006fe:	f107 0309 	add.w	r3, r7, #9
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000712:	b2db      	uxtb	r3, r3
 8000714:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f107 0108 	add.w	r1, r7, #8
 8000724:	2202      	movs	r2, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f007 f8f2 	bl	8007910 <HAL_CRC_Calculate>
 800072c:	4603      	mov	r3, r0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	f009 fe59 	bl	800a3f8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	e002      	b.n	8000752 <AS5047U_Write+0x6a>
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	3301      	adds	r3, #1
 8000750:	81fb      	strh	r3, [r7, #14]
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	f240 2226 	movw	r2, #550	; 0x226
 8000758:	4293      	cmp	r3, r2
 800075a:	d9f7      	bls.n	800074c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	2301      	movs	r3, #1
 8000766:	2203      	movs	r2, #3
 8000768:	f00e ff36 	bl	800f5d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6898      	ldr	r0, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	899b      	ldrh	r3, [r3, #12]
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	f009 fe3e 	bl	800a3f8 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000786:	883b      	ldrh	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	2202      	movs	r2, #2
 8000796:	4618      	mov	r0, r3
 8000798:	f007 f8ba 	bl	8007910 <HAL_CRC_Calculate>
 800079c:	4603      	mov	r3, r0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6898      	ldr	r0, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	899b      	ldrh	r3, [r3, #12]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f009 fe21 	bl	800a3f8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007b6:	2300      	movs	r3, #0
 80007b8:	81bb      	strh	r3, [r7, #12]
 80007ba:	e002      	b.n	80007c2 <AS5047U_Write+0xda>
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	81bb      	strh	r3, [r7, #12]
 80007c2:	89bb      	ldrh	r3, [r7, #12]
 80007c4:	f240 2226 	movw	r2, #550	; 0x226
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d9f7      	bls.n	80007bc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f107 0108 	add.w	r1, r7, #8
 80007d4:	2301      	movs	r3, #1
 80007d6:	2203      	movs	r2, #3
 80007d8:	f00e fefe 	bl	800f5d8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f009 fe06 	bl	800a3f8 <HAL_GPIO_WritePin>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080155f8 	.word	0x080155f8

080007f8 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000804:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000808:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800080a:	2300      	movs	r3, #0
 800080c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]
 8000812:	e002      	b.n	800081a <AS5047U_Position_Highspeed_Read+0x22>
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	3301      	adds	r3, #1
 8000818:	82fb      	strh	r3, [r7, #22]
 800081a:	8afb      	ldrh	r3, [r7, #22]
 800081c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000820:	d9f8      	bls.n	8000814 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f009 fde3 	bl	800a3f8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f107 0110 	add.w	r1, r7, #16
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2202      	movs	r2, #2
 800083e:	f00e fecb 	bl	800f5d8 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6898      	ldr	r0, [r3, #8]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f009 fdd3 	bl	800a3f8 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000852:	2300      	movs	r3, #0
 8000854:	82bb      	strh	r3, [r7, #20]
 8000856:	e002      	b.n	800085e <AS5047U_Position_Highspeed_Read+0x66>
 8000858:	8abb      	ldrh	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	82bb      	strh	r3, [r7, #20]
 800085e:	8abb      	ldrh	r3, [r7, #20]
 8000860:	f240 2226 	movw	r2, #550	; 0x226
 8000864:	4293      	cmp	r3, r2
 8000866:	d9f7      	bls.n	8000858 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	899b      	ldrh	r3, [r3, #12]
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f009 fdc0 	bl	800a3f8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2202      	movs	r2, #2
 8000884:	f00f f89a 	bl	800f9bc <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	899b      	ldrh	r3, [r3, #12]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f009 fdb0 	bl	800a3f8 <HAL_GPIO_WritePin>
	if (dir == 1){
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d111      	bne.n	80008c2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008b8:	4053      	eors	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	81da      	strh	r2, [r3, #14]
 80008c0:	e00c      	b.n	80008dc <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008c2:	7b3b      	ldrb	r3, [r7, #12]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	7b7b      	ldrb	r3, [r7, #13]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	89db      	ldrh	r3, [r3, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <TPM75_init>:
 *      Author: thansak Pongpraket
 */

#include <TPM75.h>

void TPM75_init(TPM75 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t A2, uint8_t A1, uint8_t A0) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	4613      	mov	r3, r2
 80008fc:	71bb      	strb	r3, [r7, #6]
	dev->address = 0x92;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2292      	movs	r2, #146	; 0x92
 8000902:	711a      	strb	r2, [r3, #4]
//	dev->address = 0x92;
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2224      	movs	r2, #36	; 0x24
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f014 f80b 	bl	8014944 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_ADC1_Init+0xec>)
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_ADC1_Init+0xf0>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000934:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_ADC1_Init+0xec>)
 8000936:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_ADC1_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_ADC1_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_ADC1_Init+0xec>)
 800094a:	2204      	movs	r2, #4
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC1_Init+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC1_Init+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_ADC1_Init+0xec>)
 800095c:	2201      	movs	r2, #1
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC1_Init+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC1_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC1_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC1_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC1_Init+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC1_Init+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC1_Init+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_ADC1_Init+0xec>)
 8000990:	f004 ffd2 	bl	8005938 <HAL_ADC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800099a:	f002 fedb 	bl	8003754 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800099e:	2305      	movs	r3, #5
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_ADC1_Init+0xec>)
 80009b2:	f006 fd57 	bl	8007464 <HAL_ADCEx_MultiModeConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f002 feca 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_ADC1_Init+0xf4>)
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_ADC1_Init+0xec>)
 80009e6:	f005 fd4b 	bl	8006480 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009f0:	f002 feb0 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000064 	.word	0x20000064
 8000a00:	40022000 	.word	0x40022000
 8000a04:	21800100 	.word	0x21800100

08000a08 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2224      	movs	r2, #36	; 0x24
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f013 ff95 	bl	8014944 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_ADC2_Init+0xb8>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a70:	f004 ff62 	bl	8005938 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000a7a:	f002 fe6b 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2306      	movs	r3, #6
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000aa4:	f005 fcec 	bl	8006480 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f002 fe51 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000d4 	.word	0x200000d4
 8000ac0:	40022100 	.word	0x40022100
 8000ac4:	21800100 	.word	0x21800100

08000ac8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2224      	movs	r2, #36	; 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f013 ff35 	bl	8014944 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_ADC3_Init+0xe0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b4e:	f004 fef3 	bl	8005938 <HAL_ADC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b58:	f002 fdfc 	bl	8003754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_ADC3_Init+0xe4>)
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b60:	2306      	movs	r3, #6
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000b64:	2306      	movs	r3, #6
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b8c:	f005 fc78 	bl	8006480 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000b96:	f002 fddd 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000144 	.word	0x20000144
 8000ba8:	58026000 	.word	0x58026000
 8000bac:	c7520000 	.word	0xc7520000

08000bb0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_ADC_MspInit+0x13c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d133      	bne.n	8000c3a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a45      	ldr	r2, [pc, #276]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10e      	bne.n	8000c02 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c20:	2320      	movs	r3, #32
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000c34:	f009 fa38 	bl	800a0a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	e054      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_ADC_MspInit+0x14c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d133      	bne.n	8000cac <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10e      	bne.n	8000c74 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c92:	2320      	movs	r3, #32
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000ca6:	f009 f9ff 	bl	800a0a8 <HAL_GPIO_Init>
}
 8000caa:	e01b      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0x150>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d116      	bne.n	8000ce4 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	207f      	movs	r0, #127	; 0x7f
 8000cda:	f006 fd80 	bl	80077de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cde:	207f      	movs	r0, #127	; 0x7f
 8000ce0:	f006 fd97 	bl	8007812 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	200001b4 	.word	0x200001b4
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	40022100 	.word	0x40022100
 8000d00:	58026000 	.word	0x58026000

08000d04 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8b3a      	ldrh	r2, [r7, #24]
 8000d28:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d38:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f00f fc1b 	bl	8010580 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 8000d74:	edd7 7a00 	vldr	s15, [r7]
 8000d78:	eef0 7ae7 	vabs.f32	s15, s15
 8000d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 8000d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d80e      	bhi.n	8000db0 <Step_Driver+0x48>
		reg_out = 20000;
 8000d92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d96:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	e033      	b.n	8000e18 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 8000db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	d50f      	bpl.n	8000de2 <Step_Driver+0x7a>
		reg_out = 20000;
 8000dc2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dc6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	897a      	ldrh	r2, [r7, #10]
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	e01a      	b.n	8000e18 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	89db      	ldrh	r3, [r3, #14]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfa:	ee17 3a90 	vmov	r3, s15
 8000dfe:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	897a      	ldrh	r2, [r7, #10]
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000e0a:	897b      	ldrh	r3, [r7, #10]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000e18:	edd7 7a00 	vldr	s15, [r7]
 8000e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	db09      	blt.n	8000e3a <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6898      	ldr	r0, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8999      	ldrh	r1, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7c1b      	ldrb	r3, [r3, #16]
 8000e32:	461a      	mov	r2, r3
 8000e34:	f009 fae0 	bl	800a3f8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000e38:	e00b      	b.n	8000e52 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6898      	ldr	r0, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8999      	ldrh	r1, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7c1b      	ldrb	r3, [r3, #16]
 8000e46:	f083 0301 	eor.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f009 fad3 	bl	800a3f8 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Traj_Coeff_Cal>:
	uint16_t Pulse_in  =  (uint16_t)(((((int16_t)Deg)+90)*5.55555f) + 999);
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Deg);
}

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
		float Pos_Now, float Vel_Now) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b08d      	sub	sp, #52	; 0x34
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6178      	str	r0, [r7, #20]
 8000e62:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e66:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e6e:	edc7 1a01 	vstr	s3, [r7, #4]
	Traj->T = T;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	619a      	str	r2, [r3, #24]
	float T_P2 = T * T;
 8000e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float T_P3 = T_P2 * T;
 8000e84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float T_P4 = T_P3 * T;
 8000e94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float T_P5 = T_P4 * T;
 8000ea4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	edc7 7a08 	vstr	s15, [r7, #32]
	float ds = Pos_Now - Pos_Final;
 8000eb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec0:	edc7 7a07 	vstr	s15, [r7, #28]
	float tfv0 = T * Vel_Now;
 8000ec4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed0:	edc7 7a06 	vstr	s15, [r7, #24]
	Traj->TrajCoef[0] = Pos_Now;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	601a      	str	r2, [r3, #0]
	Traj->TrajCoef[1] = Vel_Now;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	605a      	str	r2, [r3, #4]
	Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0)) / T_P3;
 8000ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ee4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ef0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000ef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f00:	eef1 6a67 	vneg.f32	s13, s15
 8000f04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	edc3 7a03 	vstr	s15, [r3, #12]
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000f1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000f26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f2a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	edc3 7a04 	vstr	s15, [r3, #16]
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
 8000f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	eef1 6a67 	vneg.f32	s13, s15
 8000f58:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000f66:	bf00      	nop
 8000f68:	3734      	adds	r7, #52	; 0x34
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <TrajFollow>:
	Traj->TrajCoef[4] = ((15 * ds) + (8 * tfv0)) / T_P4;
	Traj->TrajCoef[5] = -(3 * ((2 * ds) + tfv0)) / T_P5;
}

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3310      	adds	r3, #16
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ffa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3304      	adds	r3, #4
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800100e:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001020:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3308      	adds	r3, #8
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001030:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001034:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	edd3 7a05 	vldr	s15, [r3, #20]
 800103e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001042:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001046:	ee27 5b05 	vmul.f64	d5, d7, d5
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	330c      	adds	r3, #12
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001056:	ee25 7b07 	vmul.f64	d7, d5, d7
 800105a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800105e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	edc3 7a00 	vstr	s15, [r3]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6178      	str	r0, [r7, #20]
 800107c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001080:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8001084:	ed97 7b02 	vldr	d7, [r7, #8]
 8001088:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8001092:	ed97 7b00 	vldr	d7, [r7]
 8001096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <Kalman_init+0x60>)
 80010b4:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <Kalman_init+0x60>)
 80010ba:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <Kalman_init+0x60>)
 80010c0:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <Kalman_init+0x60>)
 80010c6:	61da      	str	r2, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	3d4ccccd 	.word	0x3d4ccccd

080010d8 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 80010d8:	b480      	push	{r7}
 80010da:	b0a5      	sub	sp, #148	; 0x94
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80014a0 <KalmanFilter+0x3c8>
 80010f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f6:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001104:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80014a0 <KalmanFilter+0x3c8>
 8001108:	ee27 7b06 	vmul.f64	d7, d7, d6
 800110c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80014a8 <KalmanFilter+0x3d0>
 800111e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001122:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8001126:	a3e6      	add	r3, pc, #920	; (adr r3, 80014c0 <KalmanFilter+0x3e8>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8001130:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001134:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001138:	ee27 6b06 	vmul.f64	d6, d7, d6
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001146:	ee26 7b07 	vmul.f64	d7, d6, d7
 800114a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a01 	vldr	s15, [r3, #4]
 8001154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edd3 7a04 	vldr	s15, [r3, #16]
 8001166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800116e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001172:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001176:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800117a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800117e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001182:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001186:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800118a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800118e:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8001192:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001196:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011c8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011cc:	ed97 7b00 	vldr	d7, [r7]
 80011d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 80011dc:	ed97 7b00 	vldr	d7, [r7]
 80011e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011e4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011fa:	ed9f 5bad 	vldr	d5, [pc, #692]	; 80014b0 <KalmanFilter+0x3d8>
 80011fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	edd3 7a03 	vldr	s15, [r3, #12]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001210:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001214:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001218:	ed97 7b00 	vldr	d7, [r7]
 800121c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001220:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001224:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001228:	ed97 7b00 	vldr	d7, [r7]
 800122c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001230:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001234:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001238:	ed97 7b00 	vldr	d7, [r7]
 800123c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001240:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001244:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001248:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800124c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	edd3 7a07 	vldr	s15, [r3, #28]
 8001256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800125a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80014b0 <KalmanFilter+0x3d8>
 800125e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001262:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001270:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80014b8 <KalmanFilter+0x3e0>
 8001274:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001278:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 800127c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001280:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001284:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001288:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800128c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001290:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edd3 7a06 	vldr	s15, [r3, #24]
 800129a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800129e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80012a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012a6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c8:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80014b0 <KalmanFilter+0x3d8>
 80012cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012d4:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80012d8:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80012dc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80012e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80012ea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80012ee:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80012f2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80012f6:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80014b0 <KalmanFilter+0x3d8>
 80012fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001302:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edd3 7a03 	vldr	s15, [r3, #12]
 800130c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	edd3 7a02 	vldr	s15, [r3, #8]
 8001316:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800131a:	ed97 7b00 	vldr	d7, [r7]
 800131e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a03 	vldr	s15, [r3, #12]
 8001328:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800132c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80014b0 <KalmanFilter+0x3d8>
 8001330:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001334:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001338:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800133c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001340:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001344:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800134c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001360:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001364:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001368:	ee27 5b05 	vmul.f64	d5, d7, d5
 800136c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001370:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001374:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001378:	ee35 5b07 	vadd.f64	d5, d5, d7
 800137c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001380:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001384:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001388:	ee35 7b07 	vadd.f64	d7, d5, d7
 800138c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001390:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001394:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001398:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	edd3 7a07 	vldr	s15, [r3, #28]
 80013a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013aa:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80014b0 <KalmanFilter+0x3d8>
 80013ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013b2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80013b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ba:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80013da:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80013de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80013e2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80013e6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80013ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ee:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	edd3 7a06 	vldr	s15, [r3, #24]
 8001406:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800140e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001412:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001416:	ee26 5b07 	vmul.f64	d5, d6, d7
 800141a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800141e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001422:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a07 	vldr	s15, [r3, #28]
 800142c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800143a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800143e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001442:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001450:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001454:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001458:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800145c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001460:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001464:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001468:	ee36 7b47 	vsub.f64	d7, d6, d7
 800146c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001470:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001474:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 800147e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001482:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 800148c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001490:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edc3 7a04 	vstr	s15, [r3, #16]
 800149a:	e015      	b.n	80014c8 <KalmanFilter+0x3f0>
 800149c:	f3af 8000 	nop.w
 80014a0:	47ae147b 	.word	0x47ae147b
 80014a4:	3f947ae1 	.word	0x3f947ae1
 80014a8:	e2308c3b 	.word	0xe2308c3b
 80014ac:	3e05798e 	.word	0x3e05798e
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	3f747ae1 	.word	0x3f747ae1
 80014b8:	a0b5ed8e 	.word	0xa0b5ed8e
 80014bc:	3e80c6f7 	.word	0x3e80c6f7
 80014c0:	eb1c432d 	.word	0xeb1c432d
 80014c4:	3efa36e2 	.word	0x3efa36e2
	kalman->p12 = pp12;
 80014c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80014cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 80014d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80014da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 80014e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80014e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80014f2:	bf00      	nop
 80014f4:	3794      	adds	r7, #148	; 0x94
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	ed87 0a02 	vstr	s0, [r7, #8]
 800150c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001510:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	ed87 0a02 	vstr	s0, [r7, #8]
 800156e:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ed93 7a04 	vldr	s14, [r3, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edd3 7a05 	vldr	s15, [r3, #20]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7a03 	vldr	s14, [r3, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 7a06 	vldr	s15, [r3, #24]
 80015a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ed93 6a06 	vldr	s12, [r3, #24]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80015e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	return PID->Output;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	ee07 3a90 	vmov	s15, r3
}
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GFeed){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	61f8      	str	r0, [r7, #28]
 8001618:	ed87 0a06 	vstr	s0, [r7, #24]
 800161c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001620:	ed87 1a04 	vstr	s2, [r7, #16]
 8001624:	edc7 1a03 	vstr	s3, [r7, #12]
 8001628:	ed87 2a02 	vstr	s4, [r7, #8]
 800162c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001630:	ed87 3a00 	vstr	s6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	ed97 1a04 	vldr	s2, [r7, #16]
 800163a:	edd7 0a05 	vldr	s1, [r7, #20]
 800163e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff5c 	bl	8001500 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001650:	edd7 0a02 	vldr	s1, [r7, #8]
 8001654:	ed97 0a03 	vldr	s0, [r7, #12]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff51 	bl	8001500 <PID_init>
	Control->Vel_Gfeed = GFeed;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6178      	str	r0, [r7, #20]
 8001674:	6139      	str	r1, [r7, #16]
 8001676:	ed87 0a03 	vstr	s0, [r7, #12]
 800167a:	edc7 0a02 	vstr	s1, [r7, #8]
 800167e:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001696:	eeb0 0b47 	vmov.f64	d0, d7
 800169a:	6938      	ldr	r0, [r7, #16]
 800169c:	f7ff fd1c 	bl	80010d8 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c
	Control->PositionFeedback = kalman->x1;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016be:	eef0 0a47 	vmov.f32	s1, s14
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff ff4b 	bl	8001562 <PID_Control>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80016fe:	eef0 0a47 	vmov.f32	s1, s14
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	4610      	mov	r0, r2
 8001708:	f7ff ff2b 	bl	8001562 <PID_Control>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001722:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
//	Control->Output = Control->VelocityPIDOutput;
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_CRC_Init+0x50>)
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <MX_CRC_Init+0x54>)
 8001748:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_CRC_Init+0x50>)
 800174c:	2201      	movs	r2, #1
 800174e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_CRC_Init+0x50>)
 8001752:	2201      	movs	r2, #1
 8001754:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_CRC_Init+0x50>)
 8001758:	221d      	movs	r2, #29
 800175a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_CRC_Init+0x50>)
 800175e:	2210      	movs	r2, #16
 8001760:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_CRC_Init+0x50>)
 8001764:	22c4      	movs	r2, #196	; 0xc4
 8001766:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_CRC_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_CRC_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_CRC_Init+0x50>)
 8001776:	2201      	movs	r2, #1
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_CRC_Init+0x50>)
 800177c:	f006 f864 	bl	8007848 <HAL_CRC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001786:	f001 ffe5 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200001b8 	.word	0x200001b8
 8001794:	58024c00 	.word	0x58024c00

08001798 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_CRC_MspInit+0x3c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10e      	bne.n	80017c8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	58024c00 	.word	0x58024c00
 80017d8:	58024400 	.word	0x58024400

080017dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_DMA_Init+0x5c>)
 80017e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_DMA_Init+0x5c>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_DMA_Init+0x5c>)
 80017f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	200b      	movs	r0, #11
 8001806:	f005 ffea 	bl	80077de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800180a:	200b      	movs	r0, #11
 800180c:	f006 f801 	bl	8007812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	200c      	movs	r0, #12
 8001816:	f005 ffe2 	bl	80077de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800181a:	200c      	movs	r0, #12
 800181c:	f005 fff9 	bl	8007812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	200d      	movs	r0, #13
 8001826:	f005 ffda 	bl	80077de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800182a:	200d      	movs	r0, #13
 800182c:	f005 fff1 	bl	8007812 <HAL_NVIC_EnableIRQ>

}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400

0800183c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_HS_DP
     PA15(JTDI)   ------> S_TIM2_CH1_ETR
     PB3(JTDO/TRACESWO)   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	4aa0      	ldr	r2, [pc, #640]	; (8001adc <MX_GPIO_Init+0x2a0>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001862:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b9a      	ldr	r3, [pc, #616]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	4a99      	ldr	r2, [pc, #612]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001880:	4b96      	ldr	r3, [pc, #600]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	4b93      	ldr	r3, [pc, #588]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a91      	ldr	r2, [pc, #580]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018bc:	4b87      	ldr	r3, [pc, #540]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	4a82      	ldr	r2, [pc, #520]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018da:	4b80      	ldr	r3, [pc, #512]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e8:	4b7c      	ldr	r3, [pc, #496]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a7b      	ldr	r2, [pc, #492]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b78      	ldr	r3, [pc, #480]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001906:	2200      	movs	r2, #0
 8001908:	f648 31df 	movw	r1, #35807	; 0x8bdf
 800190c:	4874      	ldr	r0, [pc, #464]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 800190e:	f008 fd73 	bl	800a3f8 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001918:	4872      	ldr	r0, [pc, #456]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800191a:	f008 fd6d 	bl	800a3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	21c4      	movs	r1, #196	; 0xc4
 8001922:	4871      	ldr	r0, [pc, #452]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001924:	f008 fd68 	bl	800a3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f24c 0140 	movw	r1, #49216	; 0xc040
 800192e:	486f      	ldr	r0, [pc, #444]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001930:	f008 fd62 	bl	800a3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193a:	486a      	ldr	r0, [pc, #424]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800193c:	f008 fd5c 	bl	800a3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001940:	2201      	movs	r2, #1
 8001942:	213f      	movs	r1, #63	; 0x3f
 8001944:	4869      	ldr	r0, [pc, #420]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001946:	f008 fd57 	bl	800a3f8 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800194a:	f648 33df 	movw	r3, #35807	; 0x8bdf
 800194e:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 8001964:	f008 fba0 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001968:	f24e 030f 	movw	r3, #57359	; 0xe00f
 800196c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4859      	ldr	r0, [pc, #356]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800197e:	f008 fb93 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001982:	233c      	movs	r3, #60	; 0x3c
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4856      	ldr	r0, [pc, #344]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001996:	f008 fb87 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 800199a:	f44f 7344 	mov.w	r3, #784	; 0x310
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	484c      	ldr	r0, [pc, #304]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 80019b4:	f008 fb78 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 80019cc:	f008 fb6c 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4840      	ldr	r0, [pc, #256]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 80019e6:	f008 fb5f 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 80019ea:	23c4      	movs	r3, #196	; 0xc4
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4839      	ldr	r0, [pc, #228]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001a02:	f008 fb51 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4831      	ldr	r0, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 8001a1c:	f008 fb44 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001a20:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	482d      	ldr	r0, [pc, #180]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001a36:	f008 fb37 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001a3a:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001a3e:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4826      	ldr	r0, [pc, #152]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001a54:	f008 fb28 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4820      	ldr	r0, [pc, #128]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001a6e:	f008 fb1b 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001a8c:	f008 fb0c 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 8001a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001aae:	f008 fafb 	bl	800a0a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6B_Pin;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001ace:	f008 faeb 	bl	800a0a8 <HAL_GPIO_Init>

}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58021000 	.word	0x58021000
 8001ae4:	58020800 	.word	0x58020800
 8001ae8:	58020400 	.word	0x58020400
 8001aec:	58020c00 	.word	0x58020c00
 8001af0:	58020000 	.word	0x58020000

08001af4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <MX_I2C2_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <MX_I2C2_Init+0x7c>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b30:	f008 fc96 	bl	800a460 <HAL_I2C_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b3a:	f001 fe0b 	bl	8003754 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b42:	f00a fba3 	bl	800c28c <HAL_I2CEx_ConfigAnalogFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b4c:	f001 fe02 	bl	8003754 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b50:	2100      	movs	r1, #0
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b54:	f00a fbe5 	bl	800c322 <HAL_I2CEx_ConfigDigitalFilter>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b5e:	f001 fdf9 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200001dc 	.word	0x200001dc
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	60404e72 	.word	0x60404e72

08001b74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0b6      	sub	sp, #216	; 0xd8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	22b4      	movs	r2, #180	; 0xb4
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f012 fed5 	bl	8014944 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_I2C_MspInit+0xd0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d14a      	bne.n	8001c3a <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00b fb76 	bl	800d2a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f001 fdc9 	bl	8003754 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <HAL_I2C_MspInit+0xd8>)
 8001c08:	f008 fa4e 	bl	800a0a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2022      	movs	r0, #34	; 0x22
 8001c30:	f005 fdd5 	bl	80077de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c34:	2022      	movs	r0, #34	; 0x22
 8001c36:	f005 fdec 	bl	8007812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	37d8      	adds	r7, #216	; 0xd8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005800 	.word	0x40005800
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58020400 	.word	0x58020400

08001c50 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(float q[3], float chi_dot[3], float qv[4])

Kinematics_StatusTypeDef IVK(float q[4], float chi_dot[3], float qv[4])
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	ed2d 8b04 	vpush	{d8-d9}
 8001c56:	b096      	sub	sp, #88	; 0x58
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  float qvbar_idx_1;
  float qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3304      	adds	r3, #4
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = sin(qvbar_idx_1);
 8001c78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c80:	eeb0 0b47 	vmov.f64	d0, d7
 8001c84:	f012 feb4 	bl	80149f0 <sin>
 8001c88:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c90:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Jv4_tmp = cos(q[0]);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca2:	f012 fe59 	bl	8014958 <cos>
 8001ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8001caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  b_Jv4_tmp = sin(q[0]);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc0:	f012 fe96 	bl	80149f0 <sin>
 8001cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8001cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ccc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8001cd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cdc:	f012 fe3c 	bl	8014958 <cos>
 8001ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ce4:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8002020 <IVK+0x3d0>
 8001ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d00:	eeb0 0b47 	vmov.f64	d0, d7
 8001d04:	f012 fe74 	bl	80149f0 <sin>
 8001d08:	eeb0 7b40 	vmov.f64	d7, d0
 8001d0c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8002020 <IVK+0x3d0>
 8001d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8001d1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d24:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001d28:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001d2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8001d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d44:	eeb1 7a67 	vneg.f32	s14, s15
 8001d48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a04 	vstr	s15, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8001d54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d58:	eef1 7a67 	vneg.f32	s15, s15
 8001d5c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d68:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002020 <IVK+0x3d0>
 8001d6c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d80:	f012 fdea 	bl	8014958 <cos>
 8001d84:	eeb0 7b40 	vmov.f64	d7, d0
 8001d88:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002020 <IVK+0x3d0>
 8001d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d90:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001d94:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d9c:	edc7 7a07 	vstr	s15, [r7, #28]
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8001da0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001da4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8002028 <IVK+0x3d8>
 8001dac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001db0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dc0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8001dc4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd0:	edc7 7a05 	vstr	s15, [r7, #20]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dde:	eeb0 0b47 	vmov.f64	d0, d7
 8001de2:	f012 fe05 	bl	80149f0 <sin>
 8001de6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dea:	eeb1 8b47 	vneg.f64	d8, d7
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	ed93 7a00 	vldr	s14, [r3]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e06:	eeb0 0b47 	vmov.f64	d0, d7
 8001e0a:	f012 fdf1 	bl	80149f0 <sin>
 8001e0e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e12:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002020 <IVK+0x3d0>
 8001e16:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e26:	eeb0 0b47 	vmov.f64	d0, d7
 8001e2a:	f012 fd95 	bl	8014958 <cos>
 8001e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e32:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8002020 <IVK+0x3d0>
 8001e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e3a:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e3e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e46:	edc7 7a08 	vstr	s15, [r7, #32]
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3308      	adds	r3, #8
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e62:	eeb0 0b47 	vmov.f64	d0, d7
 8001e66:	f012 fdc3 	bl	80149f0 <sin>
 8001e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e6e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8002028 <IVK+0x3d8>
 8001e72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Jv4[2] = 0.0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8001e90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[8] = qvbar_idx_1;
 8001ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  r1 = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
  r2 = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	653b      	str	r3, [r7, #80]	; 0x50
  rtemp = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8001eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb4:	eeb0 7ae7 	vabs.f32	s14, s15
 8001eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ebc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd03      	ble.n	8001ed2 <IVK+0x282>
    r1 = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54
    r2 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	653b      	str	r3, [r7, #80]	; 0x50
  }
  Jv4[r2] /= Jv4[r1];
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3358      	adds	r3, #88	; 0x58
 8001ed8:	443b      	add	r3, r7
 8001eda:	3b48      	subs	r3, #72	; 0x48
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3358      	adds	r3, #88	; 0x58
 8001ee6:	443b      	add	r3, r7
 8001ee8:	3b48      	subs	r3, #72	; 0x48
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3358      	adds	r3, #88	; 0x58
 8001ef8:	443b      	add	r3, r7
 8001efa:	3b48      	subs	r3, #72	; 0x48
 8001efc:	edc3 7a00 	vstr	s15, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3358      	adds	r3, #88	; 0x58
 8001f06:	443b      	add	r3, r7
 8001f08:	3b48      	subs	r3, #72	; 0x48
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002030 <IVK+0x3e0>
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	edc7 7a06 	vstr	s15, [r7, #24]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 8001f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3358      	adds	r3, #88	; 0x58
 8001f22:	443b      	add	r3, r7
 8001f24:	3b48      	subs	r3, #72	; 0x48
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3358      	adds	r3, #88	; 0x58
 8001f30:	443b      	add	r3, r7
 8001f32:	3b48      	subs	r3, #72	; 0x48
 8001f34:	edd3 6a00 	vldr	s13, [r3]
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3358      	adds	r3, #88	; 0x58
 8001f40:	443b      	add	r3, r7
 8001f42:	3b48      	subs	r3, #72	; 0x48
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4e:	3303      	adds	r3, #3
 8001f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3358      	adds	r3, #88	; 0x58
 8001f58:	443b      	add	r3, r7
 8001f5a:	3b48      	subs	r3, #72	; 0x48
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8001f60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f64:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3358      	adds	r3, #88	; 0x58
 8001f70:	443b      	add	r3, r7
 8001f72:	3b48      	subs	r3, #72	; 0x48
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	3306      	adds	r3, #6
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3358      	adds	r3, #88	; 0x58
 8001f8c:	443b      	add	r3, r7
 8001f8e:	3b48      	subs	r3, #72	; 0x48
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3358      	adds	r3, #88	; 0x58
 8001f9a:	443b      	add	r3, r7
 8001f9c:	3b48      	subs	r3, #72	; 0x48
 8001f9e:	edd3 6a00 	vldr	s13, [r3]
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	3358      	adds	r3, #88	; 0x58
 8001faa:	443b      	add	r3, r7
 8001fac:	3b48      	subs	r3, #72	; 0x48
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	3306      	adds	r3, #6
 8001fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3358      	adds	r3, #88	; 0x58
 8001fc2:	443b      	add	r3, r7
 8001fc4:	3b48      	subs	r3, #72	; 0x48
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8001fca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001fce:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3358      	adds	r3, #88	; 0x58
 8001fda:	443b      	add	r3, r7
 8001fdc:	3b48      	subs	r3, #72	; 0x48
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 8001fee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ff2:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3358      	adds	r3, #88	; 0x58
 8001ffe:	443b      	add	r3, r7
 8002000:	3b48      	subs	r3, #72	; 0x48
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	eef0 7ae7 	vabs.f32	s15, s15
 800200a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd0f      	ble.n	8002034 <IVK+0x3e4>
    rtemp = r2;
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
    r2 = 2;
 8002018:	2302      	movs	r3, #2
 800201a:	653b      	str	r3, [r7, #80]	; 0x50
 800201c:	e00a      	b.n	8002034 <IVK+0x3e4>
 800201e:	bf00      	nop
 8002020:	00000000 	.word	0x00000000
 8002024:	4077c000 	.word	0x4077c000
 8002028:	00000000 	.word	0x00000000
 800202c:	c077c000 	.word	0xc077c000
 8002030:	00000000 	.word	0x00000000
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002036:	3303      	adds	r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3358      	adds	r3, #88	; 0x58
 800203c:	443b      	add	r3, r7
 800203e:	3b48      	subs	r3, #72	; 0x48
 8002040:	edd3 6a00 	vldr	s13, [r3]
 8002044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002046:	3303      	adds	r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3358      	adds	r3, #88	; 0x58
 800204c:	443b      	add	r3, r7
 800204e:	3b48      	subs	r3, #72	; 0x48
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	3303      	adds	r3, #3
 8002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3358      	adds	r3, #88	; 0x58
 8002060:	443b      	add	r3, r7
 8002062:	3b48      	subs	r3, #72	; 0x48
 8002064:	edc3 7a00 	vstr	s15, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8002068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206a:	3306      	adds	r3, #6
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	443b      	add	r3, r7
 8002072:	3b48      	subs	r3, #72	; 0x48
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	3303      	adds	r3, #3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3358      	adds	r3, #88	; 0x58
 8002080:	443b      	add	r3, r7
 8002082:	3b48      	subs	r3, #72	; 0x48
 8002084:	edd3 6a00 	vldr	s13, [r3]
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3358      	adds	r3, #88	; 0x58
 8002090:	443b      	add	r3, r7
 8002092:	3b48      	subs	r3, #72	; 0x48
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209e:	3306      	adds	r3, #6
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3358      	adds	r3, #88	; 0x58
 80020a8:	443b      	add	r3, r7
 80020aa:	3b48      	subs	r3, #72	; 0x48
 80020ac:	edc3 7a00 	vstr	s15, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	edd3 6a00 	vldr	s13, [r3]
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3358      	adds	r3, #88	; 0x58
 80020ce:	443b      	add	r3, r7
 80020d0:	3b48      	subs	r3, #72	; 0x48
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	ed93 7a00 	vldr	s14, [r3]
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	edd3 6a00 	vldr	s13, [r3]
 80020fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3358      	adds	r3, #88	; 0x58
 8002100:	443b      	add	r3, r7
 8002102:	3b48      	subs	r3, #72	; 0x48
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210c:	ee37 7a67 	vsub.f32	s14, s14, s15
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	3303      	adds	r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3358      	adds	r3, #88	; 0x58
 8002118:	443b      	add	r3, r7
 800211a:	3b48      	subs	r3, #72	; 0x48
 800211c:	edd3 6a00 	vldr	s13, [r3]
 8002120:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002128:	ee77 6a67 	vsub.f32	s13, s14, s15
                Jv4[rtemp + 6];
 800212c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212e:	3306      	adds	r3, #6
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3358      	adds	r3, #88	; 0x58
 8002134:	443b      	add	r3, r7
 8002136:	3b48      	subs	r3, #72	; 0x48
 8002138:	ed93 7a00 	vldr	s14, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8002144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002146:	3306      	adds	r3, #6
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3358      	adds	r3, #88	; 0x58
 800214c:	443b      	add	r3, r7
 800214e:	3b48      	subs	r3, #72	; 0x48
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002164:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216a:	3303      	adds	r3, #3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3358      	adds	r3, #88	; 0x58
 8002170:	443b      	add	r3, r7
 8002172:	3b48      	subs	r3, #72	; 0x48
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4413      	add	r3, r2
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002192:	3306      	adds	r3, #6
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3358      	adds	r3, #88	; 0x58
 8002198:	443b      	add	r3, r7
 800219a:	3b48      	subs	r3, #72	; 0x48
 800219c:	edd3 6a00 	vldr	s13, [r3]
 80021a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	3303      	adds	r3, #3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3358      	adds	r3, #88	; 0x58
 80021b4:	443b      	add	r3, r7
 80021b6:	3b48      	subs	r3, #72	; 0x48
 80021b8:	edd3 6a00 	vldr	s13, [r3]
 80021bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee77 6a67 	vsub.f32	s13, s14, s15
      Jv4[r1];
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3358      	adds	r3, #88	; 0x58
 80021ce:	443b      	add	r3, r7
 80021d0:	3b48      	subs	r3, #72	; 0x48
 80021d2:	ed93 7a00 	vldr	s14, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80021d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
  qv[0] =
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edc3 7a00 	vstr	s15, [r3]
  qv[1] = qvbar_idx_1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021e6:	601a      	str	r2, [r3, #0]
  qv[2] = qvbar_idx_2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3308      	adds	r3, #8
 80021ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ee:	601a      	str	r2, [r3, #0]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80021f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021f4:	eeb1 7a67 	vneg.f32	s14, s15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	330c      	adds	r3, #12
 80021fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002204:	edc3 7a00 	vstr	s15, [r3]
  return Kinematics_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3758      	adds	r7, #88	; 0x58
 800220e:	46bd      	mov	sp, r7
 8002210:	ecbd 8b04 	vpop	{d8-d9}
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221e:	f002 ffff 	bl	8005220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002222:	f000 fab1 	bl	8002788 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002226:	f000 fb27 	bl	8002878 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222a:	f7ff fb07 	bl	800183c <MX_GPIO_Init>
  MX_DMA_Init();
 800222e:	f7ff fad5 	bl	80017dc <MX_DMA_Init>
  MX_ADC3_Init();
 8002232:	f7fe fc49 	bl	8000ac8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002236:	f001 fd07 	bl	8003c48 <MX_TIM1_Init>
  MX_TIM3_Init();
 800223a:	f001 fd95 	bl	8003d68 <MX_TIM3_Init>
  MX_TIM4_Init();
 800223e:	f001 fe0b 	bl	8003e58 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002242:	f001 fe5f 	bl	8003f04 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002246:	f001 ff19 	bl	800407c <MX_TIM8_Init>
  MX_TIM13_Init();
 800224a:	f001 ff71 	bl	8004130 <MX_TIM13_Init>
  MX_TIM14_Init();
 800224e:	f001 ffbf 	bl	80041d0 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002252:	f002 f80d 	bl	8004270 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002256:	f002 f893 	bl	8004380 <MX_TIM16_Init>
  MX_TIM17_Init();
 800225a:	f002 f90d 	bl	8004478 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800225e:	f002 fdeb 	bl	8004e38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002262:	f002 fe37 	bl	8004ed4 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002266:	f001 fa7b 	bl	8003760 <MX_SPI3_Init>
  MX_SPI4_Init();
 800226a:	f001 fad1 	bl	8003810 <MX_SPI4_Init>
  MX_I2C2_Init();
 800226e:	f7ff fc41 	bl	8001af4 <MX_I2C2_Init>
  MX_CRC_Init();
 8002272:	f7ff fa65 	bl	8001740 <MX_CRC_Init>
  MX_TIM24_Init();
 8002276:	f002 f9cb 	bl	8004610 <MX_TIM24_Init>
  MX_TIM23_Init();
 800227a:	f002 f979 	bl	8004570 <MX_TIM23_Init>
  MX_TIM6_Init();
 800227e:	f001 fec5 	bl	800400c <MX_TIM6_Init>
  MX_UART5_Init();
 8002282:	f002 fd87 	bl	8004d94 <MX_UART5_Init>
  MX_ADC1_Init();
 8002286:	f7fe fb43 	bl	8000910 <MX_ADC1_Init>
  MX_ADC2_Init();
 800228a:	f7fe fbbd 	bl	8000a08 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 800228e:	f7ff faa5 	bl	80017dc <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002292:	2201      	movs	r2, #1
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	48bc      	ldr	r0, [pc, #752]	; (8002588 <main+0x370>)
 8002298:	f008 f8ae 	bl	800a3f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 800229c:	2201      	movs	r2, #1
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	48ba      	ldr	r0, [pc, #744]	; (800258c <main+0x374>)
 80022a2:	f008 f8a9 	bl	800a3f8 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 80022a6:	4bba      	ldr	r3, [pc, #744]	; (8002590 <main+0x378>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4bb9      	ldr	r3, [pc, #740]	; (8002594 <main+0x37c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80022ba:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8002570 <main+0x358>
 80022be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022c6:	4bb4      	ldr	r3, [pc, #720]	; (8002598 <main+0x380>)
 80022c8:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80022cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022d0:	2100      	movs	r1, #0
 80022d2:	48b2      	ldr	r0, [pc, #712]	; (800259c <main+0x384>)
 80022d4:	f005 f830 	bl	8007338 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 80022d8:	2301      	movs	r3, #1
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80025a0 <main+0x388>
 80022e0:	4bb0      	ldr	r3, [pc, #704]	; (80025a4 <main+0x38c>)
 80022e2:	4aa9      	ldr	r2, [pc, #676]	; (8002588 <main+0x370>)
 80022e4:	49b0      	ldr	r1, [pc, #704]	; (80025a8 <main+0x390>)
 80022e6:	48b1      	ldr	r0, [pc, #708]	; (80025ac <main+0x394>)
 80022e8:	f7fe f9b6 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80025b0 <main+0x398>
 80022f4:	4bab      	ldr	r3, [pc, #684]	; (80025a4 <main+0x38c>)
 80022f6:	4aa4      	ldr	r2, [pc, #656]	; (8002588 <main+0x370>)
 80022f8:	49ab      	ldr	r1, [pc, #684]	; (80025a8 <main+0x390>)
 80022fa:	48ae      	ldr	r0, [pc, #696]	; (80025b4 <main+0x39c>)
 80022fc:	f7fe f9ac 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002300:	2304      	movs	r3, #4
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	ed9f 0aac 	vldr	s0, [pc, #688]	; 80025b8 <main+0x3a0>
 8002308:	4ba6      	ldr	r3, [pc, #664]	; (80025a4 <main+0x38c>)
 800230a:	4a9f      	ldr	r2, [pc, #636]	; (8002588 <main+0x370>)
 800230c:	49a6      	ldr	r1, [pc, #664]	; (80025a8 <main+0x390>)
 800230e:	48ab      	ldr	r0, [pc, #684]	; (80025bc <main+0x3a4>)
 8002310:	f7fe f9a2 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002314:	2308      	movs	r3, #8
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 80025c0 <main+0x3a8>
 800231c:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <main+0x38c>)
 800231e:	4a9a      	ldr	r2, [pc, #616]	; (8002588 <main+0x370>)
 8002320:	49a1      	ldr	r1, [pc, #644]	; (80025a8 <main+0x390>)
 8002322:	48a8      	ldr	r0, [pc, #672]	; (80025c4 <main+0x3ac>)
 8002324:	f7fe f998 	bl	8000658 <AS5047U_init>

	HAL_Delay(50);
 8002328:	2032      	movs	r0, #50	; 0x32
 800232a:	f003 f80b 	bl	8005344 <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	211a      	movs	r1, #26
 8002332:	489e      	ldr	r0, [pc, #632]	; (80025ac <main+0x394>)
 8002334:	f7fe f9d8 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	211a      	movs	r1, #26
 800233c:	489d      	ldr	r0, [pc, #628]	; (80025b4 <main+0x39c>)
 800233e:	f7fe f9d3 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	211a      	movs	r1, #26
 8002346:	489d      	ldr	r0, [pc, #628]	; (80025bc <main+0x3a4>)
 8002348:	f7fe f9ce 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	211a      	movs	r1, #26
 8002350:	489c      	ldr	r0, [pc, #624]	; (80025c4 <main+0x3ac>)
 8002352:	f7fe f9c9 	bl	80006e8 <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 2000, 0.003);
 8002356:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8002578 <main+0x360>
 800235a:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8002580 <main+0x368>
 800235e:	489a      	ldr	r0, [pc, #616]	; (80025c8 <main+0x3b0>)
 8002360:	f7fe fe88 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[1], 2000, 0.003);
 8002364:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8002578 <main+0x360>
 8002368:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8002580 <main+0x368>
 800236c:	4897      	ldr	r0, [pc, #604]	; (80025cc <main+0x3b4>)
 800236e:	f7fe fe81 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[2], 2000, 0.003);
 8002372:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8002578 <main+0x360>
 8002376:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8002580 <main+0x368>
 800237a:	4895      	ldr	r0, [pc, #596]	; (80025d0 <main+0x3b8>)
 800237c:	f7fe fe7a 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[3], 2000, 0.003);
 8002380:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8002578 <main+0x360>
 8002384:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8002580 <main+0x368>
 8002388:	4892      	ldr	r0, [pc, #584]	; (80025d4 <main+0x3bc>)
 800238a:	f7fe fe73 	bl	8001074 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
 800238e:	ed9f 3a92 	vldr	s6, [pc, #584]	; 80025d8 <main+0x3c0>
 8002392:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8002396:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 800239a:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800239e:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 80025dc <main+0x3c4>
 80023a2:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80025dc <main+0x3c4>
 80023a6:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80025e0 <main+0x3c8>
 80023aa:	488e      	ldr	r0, [pc, #568]	; (80025e4 <main+0x3cc>)
 80023ac:	f7ff f930 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0.1, 5, 430);
 80023b0:	ed9f 3a8d 	vldr	s6, [pc, #564]	; 80025e8 <main+0x3d0>
 80023b4:	eef1 2a04 	vmov.f32	s5, #20	; 0x40a00000  5.0
 80023b8:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 80025ec <main+0x3d4>
 80023bc:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80023c0:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 80025f0 <main+0x3d8>
 80023c4:	eddf 0a85 	vldr	s1, [pc, #532]	; 80025dc <main+0x3c4>
 80023c8:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80025f4 <main+0x3dc>
 80023cc:	488a      	ldr	r0, [pc, #552]	; (80025f8 <main+0x3e0>)
 80023ce:	f7ff f91f 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.7, 0, 0, 10, 0.2, 0, 450);
 80023d2:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 80025fc <main+0x3e4>
 80023d6:	eddf 2a81 	vldr	s5, [pc, #516]	; 80025dc <main+0x3c4>
 80023da:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8002600 <main+0x3e8>
 80023de:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 80023e2:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 80025dc <main+0x3c4>
 80023e6:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80025dc <main+0x3c4>
 80023ea:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80025f4 <main+0x3dc>
 80023ee:	4885      	ldr	r0, [pc, #532]	; (8002604 <main+0x3ec>)
 80023f0:	f7ff f90e 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.8, 0.005, 0, 10, 0.1, 3, 470);
 80023f4:	ed9f 3a84 	vldr	s6, [pc, #528]	; 8002608 <main+0x3f0>
 80023f8:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 80023fc:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 80025ec <main+0x3d4>
 8002400:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002404:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80025dc <main+0x3c4>
 8002408:	eddf 0a80 	vldr	s1, [pc, #512]	; 800260c <main+0x3f4>
 800240c:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8002610 <main+0x3f8>
 8002410:	4880      	ldr	r0, [pc, #512]	; (8002614 <main+0x3fc>)
 8002412:	f7ff f8fd 	bl	8001610 <CascadeControl_init>
//	CascadeControl_init(&Control[1], 0.7, 0, 0, 6, 0.2, 8, 190);
//	CascadeControl_init(&Control[2], 0.7, 0, 0, 6, 0.20, 8, 190);
//	CascadeControl_init(&Control[3], 0.7, 0, 0, 6, 0.20, 8, 150);

	/*  Power Supply Temperature Sensor */
	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
 8002416:	2301      	movs	r3, #1
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	2200      	movs	r2, #0
 800241e:	497e      	ldr	r1, [pc, #504]	; (8002618 <main+0x400>)
 8002420:	487e      	ldr	r0, [pc, #504]	; (800261c <main+0x404>)
 8002422:	f7fe fa61 	bl	80008e8 <TPM75_init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002426:	2101      	movs	r1, #1
 8002428:	4860      	ldr	r0, [pc, #384]	; (80025ac <main+0x394>)
 800242a:	f7fe f8f3 	bl	8000614 <EncPulse2Rad_Read>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <main+0x408>)
 8002434:	edc3 7a00 	vstr	s15, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002438:	2100      	movs	r1, #0
 800243a:	485e      	ldr	r0, [pc, #376]	; (80025b4 <main+0x39c>)
 800243c:	f7fe f8ea 	bl	8000614 <EncPulse2Rad_Read>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	4b76      	ldr	r3, [pc, #472]	; (8002620 <main+0x408>)
 8002446:	edc3 7a01 	vstr	s15, [r3, #4]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 800244a:	2100      	movs	r1, #0
 800244c:	485b      	ldr	r0, [pc, #364]	; (80025bc <main+0x3a4>)
 800244e:	f7fe f8e1 	bl	8000614 <EncPulse2Rad_Read>
 8002452:	eef0 7a40 	vmov.f32	s15, s0
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <main+0x408>)
 8002458:	edc3 7a02 	vstr	s15, [r3, #8]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 800245c:	2100      	movs	r1, #0
 800245e:	4859      	ldr	r0, [pc, #356]	; (80025c4 <main+0x3ac>)
 8002460:	f7fe f8d8 	bl	8000614 <EncPulse2Rad_Read>
 8002464:	eef0 7a40 	vmov.f32	s15, s0
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <main+0x408>)
 800246a:	edc3 7a03 	vstr	s15, [r3, #12]
	SetPoint_Velocity[0] = 0;
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <main+0x40c>)
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
	SetPoint_Velocity[1] = 0;
 8002476:	4b6b      	ldr	r3, [pc, #428]	; (8002624 <main+0x40c>)
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
	SetPoint_Velocity[2] = 0;
 800247e:	4b69      	ldr	r3, [pc, #420]	; (8002624 <main+0x40c>)
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
	SetPoint_Velocity[3] = 0;
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <main+0x40c>)
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	60da      	str	r2, [r3, #12]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 800248e:	2301      	movs	r3, #1
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	4b65      	ldr	r3, [pc, #404]	; (8002628 <main+0x410>)
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	2301      	movs	r3, #1
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <main+0x374>)
 800249c:	2200      	movs	r2, #0
 800249e:	4963      	ldr	r1, [pc, #396]	; (800262c <main+0x414>)
 80024a0:	4863      	ldr	r0, [pc, #396]	; (8002630 <main+0x418>)
 80024a2:	f7fe fc2f 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 80024a6:	2300      	movs	r3, #0
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <main+0x410>)
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2302      	movs	r3, #2
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <main+0x374>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	495f      	ldr	r1, [pc, #380]	; (8002634 <main+0x41c>)
 80024b8:	485f      	ldr	r0, [pc, #380]	; (8002638 <main+0x420>)
 80024ba:	f7fe fc23 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 80024be:	2300      	movs	r3, #0
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <main+0x410>)
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2304      	movs	r3, #4
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <main+0x374>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	495b      	ldr	r1, [pc, #364]	; (800263c <main+0x424>)
 80024d0:	485b      	ldr	r0, [pc, #364]	; (8002640 <main+0x428>)
 80024d2:	f7fe fc17 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 80024d6:	2300      	movs	r3, #0
 80024d8:	9302      	str	r3, [sp, #8]
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <main+0x410>)
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	2308      	movs	r3, #8
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <main+0x374>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	4957      	ldr	r1, [pc, #348]	; (8002644 <main+0x42c>)
 80024e8:	4857      	ldr	r0, [pc, #348]	; (8002648 <main+0x430>)
 80024ea:	f7fe fc0b 	bl	8000d04 <Step_Driver_init>

	/*			Trajectory			*/

	Test_traj_Val[0] = 0;
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <main+0x434>)
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
	Test_traj_Val[1] = 0;
 80024f6:	4b55      	ldr	r3, [pc, #340]	; (800264c <main+0x434>)
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
	Test_traj_Val[2] = 0;
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <main+0x434>)
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
	Test_traj_Val[3] = 0;
 8002506:	4b51      	ldr	r3, [pc, #324]	; (800264c <main+0x434>)
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
	Traj_Flag = 0;
 800250e:	4b50      	ldr	r3, [pc, #320]	; (8002650 <main+0x438>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	t = 0;
 8002514:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <main+0x43c>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 800251c:	484e      	ldr	r0, [pc, #312]	; (8002658 <main+0x440>)
 800251e:	f00d ff51 	bl	80103c4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8002522:	220e      	movs	r2, #14
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <main+0x444>)
 8002526:	484e      	ldr	r0, [pc, #312]	; (8002660 <main+0x448>)
 8002528:	f00f fcc0 	bl	8011eac <HAL_UART_Receive_IT>
//		Step_Driver(&Stepper[0], 0);
//		Step_Driver(&Stepper[1], 50);
//		Step_Driver(&Stepper[2], 30);
//		Step_Driver(&Stepper[3], 0);

	   uint8_t tune_joint = 3;
 800252c:	2303      	movs	r3, #3
 800252e:	74fb      	strb	r3, [r7, #19]
	   if (tune_PID[0] != tune_PID[1]){
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <main+0x44c>)
 8002532:	ed93 7a00 	vldr	s14, [r3]
 8002536:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <main+0x44c>)
 8002538:	edd3 7a01 	vldr	s15, [r3, #4]
 800253c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	f000 80c7 	beq.w	80026d6 <main+0x4be>
		   	tune_PID[1] = tune_PID[0];
 8002548:	4b46      	ldr	r3, [pc, #280]	; (8002664 <main+0x44c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <main+0x44c>)
 800254e:	6053      	str	r3, [r2, #4]
			t = 0;
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <main+0x43c>)
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
			float Joint[4] = {0,0,0,0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
//			for (int i = 0; i < 4; i++) {
//				Joint[i] = Control[i].PositionFeedback;
//			}
//			Joint[tune_joint] = tune_PID[0];
			for (int i = 0; i < 4; i++) {
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e0af      	b.n	80026ca <main+0x4b2>
 800256a:	bf00      	nop
 800256c:	f3af 8000 	nop.w
 8002570:	00000000 	.word	0x00000000
 8002574:	40540000 	.word	0x40540000
 8002578:	bc6a7efa 	.word	0xbc6a7efa
 800257c:	3f689374 	.word	0x3f689374
 8002580:	00000000 	.word	0x00000000
 8002584:	409f4000 	.word	0x409f4000
 8002588:	58020c00 	.word	0x58020c00
 800258c:	58021000 	.word	0x58021000
 8002590:	1ff1e840 	.word	0x1ff1e840
 8002594:	1ff1e820 	.word	0x1ff1e820
 8002598:	2000022c 	.word	0x2000022c
 800259c:	20000144 	.word	0x20000144
 80025a0:	45cb2000 	.word	0x45cb2000
 80025a4:	200001b8 	.word	0x200001b8
 80025a8:	20000770 	.word	0x20000770
 80025ac:	20000230 	.word	0x20000230
 80025b0:	461dd000 	.word	0x461dd000
 80025b4:	20000250 	.word	0x20000250
 80025b8:	4545d000 	.word	0x4545d000
 80025bc:	20000270 	.word	0x20000270
 80025c0:	45d9d000 	.word	0x45d9d000
 80025c4:	20000290 	.word	0x20000290
 80025c8:	200002b0 	.word	0x200002b0
 80025cc:	200002d0 	.word	0x200002d0
 80025d0:	200002f0 	.word	0x200002f0
 80025d4:	20000310 	.word	0x20000310
 80025d8:	43c80000 	.word	0x43c80000
 80025dc:	00000000 	.word	0x00000000
 80025e0:	3f19999a 	.word	0x3f19999a
 80025e4:	20000330 	.word	0x20000330
 80025e8:	43d70000 	.word	0x43d70000
 80025ec:	3dcccccd 	.word	0x3dcccccd
 80025f0:	3e99999a 	.word	0x3e99999a
 80025f4:	3f333333 	.word	0x3f333333
 80025f8:	2000039c 	.word	0x2000039c
 80025fc:	43e10000 	.word	0x43e10000
 8002600:	3e4ccccd 	.word	0x3e4ccccd
 8002604:	20000408 	.word	0x20000408
 8002608:	43eb0000 	.word	0x43eb0000
 800260c:	3ba3d70a 	.word	0x3ba3d70a
 8002610:	3f4ccccd 	.word	0x3f4ccccd
 8002614:	20000474 	.word	0x20000474
 8002618:	200001dc 	.word	0x200001dc
 800261c:	200006a8 	.word	0x200006a8
 8002620:	20000724 	.word	0x20000724
 8002624:	20000734 	.word	0x20000734
 8002628:	0007a120 	.word	0x0007a120
 800262c:	20000a48 	.word	0x20000a48
 8002630:	200004e0 	.word	0x200004e0
 8002634:	20000a94 	.word	0x20000a94
 8002638:	200004f4 	.word	0x200004f4
 800263c:	20000ae0 	.word	0x20000ae0
 8002640:	20000508 	.word	0x20000508
 8002644:	20000b2c 	.word	0x20000b2c
 8002648:	2000051c 	.word	0x2000051c
 800264c:	20000748 	.word	0x20000748
 8002650:	20000759 	.word	0x20000759
 8002654:	20000744 	.word	0x20000744
 8002658:	20000bc4 	.word	0x20000bc4
 800265c:	20000014 	.word	0x20000014
 8002660:	20000cd4 	.word	0x20000cd4
 8002664:	20000764 	.word	0x20000764
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback, Control[i].VelocityFeedback);
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4a39      	ldr	r2, [pc, #228]	; (8002758 <main+0x540>)
 8002674:	441a      	add	r2, r3
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <main+0x544>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3318      	adds	r3, #24
 8002682:	443b      	add	r3, r7
 8002684:	3b18      	subs	r3, #24
 8002686:	ed93 7a00 	vldr	s14, [r3]
 800268a:	4935      	ldr	r1, [pc, #212]	; (8002760 <main+0x548>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	206c      	movs	r0, #108	; 0x6c
 8002690:	fb00 f303 	mul.w	r3, r0, r3
 8002694:	440b      	add	r3, r1
 8002696:	3328      	adds	r3, #40	; 0x28
 8002698:	edd3 6a00 	vldr	s13, [r3]
 800269c:	4930      	ldr	r1, [pc, #192]	; (8002760 <main+0x548>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	206c      	movs	r0, #108	; 0x6c
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	440b      	add	r3, r1
 80026a8:	335c      	adds	r3, #92	; 0x5c
 80026aa:	ed93 6a00 	vldr	s12, [r3]
 80026ae:	eef0 1a46 	vmov.f32	s3, s12
 80026b2:	eeb0 1a66 	vmov.f32	s2, s13
 80026b6:	eef0 0a47 	vmov.f32	s1, s14
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	4610      	mov	r0, r2
 80026c0:	f7fe fbcb 	bl	8000e5a <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	ddcb      	ble.n	8002668 <main+0x450>
			}
			Traj_Flag = 0x0F;
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <main+0x54c>)
 80026d2:	220f      	movs	r2, #15
 80026d4:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <main+0x550>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <main+0x4d0>
			Control_Function();
 80026de:	f000 ff07 	bl	80034f0 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <main+0x550>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <main+0x554>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <main+0x4e2>
			Narwhal_Protocol();
 80026f0:	f000 f9aa 	bl	8002a48 <Narwhal_Protocol>
			Protocol_Flag = 0;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <main+0x554>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10){
 80026fa:	f002 fe17 	bl	800532c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <main+0x558>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b09      	cmp	r3, #9
 8002708:	d911      	bls.n	800272e <main+0x516>
			Software_Timer_100ms = HAL_GetTick();
 800270a:	f002 fe0f 	bl	800532c <HAL_GetTick>
 800270e:	4603      	mov	r3, r0
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <main+0x558>)
 8002712:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 							//	read temperature sensor
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <main+0x55c>)
 8002716:	f003 fb17 	bl	8005d48 <HAL_ADC_Start_IT>
//			TPM75_TempRead(&TempSensor);
			HAL_I2C_Mem_Read_IT(&hi2c2, 0x92, 0x00,
 800271a:	2302      	movs	r3, #2
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	4b16      	ldr	r3, [pc, #88]	; (8002778 <main+0x560>)
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2301      	movs	r3, #1
 8002724:	2200      	movs	r2, #0
 8002726:	2192      	movs	r1, #146	; 0x92
 8002728:	4814      	ldr	r0, [pc, #80]	; (800277c <main+0x564>)
 800272a:	f007 ff29 	bl	800a580 <HAL_I2C_Mem_Read_IT>
				I2C_MEMADD_SIZE_8BIT, Buffer_TPM75, 2);
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 800272e:	f002 fdfd 	bl	800532c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <main+0x568>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273e:	f4ff aef5 	bcc.w	800252c <main+0x314>
			Software_Timer_1s = HAL_GetTick();
 8002742:	f002 fdf3 	bl	800532c <HAL_GetTick>
 8002746:	4603      	mov	r3, r0
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <main+0x568>)
 800274a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 800274c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002750:	480c      	ldr	r0, [pc, #48]	; (8002784 <main+0x56c>)
 8002752:	f007 fe6a 	bl	800a42a <HAL_GPIO_TogglePin>
  {
 8002756:	e6e9      	b.n	800252c <main+0x314>
 8002758:	200006b4 	.word	0x200006b4
 800275c:	20000000 	.word	0x20000000
 8002760:	20000330 	.word	0x20000330
 8002764:	20000759 	.word	0x20000759
 8002768:	20000758 	.word	0x20000758
 800276c:	2000075a 	.word	0x2000075a
 8002770:	20000760 	.word	0x20000760
 8002774:	20000144 	.word	0x20000144
 8002778:	2000076c 	.word	0x2000076c
 800277c:	200001dc 	.word	0x200001dc
 8002780:	2000075c 	.word	0x2000075c
 8002784:	58020800 	.word	0x58020800

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b09c      	sub	sp, #112	; 0x70
 800278c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	224c      	movs	r2, #76	; 0x4c
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f012 f8d4 	bl	8014944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2220      	movs	r2, #32
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f012 f8ce 	bl	8014944 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80027a8:	2002      	movs	r0, #2
 80027aa:	f009 fe07 	bl	800c3bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <SystemClock_Config+0xe8>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <SystemClock_Config+0xe8>)
 80027b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027bc:	6193      	str	r3, [r2, #24]
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <SystemClock_Config+0xe8>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80027ca:	bf00      	nop
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <SystemClock_Config+0xe8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d8:	d1f8      	bne.n	80027cc <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <SystemClock_Config+0xec>)
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	4a24      	ldr	r2, [pc, #144]	; (8002874 <SystemClock_Config+0xec>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f4:	2302      	movs	r3, #2
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027f8:	2302      	movs	r3, #2
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80027fc:	2302      	movs	r3, #2
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002800:	232c      	movs	r3, #44	; 0x2c
 8002802:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002808:	2302      	movs	r3, #2
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800280c:	2302      	movs	r3, #2
 800280e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002810:	230c      	movs	r3, #12
 8002812:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002814:	2300      	movs	r3, #0
 8002816:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	4618      	mov	r0, r3
 8002822:	f009 fe05 	bl	800c430 <HAL_RCC_OscConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800282c:	f000 ff92 	bl	8003754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002830:	233f      	movs	r3, #63	; 0x3f
 8002832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002834:	2303      	movs	r3, #3
 8002836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800283c:	2308      	movs	r3, #8
 800283e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002840:	2340      	movs	r3, #64	; 0x40
 8002842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002844:	2340      	movs	r3, #64	; 0x40
 8002846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800284c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800284e:	2340      	movs	r3, #64	; 0x40
 8002850:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	2103      	movs	r1, #3
 8002856:	4618      	mov	r0, r3
 8002858:	f00a f998 	bl	800cb8c <HAL_RCC_ClockConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002862:	f000 ff77 	bl	8003754 <Error_Handler>
  }
}
 8002866:	bf00      	nop
 8002868:	3770      	adds	r7, #112	; 0x70
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	58024800 	.word	0x58024800
 8002874:	58024400 	.word	0x58024400

08002878 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b0ae      	sub	sp, #184	; 0xb8
 800287c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	22b4      	movs	r2, #180	; 0xb4
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f012 f85d 	bl	8014944 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <PeriphCommonClock_Config+0x64>)
 800288c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800288e:	2302      	movs	r3, #2
 8002890:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002892:	2310      	movs	r3, #16
 8002894:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002896:	2302      	movs	r3, #2
 8002898:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800289a:	2302      	movs	r3, #2
 800289c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80028ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80028b4:	2301      	movs	r3, #1
 80028b6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 80028b8:	2308      	movs	r3, #8
 80028ba:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f00a fced 	bl	800d2a4 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80028d0:	f000 ff40 	bl	8003754 <Error_Handler>
  }
}
 80028d4:	bf00      	nop
 80028d6:	37b8      	adds	r7, #184	; 0xb8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00082003 	.word	0x00082003

080028e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_UART_RxCpltCallback+0x24>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_UART_RxCpltCallback+0x28>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
	}
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000cd4 	.word	0x20000cd4
 8002908:	2000075a 	.word	0x2000075a

0800290c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002916:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f00d ff4b 	bl	80107b8 <HAL_TIM_PWM_Stop_DMA>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000530 	.word	0x20000530

08002930 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_ADC_ConvCpltCallback+0x6c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d129      	bne.n	8002994 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 8002940:	4816      	ldr	r0, [pc, #88]	; (800299c <HAL_ADC_ConvCpltCallback+0x6c>)
 8002942:	f003 fb41 	bl	8005fc8 <HAL_ADC_GetValue>
 8002946:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 9)
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_ADC_ConvCpltCallback+0x70>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002952:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (Temp_Calibration
						* (float) ((float) ADC_Output
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 6a67 	vcvt.f32.u32	s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	ee07 3a90 	vmov	s15, r3
						* (float) ((float) ADC_Output
 8002968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee66 7aa7 	vmul.f32	s15, s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 800297a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800297e:	ee77 7aa6 	vadd.f32	s15, s15, s13
				+ (Temp_Calibration
 8002982:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 10;
 8002986:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		Temperature = ((Temperature * 9)
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_ADC_ConvCpltCallback+0x70>)
 8002990:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000144 	.word	0x20000144
 80029a0:	20000228 	.word	0x20000228
 80029a4:	1ff1e820 	.word	0x1ff1e820
 80029a8:	2000022c 	.word	0x2000022c

080029ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
	}
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000bc4 	.word	0x20000bc4
 80029d4:	20000758 	.word	0x20000758

080029d8 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <CRC8+0x28>)
 80029ec:	f004 ff90 	bl	8007910 <HAL_CRC_Calculate>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200001b8 	.word	0x200001b8

08002a04 <SentData>:
inline void SentData(uint8_t range){
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 8002a0e:	79fc      	ldrb	r4, [r7, #7]
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <SentData+0x38>)
 8002a16:	f7ff ffdf 	bl	80029d8 <CRC8>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <SentData+0x38>)
 8002a20:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <SentData+0x38>)
 8002a2e:	4804      	ldr	r0, [pc, #16]	; (8002a40 <SentData+0x3c>)
 8002a30:	f00f f994 	bl	8011d5c <HAL_UART_Transmit_IT>
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	20000024 	.word	0x20000024
 8002a40:	20000cd4 	.word	0x20000cd4
 8002a44:	00000000 	.word	0x00000000

08002a48 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0a8      	sub	sp, #160	; 0xa0
 8002a4c:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 8002a4e:	4baf      	ldr	r3, [pc, #700]	; (8002d0c <Narwhal_Protocol+0x2c4>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2bff      	cmp	r3, #255	; 0xff
 8002a54:	f040 852e 	bne.w	80034b4 <Narwhal_Protocol+0xa6c>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 8002a58:	210d      	movs	r1, #13
 8002a5a:	48ac      	ldr	r0, [pc, #688]	; (8002d0c <Narwhal_Protocol+0x2c4>)
 8002a5c:	f7ff ffbc 	bl	80029d8 <CRC8>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (CRC_Cal == UART5_rxBuffer[13]) {
 8002a66:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <Narwhal_Protocol+0x2c4>)
 8002a68:	7b5b      	ldrb	r3, [r3, #13]
 8002a6a:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	f040 8519 	bne.w	80034a6 <Narwhal_Protocol+0xa5e>
			UART5_txBuffer[0] = 0xFF;
 8002a74:	4ba6      	ldr	r3, [pc, #664]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	701a      	strb	r2, [r3, #0]

			float q_Feed[4];
			float dq[4];
			float d_Task[3];
			float task[3] = { -500, 300, 50 };
 8002a7a:	4aa6      	ldr	r2, [pc, #664]	; (8002d14 <Narwhal_Protocol+0x2cc>)
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			uint16_t Temperature_Protocol = Temperature * 1000;
 8002a86:	4ba4      	ldr	r3, [pc, #656]	; (8002d18 <Narwhal_Protocol+0x2d0>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002d1c <Narwhal_Protocol+0x2d4>
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a98:	ee17 3a90 	vmov	r3, s15
 8002a9c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 8002aa0:	4b9a      	ldr	r3, [pc, #616]	; (8002d0c <Narwhal_Protocol+0x2c4>)
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	3ba0      	subs	r3, #160	; 0xa0
 8002aa6:	2b5f      	cmp	r3, #95	; 0x5f
 8002aa8:	f200 84f6 	bhi.w	8003498 <Narwhal_Protocol+0xa50>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <Narwhal_Protocol+0x6c>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	0800316d 	.word	0x0800316d
 8002ab8:	08003193 	.word	0x08003193
 8002abc:	080031b9 	.word	0x080031b9
 8002ac0:	08003499 	.word	0x08003499
 8002ac4:	08003499 	.word	0x08003499
 8002ac8:	08003499 	.word	0x08003499
 8002acc:	08003499 	.word	0x08003499
 8002ad0:	08003499 	.word	0x08003499
 8002ad4:	08003499 	.word	0x08003499
 8002ad8:	08003499 	.word	0x08003499
 8002adc:	0800321d 	.word	0x0800321d
 8002ae0:	08003293 	.word	0x08003293
 8002ae4:	08003499 	.word	0x08003499
 8002ae8:	08003499 	.word	0x08003499
 8002aec:	08003499 	.word	0x08003499
 8002af0:	080032f9 	.word	0x080032f9
 8002af4:	08003499 	.word	0x08003499
 8002af8:	08003499 	.word	0x08003499
 8002afc:	08003499 	.word	0x08003499
 8002b00:	08003499 	.word	0x08003499
 8002b04:	08003499 	.word	0x08003499
 8002b08:	08003499 	.word	0x08003499
 8002b0c:	08003499 	.word	0x08003499
 8002b10:	08003499 	.word	0x08003499
 8002b14:	08003499 	.word	0x08003499
 8002b18:	08003499 	.word	0x08003499
 8002b1c:	08003499 	.word	0x08003499
 8002b20:	08003499 	.word	0x08003499
 8002b24:	08003499 	.word	0x08003499
 8002b28:	08003499 	.word	0x08003499
 8002b2c:	08003499 	.word	0x08003499
 8002b30:	08003499 	.word	0x08003499
 8002b34:	08003499 	.word	0x08003499
 8002b38:	08003499 	.word	0x08003499
 8002b3c:	08003499 	.word	0x08003499
 8002b40:	08003499 	.word	0x08003499
 8002b44:	08003499 	.word	0x08003499
 8002b48:	08003499 	.word	0x08003499
 8002b4c:	08003499 	.word	0x08003499
 8002b50:	08003499 	.word	0x08003499
 8002b54:	08003499 	.word	0x08003499
 8002b58:	08003499 	.word	0x08003499
 8002b5c:	08003499 	.word	0x08003499
 8002b60:	08003499 	.word	0x08003499
 8002b64:	08003499 	.word	0x08003499
 8002b68:	08003499 	.word	0x08003499
 8002b6c:	08003499 	.word	0x08003499
 8002b70:	08003499 	.word	0x08003499
 8002b74:	08003499 	.word	0x08003499
 8002b78:	08003499 	.word	0x08003499
 8002b7c:	08003499 	.word	0x08003499
 8002b80:	08003499 	.word	0x08003499
 8002b84:	08003499 	.word	0x08003499
 8002b88:	08003499 	.word	0x08003499
 8002b8c:	08003499 	.word	0x08003499
 8002b90:	08003499 	.word	0x08003499
 8002b94:	08003499 	.word	0x08003499
 8002b98:	08003499 	.word	0x08003499
 8002b9c:	08003499 	.word	0x08003499
 8002ba0:	08003499 	.word	0x08003499
 8002ba4:	08003499 	.word	0x08003499
 8002ba8:	08003499 	.word	0x08003499
 8002bac:	08003499 	.word	0x08003499
 8002bb0:	08003499 	.word	0x08003499
 8002bb4:	08003499 	.word	0x08003499
 8002bb8:	08003499 	.word	0x08003499
 8002bbc:	08003499 	.word	0x08003499
 8002bc0:	08003499 	.word	0x08003499
 8002bc4:	08003499 	.word	0x08003499
 8002bc8:	08003499 	.word	0x08003499
 8002bcc:	08003499 	.word	0x08003499
 8002bd0:	08003499 	.word	0x08003499
 8002bd4:	08003499 	.word	0x08003499
 8002bd8:	08003499 	.word	0x08003499
 8002bdc:	08003499 	.word	0x08003499
 8002be0:	08003499 	.word	0x08003499
 8002be4:	08003499 	.word	0x08003499
 8002be8:	08003499 	.word	0x08003499
 8002bec:	08003499 	.word	0x08003499
 8002bf0:	08003499 	.word	0x08003499
 8002bf4:	08002c35 	.word	0x08002c35
 8002bf8:	08002c4b 	.word	0x08002c4b
 8002bfc:	08003499 	.word	0x08003499
 8002c00:	08003499 	.word	0x08003499
 8002c04:	08003499 	.word	0x08003499
 8002c08:	08002c61 	.word	0x08002c61
 8002c0c:	08003499 	.word	0x08003499
 8002c10:	08003499 	.word	0x08003499
 8002c14:	08003499 	.word	0x08003499
 8002c18:	08003499 	.word	0x08003499
 8002c1c:	08002cfb 	.word	0x08002cfb
 8002c20:	08002e05 	.word	0x08002e05
 8002c24:	08003499 	.word	0x08003499
 8002c28:	08002f4b 	.word	0x08002f4b
 8002c2c:	0800304b 	.word	0x0800304b
 8002c30:	08003159 	.word	0x08003159
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002c3a:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002c40:	2003      	movs	r0, #3
 8002c42:	f7ff fedf 	bl	8002a04 <SentData>
				break;
 8002c46:	f000 bc3b 	b.w	80034c0 <Narwhal_Protocol+0xa78>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002c56:	2003      	movs	r0, #3
 8002c58:	f7ff fed4 	bl	8002a04 <SentData>
				break;
 8002c5c:	f000 bc30 	b.w	80034c0 <Narwhal_Protocol+0xa78>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <Narwhal_Protocol+0x2d8>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d13e      	bne.n	8002ce6 <Narwhal_Protocol+0x29e>
					t = 0;
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <Narwhal_Protocol+0x2dc>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c76:	e02b      	b.n	8002cd0 <Narwhal_Protocol+0x288>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 8002c78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <Narwhal_Protocol+0x2e0>)
 8002c86:	441a      	add	r2, r3
 8002c88:	4928      	ldr	r1, [pc, #160]	; (8002d2c <Narwhal_Protocol+0x2e4>)
 8002c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8e:	206c      	movs	r0, #108	; 0x6c
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	440b      	add	r3, r1
 8002c96:	3328      	adds	r3, #40	; 0x28
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	4923      	ldr	r1, [pc, #140]	; (8002d2c <Narwhal_Protocol+0x2e4>)
 8002c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca2:	206c      	movs	r0, #108	; 0x6c
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
 8002ca8:	440b      	add	r3, r1
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	ed93 7a00 	vldr	s14, [r3]
 8002cb0:	eef0 1a47 	vmov.f32	s3, s14
 8002cb4:	eeb0 1a67 	vmov.f32	s2, s15
 8002cb8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002d30 <Narwhal_Protocol+0x2e8>
 8002cbc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f7fe f8ca 	bl	8000e5a <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8002cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	ddcf      	ble.n	8002c78 <Narwhal_Protocol+0x230>
								Control[i].PositionFeedback,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <Narwhal_Protocol+0x2d8>)
 8002cda:	220f      	movs	r2, #15
 8002cdc:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	709a      	strb	r2, [r3, #2]
 8002ce4:	e002      	b.n	8002cec <Narwhal_Protocol+0x2a4>
				} else {
					UART5_txBuffer[2] = 0x01;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <Narwhal_Protocol+0x2c8>)
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	f7ff fe86 	bl	8002a04 <SentData>
				break;
 8002cf8:	e3e2      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <Narwhal_Protocol+0x2dc>)
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d08:	e06b      	b.n	8002de2 <Narwhal_Protocol+0x39a>
 8002d0a:	bf00      	nop
 8002d0c:	20000014 	.word	0x20000014
 8002d10:	20000024 	.word	0x20000024
 8002d14:	080155fc 	.word	0x080155fc
 8002d18:	20000228 	.word	0x20000228
 8002d1c:	447a0000 	.word	0x447a0000
 8002d20:	20000759 	.word	0x20000759
 8002d24:	20000744 	.word	0x20000744
 8002d28:	200006b4 	.word	0x200006b4
 8002d2c:	20000330 	.word	0x20000330
 8002d30:	00000000 	.word	0x00000000
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d38:	3301      	adds	r3, #1
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4acc      	ldr	r2, [pc, #816]	; (8003070 <Narwhal_Protocol+0x628>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d40:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d42:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	49c8      	ldr	r1, [pc, #800]	; (8003070 <Narwhal_Protocol+0x628>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d5e:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 8003060 <Narwhal_Protocol+0x618>
 8002d62:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d6a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8002d6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4abe      	ldr	r2, [pc, #760]	; (8003074 <Narwhal_Protocol+0x62c>)
 8002d7c:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8002d7e:	49be      	ldr	r1, [pc, #760]	; (8003078 <Narwhal_Protocol+0x630>)
 8002d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d84:	206c      	movs	r0, #108	; 0x6c
 8002d86:	fb00 f303 	mul.w	r3, r0, r3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3328      	adds	r3, #40	; 0x28
 8002d8e:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8002d92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	49b7      	ldr	r1, [pc, #732]	; (8003078 <Narwhal_Protocol+0x630>)
 8002d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da0:	206c      	movs	r0, #108	; 0x6c
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	440b      	add	r3, r1
 8002da8:	3328      	adds	r3, #40	; 0x28
 8002daa:	ed93 7a00 	vldr	s14, [r3]
 8002dae:	49b2      	ldr	r1, [pc, #712]	; (8003078 <Narwhal_Protocol+0x630>)
 8002db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db4:	206c      	movs	r0, #108	; 0x6c
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	440b      	add	r3, r1
 8002dbc:	335c      	adds	r3, #92	; 0x5c
 8002dbe:	edd3 6a00 	vldr	s13, [r3]
 8002dc2:	eef0 1a66 	vmov.f32	s3, s13
 8002dc6:	eeb0 1a47 	vmov.f32	s2, s14
 8002dca:	eef0 0a67 	vmov.f32	s1, s15
 8002dce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	f7fe f841 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8002dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	dda4      	ble.n	8002d34 <Narwhal_Protocol+0x2ec>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002dea:	4ba4      	ldr	r3, [pc, #656]	; (800307c <Narwhal_Protocol+0x634>)
 8002dec:	220f      	movs	r2, #15
 8002dee:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8002df0:	4ba3      	ldr	r3, [pc, #652]	; (8003080 <Narwhal_Protocol+0x638>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002df6:	4ba2      	ldr	r3, [pc, #648]	; (8003080 <Narwhal_Protocol+0x638>)
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f7ff fe01 	bl	8002a04 <SentData>
				break;
 8002e02:	e35d      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8002e04:	4b9c      	ldr	r3, [pc, #624]	; (8003078 <Narwhal_Protocol+0x630>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
				q_Feed[1] = Control[1].PositionFeedback;
 8002e0a:	4b9b      	ldr	r3, [pc, #620]	; (8003078 <Narwhal_Protocol+0x630>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
				q_Feed[2] = Control[2].PositionFeedback;
 8002e12:	4b99      	ldr	r3, [pc, #612]	; (8003078 <Narwhal_Protocol+0x630>)
 8002e14:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
				q_Feed[3] = Control[3].PositionFeedback;
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <Narwhal_Protocol+0x630>)
 8002e1c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002e20:	64bb      	str	r3, [r7, #72]	; 0x48
				for (int i = 0; i < 3; i++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e28:	e027      	b.n	8002e7a <Narwhal_Protocol+0x432>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4a8f      	ldr	r2, [pc, #572]	; (8003070 <Narwhal_Protocol+0x628>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8002e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	3303      	adds	r3, #3
 8002e42:	498b      	ldr	r1, [pc, #556]	; (8003070 <Narwhal_Protocol+0x628>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e54:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8003068 <Narwhal_Protocol+0x620>
 8002e58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002e5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	33a0      	adds	r3, #160	; 0xa0
 8002e68:	443b      	add	r3, r7
 8002e6a:	3b80      	subs	r3, #128	; 0x80
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 3; i++) {
 8002e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	ddd3      	ble.n	8002e2a <Narwhal_Protocol+0x3e2>
				}
				IVK(q_Feed, d_Task, dq);
 8002e82:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002e86:	f107 0120 	add.w	r1, r7, #32
 8002e8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fede 	bl	8001c50 <IVK>
				t = 0;
 8002e94:	4b7b      	ldr	r3, [pc, #492]	; (8003084 <Narwhal_Protocol+0x63c>)
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 3; i++) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ea2:	e041      	b.n	8002f28 <Narwhal_Protocol+0x4e0>
					float Setpoint = Control[i].PositionFeedback + dq[i];
 8002ea4:	4a74      	ldr	r2, [pc, #464]	; (8003078 <Narwhal_Protocol+0x630>)
 8002ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eaa:	216c      	movs	r1, #108	; 0x6c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3328      	adds	r3, #40	; 0x28
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	33a0      	adds	r3, #160	; 0xa0
 8002ec0:	443b      	add	r3, r7
 8002ec2:	3b74      	subs	r3, #116	; 0x74
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ecc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8002ed0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4a65      	ldr	r2, [pc, #404]	; (8003074 <Narwhal_Protocol+0x62c>)
 8002ede:	441a      	add	r2, r3
 8002ee0:	4965      	ldr	r1, [pc, #404]	; (8003078 <Narwhal_Protocol+0x630>)
 8002ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ee6:	206c      	movs	r0, #108	; 0x6c
 8002ee8:	fb00 f303 	mul.w	r3, r0, r3
 8002eec:	440b      	add	r3, r1
 8002eee:	3328      	adds	r3, #40	; 0x28
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	4960      	ldr	r1, [pc, #384]	; (8003078 <Narwhal_Protocol+0x630>)
 8002ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002efa:	206c      	movs	r0, #108	; 0x6c
 8002efc:	fb00 f303 	mul.w	r3, r0, r3
 8002f00:	440b      	add	r3, r1
 8002f02:	335c      	adds	r3, #92	; 0x5c
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	eef0 1a47 	vmov.f32	s3, s14
 8002f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f10:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8002f14:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7fd ff9e 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 3; i++) {
 8002f1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f22:	3301      	adds	r3, #1
 8002f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	ddb9      	ble.n	8002ea4 <Narwhal_Protocol+0x45c>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002f30:	4b52      	ldr	r3, [pc, #328]	; (800307c <Narwhal_Protocol+0x634>)
 8002f32:	220f      	movs	r2, #15
 8002f34:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <Narwhal_Protocol+0x638>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <Narwhal_Protocol+0x638>)
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f7ff fd5e 	bl	8002a04 <SentData>
				break;
 8002f48:	e2ba      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xFD:
				/* Joint Set */
				t = 0;
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <Narwhal_Protocol+0x63c>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
				float Joint[4];
				float T;
				for (int i = 0; i < 4; i++) {
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f58:	e027      	b.n	8002faa <Narwhal_Protocol+0x562>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5e:	3301      	adds	r3, #1
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4a43      	ldr	r2, [pc, #268]	; (8003070 <Narwhal_Protocol+0x628>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	3303      	adds	r3, #3
 8002f72:	493f      	ldr	r1, [pc, #252]	; (8003070 <Narwhal_Protocol+0x628>)
 8002f74:	5ccb      	ldrb	r3, [r1, r3]
 8002f76:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002f84:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8003060 <Narwhal_Protocol+0x618>
 8002f88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	33a0      	adds	r3, #160	; 0xa0
 8002f98:	443b      	add	r3, r7
 8002f9a:	3b9c      	subs	r3, #156	; 0x9c
 8002f9c:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 4; i++) {
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	ddd3      	ble.n	8002f5a <Narwhal_Protocol+0x512>
				}
				T = 0.5;
 8002fb2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
				for (int i = 0; i < 4; i++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fbe:	e033      	b.n	8003028 <Narwhal_Protocol+0x5e0>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8002fc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <Narwhal_Protocol+0x62c>)
 8002fce:	441a      	add	r2, r3
 8002fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	33a0      	adds	r3, #160	; 0xa0
 8002fd8:	443b      	add	r3, r7
 8002fda:	3b9c      	subs	r3, #156	; 0x9c
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	4925      	ldr	r1, [pc, #148]	; (8003078 <Narwhal_Protocol+0x630>)
 8002fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe6:	206c      	movs	r0, #108	; 0x6c
 8002fe8:	fb00 f303 	mul.w	r3, r0, r3
 8002fec:	440b      	add	r3, r1
 8002fee:	3328      	adds	r3, #40	; 0x28
 8002ff0:	ed93 7a00 	vldr	s14, [r3]
 8002ff4:	4920      	ldr	r1, [pc, #128]	; (8003078 <Narwhal_Protocol+0x630>)
 8002ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ffa:	206c      	movs	r0, #108	; 0x6c
 8002ffc:	fb00 f303 	mul.w	r3, r0, r3
 8003000:	440b      	add	r3, r1
 8003002:	335c      	adds	r3, #92	; 0x5c
 8003004:	edd3 6a00 	vldr	s13, [r3]
 8003008:	eef0 1a66 	vmov.f32	s3, s13
 800300c:	eeb0 1a47 	vmov.f32	s2, s14
 8003010:	eef0 0a67 	vmov.f32	s1, s15
 8003014:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003018:	4610      	mov	r0, r2
 800301a:	f7fd ff1e 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 800301e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003022:	3301      	adds	r3, #1
 8003024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800302c:	2b03      	cmp	r3, #3
 800302e:	ddc7      	ble.n	8002fc0 <Narwhal_Protocol+0x578>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <Narwhal_Protocol+0x634>)
 8003032:	220f      	movs	r2, #15
 8003034:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <Narwhal_Protocol+0x638>)
 8003038:	2203      	movs	r2, #3
 800303a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <Narwhal_Protocol+0x638>)
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003042:	2003      	movs	r0, #3
 8003044:	f7ff fcde 	bl	8002a04 <SentData>
				break;
 8003048:	e23a      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <Narwhal_Protocol+0x63c>)
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003058:	e06d      	b.n	8003136 <Narwhal_Protocol+0x6ee>
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w
 8003060:	00000000 	.word	0x00000000
 8003064:	408f4000 	.word	0x408f4000
 8003068:	00000000 	.word	0x00000000
 800306c:	40490000 	.word	0x40490000
 8003070:	20000014 	.word	0x20000014
 8003074:	200006b4 	.word	0x200006b4
 8003078:	20000330 	.word	0x20000330
 800307c:	20000759 	.word	0x20000759
 8003080:	20000024 	.word	0x20000024
 8003084:	20000744 	.word	0x20000744
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4ab1      	ldr	r2, [pc, #708]	; (8003358 <Narwhal_Protocol+0x910>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003094:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003096:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	3303      	adds	r3, #3
 80030a0:	49ad      	ldr	r1, [pc, #692]	; (8003358 <Narwhal_Protocol+0x910>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80030b2:	ed9f 5ba7 	vldr	d5, [pc, #668]	; 8003350 <Narwhal_Protocol+0x908>
 80030b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80030ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
					Traj_Coeff_Cal(&Traj[i], 0.5,
 80030c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4aa3      	ldr	r2, [pc, #652]	; (800335c <Narwhal_Protocol+0x914>)
 80030d0:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 80030d2:	49a3      	ldr	r1, [pc, #652]	; (8003360 <Narwhal_Protocol+0x918>)
 80030d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d8:	206c      	movs	r0, #108	; 0x6c
 80030da:	fb00 f303 	mul.w	r3, r0, r3
 80030de:	440b      	add	r3, r1
 80030e0:	3328      	adds	r3, #40	; 0x28
 80030e2:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 80030e6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80030ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ee:	499c      	ldr	r1, [pc, #624]	; (8003360 <Narwhal_Protocol+0x918>)
 80030f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f4:	206c      	movs	r0, #108	; 0x6c
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	440b      	add	r3, r1
 80030fc:	3328      	adds	r3, #40	; 0x28
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	4997      	ldr	r1, [pc, #604]	; (8003360 <Narwhal_Protocol+0x918>)
 8003104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003108:	206c      	movs	r0, #108	; 0x6c
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	440b      	add	r3, r1
 8003110:	335c      	adds	r3, #92	; 0x5c
 8003112:	edd3 6a00 	vldr	s13, [r3]
 8003116:	eef0 1a66 	vmov.f32	s3, s13
 800311a:	eeb0 1a47 	vmov.f32	s2, s14
 800311e:	eef0 0a67 	vmov.f32	s1, s15
 8003122:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003126:	4610      	mov	r0, r2
 8003128:	f7fd fe97 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 800312c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003130:	3301      	adds	r3, #1
 8003132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313a:	2b03      	cmp	r3, #3
 800313c:	dda4      	ble.n	8003088 <Narwhal_Protocol+0x640>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <Narwhal_Protocol+0x91c>)
 8003140:	220f      	movs	r2, #15
 8003142:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003144:	4b88      	ldr	r3, [pc, #544]	; (8003368 <Narwhal_Protocol+0x920>)
 8003146:	2200      	movs	r2, #0
 8003148:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800314a:	4b87      	ldr	r3, [pc, #540]	; (8003368 <Narwhal_Protocol+0x920>)
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003150:	2003      	movs	r0, #3
 8003152:	f7ff fc57 	bl	8002a04 <SentData>
				break;
 8003156:	e1b3      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xFF:
				/* Chess Move */
				UART5_txBuffer[2] = 0x05;
 8003158:	4b83      	ldr	r3, [pc, #524]	; (8003368 <Narwhal_Protocol+0x920>)
 800315a:	2205      	movs	r2, #5
 800315c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800315e:	4b82      	ldr	r3, [pc, #520]	; (8003368 <Narwhal_Protocol+0x920>)
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003164:	2003      	movs	r0, #3
 8003166:	f7ff fc4d 	bl	8002a04 <SentData>
				break;
 800316a:	e1a9      	b.n	80034c0 <Narwhal_Protocol+0xa78>


				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 800316c:	4b7e      	ldr	r3, [pc, #504]	; (8003368 <Narwhal_Protocol+0x920>)
 800316e:	22ee      	movs	r2, #238	; 0xee
 8003170:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003172:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003176:	0a1b      	lsrs	r3, r3, #8
 8003178:	b29b      	uxth	r3, r3
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <Narwhal_Protocol+0x920>)
 800317e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003180:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b78      	ldr	r3, [pc, #480]	; (8003368 <Narwhal_Protocol+0x920>)
 8003188:	70da      	strb	r2, [r3, #3]
				SentData(4);
 800318a:	2004      	movs	r0, #4
 800318c:	f7ff fc3a 	bl	8002a04 <SentData>
				break;
 8003190:	e196      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003192:	4b75      	ldr	r3, [pc, #468]	; (8003368 <Narwhal_Protocol+0x920>)
 8003194:	22ee      	movs	r2, #238	; 0xee
 8003196:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003198:	4b74      	ldr	r3, [pc, #464]	; (800336c <Narwhal_Protocol+0x924>)
 800319a:	89db      	ldrh	r3, [r3, #14]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b71      	ldr	r3, [pc, #452]	; (8003368 <Narwhal_Protocol+0x920>)
 80031a4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 80031a6:	4b71      	ldr	r3, [pc, #452]	; (800336c <Narwhal_Protocol+0x924>)
 80031a8:	89db      	ldrh	r3, [r3, #14]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <Narwhal_Protocol+0x920>)
 80031ae:	70da      	strb	r2, [r3, #3]
				SentData(4);
 80031b0:	2004      	movs	r0, #4
 80031b2:	f7ff fc27 	bl	8002a04 <SentData>
				break;
 80031b6:	e183      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 80031b8:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <Narwhal_Protocol+0x920>)
 80031ba:	22ee      	movs	r2, #238	; 0xee
 80031bc:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c4:	e022      	b.n	800320c <Narwhal_Protocol+0x7c4>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <Narwhal_Protocol+0x924>)
 80031c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031cc:	015b      	lsls	r3, r3, #5
 80031ce:	4413      	add	r3, r2
 80031d0:	330e      	adds	r3, #14
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031dc:	3301      	adds	r3, #1
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	b2d1      	uxtb	r1, r2
 80031e2:	4a61      	ldr	r2, [pc, #388]	; (8003368 <Narwhal_Protocol+0x920>)
 80031e4:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 80031e6:	4a61      	ldr	r2, [pc, #388]	; (800336c <Narwhal_Protocol+0x924>)
 80031e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	4413      	add	r3, r2
 80031f0:	330e      	adds	r3, #14
 80031f2:	881a      	ldrh	r2, [r3, #0]
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	3303      	adds	r3, #3
 80031fc:	b2d1      	uxtb	r1, r2
 80031fe:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <Narwhal_Protocol+0x920>)
 8003200:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003206:	3301      	adds	r3, #1
 8003208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800320c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003210:	2b03      	cmp	r3, #3
 8003212:	ddd8      	ble.n	80031c6 <Narwhal_Protocol+0x77e>
				}
				SentData(12);
 8003214:	200c      	movs	r0, #12
 8003216:	f7ff fbf5 	bl	8002a04 <SentData>
				break;
 800321a:	e151      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 800321c:	4b52      	ldr	r3, [pc, #328]	; (8003368 <Narwhal_Protocol+0x920>)
 800321e:	22ee      	movs	r2, #238	; 0xee
 8003220:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003222:	2300      	movs	r3, #0
 8003224:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003226:	e027      	b.n	8003278 <Narwhal_Protocol+0x830>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003228:	4a4d      	ldr	r2, [pc, #308]	; (8003360 <Narwhal_Protocol+0x918>)
 800322a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322c:	216c      	movs	r1, #108	; 0x6c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3328      	adds	r3, #40	; 0x28
 8003236:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 800323a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003370 <Narwhal_Protocol+0x928>
 800323e:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003246:	ee17 3a90 	vmov	r3, s15
 800324a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800324e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8003252:	121b      	asrs	r3, r3, #8
 8003254:	b21a      	sxth	r2, r3
 8003256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003258:	3301      	adds	r3, #1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	b2d1      	uxtb	r1, r2
 800325e:	4a42      	ldr	r2, [pc, #264]	; (8003368 <Narwhal_Protocol+0x920>)
 8003260:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	3303      	adds	r3, #3
 8003268:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800326c:	b2d1      	uxtb	r1, r2
 800326e:	4a3e      	ldr	r2, [pc, #248]	; (8003368 <Narwhal_Protocol+0x920>)
 8003270:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003274:	3301      	adds	r3, #1
 8003276:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327a:	2b03      	cmp	r3, #3
 800327c:	ddd4      	ble.n	8003228 <Narwhal_Protocol+0x7e0>
				}
				UART5_txBuffer[10] = 0;
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <Narwhal_Protocol+0x920>)
 8003280:	2200      	movs	r2, #0
 8003282:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <Narwhal_Protocol+0x920>)
 8003286:	2200      	movs	r2, #0
 8003288:	72da      	strb	r2, [r3, #11]
				SentData(12);
 800328a:	200c      	movs	r0, #12
 800328c:	f7ff fbba 	bl	8002a04 <SentData>
				break;
 8003290:	e116      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <Narwhal_Protocol+0x920>)
 8003294:	22ee      	movs	r2, #238	; 0xee
 8003296:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
//				float task[3] = { -500, 300, 50 };
				for (int i = 0; i < 3; i++) {
 8003298:	2300      	movs	r3, #0
 800329a:	67bb      	str	r3, [r7, #120]	; 0x78
 800329c:	e025      	b.n	80032ea <Narwhal_Protocol+0x8a2>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 800329e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	33a0      	adds	r3, #160	; 0xa0
 80032a4:	443b      	add	r3, r7
 80032a6:	3b8c      	subs	r3, #140	; 0x8c
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b8:	ee17 3a90 	vmov	r3, s15
 80032bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80032c0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032c4:	121b      	asrs	r3, r3, #8
 80032c6:	b21a      	sxth	r2, r3
 80032c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	b2d1      	uxtb	r1, r2
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <Narwhal_Protocol+0x920>)
 80032d2:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80032d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	3303      	adds	r3, #3
 80032da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80032de:	b2d1      	uxtb	r1, r2
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <Narwhal_Protocol+0x920>)
 80032e2:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80032e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e6:	3301      	adds	r3, #1
 80032e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	ddd6      	ble.n	800329e <Narwhal_Protocol+0x856>
				}
				SentData(8);
 80032f0:	2008      	movs	r0, #8
 80032f2:	f7ff fb87 	bl	8002a04 <SentData>
				break;
 80032f6:	e0e3      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <Narwhal_Protocol+0x920>)
 80032fa:	22ee      	movs	r2, #238	; 0xee
 80032fc:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
//				float task[3] = { -500, 300, 50 };


				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <Narwhal_Protocol+0x924>)
 8003300:	89db      	ldrh	r3, [r3, #14]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <Narwhal_Protocol+0x920>)
 800330a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <Narwhal_Protocol+0x924>)
 800330e:	89db      	ldrh	r3, [r3, #14]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <Narwhal_Protocol+0x920>)
 8003314:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003316:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <Narwhal_Protocol+0x920>)
 8003322:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003324:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <Narwhal_Protocol+0x920>)
 800332c:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800332e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b29b      	uxth	r3, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <Narwhal_Protocol+0x920>)
 800333a:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol & 0xFF);
 800333c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <Narwhal_Protocol+0x920>)
 8003344:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8003346:	2300      	movs	r3, #0
 8003348:	677b      	str	r3, [r7, #116]	; 0x74
 800334a:	e03b      	b.n	80033c4 <Narwhal_Protocol+0x97c>
 800334c:	f3af 8000 	nop.w
 8003350:	00000000 	.word	0x00000000
 8003354:	408f4000 	.word	0x408f4000
 8003358:	20000014 	.word	0x20000014
 800335c:	200006b4 	.word	0x200006b4
 8003360:	20000330 	.word	0x20000330
 8003364:	20000759 	.word	0x20000759
 8003368:	20000024 	.word	0x20000024
 800336c:	20000230 	.word	0x20000230
 8003370:	447a0000 	.word	0x447a0000
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003374:	4a57      	ldr	r2, [pc, #348]	; (80034d4 <Narwhal_Protocol+0xa8c>)
 8003376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003378:	216c      	movs	r1, #108	; 0x6c
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	4413      	add	r3, r2
 8003380:	3328      	adds	r3, #40	; 0x28
 8003382:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 8003386:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80034d8 <Narwhal_Protocol+0xa90>
 800338a:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800338e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003392:	ee17 3a90 	vmov	r3, s15
 8003396:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800339a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800339e:	121b      	asrs	r3, r3, #8
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a4:	3304      	adds	r3, #4
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	b2d1      	uxtb	r1, r2
 80033aa:	4a4c      	ldr	r2, [pc, #304]	; (80034dc <Narwhal_Protocol+0xa94>)
 80033ac:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	3309      	adds	r3, #9
 80033b4:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80033b8:	b2d1      	uxtb	r1, r2
 80033ba:	4a48      	ldr	r2, [pc, #288]	; (80034dc <Narwhal_Protocol+0xa94>)
 80033bc:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80033be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c0:	3301      	adds	r3, #1
 80033c2:	677b      	str	r3, [r7, #116]	; 0x74
 80033c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	ddd4      	ble.n	8003374 <Narwhal_Protocol+0x92c>
				}
				UART5_txBuffer[16] = 0;
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <Narwhal_Protocol+0xa94>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <Narwhal_Protocol+0xa94>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	673b      	str	r3, [r7, #112]	; 0x70
 80033da:	e024      	b.n	8003426 <Narwhal_Protocol+0x9de>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 80033dc:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <Narwhal_Protocol+0xa98>)
 80033de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80034d8 <Narwhal_Protocol+0xa90>
 80033ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	ee17 3a90 	vmov	r3, s15
 80033f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80033fc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8003400:	121b      	asrs	r3, r3, #8
 8003402:	b21a      	sxth	r2, r3
 8003404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003406:	3309      	adds	r3, #9
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	b2d1      	uxtb	r1, r2
 800340c:	4a33      	ldr	r2, [pc, #204]	; (80034dc <Narwhal_Protocol+0xa94>)
 800340e:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	3313      	adds	r3, #19
 8003416:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800341a:	b2d1      	uxtb	r1, r2
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <Narwhal_Protocol+0xa94>)
 800341e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003422:	3301      	adds	r3, #1
 8003424:	673b      	str	r3, [r7, #112]	; 0x70
 8003426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003428:	2b03      	cmp	r3, #3
 800342a:	ddd7      	ble.n	80033dc <Narwhal_Protocol+0x994>
				}
				UART5_txBuffer[26] = 0;
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <Narwhal_Protocol+0xa94>)
 800342e:	2200      	movs	r2, #0
 8003430:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <Narwhal_Protocol+0xa94>)
 8003434:	2200      	movs	r2, #0
 8003436:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 8003438:	2300      	movs	r3, #0
 800343a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800343c:	e025      	b.n	800348a <Narwhal_Protocol+0xa42>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	33a0      	adds	r3, #160	; 0xa0
 8003444:	443b      	add	r3, r7
 8003446:	3b8c      	subs	r3, #140	; 0x8c
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003458:	ee17 3a90 	vmov	r3, s15
 800345c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003460:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8003464:	121b      	asrs	r3, r3, #8
 8003466:	b21a      	sxth	r2, r3
 8003468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346a:	330e      	adds	r3, #14
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	b2d1      	uxtb	r1, r2
 8003470:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <Narwhal_Protocol+0xa94>)
 8003472:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	331d      	adds	r3, #29
 800347a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800347e:	b2d1      	uxtb	r1, r2
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <Narwhal_Protocol+0xa94>)
 8003482:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8003484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003486:	3301      	adds	r3, #1
 8003488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	2b02      	cmp	r3, #2
 800348e:	ddd6      	ble.n	800343e <Narwhal_Protocol+0x9f6>
				}
				SentData(34);
 8003490:	2022      	movs	r0, #34	; 0x22
 8003492:	f7ff fab7 	bl	8002a04 <SentData>
				break;
 8003496:	e013      	b.n	80034c0 <Narwhal_Protocol+0xa78>
			default:
				UART5_txBuffer[2] = 0xFF;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <Narwhal_Protocol+0xa94>)
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	709a      	strb	r2, [r3, #2]
				SentData(3);
 800349e:	2003      	movs	r0, #3
 80034a0:	f7ff fab0 	bl	8002a04 <SentData>
 80034a4:	e00c      	b.n	80034c0 <Narwhal_Protocol+0xa78>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <Narwhal_Protocol+0xa94>)
 80034a8:	22cc      	movs	r2, #204	; 0xcc
 80034aa:	705a      	strb	r2, [r3, #1]
			SentData(3);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f7ff faa9 	bl	8002a04 <SentData>
 80034b2:	e005      	b.n	80034c0 <Narwhal_Protocol+0xa78>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <Narwhal_Protocol+0xa94>)
 80034b6:	22aa      	movs	r2, #170	; 0xaa
 80034b8:	705a      	strb	r2, [r3, #1]
		SentData(3);
 80034ba:	2003      	movs	r0, #3
 80034bc:	f7ff faa2 	bl	8002a04 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 80034c0:	220e      	movs	r2, #14
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <Narwhal_Protocol+0xa9c>)
 80034c4:	4808      	ldr	r0, [pc, #32]	; (80034e8 <Narwhal_Protocol+0xaa0>)
 80034c6:	f00e fcf1 	bl	8011eac <HAL_UART_Receive_IT>
}
 80034ca:	bf00      	nop
 80034cc:	37a0      	adds	r7, #160	; 0xa0
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000330 	.word	0x20000330
 80034d8:	447a0000 	.word	0x447a0000
 80034dc:	20000024 	.word	0x20000024
 80034e0:	20000724 	.word	0x20000724
 80034e4:	20000014 	.word	0x20000014
 80034e8:	20000cd4 	.word	0x20000cd4
 80034ec:	00000000 	.word	0x00000000

080034f0 <Control_Function>:

inline void Control_Function(){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	float J1,J2,J3,J4;
	J1 = EncPulse2Rad_Read(&Encoder[0],1);
 80034f6:	2101      	movs	r1, #1
 80034f8:	4881      	ldr	r0, [pc, #516]	; (8003700 <Control_Function+0x210>)
 80034fa:	f7fd f88b 	bl	8000614 <EncPulse2Rad_Read>
 80034fe:	ed87 0a08 	vstr	s0, [r7, #32]
	J2 = EncPulse2Rad_Read(&Encoder[1],0);
 8003502:	2100      	movs	r1, #0
 8003504:	487f      	ldr	r0, [pc, #508]	; (8003704 <Control_Function+0x214>)
 8003506:	f7fd f885 	bl	8000614 <EncPulse2Rad_Read>
 800350a:	ed87 0a07 	vstr	s0, [r7, #28]
	J3 = EncPulse2Rad_Read(&Encoder[2],0);
 800350e:	2100      	movs	r1, #0
 8003510:	487d      	ldr	r0, [pc, #500]	; (8003708 <Control_Function+0x218>)
 8003512:	f7fd f87f 	bl	8000614 <EncPulse2Rad_Read>
 8003516:	ed87 0a06 	vstr	s0, [r7, #24]
	J4 = EncPulse2Rad_Read(&Encoder[3],0);
 800351a:	2100      	movs	r1, #0
 800351c:	487b      	ldr	r0, [pc, #492]	; (800370c <Control_Function+0x21c>)
 800351e:	f7fd f879 	bl	8000614 <EncPulse2Rad_Read>
 8003522:	ed87 0a05 	vstr	s0, [r7, #20]

	if(Traj_Flag & 0x0F){
 8003526:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <Control_Function+0x220>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	2b00      	cmp	r3, #0
 8003530:	d07b      	beq.n	800362a <Control_Function+0x13a>
		float traj_t_set[5];
		traj_t_set[0] = t;
 8003532:	4b78      	ldr	r3, [pc, #480]	; (8003714 <Control_Function+0x224>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	603b      	str	r3, [r7, #0]
		traj_t_set[1] = t * t;
 8003538:	4b76      	ldr	r3, [pc, #472]	; (8003714 <Control_Function+0x224>)
 800353a:	ed93 7a00 	vldr	s14, [r3]
 800353e:	4b75      	ldr	r3, [pc, #468]	; (8003714 <Control_Function+0x224>)
 8003540:	edd3 7a00 	vldr	s15, [r3]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	edc7 7a01 	vstr	s15, [r7, #4]
		traj_t_set[2] = traj_t_set[1] * t;
 800354c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003550:	4b70      	ldr	r3, [pc, #448]	; (8003714 <Control_Function+0x224>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a02 	vstr	s15, [r7, #8]
		traj_t_set[3] = traj_t_set[2] * t;
 800355e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003562:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <Control_Function+0x224>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356c:	edc7 7a03 	vstr	s15, [r7, #12]
		traj_t_set[4] = traj_t_set[3] * t;
 8003570:	ed97 7a03 	vldr	s14, [r7, #12]
 8003574:	4b67      	ldr	r3, [pc, #412]	; (8003714 <Control_Function+0x224>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357e:	edc7 7a04 	vstr	s15, [r7, #16]
		for (int i = 0; i < 4; i++) {
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	e03f      	b.n	8003608 <Control_Function+0x118>
			if (Traj_Flag & (0x01 << i)) {
 8003588:	4b61      	ldr	r3, [pc, #388]	; (8003710 <Control_Function+0x220>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	fa42 f303 	asr.w	r3, r2, r3
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d032      	beq.n	8003602 <Control_Function+0x112>
				TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <Control_Function+0x228>)
 80035a8:	1898      	adds	r0, r3, r2
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a5b      	ldr	r2, [pc, #364]	; (800371c <Control_Function+0x22c>)
 80035b0:	441a      	add	r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	495a      	ldr	r1, [pc, #360]	; (8003720 <Control_Function+0x230>)
 80035b8:	440b      	add	r3, r1
 80035ba:	4639      	mov	r1, r7
 80035bc:	f7fd fcd9 	bl	8000f72 <TrajFollow>
						&SetPoint_Velocity[i]);
				if (t >= Traj[i].T) {
 80035c0:	4955      	ldr	r1, [pc, #340]	; (8003718 <Control_Function+0x228>)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3318      	adds	r3, #24
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <Control_Function+0x224>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	d80e      	bhi.n	8003602 <Control_Function+0x112>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 80035e4:	2201      	movs	r2, #1
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	b25a      	sxtb	r2, r3
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <Control_Function+0x220>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	4013      	ands	r3, r2
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <Control_Function+0x220>)
 8003600:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	3301      	adds	r3, #1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	2b03      	cmp	r3, #3
 800360c:	ddbc      	ble.n	8003588 <Control_Function+0x98>
				}
			}
		}
		t += 0.005;
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <Control_Function+0x224>)
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003618:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80036f8 <Control_Function+0x208>
 800361c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <Control_Function+0x224>)
 8003626:	edc3 7a00 	vstr	s15, [r3]
	}

	CascadeControl(&Control[0], &Kalman[0], J1,SetPoint_Position[0],SetPoint_Velocity[0]);
 800362a:	4b3c      	ldr	r3, [pc, #240]	; (800371c <Control_Function+0x22c>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <Control_Function+0x230>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	eeb0 1a47 	vmov.f32	s2, s14
 800363a:	eef0 0a67 	vmov.f32	s1, s15
 800363e:	ed97 0a08 	vldr	s0, [r7, #32]
 8003642:	4938      	ldr	r1, [pc, #224]	; (8003724 <Control_Function+0x234>)
 8003644:	4838      	ldr	r0, [pc, #224]	; (8003728 <Control_Function+0x238>)
 8003646:	f7fe f811 	bl	800166c <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2,SetPoint_Position[1],SetPoint_Velocity[1]);
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <Control_Function+0x22c>)
 800364c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <Control_Function+0x230>)
 8003652:	ed93 7a01 	vldr	s14, [r3, #4]
 8003656:	eeb0 1a47 	vmov.f32	s2, s14
 800365a:	eef0 0a67 	vmov.f32	s1, s15
 800365e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003662:	4932      	ldr	r1, [pc, #200]	; (800372c <Control_Function+0x23c>)
 8003664:	4832      	ldr	r0, [pc, #200]	; (8003730 <Control_Function+0x240>)
 8003666:	f7fe f801 	bl	800166c <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3,SetPoint_Position[2],SetPoint_Velocity[2]);
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <Control_Function+0x22c>)
 800366c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <Control_Function+0x230>)
 8003672:	ed93 7a02 	vldr	s14, [r3, #8]
 8003676:	eeb0 1a47 	vmov.f32	s2, s14
 800367a:	eef0 0a67 	vmov.f32	s1, s15
 800367e:	ed97 0a06 	vldr	s0, [r7, #24]
 8003682:	492c      	ldr	r1, [pc, #176]	; (8003734 <Control_Function+0x244>)
 8003684:	482c      	ldr	r0, [pc, #176]	; (8003738 <Control_Function+0x248>)
 8003686:	f7fd fff1 	bl	800166c <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4,SetPoint_Position[3],SetPoint_Velocity[3]);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <Control_Function+0x22c>)
 800368c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <Control_Function+0x230>)
 8003692:	ed93 7a03 	vldr	s14, [r3, #12]
 8003696:	eeb0 1a47 	vmov.f32	s2, s14
 800369a:	eef0 0a67 	vmov.f32	s1, s15
 800369e:	ed97 0a05 	vldr	s0, [r7, #20]
 80036a2:	4926      	ldr	r1, [pc, #152]	; (800373c <Control_Function+0x24c>)
 80036a4:	4826      	ldr	r0, [pc, #152]	; (8003740 <Control_Function+0x250>)
 80036a6:	f7fd ffe1 	bl	800166c <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <Control_Function+0x238>)
 80036ac:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80036b0:	eeb0 0a67 	vmov.f32	s0, s15
 80036b4:	4823      	ldr	r0, [pc, #140]	; (8003744 <Control_Function+0x254>)
 80036b6:	f7fd fb57 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <Control_Function+0x238>)
 80036bc:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80036c0:	eeb0 0a67 	vmov.f32	s0, s15
 80036c4:	4820      	ldr	r0, [pc, #128]	; (8003748 <Control_Function+0x258>)
 80036c6:	f7fd fb4f 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <Control_Function+0x238>)
 80036cc:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80036d0:	eeb0 0a67 	vmov.f32	s0, s15
 80036d4:	481d      	ldr	r0, [pc, #116]	; (800374c <Control_Function+0x25c>)
 80036d6:	f7fd fb47 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <Control_Function+0x238>)
 80036dc:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 80036e0:	eeb0 0a67 	vmov.f32	s0, s15
 80036e4:	481a      	ldr	r0, [pc, #104]	; (8003750 <Control_Function+0x260>)
 80036e6:	f7fd fb3f 	bl	8000d68 <Step_Driver>
}
 80036ea:	bf00      	nop
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	f3af 8000 	nop.w
 80036f8:	47ae147b 	.word	0x47ae147b
 80036fc:	3f747ae1 	.word	0x3f747ae1
 8003700:	20000230 	.word	0x20000230
 8003704:	20000250 	.word	0x20000250
 8003708:	20000270 	.word	0x20000270
 800370c:	20000290 	.word	0x20000290
 8003710:	20000759 	.word	0x20000759
 8003714:	20000744 	.word	0x20000744
 8003718:	200006b4 	.word	0x200006b4
 800371c:	20000724 	.word	0x20000724
 8003720:	20000734 	.word	0x20000734
 8003724:	200002b0 	.word	0x200002b0
 8003728:	20000330 	.word	0x20000330
 800372c:	200002d0 	.word	0x200002d0
 8003730:	2000039c 	.word	0x2000039c
 8003734:	200002f0 	.word	0x200002f0
 8003738:	20000408 	.word	0x20000408
 800373c:	20000310 	.word	0x20000310
 8003740:	20000474 	.word	0x20000474
 8003744:	200004e0 	.word	0x200004e0
 8003748:	200004f4 	.word	0x200004f4
 800374c:	20000508 	.word	0x20000508
 8003750:	2000051c 	.word	0x2000051c

08003754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003758:	b672      	cpsid	i
}
 800375a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800375c:	e7fe      	b.n	800375c <Error_Handler+0x8>
	...

08003760 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003764:	4b28      	ldr	r3, [pc, #160]	; (8003808 <MX_SPI3_Init+0xa8>)
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <MX_SPI3_Init+0xac>)
 8003768:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <MX_SPI3_Init+0xa8>)
 800376c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003770:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003772:	4b25      	ldr	r3, [pc, #148]	; (8003808 <MX_SPI3_Init+0xa8>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <MX_SPI3_Init+0xa8>)
 800377a:	2207      	movs	r2, #7
 800377c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <MX_SPI3_Init+0xa8>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003784:	4b20      	ldr	r3, [pc, #128]	; (8003808 <MX_SPI3_Init+0xa8>)
 8003786:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800378a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <MX_SPI3_Init+0xa8>)
 800378e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003792:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <MX_SPI3_Init+0xa8>)
 8003796:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800379a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800379c:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <MX_SPI3_Init+0xa8>)
 800379e:	2200      	movs	r2, #0
 80037a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037b0:	221d      	movs	r2, #29
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037be:	2200      	movs	r2, #0
 80037c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80037f2:	4805      	ldr	r0, [pc, #20]	; (8003808 <MX_SPI3_Init+0xa8>)
 80037f4:	f00b fdea 	bl	800f3cc <HAL_SPI_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80037fe:	f7ff ffa9 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000770 	.word	0x20000770
 800380c:	40003c00 	.word	0x40003c00

08003810 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003816:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <MX_SPI4_Init+0xa8>)
 8003818:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800381c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003820:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003822:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800382a:	220f      	movs	r2, #15
 800382c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800382e:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003830:	2200      	movs	r2, #0
 8003832:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800383c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003840:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003844:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003848:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800384a:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003858:	2200      	movs	r2, #0
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800385e:	2200      	movs	r2, #0
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003868:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800386c:	2200      	movs	r2, #0
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003872:	2200      	movs	r2, #0
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003884:	2200      	movs	r2, #0
 8003886:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800388a:	2200      	movs	r2, #0
 800388c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003890:	2200      	movs	r2, #0
 8003892:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <MX_SPI4_Init+0xa4>)
 8003896:	2200      	movs	r2, #0
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_SPI4_Init+0xa4>)
 800389c:	2200      	movs	r2, #0
 800389e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_SPI4_Init+0xa4>)
 80038a2:	f00b fd93 	bl	800f3cc <HAL_SPI_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80038ac:	f7ff ff52 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200007f8 	.word	0x200007f8
 80038b8:	40013400 	.word	0x40013400

080038bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b0b8      	sub	sp, #224	; 0xe0
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038d4:	f107 0318 	add.w	r3, r7, #24
 80038d8:	22b4      	movs	r2, #180	; 0xb4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f011 f831 	bl	8014944 <memset>
  if(spiHandle->Instance==SPI3)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4b      	ldr	r2, [pc, #300]	; (8003a14 <HAL_SPI_MspInit+0x158>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d156      	bne.n	800399a <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80038ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80038f2:	2319      	movs	r3, #25
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80038f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80038fc:	2302      	movs	r3, #2
 80038fe:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003900:	2302      	movs	r3, #2
 8003902:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003904:	2302      	movs	r3, #2
 8003906:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8003908:	2300      	movs	r3, #0
 800390a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800390c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003910:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8003916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800391a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391c:	f107 0318 	add.w	r3, r7, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f009 fcbf 	bl	800d2a4 <HAL_RCCEx_PeriphCLKConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800392c:	f7ff ff12 	bl	8003754 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003936:	4a38      	ldr	r2, [pc, #224]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003940:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003954:	4a30      	ldr	r2, [pc, #192]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800395e:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 8003960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800396c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003986:	2306      	movs	r3, #6
 8003988:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003990:	4619      	mov	r1, r3
 8003992:	4822      	ldr	r0, [pc, #136]	; (8003a1c <HAL_SPI_MspInit+0x160>)
 8003994:	f006 fb88 	bl	800a0a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003998:	e038      	b.n	8003a0c <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <HAL_SPI_MspInit+0x164>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d133      	bne.n	8003a0c <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039ca:	f043 0310 	orr.w	r3, r3, #16
 80039ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_SPI_MspInit+0x15c>)
 80039d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 80039e0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80039e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80039fa:	2305      	movs	r3, #5
 80039fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a04:	4619      	mov	r1, r3
 8003a06:	4807      	ldr	r0, [pc, #28]	; (8003a24 <HAL_SPI_MspInit+0x168>)
 8003a08:	f006 fb4e 	bl	800a0a8 <HAL_GPIO_Init>
}
 8003a0c:	bf00      	nop
 8003a0e:	37e0      	adds	r7, #224	; 0xe0
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40003c00 	.word	0x40003c00
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	58020800 	.word	0x58020800
 8003a20:	40013400 	.word	0x40013400
 8003a24:	58021000 	.word	0x58021000

08003a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <HAL_MspInit+0x30>)
 8003a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_MspInit+0x30>)
 8003a36:	f043 0302 	orr.w	r3, r3, #2
 8003a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_MspInit+0x30>)
 8003a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	58024400 	.word	0x58024400

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <NMI_Handler+0x4>

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f001 fc2c 	bl	8005304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <DMA1_Stream0_IRQHandler+0x10>)
 8003ab6:	f005 f983 	bl	8008dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000e84 	.word	0x20000e84

08003ac4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA1_Stream1_IRQHandler+0x10>)
 8003aca:	f005 f979 	bl	8008dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000efc 	.word	0x20000efc

08003ad8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA1_Stream2_IRQHandler+0x10>)
 8003ade:	f005 f96f 	bl	8008dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000c5c 	.word	0x20000c5c

08003aec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <I2C2_ER_IRQHandler+0x10>)
 8003af2:	f006 fddb 	bl	800a6ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200001dc 	.word	0x200001dc

08003b00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <USART3_IRQHandler+0x10>)
 8003b06:	f00e fa27 	bl	8011f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000df4 	.word	0x20000df4

08003b14 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <UART5_IRQHandler+0x10>)
 8003b1a:	f00e fa1d 	bl	8011f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000cd4 	.word	0x20000cd4

08003b28 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <ADC3_IRQHandler+0x10>)
 8003b2e:	f002 fa59 	bl	8005fe4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000144 	.word	0x20000144

08003b3c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM23_IRQHandler+0x10>)
 8003b42:	f00c ffd7 	bl	8010af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000bc4 	.word	0x20000bc4

08003b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <SystemInit+0xd8>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <SystemInit+0xd8>)
 8003b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b64:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <SystemInit+0xdc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d807      	bhi.n	8003b80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b70:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <SystemInit+0xdc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 030f 	bic.w	r3, r3, #15
 8003b78:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <SystemInit+0xdc>)
 8003b7a:	f043 0307 	orr.w	r3, r3, #7
 8003b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b80:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <SystemInit+0xe0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <SystemInit+0xe0>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <SystemInit+0xe0>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <SystemInit+0xe0>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4926      	ldr	r1, [pc, #152]	; (8003c30 <SystemInit+0xe0>)
 8003b98:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <SystemInit+0xe4>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b9e:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <SystemInit+0xdc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <SystemInit+0xdc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <SystemInit+0xdc>)
 8003bb4:	f043 0307 	orr.w	r3, r3, #7
 8003bb8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <SystemInit+0xe0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <SystemInit+0xe0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <SystemInit+0xe0>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003bcc:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <SystemInit+0xe0>)
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <SystemInit+0xe8>)
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003bd2:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <SystemInit+0xe0>)
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <SystemInit+0xec>)
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bd8:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <SystemInit+0xe0>)
 8003bda:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <SystemInit+0xf0>)
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <SystemInit+0xe0>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <SystemInit+0xe0>)
 8003be6:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <SystemInit+0xf0>)
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <SystemInit+0xe0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <SystemInit+0xe0>)
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <SystemInit+0xf0>)
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <SystemInit+0xe0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <SystemInit+0xe0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <SystemInit+0xe0>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <SystemInit+0xe0>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <SystemInit+0xf4>)
 8003c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c14:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <SystemInit+0xd8>)
 8003c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c1c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00
 8003c2c:	52002000 	.word	0x52002000
 8003c30:	58024400 	.word	0x58024400
 8003c34:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c38:	02020200 	.word	0x02020200
 8003c3c:	01ff0000 	.word	0x01ff0000
 8003c40:	01010280 	.word	0x01010280
 8003c44:	52004000 	.word	0x52004000

08003c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b098      	sub	sp, #96	; 0x60
 8003c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	611a      	str	r2, [r3, #16]
 8003c6a:	615a      	str	r2, [r3, #20]
 8003c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2234      	movs	r2, #52	; 0x34
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f010 fe65 	bl	8014944 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c7c:	4a39      	ldr	r2, [pc, #228]	; (8003d64 <MX_TIM1_Init+0x11c>)
 8003c7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c80:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c8e:	f240 1257 	movw	r2, #343	; 0x157
 8003c92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c9a:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ca6:	482e      	ldr	r0, [pc, #184]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003ca8:	f00c fc12 	bl	80104d0 <HAL_TIM_PWM_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003cb2:	f7ff fd4f 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4825      	ldr	r0, [pc, #148]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003cca:	f00d fe9d 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003cd4:	f7ff fd3e 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd8:	2360      	movs	r3, #96	; 0x60
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4818      	ldr	r0, [pc, #96]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003cfe:	f00d f819 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003d08:	f7ff fd24 	bl	8003754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4807      	ldr	r0, [pc, #28]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003d42:	f00d fefd 	bl	8011b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8003d4c:	f7ff fd02 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <MX_TIM1_Init+0x118>)
 8003d52:	f000 fecd 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 8003d56:	bf00      	nop
 8003d58:	3760      	adds	r7, #96	; 0x60
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000880 	.word	0x20000880
 8003d64:	40010000 	.word	0x40010000

08003d68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	; 0x38
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7c:	f107 031c 	add.w	r3, r7, #28
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d88:	463b      	mov	r3, r7
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	611a      	str	r2, [r3, #16]
 8003d96:	615a      	str	r2, [r3, #20]
 8003d98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d9a:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <MX_TIM3_Init+0xec>)
 8003d9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003dac:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dc0:	4823      	ldr	r0, [pc, #140]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003dc2:	f00c faa8 	bl	8010316 <HAL_TIM_Base_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003dcc:	f7ff fcc2 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dda:	4619      	mov	r1, r3
 8003ddc:	481c      	ldr	r0, [pc, #112]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003dde:	f00d f8bd 	bl	8010f5c <HAL_TIM_ConfigClockSource>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003de8:	f7ff fcb4 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dec:	4818      	ldr	r0, [pc, #96]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003dee:	f00c fb6f 	bl	80104d0 <HAL_TIM_PWM_Init>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003df8:	f7ff fcac 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e04:	f107 031c 	add.w	r3, r7, #28
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4811      	ldr	r0, [pc, #68]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003e0c:	f00d fdfc 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003e16:	f7ff fc9d 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e1a:	2360      	movs	r3, #96	; 0x60
 8003e1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4807      	ldr	r0, [pc, #28]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003e32:	f00c ff7f 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e3c:	f7ff fc8a 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e40:	4803      	ldr	r0, [pc, #12]	; (8003e50 <MX_TIM3_Init+0xe8>)
 8003e42:	f000 fe55 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 8003e46:	bf00      	nop
 8003e48:	3738      	adds	r7, #56	; 0x38
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200008cc 	.word	0x200008cc
 8003e54:	40000400 	.word	0x40000400

08003e58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f010 fd6c 	bl	8014944 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <MX_TIM4_Init+0xa8>)
 8003e7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e8a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003e8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e96:	4b19      	ldr	r3, [pc, #100]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003ec8:	f00c fd6e 	bl	80109a8 <HAL_TIM_Encoder_Init>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003ed2:	f7ff fc3f 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4806      	ldr	r0, [pc, #24]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003ee4:	f00d fd90 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003eee:	f7ff fc31 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ef2:	bf00      	nop
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000918 	.word	0x20000918
 8003f00:	40000800 	.word	0x40000800

08003f04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08e      	sub	sp, #56	; 0x38
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f18:	f107 031c 	add.w	r3, r7, #28
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f24:	463b      	mov	r3, r7
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	611a      	str	r2, [r3, #16]
 8003f32:	615a      	str	r2, [r3, #20]
 8003f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f38:	4a33      	ldr	r2, [pc, #204]	; (8004008 <MX_TIM5_Init+0x104>)
 8003f3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003f42:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8003f4a:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f4c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003f50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f5e:	4829      	ldr	r0, [pc, #164]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f60:	f00c f9d9 	bl	8010316 <HAL_TIM_Base_Init>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8003f6a:	f7ff fbf3 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4822      	ldr	r0, [pc, #136]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f7c:	f00c ffee 	bl	8010f5c <HAL_TIM_ConfigClockSource>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8003f86:	f7ff fbe5 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003f8a:	481e      	ldr	r0, [pc, #120]	; (8004004 <MX_TIM5_Init+0x100>)
 8003f8c:	f00c faa0 	bl	80104d0 <HAL_TIM_PWM_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8003f96:	f7ff fbdd 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fa2:	f107 031c 	add.w	r3, r7, #28
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4816      	ldr	r0, [pc, #88]	; (8004004 <MX_TIM5_Init+0x100>)
 8003faa:	f00d fd2d 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8003fb4:	f7ff fbce 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb8:	2360      	movs	r3, #96	; 0x60
 8003fba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 8003fbc:	f240 53db 	movw	r3, #1499	; 0x5db
 8003fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fca:	463b      	mov	r3, r7
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4619      	mov	r1, r3
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <MX_TIM5_Init+0x100>)
 8003fd2:	f00c feaf 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8003fdc:	f7ff fbba 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4807      	ldr	r0, [pc, #28]	; (8004004 <MX_TIM5_Init+0x100>)
 8003fe8:	f00c fea4 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8003ff2:	f7ff fbaf 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003ff6:	4803      	ldr	r0, [pc, #12]	; (8004004 <MX_TIM5_Init+0x100>)
 8003ff8:	f000 fd7a 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 8003ffc:	bf00      	nop
 8003ffe:	3738      	adds	r7, #56	; 0x38
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000964 	.word	0x20000964
 8004008:	40000c00 	.word	0x40000c00

0800400c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <MX_TIM6_Init+0x68>)
 800401e:	4a16      	ldr	r2, [pc, #88]	; (8004078 <MX_TIM6_Init+0x6c>)
 8004020:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <MX_TIM6_Init+0x68>)
 8004024:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004028:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <MX_TIM6_Init+0x68>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <MX_TIM6_Init+0x68>)
 8004032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004036:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <MX_TIM6_Init+0x68>)
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800403e:	480d      	ldr	r0, [pc, #52]	; (8004074 <MX_TIM6_Init+0x68>)
 8004040:	f00c f969 	bl	8010316 <HAL_TIM_Base_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800404a:	f7ff fb83 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4806      	ldr	r0, [pc, #24]	; (8004074 <MX_TIM6_Init+0x68>)
 800405c:	f00d fcd4 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004066:	f7ff fb75 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200009b0 	.word	0x200009b0
 8004078:	40001000 	.word	0x40001000

0800407c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	; 0x30
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f010 fc5a 	bl	8014944 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004090:	463b      	mov	r3, r7
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <MX_TIM8_Init+0xac>)
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <MX_TIM8_Init+0xb0>)
 800409e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <MX_TIM8_Init+0xac>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <MX_TIM8_Init+0xac>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MX_TIM8_Init+0xac>)
 80040ae:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80040b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <MX_TIM8_Init+0xac>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <MX_TIM8_Init+0xac>)
 80040bc:	2200      	movs	r2, #0
 80040be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MX_TIM8_Init+0xac>)
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80040c6:	2303      	movs	r3, #3
 80040c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80040d2:	2300      	movs	r3, #0
 80040d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040da:	2300      	movs	r3, #0
 80040dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040de:	2301      	movs	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040e2:	2300      	movs	r3, #0
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	4619      	mov	r1, r3
 80040f0:	480d      	ldr	r0, [pc, #52]	; (8004128 <MX_TIM8_Init+0xac>)
 80040f2:	f00c fc59 	bl	80109a8 <HAL_TIM_Encoder_Init>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80040fc:	f7ff fb2a 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004100:	2300      	movs	r3, #0
 8004102:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004104:	2300      	movs	r3, #0
 8004106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800410c:	463b      	mov	r3, r7
 800410e:	4619      	mov	r1, r3
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <MX_TIM8_Init+0xac>)
 8004112:	f00d fc79 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800411c:	f7ff fb1a 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004120:	bf00      	nop
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200009fc 	.word	0x200009fc
 800412c:	40010400 	.word	0x40010400

08004130 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	611a      	str	r2, [r3, #16]
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <MX_TIM13_Init+0x98>)
 800414a:	4a20      	ldr	r2, [pc, #128]	; (80041cc <MX_TIM13_Init+0x9c>)
 800414c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <MX_TIM13_Init+0x98>)
 8004150:	f240 2225 	movw	r2, #549	; 0x225
 8004154:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <MX_TIM13_Init+0x98>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <MX_TIM13_Init+0x98>)
 800415e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004162:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <MX_TIM13_Init+0x98>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <MX_TIM13_Init+0x98>)
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004170:	4815      	ldr	r0, [pc, #84]	; (80041c8 <MX_TIM13_Init+0x98>)
 8004172:	f00c f8d0 	bl	8010316 <HAL_TIM_Base_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800417c:	f7ff faea 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004180:	4811      	ldr	r0, [pc, #68]	; (80041c8 <MX_TIM13_Init+0x98>)
 8004182:	f00c f9a5 	bl	80104d0 <HAL_TIM_PWM_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800418c:	f7ff fae2 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004190:	2360      	movs	r3, #96	; 0x60
 8004192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8004194:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2200      	movs	r2, #0
 80041a6:	4619      	mov	r1, r3
 80041a8:	4807      	ldr	r0, [pc, #28]	; (80041c8 <MX_TIM13_Init+0x98>)
 80041aa:	f00c fdc3 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80041b4:	f7ff face 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80041b8:	4803      	ldr	r0, [pc, #12]	; (80041c8 <MX_TIM13_Init+0x98>)
 80041ba:	f000 fc99 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000a48 	.word	0x20000a48
 80041cc:	40001c00 	.word	0x40001c00

080041d0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	60da      	str	r2, [r3, #12]
 80041e2:	611a      	str	r2, [r3, #16]
 80041e4:	615a      	str	r2, [r3, #20]
 80041e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <MX_TIM14_Init+0x98>)
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <MX_TIM14_Init+0x9c>)
 80041ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80041ee:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <MX_TIM14_Init+0x98>)
 80041f0:	f240 2225 	movw	r2, #549	; 0x225
 80041f4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <MX_TIM14_Init+0x98>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <MX_TIM14_Init+0x98>)
 80041fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004202:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <MX_TIM14_Init+0x98>)
 8004206:	2200      	movs	r2, #0
 8004208:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <MX_TIM14_Init+0x98>)
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004210:	4815      	ldr	r0, [pc, #84]	; (8004268 <MX_TIM14_Init+0x98>)
 8004212:	f00c f880 	bl	8010316 <HAL_TIM_Base_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800421c:	f7ff fa9a 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004220:	4811      	ldr	r0, [pc, #68]	; (8004268 <MX_TIM14_Init+0x98>)
 8004222:	f00c f955 	bl	80104d0 <HAL_TIM_PWM_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800422c:	f7ff fa92 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004230:	2360      	movs	r3, #96	; 0x60
 8004232:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8004234:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004238:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004242:	1d3b      	adds	r3, r7, #4
 8004244:	2200      	movs	r2, #0
 8004246:	4619      	mov	r1, r3
 8004248:	4807      	ldr	r0, [pc, #28]	; (8004268 <MX_TIM14_Init+0x98>)
 800424a:	f00c fd73 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8004254:	f7ff fa7e 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004258:	4803      	ldr	r0, [pc, #12]	; (8004268 <MX_TIM14_Init+0x98>)
 800425a:	f000 fc49 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 800425e:	bf00      	nop
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000a94 	.word	0x20000a94
 800426c:	40002000 	.word	0x40002000

08004270 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b098      	sub	sp, #96	; 0x60
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004276:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	615a      	str	r2, [r3, #20]
 8004294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2234      	movs	r2, #52	; 0x34
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f010 fb51 	bl	8014944 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80042a2:	4b35      	ldr	r3, [pc, #212]	; (8004378 <MX_TIM15_Init+0x108>)
 80042a4:	4a35      	ldr	r2, [pc, #212]	; (800437c <MX_TIM15_Init+0x10c>)
 80042a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <MX_TIM15_Init+0x108>)
 80042aa:	f240 2225 	movw	r2, #549	; 0x225
 80042ae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <MX_TIM15_Init+0x108>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <MX_TIM15_Init+0x108>)
 80042b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042bc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <MX_TIM15_Init+0x108>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80042c4:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <MX_TIM15_Init+0x108>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042ca:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <MX_TIM15_Init+0x108>)
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80042d0:	4829      	ldr	r0, [pc, #164]	; (8004378 <MX_TIM15_Init+0x108>)
 80042d2:	f00c f8fd 	bl	80104d0 <HAL_TIM_PWM_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80042dc:	f7ff fa3a 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e0:	2300      	movs	r3, #0
 80042e2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80042e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042ec:	4619      	mov	r1, r3
 80042ee:	4822      	ldr	r0, [pc, #136]	; (8004378 <MX_TIM15_Init+0x108>)
 80042f0:	f00d fb8a 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80042fa:	f7ff fa2b 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042fe:	2360      	movs	r3, #96	; 0x60
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8004302:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004306:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004308:	2300      	movs	r3, #0
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800430c:	2300      	movs	r3, #0
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004310:	2300      	movs	r3, #0
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800431c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004320:	2200      	movs	r2, #0
 8004322:	4619      	mov	r1, r3
 8004324:	4814      	ldr	r0, [pc, #80]	; (8004378 <MX_TIM15_Init+0x108>)
 8004326:	f00c fd05 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8004330:	f7ff fa10 	bl	8003754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4807      	ldr	r0, [pc, #28]	; (8004378 <MX_TIM15_Init+0x108>)
 800435c:	f00d fbf0 	bl	8011b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8004366:	f7ff f9f5 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800436a:	4803      	ldr	r0, [pc, #12]	; (8004378 <MX_TIM15_Init+0x108>)
 800436c:	f000 fbc0 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 8004370:	bf00      	nop
 8004372:	3760      	adds	r7, #96	; 0x60
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000ae0 	.word	0x20000ae0
 800437c:	40014000 	.word	0x40014000

08004380 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b094      	sub	sp, #80	; 0x50
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	609a      	str	r2, [r3, #8]
 8004392:	60da      	str	r2, [r3, #12]
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	615a      	str	r2, [r3, #20]
 8004398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800439a:	463b      	mov	r3, r7
 800439c:	2234      	movs	r2, #52	; 0x34
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f010 facf 	bl	8014944 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80043a6:	4b32      	ldr	r3, [pc, #200]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043a8:	4a32      	ldr	r2, [pc, #200]	; (8004474 <MX_TIM16_Init+0xf4>)
 80043aa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043ae:	f240 2225 	movw	r2, #549	; 0x225
 80043b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b4:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80043ba:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80043c8:	4b29      	ldr	r3, [pc, #164]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043ce:	4b28      	ldr	r3, [pc, #160]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80043d4:	4826      	ldr	r0, [pc, #152]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043d6:	f00b ff9e 	bl	8010316 <HAL_TIM_Base_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80043e0:	f7ff f9b8 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80043e4:	4822      	ldr	r0, [pc, #136]	; (8004470 <MX_TIM16_Init+0xf0>)
 80043e6:	f00c f873 	bl	80104d0 <HAL_TIM_PWM_Init>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80043f0:	f7ff f9b0 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043f4:	2360      	movs	r3, #96	; 0x60
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80043f8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043fe:	2300      	movs	r3, #0
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004402:	2300      	movs	r3, #0
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004416:	2200      	movs	r2, #0
 8004418:	4619      	mov	r1, r3
 800441a:	4815      	ldr	r0, [pc, #84]	; (8004470 <MX_TIM16_Init+0xf0>)
 800441c:	f00c fc8a 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8004426:	f7ff f995 	bl	8003754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800443e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004442:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004448:	2300      	movs	r3, #0
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800444c:	463b      	mov	r3, r7
 800444e:	4619      	mov	r1, r3
 8004450:	4807      	ldr	r0, [pc, #28]	; (8004470 <MX_TIM16_Init+0xf0>)
 8004452:	f00d fb75 	bl	8011b40 <HAL_TIMEx_ConfigBreakDeadTime>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 800445c:	f7ff f97a 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004460:	4803      	ldr	r0, [pc, #12]	; (8004470 <MX_TIM16_Init+0xf0>)
 8004462:	f000 fb45 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 8004466:	bf00      	nop
 8004468:	3750      	adds	r7, #80	; 0x50
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000b2c 	.word	0x20000b2c
 8004474:	40014400 	.word	0x40014400

08004478 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b094      	sub	sp, #80	; 0x50
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800447e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	611a      	str	r2, [r3, #16]
 800448e:	615a      	str	r2, [r3, #20]
 8004490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004492:	463b      	mov	r3, r7
 8004494:	2234      	movs	r2, #52	; 0x34
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f010 fa53 	bl	8014944 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044a0:	4a32      	ldr	r2, [pc, #200]	; (800456c <MX_TIM17_Init+0xf4>)
 80044a2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 80044a4:	4b30      	ldr	r3, [pc, #192]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044a6:	f240 2225 	movw	r2, #549	; 0x225
 80044aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ac:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80044cc:	4826      	ldr	r0, [pc, #152]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044ce:	f00b ff22 	bl	8010316 <HAL_TIM_Base_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80044d8:	f7ff f93c 	bl	8003754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80044dc:	4822      	ldr	r0, [pc, #136]	; (8004568 <MX_TIM17_Init+0xf0>)
 80044de:	f00b fff7 	bl	80104d0 <HAL_TIM_PWM_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80044e8:	f7ff f934 	bl	8003754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ec:	2360      	movs	r3, #96	; 0x60
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80044f0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f6:	2300      	movs	r3, #0
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800450a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800450e:	2200      	movs	r2, #0
 8004510:	4619      	mov	r1, r3
 8004512:	4815      	ldr	r0, [pc, #84]	; (8004568 <MX_TIM17_Init+0xf0>)
 8004514:	f00c fc0e 	bl	8010d34 <HAL_TIM_PWM_ConfigChannel>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800451e:	f7ff f919 	bl	8003754 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004544:	463b      	mov	r3, r7
 8004546:	4619      	mov	r1, r3
 8004548:	4807      	ldr	r0, [pc, #28]	; (8004568 <MX_TIM17_Init+0xf0>)
 800454a:	f00d faf9 	bl	8011b40 <HAL_TIMEx_ConfigBreakDeadTime>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8004554:	f7ff f8fe 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004558:	4803      	ldr	r0, [pc, #12]	; (8004568 <MX_TIM17_Init+0xf0>)
 800455a:	f000 fac9 	bl	8004af0 <HAL_TIM_MspPostInit>

}
 800455e:	bf00      	nop
 8004560:	3750      	adds	r7, #80	; 0x50
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000b78 	.word	0x20000b78
 800456c:	40014800 	.word	0x40014800

08004570 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <MX_TIM23_Init+0x98>)
 8004590:	4a1e      	ldr	r2, [pc, #120]	; (800460c <MX_TIM23_Init+0x9c>)
 8004592:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8004594:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <MX_TIM23_Init+0x98>)
 8004596:	f44f 7289 	mov.w	r2, #274	; 0x112
 800459a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <MX_TIM23_Init+0x98>)
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 5000-1;
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <MX_TIM23_Init+0x98>)
 80045a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80045a8:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045aa:	4b17      	ldr	r3, [pc, #92]	; (8004608 <MX_TIM23_Init+0x98>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <MX_TIM23_Init+0x98>)
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80045b6:	4814      	ldr	r0, [pc, #80]	; (8004608 <MX_TIM23_Init+0x98>)
 80045b8:	f00b fead 	bl	8010316 <HAL_TIM_Base_Init>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80045c2:	f7ff f8c7 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	4619      	mov	r1, r3
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <MX_TIM23_Init+0x98>)
 80045d4:	f00c fcc2 	bl	8010f5c <HAL_TIM_ConfigClockSource>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80045de:	f7ff f8b9 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	4619      	mov	r1, r3
 80045ee:	4806      	ldr	r0, [pc, #24]	; (8004608 <MX_TIM23_Init+0x98>)
 80045f0:	f00d fa0a 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80045fa:	f7ff f8ab 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000bc4 	.word	0x20000bc4
 800460c:	4000e000 	.word	0x4000e000

08004610 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004616:	f107 0310 	add.w	r3, r7, #16
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800462e:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <MX_TIM24_Init+0x9c>)
 8004632:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004636:	f44f 7289 	mov.w	r2, #274	; 0x112
 800463a:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <MX_TIM24_Init+0x98>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <MX_TIM24_Init+0x98>)
 800464c:	2200      	movs	r2, #0
 800464e:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8004656:	4814      	ldr	r0, [pc, #80]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004658:	f00b fe5d 	bl	8010316 <HAL_TIM_Base_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8004662:	f7ff f877 	bl	8003754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4619      	mov	r1, r3
 8004672:	480d      	ldr	r0, [pc, #52]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004674:	f00c fc72 	bl	8010f5c <HAL_TIM_ConfigClockSource>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800467e:	f7ff f869 	bl	8003754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4806      	ldr	r0, [pc, #24]	; (80046a8 <MX_TIM24_Init+0x98>)
 8004690:	f00d f9ba 	bl	8011a08 <HAL_TIMEx_MasterConfigSynchronization>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800469a:	f7ff f85b 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800469e:	bf00      	nop
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000c10 	.word	0x20000c10
 80046ac:	4000e400 	.word	0x4000e400

080046b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b8:	f107 0314 	add.w	r3, r7, #20
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_TIM_PWM_MspInit+0x110>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d15e      	bne.n	8004790 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80046d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046d8:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046e2:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80046e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f0:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80046f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f6:	4a33      	ldr	r2, [pc, #204]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 8004702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 800470e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004714:	2302      	movs	r3, #2
 8004716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004720:	2301      	movs	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	4619      	mov	r1, r3
 800472a:	4827      	ldr	r0, [pc, #156]	; (80047c8 <HAL_TIM_PWM_MspInit+0x118>)
 800472c:	f005 fcbc 	bl	800a0a8 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004732:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <HAL_TIM_PWM_MspInit+0x120>)
 8004734:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8004736:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004738:	220b      	movs	r2, #11
 800473a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 800473e:	2240      	movs	r2, #64	; 0x40
 8004740:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004744:	2200      	movs	r2, #0
 8004746:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004748:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 800474a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800474e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004750:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004756:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004758:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 800475a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800475e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004766:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004768:	2200      	movs	r2, #0
 800476a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 800476e:	2200      	movs	r2, #0
 8004770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004772:	4816      	ldr	r0, [pc, #88]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004774:	f003 fa66 	bl	8007c44 <HAL_DMA_Init>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 800477e:	f7fe ffe9 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 8004786:	625a      	str	r2, [r3, #36]	; 0x24
 8004788:	4a10      	ldr	r2, [pc, #64]	; (80047cc <HAL_TIM_PWM_MspInit+0x11c>)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800478e:	e013      	b.n	80047b8 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <HAL_TIM_PWM_MspInit+0x124>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 800479c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047a0:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_TIM_PWM_MspInit+0x114>)
 80047ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40010000 	.word	0x40010000
 80047c4:	58024400 	.word	0x58024400
 80047c8:	58020000 	.word	0x58020000
 80047cc:	20000c5c 	.word	0x20000c5c
 80047d0:	40020040 	.word	0x40020040
 80047d4:	40014000 	.word	0x40014000

080047d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b092      	sub	sp, #72	; 0x48
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a72      	ldr	r2, [pc, #456]	; (80049c0 <HAL_TIM_Base_MspInit+0x1e8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d12e      	bne.n	8004858 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047fa:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80047fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004800:	4a70      	ldr	r2, [pc, #448]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004802:	f043 0302 	orr.w	r3, r3, #2
 8004806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800480a:	4b6e      	ldr	r3, [pc, #440]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800480c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004818:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800481a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800481e:	4a69      	ldr	r2, [pc, #420]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800482a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8004836:	2320      	movs	r3, #32
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004842:	2300      	movs	r3, #0
 8004844:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004846:	2302      	movs	r3, #2
 8004848:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 800484a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800484e:	4619      	mov	r1, r3
 8004850:	485d      	ldr	r0, [pc, #372]	; (80049c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8004852:	f005 fc29 	bl	800a0a8 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8004856:	e0ae      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5b      	ldr	r2, [pc, #364]	; (80049cc <HAL_TIM_Base_MspInit+0x1f4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10f      	bne.n	8004882 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004862:	4b58      	ldr	r3, [pc, #352]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004868:	4a56      	ldr	r2, [pc, #344]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800486a:	f043 0308 	orr.w	r3, r3, #8
 800486e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004872:	4b54      	ldr	r3, [pc, #336]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004880:	e099      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_TIM_Base_MspInit+0x1f8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d10f      	bne.n	80048ac <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800488c:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800488e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004892:	4a4c      	ldr	r2, [pc, #304]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800489c:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800489e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048aa:	e084      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM13)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <HAL_TIM_Base_MspInit+0x1fc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d10f      	bne.n	80048d6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048bc:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
}
 80048d4:	e06f      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM14)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <HAL_TIM_Base_MspInit+0x200>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10f      	bne.n	8004900 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80048e0:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048e6:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80048f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
}
 80048fe:	e05a      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a35      	ldr	r2, [pc, #212]	; (80049dc <HAL_TIM_Base_MspInit+0x204>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10f      	bne.n	800492a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800490a:	4b2e      	ldr	r3, [pc, #184]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800490c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800491c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	69bb      	ldr	r3, [r7, #24]
}
 8004928:	e045      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_TIM_Base_MspInit+0x208>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10f      	bne.n	8004954 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004934:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800493a:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800493c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004940:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004944:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800494a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	e030      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM23)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_TIM_Base_MspInit+0x20c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d117      	bne.n	800498e <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004960:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8004970:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 800497c:	2200      	movs	r2, #0
 800497e:	2100      	movs	r1, #0
 8004980:	20a1      	movs	r0, #161	; 0xa1
 8004982:	f002 ff2c 	bl	80077de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004986:	20a1      	movs	r0, #161	; 0xa1
 8004988:	f002 ff43 	bl	8007812 <HAL_NVIC_EnableIRQ>
}
 800498c:	e013      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM24)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIM_Base_MspInit+0x210>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10e      	bne.n	80049b6 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800499a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80049a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049a4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80049aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	3748      	adds	r7, #72	; 0x48
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40000400 	.word	0x40000400
 80049c4:	58024400 	.word	0x58024400
 80049c8:	58020400 	.word	0x58020400
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40001000 	.word	0x40001000
 80049d4:	40001c00 	.word	0x40001c00
 80049d8:	40002000 	.word	0x40002000
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40014800 	.word	0x40014800
 80049e4:	4000e000 	.word	0x4000e000
 80049e8:	4000e400 	.word	0x4000e400

080049ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a34      	ldr	r2, [pc, #208]	; (8004adc <HAL_TIM_Encoder_MspInit+0xf0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d12f      	bne.n	8004a6e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a0e:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a14:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a1e:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a32:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a34:	f043 0308 	orr.w	r3, r3, #8
 8004a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8004a4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a50:	2302      	movs	r3, #2
 8004a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a60:	f107 031c 	add.w	r3, r7, #28
 8004a64:	4619      	mov	r1, r3
 8004a66:	481f      	ldr	r0, [pc, #124]	; (8004ae4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004a68:	f005 fb1e 	bl	800a0a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004a6c:	e032      	b.n	8004ad4 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(tim_encoderHandle->Instance==TIM8)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d12d      	bne.n	8004ad4 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a7e:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a9c:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ac8:	f107 031c 	add.w	r3, r7, #28
 8004acc:	4619      	mov	r1, r3
 8004ace:	4807      	ldr	r0, [pc, #28]	; (8004aec <HAL_TIM_Encoder_MspInit+0x100>)
 8004ad0:	f005 faea 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004ad4:	bf00      	nop
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	58020c00 	.word	0x58020c00
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	58020800 	.word	0x58020800

08004af0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b090      	sub	sp, #64	; 0x40
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a95      	ldr	r2, [pc, #596]	; (8004d64 <HAL_TIM_MspPostInit+0x274>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d120      	bne.n	8004b54 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	4b95      	ldr	r3, [pc, #596]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b18:	4a93      	ldr	r2, [pc, #588]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8004b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8004b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4887      	ldr	r0, [pc, #540]	; (8004d6c <HAL_TIM_MspPostInit+0x27c>)
 8004b4e:	f005 faab 	bl	800a0a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004b52:	e103      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a85      	ldr	r2, [pc, #532]	; (8004d70 <HAL_TIM_MspPostInit+0x280>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d11f      	bne.n	8004b9e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5e:	4b82      	ldr	r3, [pc, #520]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b64:	4a80      	ldr	r2, [pc, #512]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b66:	f043 0302 	orr.w	r3, r3, #2
 8004b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b6e:	4b7e      	ldr	r3, [pc, #504]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8004b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b94:	4619      	mov	r1, r3
 8004b96:	4877      	ldr	r0, [pc, #476]	; (8004d74 <HAL_TIM_MspPostInit+0x284>)
 8004b98:	f005 fa86 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004b9c:	e0de      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a75      	ldr	r2, [pc, #468]	; (8004d78 <HAL_TIM_MspPostInit+0x288>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d11f      	bne.n	8004be8 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bae:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bb8:	4b6b      	ldr	r3, [pc, #428]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bde:	4619      	mov	r1, r3
 8004be0:	4862      	ldr	r0, [pc, #392]	; (8004d6c <HAL_TIM_MspPostInit+0x27c>)
 8004be2:	f005 fa61 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004be6:	e0b9      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <HAL_TIM_MspPostInit+0x28c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d11f      	bne.n	8004c32 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf2:	4b5d      	ldr	r3, [pc, #372]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf8:	4a5b      	ldr	r2, [pc, #364]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c02:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8004c10:	2340      	movs	r3, #64	; 0x40
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	2302      	movs	r3, #2
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004c20:	2309      	movs	r3, #9
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8004c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4850      	ldr	r0, [pc, #320]	; (8004d6c <HAL_TIM_MspPostInit+0x27c>)
 8004c2c:	f005 fa3c 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004c30:	e094      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a52      	ldr	r2, [pc, #328]	; (8004d80 <HAL_TIM_MspPostInit+0x290>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d11f      	bne.n	8004c7c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c42:	4a49      	ldr	r2, [pc, #292]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c66:	2300      	movs	r3, #0
 8004c68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004c6a:	2309      	movs	r3, #9
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8004c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c72:	4619      	mov	r1, r3
 8004c74:	483d      	ldr	r0, [pc, #244]	; (8004d6c <HAL_TIM_MspPostInit+0x27c>)
 8004c76:	f005 fa17 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004c7a:	e06f      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a40      	ldr	r2, [pc, #256]	; (8004d84 <HAL_TIM_MspPostInit+0x294>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d11f      	bne.n	8004cc6 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c86:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c8c:	4a36      	ldr	r2, [pc, #216]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c8e:	f043 0310 	orr.w	r3, r3, #16
 8004c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c96:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004ca4:	2320      	movs	r3, #32
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4832      	ldr	r0, [pc, #200]	; (8004d88 <HAL_TIM_MspPostInit+0x298>)
 8004cc0:	f005 f9f2 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004cc4:	e04a      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <HAL_TIM_MspPostInit+0x29c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd6:	4a24      	ldr	r2, [pc, #144]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8004cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004d00:	2301      	movs	r3, #1
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8004d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d08:	4619      	mov	r1, r3
 8004d0a:	481a      	ldr	r0, [pc, #104]	; (8004d74 <HAL_TIM_MspPostInit+0x284>)
 8004d0c:	f005 f9cc 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004d10:	e024      	b.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <HAL_TIM_MspPostInit+0x2a0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d11f      	bne.n	8004d5c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d22:	4a11      	ldr	r2, [pc, #68]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004d24:	f043 0302 	orr.w	r3, r3, #2
 8004d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <HAL_TIM_MspPostInit+0x278>)
 8004d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8004d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d40:	2302      	movs	r3, #2
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8004d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	4807      	ldr	r0, [pc, #28]	; (8004d74 <HAL_TIM_MspPostInit+0x284>)
 8004d58:	f005 f9a6 	bl	800a0a8 <HAL_GPIO_Init>
}
 8004d5c:	bf00      	nop
 8004d5e:	3740      	adds	r7, #64	; 0x40
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40010000 	.word	0x40010000
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	58020000 	.word	0x58020000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	58020400 	.word	0x58020400
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40001c00 	.word	0x40001c00
 8004d80:	40002000 	.word	0x40002000
 8004d84:	40014000 	.word	0x40014000
 8004d88:	58021000 	.word	0x58021000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004d98:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <MX_UART5_Init+0x98>)
 8004d9a:	4a25      	ldr	r2, [pc, #148]	; (8004e30 <MX_UART5_Init+0x9c>)
 8004d9c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8004d9e:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <MX_UART5_Init+0x98>)
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <MX_UART5_Init+0xa0>)
 8004da2:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <MX_UART5_Init+0x98>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004daa:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004db0:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <MX_UART5_Init+0x98>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <MX_UART5_Init+0x98>)
 8004db8:	220c      	movs	r2, #12
 8004dba:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dc8:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004dce:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <MX_UART5_Init+0x98>)
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <MX_UART5_Init+0x98>)
 8004ddc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004de2:	4812      	ldr	r0, [pc, #72]	; (8004e2c <MX_UART5_Init+0x98>)
 8004de4:	f00c ff6a 	bl	8011cbc <HAL_UART_Init>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8004dee:	f7fe fcb1 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004df2:	2100      	movs	r1, #0
 8004df4:	480d      	ldr	r0, [pc, #52]	; (8004e2c <MX_UART5_Init+0x98>)
 8004df6:	f00f fcb6 	bl	8014766 <HAL_UARTEx_SetTxFifoThreshold>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8004e00:	f7fe fca8 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e04:	2100      	movs	r1, #0
 8004e06:	4809      	ldr	r0, [pc, #36]	; (8004e2c <MX_UART5_Init+0x98>)
 8004e08:	f00f fceb 	bl	80147e2 <HAL_UARTEx_SetRxFifoThreshold>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8004e12:	f7fe fc9f 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004e16:	4805      	ldr	r0, [pc, #20]	; (8004e2c <MX_UART5_Init+0x98>)
 8004e18:	f00f fc6c 	bl	80146f4 <HAL_UARTEx_DisableFifoMode>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8004e22:	f7fe fc97 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000cd4 	.word	0x20000cd4
 8004e30:	40005000 	.word	0x40005000
 8004e34:	000f4240 	.word	0x000f4240

08004e38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e3e:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <MX_USART1_UART_Init+0x94>)
 8004e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8004e42:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <MX_USART1_UART_Init+0x98>)
 8004e46:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e54:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e5c:	220c      	movs	r2, #12
 8004e5e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e66:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e7e:	4812      	ldr	r0, [pc, #72]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e80:	f00c ff1c 	bl	8011cbc <HAL_UART_Init>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8004e8a:	f7fe fc63 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e8e:	2100      	movs	r1, #0
 8004e90:	480d      	ldr	r0, [pc, #52]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004e92:	f00f fc68 	bl	8014766 <HAL_UARTEx_SetTxFifoThreshold>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004e9c:	f7fe fc5a 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004ea4:	f00f fc9d 	bl	80147e2 <HAL_UARTEx_SetRxFifoThreshold>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004eae:	f7fe fc51 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <MX_USART1_UART_Init+0x90>)
 8004eb4:	f00f fc1e 	bl	80146f4 <HAL_UARTEx_DisableFifoMode>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8004ebe:	f7fe fc49 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000d64 	.word	0x20000d64
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	001e8480 	.word	0x001e8480

08004ed4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ed8:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004eda:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <MX_USART3_UART_Init+0x94>)
 8004edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ede:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004eec:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004efa:	220c      	movs	r2, #12
 8004efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f04:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f0a:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f10:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f1c:	4811      	ldr	r0, [pc, #68]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f1e:	f00c fecd 	bl	8011cbc <HAL_UART_Init>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004f28:	f7fe fc14 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	480d      	ldr	r0, [pc, #52]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f30:	f00f fc19 	bl	8014766 <HAL_UARTEx_SetTxFifoThreshold>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004f3a:	f7fe fc0b 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4808      	ldr	r0, [pc, #32]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f42:	f00f fc4e 	bl	80147e2 <HAL_UARTEx_SetRxFifoThreshold>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004f4c:	f7fe fc02 	bl	8003754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004f50:	4804      	ldr	r0, [pc, #16]	; (8004f64 <MX_USART3_UART_Init+0x90>)
 8004f52:	f00f fbcf 	bl	80146f4 <HAL_UARTEx_DisableFifoMode>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004f5c:	f7fe fbfa 	bl	8003754 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000df4 	.word	0x20000df4
 8004f68:	40004800 	.word	0x40004800

08004f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	; 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a86      	ldr	r2, [pc, #536]	; (80051a4 <HAL_UART_MspInit+0x238>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	f040 8094 	bne.w	80050b8 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004f90:	4b85      	ldr	r3, [pc, #532]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f96:	4a84      	ldr	r2, [pc, #528]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fa0:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fae:	4b7e      	ldr	r3, [pc, #504]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb4:	4a7c      	ldr	r2, [pc, #496]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004fb6:	f043 0302 	orr.w	r3, r3, #2
 8004fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fbe:	4b7a      	ldr	r3, [pc, #488]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8004fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004fcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004fde:	230e      	movs	r3, #14
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4870      	ldr	r0, [pc, #448]	; (80051ac <HAL_UART_MspInit+0x240>)
 8004fea:	f005 f85d 	bl	800a0a8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004fee:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8004ff0:	4a70      	ldr	r2, [pc, #448]	; (80051b4 <HAL_UART_MspInit+0x248>)
 8004ff2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004ff4:	4b6e      	ldr	r3, [pc, #440]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8004ff6:	2241      	movs	r2, #65	; 0x41
 8004ff8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ffa:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005000:	4b6b      	ldr	r3, [pc, #428]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005002:	2200      	movs	r2, #0
 8005004:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005006:	4b6a      	ldr	r3, [pc, #424]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800500c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800500e:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005010:	2200      	movs	r2, #0
 8005012:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005014:	4b66      	ldr	r3, [pc, #408]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005016:	2200      	movs	r2, #0
 8005018:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800501a:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <HAL_UART_MspInit+0x244>)
 800501c:	2200      	movs	r2, #0
 800501e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005020:	4b63      	ldr	r3, [pc, #396]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005026:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005028:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_UART_MspInit+0x244>)
 800502a:	2200      	movs	r2, #0
 800502c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800502e:	4860      	ldr	r0, [pc, #384]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005030:	f002 fe08 	bl	8007c44 <HAL_DMA_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800503a:	f7fe fb8b 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a5b      	ldr	r2, [pc, #364]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005042:	67da      	str	r2, [r3, #124]	; 0x7c
 8005044:	4a5a      	ldr	r2, [pc, #360]	; (80051b0 <HAL_UART_MspInit+0x244>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800504a:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800504c:	4a5b      	ldr	r2, [pc, #364]	; (80051bc <HAL_UART_MspInit+0x250>)
 800504e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8005050:	4b59      	ldr	r3, [pc, #356]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005052:	2242      	movs	r2, #66	; 0x42
 8005054:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005056:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005058:	2240      	movs	r2, #64	; 0x40
 800505a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505c:	4b56      	ldr	r3, [pc, #344]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800505e:	2200      	movs	r2, #0
 8005060:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005062:	4b55      	ldr	r3, [pc, #340]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005068:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005070:	4b51      	ldr	r3, [pc, #324]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005076:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800507c:	4b4e      	ldr	r3, [pc, #312]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800507e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005082:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005084:	4b4c      	ldr	r3, [pc, #304]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 8005086:	2200      	movs	r2, #0
 8005088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800508a:	484b      	ldr	r0, [pc, #300]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800508c:	f002 fdda 	bl	8007c44 <HAL_DMA_Init>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8005096:	f7fe fb5d 	bl	8003754 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 800509e:	679a      	str	r2, [r3, #120]	; 0x78
 80050a0:	4a45      	ldr	r2, [pc, #276]	; (80051b8 <HAL_UART_MspInit+0x24c>)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	2035      	movs	r0, #53	; 0x35
 80050ac:	f002 fb97 	bl	80077de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80050b0:	2035      	movs	r0, #53	; 0x35
 80050b2:	f002 fbae 	bl	8007812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80050b6:	e070      	b.n	800519a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <HAL_UART_MspInit+0x254>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d12f      	bne.n	8005122 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050c8:	4a37      	ldr	r2, [pc, #220]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050ca:	f043 0310 	orr.w	r3, r3, #16
 80050ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050e8:	f043 0302 	orr.w	r3, r3, #2
 80050ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 80050f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80050fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	2302      	movs	r3, #2
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	2300      	movs	r3, #0
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005110:	2304      	movs	r3, #4
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005118:	4619      	mov	r1, r3
 800511a:	4824      	ldr	r0, [pc, #144]	; (80051ac <HAL_UART_MspInit+0x240>)
 800511c:	f004 ffc4 	bl	800a0a8 <HAL_GPIO_Init>
}
 8005120:	e03b      	b.n	800519a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_UART_MspInit+0x258>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d136      	bne.n	800519a <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 800512e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 800513e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800514a:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 800514c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_UART_MspInit+0x23c>)
 800515c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005168:	f44f 7340 	mov.w	r3, #768	; 0x300
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005176:	2300      	movs	r3, #0
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800517a:	2307      	movs	r3, #7
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800517e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005182:	4619      	mov	r1, r3
 8005184:	4810      	ldr	r0, [pc, #64]	; (80051c8 <HAL_UART_MspInit+0x25c>)
 8005186:	f004 ff8f 	bl	800a0a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800518a:	2200      	movs	r2, #0
 800518c:	2100      	movs	r1, #0
 800518e:	2027      	movs	r0, #39	; 0x27
 8005190:	f002 fb25 	bl	80077de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005194:	2027      	movs	r0, #39	; 0x27
 8005196:	f002 fb3c 	bl	8007812 <HAL_NVIC_EnableIRQ>
}
 800519a:	bf00      	nop
 800519c:	3738      	adds	r7, #56	; 0x38
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40005000 	.word	0x40005000
 80051a8:	58024400 	.word	0x58024400
 80051ac:	58020400 	.word	0x58020400
 80051b0:	20000e84 	.word	0x20000e84
 80051b4:	40020010 	.word	0x40020010
 80051b8:	20000efc 	.word	0x20000efc
 80051bc:	40020028 	.word	0x40020028
 80051c0:	40011000 	.word	0x40011000
 80051c4:	40004800 	.word	0x40004800
 80051c8:	58020c00 	.word	0x58020c00

080051cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80051cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051d0:	f7fe fcbe 	bl	8003b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051d4:	480c      	ldr	r0, [pc, #48]	; (8005208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80051d6:	490d      	ldr	r1, [pc, #52]	; (800520c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051dc:	e002      	b.n	80051e4 <LoopCopyDataInit>

080051de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051e2:	3304      	adds	r3, #4

080051e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051e8:	d3f9      	bcc.n	80051de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051ec:	4c0a      	ldr	r4, [pc, #40]	; (8005218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051f0:	e001      	b.n	80051f6 <LoopFillZerobss>

080051f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051f4:	3204      	adds	r2, #4

080051f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051f8:	d3fb      	bcc.n	80051f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051fa:	f00f fb7f 	bl	80148fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051fe:	f7fd f80b 	bl	8002218 <main>
  bx  lr
 8005202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800520c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8005210:	08015830 	.word	0x08015830
  ldr r2, =_sbss
 8005214:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8005218:	20000f78 	.word	0x20000f78

0800521c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800521c:	e7fe      	b.n	800521c <ADC_IRQHandler>
	...

08005220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005226:	2003      	movs	r0, #3
 8005228:	f002 face 	bl	80077c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800522c:	f007 fe64 	bl	800cef8 <HAL_RCC_GetSysClockFreq>
 8005230:	4602      	mov	r2, r0
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <HAL_Init+0x68>)
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	4913      	ldr	r1, [pc, #76]	; (800528c <HAL_Init+0x6c>)
 800523e:	5ccb      	ldrb	r3, [r1, r3]
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_Init+0x68>)
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a0e      	ldr	r2, [pc, #56]	; (800528c <HAL_Init+0x6c>)
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <HAL_Init+0x70>)
 8005262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <HAL_Init+0x74>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800526a:	2000      	movs	r0, #0
 800526c:	f000 f814 	bl	8005298 <HAL_InitTick>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e002      	b.n	8005280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800527a:	f7fe fbd5 	bl	8003a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	58024400 	.word	0x58024400
 800528c:	08015608 	.word	0x08015608
 8005290:	20000008 	.word	0x20000008
 8005294:	20000004 	.word	0x20000004

08005298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80052a0:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_InitTick+0x60>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e021      	b.n	80052f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_InitTick+0x64>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_InitTick+0x60>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80052be:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fab3 	bl	800782e <HAL_SYSTICK_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00e      	b.n	80052f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d80a      	bhi.n	80052ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052d8:	2200      	movs	r2, #0
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	f002 fa7d 	bl	80077de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <HAL_InitTick+0x68>)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	20000010 	.word	0x20000010
 80052fc:	20000004 	.word	0x20000004
 8005300:	2000000c 	.word	0x2000000c

08005304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_IncTick+0x20>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_IncTick+0x24>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4413      	add	r3, r2
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_IncTick+0x24>)
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000010 	.word	0x20000010
 8005328:	20000f74 	.word	0x20000f74

0800532c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return uwTick;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_GetTick+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000f74 	.word	0x20000f74

08005344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800534c:	f7ff ffee 	bl	800532c <HAL_GetTick>
 8005350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d005      	beq.n	800536a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_Delay+0x44>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800536a:	bf00      	nop
 800536c:	f7ff ffde 	bl	800532c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	429a      	cmp	r2, r3
 800537a:	d8f7      	bhi.n	800536c <HAL_Delay+0x28>
  {
  }
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010

0800538c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	609a      	str	r2, [r3, #8]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3360      	adds	r3, #96	; 0x60
 8005406:	461a      	mov	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a10      	ldr	r2, [pc, #64]	; (8005454 <LL_ADC_SetOffset+0x60>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d10b      	bne.n	8005430 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800542e:	e00b      	b.n	8005448 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	430b      	orrs	r3, r1
 8005442:	431a      	orrs	r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	601a      	str	r2, [r3, #0]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	58026000 	.word	0x58026000

08005458 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3360      	adds	r3, #96	; 0x60
 8005466:	461a      	mov	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	611a      	str	r2, [r3, #16]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a0c      	ldr	r2, [pc, #48]	; (80054f8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	461a      	mov	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	601a      	str	r2, [r3, #0]
  }
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	58026000 	.word	0x58026000

080054fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <LL_ADC_SetOffsetSaturation+0x40>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10e      	bne.n	800552e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3360      	adds	r3, #96	; 0x60
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	431a      	orrs	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	58026000 	.word	0x58026000

08005540 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <LL_ADC_SetOffsetSign+0x40>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10e      	bne.n	8005572 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3360      	adds	r3, #96	; 0x60
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	431a      	orrs	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	58026000 	.word	0x58026000

08005584 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3360      	adds	r3, #96	; 0x60
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <LL_ADC_SetOffsetState+0x50>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80055b6:	e007      	b.n	80055c8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	58026000 	.word	0x58026000

080055d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3330      	adds	r3, #48	; 0x30
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	4413      	add	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	211f      	movs	r1, #31
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	401a      	ands	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	f003 011f 	and.w	r1, r3, #31
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	431a      	orrs	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3314      	adds	r3, #20
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0e5b      	lsrs	r3, r3, #25
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	0d1b      	lsrs	r3, r3, #20
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2107      	movs	r1, #7
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	401a      	ands	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0d1b      	lsrs	r3, r3, #20
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	431a      	orrs	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a1a      	ldr	r2, [pc, #104]	; (800574c <LL_ADC_SetChannelSingleDiff+0x78>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d115      	bne.n	8005714 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f4:	43db      	mvns	r3, r3
 80056f6:	401a      	ands	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f003 0318 	and.w	r3, r3, #24
 80056fe:	4914      	ldr	r1, [pc, #80]	; (8005750 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005700:	40d9      	lsrs	r1, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	400b      	ands	r3, r1
 8005706:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800570a:	431a      	orrs	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8005712:	e014      	b.n	800573e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0318 	and.w	r3, r3, #24
 800572a:	4909      	ldr	r1, [pc, #36]	; (8005750 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800572c:	40d9      	lsrs	r1, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	400b      	ands	r3, r1
 8005732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	58026000 	.word	0x58026000
 8005750:	000fffff 	.word	0x000fffff

08005754 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 031f 	and.w	r3, r3, #31
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	4b04      	ldr	r3, [pc, #16]	; (80057ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6093      	str	r3, [r2, #8]
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	5fffffc0 	.word	0x5fffffc0

080057b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c4:	d101      	bne.n	80057ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <LL_ADC_EnableInternalRegulator+0x24>)
 80057e6:	4013      	ands	r3, r2
 80057e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	6fffffc0 	.word	0x6fffffc0

08005800 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005814:	d101      	bne.n	800581a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <LL_ADC_Enable+0x24>)
 8005836:	4013      	ands	r3, r2
 8005838:	f043 0201 	orr.w	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	7fffffc0 	.word	0x7fffffc0

08005850 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <LL_ADC_Disable+0x24>)
 800585e:	4013      	ands	r3, r2
 8005860:	f043 0202 	orr.w	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	7fffffc0 	.word	0x7fffffc0

08005878 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <LL_ADC_IsEnabled+0x18>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_ADC_IsEnabled+0x1a>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d101      	bne.n	80058b6 <LL_ADC_IsDisableOngoing+0x18>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <LL_ADC_IsDisableOngoing+0x1a>
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <LL_ADC_REG_StartConversion+0x24>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	f043 0204 	orr.w	r2, r3, #4
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	7fffffc0 	.word	0x7fffffc0

080058ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d101      	bne.n	8005904 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b08      	cmp	r3, #8
 8005924:	d101      	bne.n	800592a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005938:	b590      	push	{r4, r7, lr}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005944:	2300      	movs	r3, #0
 8005946:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1ee      	b.n	8005d30 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fb f925 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ff19 	bl	80057b0 <LL_ADC_IsDeepPowerDownEnabled>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff feff 	bl	800578c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff34 	bl	8005800 <LL_ADC_IsInternalRegulatorEnabled>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d114      	bne.n	80059c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff18 	bl	80057d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059a8:	4b8e      	ldr	r3, [pc, #568]	; (8005be4 <HAL_ADC_Init+0x2ac>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	099b      	lsrs	r3, r3, #6
 80059ae:	4a8e      	ldr	r2, [pc, #568]	; (8005be8 <HAL_ADC_Init+0x2b0>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	3301      	adds	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80059ba:	e002      	b.n	80059c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3b01      	subs	r3, #1
 80059c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f9      	bne.n	80059bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff17 	bl	8005800 <LL_ADC_IsInternalRegulatorEnabled>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10d      	bne.n	80059f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059dc:	f043 0210 	orr.w	r2, r3, #16
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff77 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 80059fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 8188 	bne.w	8005d1e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f040 8184 	bne.w	8005d1e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a1e:	f043 0202 	orr.w	r2, r3, #2
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff ff24 	bl	8005878 <LL_ADC_IsEnabled>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d136      	bne.n	8005aa4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6c      	ldr	r2, [pc, #432]	; (8005bec <HAL_ADC_Init+0x2b4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_ADC_Init+0x112>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a6a      	ldr	r2, [pc, #424]	; (8005bf0 <HAL_ADC_Init+0x2b8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10e      	bne.n	8005a68 <HAL_ADC_Init+0x130>
 8005a4a:	4868      	ldr	r0, [pc, #416]	; (8005bec <HAL_ADC_Init+0x2b4>)
 8005a4c:	f7ff ff14 	bl	8005878 <LL_ADC_IsEnabled>
 8005a50:	4604      	mov	r4, r0
 8005a52:	4867      	ldr	r0, [pc, #412]	; (8005bf0 <HAL_ADC_Init+0x2b8>)
 8005a54:	f7ff ff10 	bl	8005878 <LL_ADC_IsEnabled>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4323      	orrs	r3, r4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e008      	b.n	8005a7a <HAL_ADC_Init+0x142>
 8005a68:	4862      	ldr	r0, [pc, #392]	; (8005bf4 <HAL_ADC_Init+0x2bc>)
 8005a6a:	f7ff ff05 	bl	8005878 <LL_ADC_IsEnabled>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5a      	ldr	r2, [pc, #360]	; (8005bec <HAL_ADC_Init+0x2b4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_ADC_Init+0x15a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a58      	ldr	r2, [pc, #352]	; (8005bf0 <HAL_ADC_Init+0x2b8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_Init+0x15e>
 8005a92:	4a59      	ldr	r2, [pc, #356]	; (8005bf8 <HAL_ADC_Init+0x2c0>)
 8005a94:	e000      	b.n	8005a98 <HAL_ADC_Init+0x160>
 8005a96:	4a59      	ldr	r2, [pc, #356]	; (8005bfc <HAL_ADC_Init+0x2c4>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7ff fc74 	bl	800538c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_ADC_Init+0x2bc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d129      	bne.n	8005b02 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	7e5b      	ldrb	r3, [r3, #25]
 8005ab2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005ab8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8005abe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d013      	beq.n	8005af0 <HAL_ADC_Init+0x1b8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d00d      	beq.n	8005aec <HAL_ADC_Init+0x1b4>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b1c      	cmp	r3, #28
 8005ad6:	d007      	beq.n	8005ae8 <HAL_ADC_Init+0x1b0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b18      	cmp	r3, #24
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_Init+0x1ac>
 8005ae0:	2318      	movs	r3, #24
 8005ae2:	e006      	b.n	8005af2 <HAL_ADC_Init+0x1ba>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e004      	b.n	8005af2 <HAL_ADC_Init+0x1ba>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	e002      	b.n	8005af2 <HAL_ADC_Init+0x1ba>
 8005aec:	2308      	movs	r3, #8
 8005aee:	e000      	b.n	8005af2 <HAL_ADC_Init+0x1ba>
 8005af0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8005af2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005afa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	e00e      	b.n	8005b20 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	7e5b      	ldrb	r3, [r3, #25]
 8005b06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005b12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d106      	bne.n	8005b38 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	045b      	lsls	r3, r3, #17
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_ADC_Init+0x2bc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d115      	bne.n	8005b8a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <HAL_ADC_Init+0x2c8>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	611a      	str	r2, [r3, #16]
 8005b88:	e009      	b.n	8005b9e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <HAL_ADC_Init+0x2cc>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fea2 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 8005ba8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff feaf 	bl	8005912 <LL_ADC_INJ_IsConversionOngoing>
 8005bb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 808e 	bne.w	8005cda <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 808a 	bne.w	8005cda <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <HAL_ADC_Init+0x2bc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d11b      	bne.n	8005c08 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	7e1b      	ldrb	r3, [r3, #24]
 8005bd4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bdc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	e018      	b.n	8005c16 <HAL_ADC_Init+0x2de>
 8005be4:	20000004 	.word	0x20000004
 8005be8:	053e2d63 	.word	0x053e2d63
 8005bec:	40022000 	.word	0x40022000
 8005bf0:	40022100 	.word	0x40022100
 8005bf4:	58026000 	.word	0x58026000
 8005bf8:	40022300 	.word	0x40022300
 8005bfc:	58026300 	.word	0x58026300
 8005c00:	fff04007 	.word	0xfff04007
 8005c04:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	7e1b      	ldrb	r3, [r3, #24]
 8005c0c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	4b46      	ldr	r3, [pc, #280]	; (8005d38 <HAL_ADC_Init+0x400>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	430b      	orrs	r3, r1
 8005c28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d137      	bne.n	8005ca4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <HAL_ADC_Init+0x404>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d116      	bne.n	8005c72 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <HAL_ADC_Init+0x408>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c56:	4311      	orrs	r1, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c5c:	4311      	orrs	r1, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c62:	430a      	orrs	r2, r1
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	e020      	b.n	8005cb4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <HAL_ADC_Init+0x40c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c80:	3a01      	subs	r2, #1
 8005c82:	0411      	lsls	r1, r2, #16
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c88:	4311      	orrs	r1, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c94:	430a      	orrs	r2, r1
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	e007      	b.n	8005cb4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_ADC_Init+0x404>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d002      	beq.n	8005cda <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 f9e9 	bl	80070ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10c      	bne.n	8005cfc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	f023 010f 	bic.w	r1, r3, #15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfa:	e007      	b.n	8005d0c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 020f 	bic.w	r2, r2, #15
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60
 8005d1c:	e007      	b.n	8005d2e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	f043 0210 	orr.w	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3724      	adds	r7, #36	; 0x24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}
 8005d38:	ffffbffc 	.word	0xffffbffc
 8005d3c:	58026000 	.word	0x58026000
 8005d40:	fc00f81f 	.word	0xfc00f81f
 8005d44:	fc00f81e 	.word	0xfc00f81e

08005d48 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a90      	ldr	r2, [pc, #576]	; (8005f98 <HAL_ADC_Start_IT+0x250>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_ADC_Start_IT+0x1c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a8f      	ldr	r2, [pc, #572]	; (8005f9c <HAL_ADC_Start_IT+0x254>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_Start_IT+0x20>
 8005d64:	4b8e      	ldr	r3, [pc, #568]	; (8005fa0 <HAL_ADC_Start_IT+0x258>)
 8005d66:	e000      	b.n	8005d6a <HAL_ADC_Start_IT+0x22>
 8005d68:	4b8e      	ldr	r3, [pc, #568]	; (8005fa4 <HAL_ADC_Start_IT+0x25c>)
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fcf2 	bl	8005754 <LL_ADC_GetMultimode>
 8005d70:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fdb8 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 8119 	bne.w	8005fb6 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_ADC_Start_IT+0x4a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e116      	b.n	8005fc0 <HAL_ADC_Start_IT+0x278>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 f89c 	bl	8006ed8 <ADC_Enable>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 8100 	bne.w	8005fac <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005db0:	4b7d      	ldr	r3, [pc, #500]	; (8005fa8 <HAL_ADC_Start_IT+0x260>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a76      	ldr	r2, [pc, #472]	; (8005f9c <HAL_ADC_Start_IT+0x254>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d002      	beq.n	8005dcc <HAL_ADC_Start_IT+0x84>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	e000      	b.n	8005dce <HAL_ADC_Start_IT+0x86>
 8005dcc:	4b72      	ldr	r3, [pc, #456]	; (8005f98 <HAL_ADC_Start_IT+0x250>)
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d002      	beq.n	8005ddc <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005df8:	f023 0206 	bic.w	r2, r3, #6
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	665a      	str	r2, [r3, #100]	; 0x64
 8005e00:	e002      	b.n	8005e08 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	221c      	movs	r2, #28
 8005e0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 021c 	bic.w	r2, r2, #28
 8005e26:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d108      	bne.n	8005e42 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	605a      	str	r2, [r3, #4]
          break;
 8005e40:	e008      	b.n	8005e54 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0204 	orr.w	r2, r2, #4
 8005e50:	605a      	str	r2, [r3, #4]
          break;
 8005e52:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d107      	bne.n	8005e6c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0210 	orr.w	r2, r2, #16
 8005e6a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a4a      	ldr	r2, [pc, #296]	; (8005f9c <HAL_ADC_Start_IT+0x254>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d002      	beq.n	8005e7c <HAL_ADC_Start_IT+0x134>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	e000      	b.n	8005e7e <HAL_ADC_Start_IT+0x136>
 8005e7c:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <HAL_ADC_Start_IT+0x250>)
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d008      	beq.n	8005e98 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d002      	beq.n	8005e98 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d13b      	bne.n	8005f10 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02d      	beq.n	8005f02 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d110      	bne.n	8005ee0 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0220 	bic.w	r2, r2, #32
 8005ecc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005edc:	605a      	str	r2, [r3, #4]
              break;
 8005ede:	e011      	b.n	8005f04 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0220 	orr.w	r2, r2, #32
 8005efe:	605a      	str	r2, [r3, #4]
              break;
 8005f00:	e000      	b.n	8005f04 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8005f02:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff fcdb 	bl	80058c4 <LL_ADC_REG_StartConversion>
 8005f0e:	e056      	b.n	8005fbe <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_ADC_Start_IT+0x254>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d002      	beq.n	8005f2c <HAL_ADC_Start_IT+0x1e4>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	e000      	b.n	8005f2e <HAL_ADC_Start_IT+0x1e6>
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <HAL_ADC_Start_IT+0x250>)
 8005f2e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d03f      	beq.n	8005fbc <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d110      	bne.n	8005f76 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0220 	bic.w	r2, r2, #32
 8005f62:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f72:	605a      	str	r2, [r3, #4]
              break;
 8005f74:	e023      	b.n	8005fbe <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0220 	orr.w	r2, r2, #32
 8005f94:	605a      	str	r2, [r3, #4]
              break;
 8005f96:	e012      	b.n	8005fbe <HAL_ADC_Start_IT+0x276>
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	40022100 	.word	0x40022100
 8005fa0:	40022300 	.word	0x40022300
 8005fa4:	58026300 	.word	0x58026300
 8005fa8:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005fb4:	e003      	b.n	8005fbe <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	75fb      	strb	r3, [r7, #23]
 8005fba:	e000      	b.n	8005fbe <HAL_ADC_Start_IT+0x276>
        }
 8005fbc:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a87      	ldr	r2, [pc, #540]	; (8006224 <HAL_ADC_IRQHandler+0x240>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d004      	beq.n	8006014 <HAL_ADC_IRQHandler+0x30>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a86      	ldr	r2, [pc, #536]	; (8006228 <HAL_ADC_IRQHandler+0x244>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d101      	bne.n	8006018 <HAL_ADC_IRQHandler+0x34>
 8006014:	4b85      	ldr	r3, [pc, #532]	; (800622c <HAL_ADC_IRQHandler+0x248>)
 8006016:	e000      	b.n	800601a <HAL_ADC_IRQHandler+0x36>
 8006018:	4b85      	ldr	r3, [pc, #532]	; (8006230 <HAL_ADC_IRQHandler+0x24c>)
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fb9a 	bl	8005754 <LL_ADC_GetMultimode>
 8006020:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d017      	beq.n	800605c <HAL_ADC_IRQHandler+0x78>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d012      	beq.n	800605c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006046:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f9fe 	bl	8007450 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2202      	movs	r2, #2
 800605a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <HAL_ADC_IRQHandler+0x8c>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8083 	beq.w	8006182 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d07d      	beq.n	8006182 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fa98 	bl	80055d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d062      	beq.n	8006174 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a5d      	ldr	r2, [pc, #372]	; (8006228 <HAL_ADC_IRQHandler+0x244>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d002      	beq.n	80060be <HAL_ADC_IRQHandler+0xda>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	e000      	b.n	80060c0 <HAL_ADC_IRQHandler+0xdc>
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_ADC_IRQHandler+0x240>)
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d008      	beq.n	80060da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d002      	beq.n	80060da <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d104      	bne.n	80060e4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	e00c      	b.n	80060fe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a4f      	ldr	r2, [pc, #316]	; (8006228 <HAL_ADC_IRQHandler+0x244>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d002      	beq.n	80060f4 <HAL_ADC_IRQHandler+0x110>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	e000      	b.n	80060f6 <HAL_ADC_IRQHandler+0x112>
 80060f4:	4b4b      	ldr	r3, [pc, #300]	; (8006224 <HAL_ADC_IRQHandler+0x240>)
 80060f6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d135      	bne.n	8006174 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b08      	cmp	r3, #8
 8006114:	d12e      	bne.n	8006174 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fbe6 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11a      	bne.n	800615c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 020c 	bic.w	r2, r2, #12
 8006134:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d112      	bne.n	8006174 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006152:	f043 0201 	orr.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	661a      	str	r2, [r3, #96]	; 0x60
 800615a:	e00b      	b.n	8006174 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	f043 0210 	orr.w	r2, r3, #16
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fc fbdb 	bl	8002930 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	220c      	movs	r2, #12
 8006180:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_ADC_IRQHandler+0x1b2>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10b      	bne.n	80061ae <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80a0 	beq.w	80062e2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 809a 	beq.w	80062e2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b2:	f003 0310 	and.w	r3, r3, #16
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fa43 	bl	8005656 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80061d0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f9fe 	bl	80055d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80061dc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a11      	ldr	r2, [pc, #68]	; (8006228 <HAL_ADC_IRQHandler+0x244>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d002      	beq.n	80061ee <HAL_ADC_IRQHandler+0x20a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	e000      	b.n	80061f0 <HAL_ADC_IRQHandler+0x20c>
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <HAL_ADC_IRQHandler+0x240>)
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d008      	beq.n	800620a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b06      	cmp	r3, #6
 8006202:	d002      	beq.n	800620a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b07      	cmp	r3, #7
 8006208:	d104      	bne.n	8006214 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	e014      	b.n	800623e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_ADC_IRQHandler+0x244>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00a      	beq.n	8006234 <HAL_ADC_IRQHandler+0x250>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	e008      	b.n	8006236 <HAL_ADC_IRQHandler+0x252>
 8006224:	40022000 	.word	0x40022000
 8006228:	40022100 	.word	0x40022100
 800622c:	40022300 	.word	0x40022300
 8006230:	58026300 	.word	0x58026300
 8006234:	4b84      	ldr	r3, [pc, #528]	; (8006448 <HAL_ADC_IRQHandler+0x464>)
 8006236:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d047      	beq.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <HAL_ADC_IRQHandler+0x27a>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d03f      	beq.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800625a:	2b00      	cmp	r3, #0
 800625c:	d13a      	bne.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d133      	bne.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d12e      	bne.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fb49 	bl	8005912 <LL_ADC_INJ_IsConversionOngoing>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d11a      	bne.n	80062bc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006294:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d112      	bne.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b2:	f043 0201 	orr.w	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	661a      	str	r2, [r3, #96]	; 0x60
 80062ba:	e00b      	b.n	80062d4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	f043 0210 	orr.w	r2, r3, #16
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062cc:	f043 0201 	orr.w	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f893 	bl	8007400 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2260      	movs	r2, #96	; 0x60
 80062e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d011      	beq.n	8006310 <HAL_ADC_IRQHandler+0x32c>
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00c      	beq.n	8006310 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f8a8 	bl	8006458 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2280      	movs	r2, #128	; 0x80
 800630e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d012      	beq.n	8006340 <HAL_ADC_IRQHandler+0x35c>
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006328:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 f879 	bl	8007428 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800633e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <HAL_ADC_IRQHandler+0x38c>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006358:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f86b 	bl	800743c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	d043      	beq.n	8006402 <HAL_ADC_IRQHandler+0x41e>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d03e      	beq.n	8006402 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800638c:	2301      	movs	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
 8006390:	e021      	b.n	80063d6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d015      	beq.n	80063c4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <HAL_ADC_IRQHandler+0x464>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_ADC_IRQHandler+0x3c8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a29      	ldr	r2, [pc, #164]	; (800644c <HAL_ADC_IRQHandler+0x468>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d101      	bne.n	80063b0 <HAL_ADC_IRQHandler+0x3cc>
 80063ac:	4b28      	ldr	r3, [pc, #160]	; (8006450 <HAL_ADC_IRQHandler+0x46c>)
 80063ae:	e000      	b.n	80063b2 <HAL_ADC_IRQHandler+0x3ce>
 80063b0:	4b28      	ldr	r3, [pc, #160]	; (8006454 <HAL_ADC_IRQHandler+0x470>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff f9dc 	bl	8005770 <LL_ADC_GetMultiDMATransfer>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80063be:	2301      	movs	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	e008      	b.n	80063d6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80063d2:	2301      	movs	r3, #1
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d10e      	bne.n	80063fa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ec:	f043 0202 	orr.w	r2, r3, #2
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f839 	bl	800646c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	2b00      	cmp	r3, #0
 800640a:	d018      	beq.n	800643e <HAL_ADC_IRQHandler+0x45a>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	2b00      	cmp	r3, #0
 8006414:	d013      	beq.n	800643e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006426:	f043 0208 	orr.w	r2, r3, #8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006436:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ffeb 	bl	8007414 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800643e:	bf00      	nop
 8006440:	3728      	adds	r7, #40	; 0x28
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40022000 	.word	0x40022000
 800644c:	40022100 	.word	0x40022100
 8006450:	40022300 	.word	0x40022300
 8006454:	58026300 	.word	0x58026300

08006458 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b0b9      	sub	sp, #228	; 0xe4
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4aa9      	ldr	r2, [pc, #676]	; (8006748 <HAL_ADC_ConfigChannel+0x2c8>)
 80064a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d102      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x34>
 80064ae:	2302      	movs	r3, #2
 80064b0:	f000 bcfa 	b.w	8006ea8 <HAL_ADC_ConfigChannel+0xa28>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fa13 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 84de 	bne.w	8006e8a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a9e      	ldr	r2, [pc, #632]	; (800674c <HAL_ADC_ConfigChannel+0x2cc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d033      	beq.n	8006540 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x76>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	0e9b      	lsrs	r3, r3, #26
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2201      	movs	r2, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	e01d      	b.n	8006532 <HAL_ADC_ConfigChannel+0xb2>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006502:	fa93 f3a3 	rbit	r3, r3
 8006506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800650a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800650e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800651a:	2320      	movs	r3, #32
 800651c:	e004      	b.n	8006528 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800651e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2201      	movs	r2, #1
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	69d1      	ldr	r1, [r2, #28]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	430b      	orrs	r3, r1
 800653e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	f7ff f856 	bl	80055fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff f9c8 	bl	80058ec <LL_ADC_REG_IsConversionOngoing>
 800655c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff f9d4 	bl	8005912 <LL_ADC_INJ_IsConversionOngoing>
 800656a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800656e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 8270 	bne.w	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 826b 	bne.w	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	461a      	mov	r2, r3
 8006590:	f7ff f874 	bl	800567c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6c      	ldr	r2, [pc, #432]	; (800674c <HAL_ADC_ConfigChannel+0x2cc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10d      	bne.n	80065ba <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065b8:	e032      	b.n	8006620 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80065ba:	4b65      	ldr	r3, [pc, #404]	; (8006750 <HAL_ADC_ConfigChannel+0x2d0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80065c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c6:	d10b      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x160>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	e01d      	b.n	800661c <HAL_ADC_ConfigChannel+0x19c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x186>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695a      	ldr	r2, [r3, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	e00a      	b.n	800661c <HAL_ADC_ConfigChannel+0x19c>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b04      	cmp	r3, #4
 8006626:	d048      	beq.n	80066ba <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	6919      	ldr	r1, [r3, #16]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006638:	f7fe fedc 	bl	80053f4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a42      	ldr	r2, [pc, #264]	; (800674c <HAL_ADC_ConfigChannel+0x2cc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d119      	bne.n	800667a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6919      	ldr	r1, [r3, #16]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	461a      	mov	r2, r3
 8006654:	f7fe ff74 	bl	8005540 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6919      	ldr	r1, [r3, #16]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d102      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x1f0>
 800666a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800666e:	e000      	b.n	8006672 <HAL_ADC_ConfigChannel+0x1f2>
 8006670:	2300      	movs	r3, #0
 8006672:	461a      	mov	r2, r3
 8006674:	f7fe ff42 	bl	80054fc <LL_ADC_SetOffsetSaturation>
 8006678:	e1ee      	b.n	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6919      	ldr	r1, [r3, #16]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006688:	2b01      	cmp	r3, #1
 800668a:	d102      	bne.n	8006692 <HAL_ADC_ConfigChannel+0x212>
 800668c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006690:	e000      	b.n	8006694 <HAL_ADC_ConfigChannel+0x214>
 8006692:	2300      	movs	r3, #0
 8006694:	461a      	mov	r2, r3
 8006696:	f7fe ff0f 	bl	80054b8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6919      	ldr	r1, [r3, #16]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	7e1b      	ldrb	r3, [r3, #24]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d102      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x230>
 80066aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066ae:	e000      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x232>
 80066b0:	2300      	movs	r3, #0
 80066b2:	461a      	mov	r2, r3
 80066b4:	f7fe fee6 	bl	8005484 <LL_ADC_SetDataRightShift>
 80066b8:	e1ce      	b.n	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a23      	ldr	r2, [pc, #140]	; (800674c <HAL_ADC_ConfigChannel+0x2cc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	f040 8181 	bne.w	80069c8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe fec3 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <HAL_ADC_ConfigChannel+0x272>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe feb8 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80066e8:	4603      	mov	r3, r0
 80066ea:	0e9b      	lsrs	r3, r3, #26
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	e01e      	b.n	8006730 <HAL_ADC_ConfigChannel+0x2b0>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fead 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80066fe:	4603      	mov	r3, r0
 8006700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006708:	fa93 f3a3 	rbit	r3, r3
 800670c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8006710:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8006718:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8006720:	2320      	movs	r3, #32
 8006722:	e004      	b.n	800672e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8006724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006728:	fab3 f383 	clz	r3, r3
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10b      	bne.n	8006754 <HAL_ADC_ConfigChannel+0x2d4>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	0e9b      	lsrs	r3, r3, #26
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	e01e      	b.n	8006786 <HAL_ADC_ConfigChannel+0x306>
 8006748:	47ff0000 	.word	0x47ff0000
 800674c:	58026000 	.word	0x58026000
 8006750:	5c001000 	.word	0x5c001000
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006760:	fa93 f3a3 	rbit	r3, r3
 8006764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800676c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8006778:	2320      	movs	r3, #32
 800677a:	e004      	b.n	8006786 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800677c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	429a      	cmp	r2, r3
 8006788:	d106      	bne.n	8006798 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fef6 	bl	8005584 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe fe5a 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x344>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2101      	movs	r1, #1
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe fe4f 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80067ba:	4603      	mov	r3, r0
 80067bc:	0e9b      	lsrs	r3, r3, #26
 80067be:	f003 021f 	and.w	r2, r3, #31
 80067c2:	e01e      	b.n	8006802 <HAL_ADC_ConfigChannel+0x382>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fe44 	bl	8005458 <LL_ADC_GetOffsetChannel>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067da:	fa93 f3a3 	rbit	r3, r3
 80067de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80067e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80067ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80067f2:	2320      	movs	r3, #32
 80067f4:	e004      	b.n	8006800 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80067f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067fa:	fab3 f383 	clz	r3, r3
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <HAL_ADC_ConfigChannel+0x39a>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	0e9b      	lsrs	r3, r3, #26
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	e018      	b.n	800684c <HAL_ADC_ConfigChannel+0x3cc>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006826:	fa93 f3a3 	rbit	r3, r3
 800682a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800682e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006836:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800683e:	2320      	movs	r3, #32
 8006840:	e004      	b.n	800684c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8006842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006846:	fab3 f383 	clz	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	429a      	cmp	r2, r3
 800684e:	d106      	bne.n	800685e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2200      	movs	r2, #0
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fe93 	bl	8005584 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2102      	movs	r1, #2
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fdf7 	bl	8005458 <LL_ADC_GetOffsetChannel>
 800686a:	4603      	mov	r3, r0
 800686c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <HAL_ADC_ConfigChannel+0x40a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fdec 	bl	8005458 <LL_ADC_GetOffsetChannel>
 8006880:	4603      	mov	r3, r0
 8006882:	0e9b      	lsrs	r3, r3, #26
 8006884:	f003 021f 	and.w	r2, r3, #31
 8006888:	e01e      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x448>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2102      	movs	r1, #2
 8006890:	4618      	mov	r0, r3
 8006892:	f7fe fde1 	bl	8005458 <LL_ADC_GetOffsetChannel>
 8006896:	4603      	mov	r3, r0
 8006898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068a0:	fa93 f3a3 	rbit	r3, r3
 80068a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80068a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80068b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80068b8:	2320      	movs	r3, #32
 80068ba:	e004      	b.n	80068c6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80068bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c0:	fab3 f383 	clz	r3, r3
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x460>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	0e9b      	lsrs	r3, r3, #26
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	e014      	b.n	800690a <HAL_ADC_ConfigChannel+0x48a>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068e8:	fa93 f3a3 	rbit	r3, r3
 80068ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80068ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80068f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80068fc:	2320      	movs	r3, #32
 80068fe:	e004      	b.n	800690a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8006900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006904:	fab3 f383 	clz	r3, r3
 8006908:	b2db      	uxtb	r3, r3
 800690a:	429a      	cmp	r2, r3
 800690c:	d106      	bne.n	800691c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fe34 	bl	8005584 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2103      	movs	r1, #3
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fd98 	bl	8005458 <LL_ADC_GetOffsetChannel>
 8006928:	4603      	mov	r3, r0
 800692a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <HAL_ADC_ConfigChannel+0x4c8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2103      	movs	r1, #3
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fd8d 	bl	8005458 <LL_ADC_GetOffsetChannel>
 800693e:	4603      	mov	r3, r0
 8006940:	0e9b      	lsrs	r3, r3, #26
 8006942:	f003 021f 	and.w	r2, r3, #31
 8006946:	e017      	b.n	8006978 <HAL_ADC_ConfigChannel+0x4f8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2103      	movs	r1, #3
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fd82 	bl	8005458 <LL_ADC_GetOffsetChannel>
 8006954:	4603      	mov	r3, r0
 8006956:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695a:	fa93 f3a3 	rbit	r3, r3
 800695e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006962:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800696a:	2320      	movs	r3, #32
 800696c:	e003      	b.n	8006976 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800696e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006970:	fab3 f383 	clz	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x510>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	0e9b      	lsrs	r3, r3, #26
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	e011      	b.n	80069b4 <HAL_ADC_ConfigChannel+0x534>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006998:	fa93 f3a3 	rbit	r3, r3
 800699c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800699e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80069a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80069a8:	2320      	movs	r3, #32
 80069aa:	e003      	b.n	80069b4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80069ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ae:	fab3 f383 	clz	r3, r3
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d14f      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2200      	movs	r2, #0
 80069be:	2103      	movs	r1, #3
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe fddf 	bl	8005584 <LL_ADC_SetOffsetState>
 80069c6:	e047      	b.n	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	069b      	lsls	r3, r3, #26
 80069d8:	429a      	cmp	r2, r3
 80069da:	d107      	bne.n	80069ec <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	069b      	lsls	r3, r3, #26
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d107      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a0e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	069b      	lsls	r3, r3, #26
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d107      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a32:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	069b      	lsls	r3, r3, #26
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d107      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a56:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe ff0b 	bl	8005878 <LL_ADC_IsEnabled>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 8219 	bne.w	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f7fe fe2c 	bl	80056d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	4aa1      	ldr	r2, [pc, #644]	; (8006d08 <HAL_ADC_ConfigChannel+0x888>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	f040 812e 	bne.w	8006ce4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x630>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	0e9b      	lsrs	r3, r3, #26
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2b09      	cmp	r3, #9
 8006aa6:	bf94      	ite	ls
 8006aa8:	2301      	movls	r3, #1
 8006aaa:	2300      	movhi	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	e019      	b.n	8006ae4 <HAL_ADC_ConfigChannel+0x664>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab8:	fa93 f3a3 	rbit	r3, r3
 8006abc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8006ac8:	2320      	movs	r3, #32
 8006aca:	e003      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8006acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ace:	fab3 f383 	clz	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	bf94      	ite	ls
 8006ade:	2301      	movls	r3, #1
 8006ae0:	2300      	movhi	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d079      	beq.n	8006bdc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d107      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x684>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	0e9b      	lsrs	r3, r3, #26
 8006afa:	3301      	adds	r3, #1
 8006afc:	069b      	lsls	r3, r3, #26
 8006afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b02:	e015      	b.n	8006b30 <HAL_ADC_ConfigChannel+0x6b0>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0c:	fa93 f3a3 	rbit	r3, r3
 8006b10:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b14:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	e003      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8006b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3301      	adds	r3, #1
 8006b2a:	069b      	lsls	r3, r3, #26
 8006b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <HAL_ADC_ConfigChannel+0x6d0>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	0e9b      	lsrs	r3, r3, #26
 8006b42:	3301      	adds	r3, #1
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2101      	movs	r1, #1
 8006b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4e:	e017      	b.n	8006b80 <HAL_ADC_ConfigChannel+0x700>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b58:	fa93 f3a3 	rbit	r3, r3
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8006b68:	2320      	movs	r3, #32
 8006b6a:	e003      	b.n	8006b74 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	fab3 f383 	clz	r3, r3
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3301      	adds	r3, #1
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	ea42 0103 	orr.w	r1, r2, r3
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <HAL_ADC_ConfigChannel+0x726>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0e9b      	lsrs	r3, r3, #26
 8006b96:	3301      	adds	r3, #1
 8006b98:	f003 021f 	and.w	r2, r3, #31
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4413      	add	r3, r2
 8006ba2:	051b      	lsls	r3, r3, #20
 8006ba4:	e018      	b.n	8006bd8 <HAL_ADC_ConfigChannel+0x758>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	fa93 f3a3 	rbit	r3, r3
 8006bb2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8006bbe:	2320      	movs	r3, #32
 8006bc0:	e003      	b.n	8006bca <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	fab3 f383 	clz	r3, r3
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f003 021f 	and.w	r2, r3, #31
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4413      	add	r3, r2
 8006bd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	e07e      	b.n	8006cda <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <HAL_ADC_ConfigChannel+0x778>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	0e9b      	lsrs	r3, r3, #26
 8006bee:	3301      	adds	r3, #1
 8006bf0:	069b      	lsls	r3, r3, #26
 8006bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bf6:	e015      	b.n	8006c24 <HAL_ADC_ConfigChannel+0x7a4>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	fa93 f3a3 	rbit	r3, r3
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8006c10:	2320      	movs	r3, #32
 8006c12:	e003      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	fab3 f383 	clz	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	069b      	lsls	r3, r3, #26
 8006c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_ADC_ConfigChannel+0x7c4>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	0e9b      	lsrs	r3, r3, #26
 8006c36:	3301      	adds	r3, #1
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c42:	e017      	b.n	8006c74 <HAL_ADC_ConfigChannel+0x7f4>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	fa93 f3a3 	rbit	r3, r3
 8006c50:	61bb      	str	r3, [r7, #24]
  return result;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	e003      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	fab3 f383 	clz	r3, r3
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2101      	movs	r1, #1
 8006c70:	fa01 f303 	lsl.w	r3, r1, r3
 8006c74:	ea42 0103 	orr.w	r1, r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <HAL_ADC_ConfigChannel+0x820>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	0e9b      	lsrs	r3, r3, #26
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f003 021f 	and.w	r2, r3, #31
 8006c90:	4613      	mov	r3, r2
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	4413      	add	r3, r2
 8006c96:	3b1e      	subs	r3, #30
 8006c98:	051b      	lsls	r3, r3, #20
 8006c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c9e:	e01b      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x858>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	fa93 f3a3 	rbit	r3, r3
 8006cac:	60fb      	str	r3, [r7, #12]
  return result;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8006cb8:	2320      	movs	r3, #32
 8006cba:	e003      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	fab3 f383 	clz	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	f003 021f 	and.w	r2, r3, #31
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	3b1e      	subs	r3, #30
 8006cd2:	051b      	lsls	r3, r3, #20
 8006cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	6892      	ldr	r2, [r2, #8]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f7fe fccc 	bl	800567c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f280 80d7 	bge.w	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a06      	ldr	r2, [pc, #24]	; (8006d0c <HAL_ADC_ConfigChannel+0x88c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_ADC_ConfigChannel+0x882>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a04      	ldr	r2, [pc, #16]	; (8006d10 <HAL_ADC_ConfigChannel+0x890>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d10a      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x898>
 8006d02:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <HAL_ADC_ConfigChannel+0x894>)
 8006d04:	e009      	b.n	8006d1a <HAL_ADC_ConfigChannel+0x89a>
 8006d06:	bf00      	nop
 8006d08:	47ff0000 	.word	0x47ff0000
 8006d0c:	40022000 	.word	0x40022000
 8006d10:	40022100 	.word	0x40022100
 8006d14:	40022300 	.word	0x40022300
 8006d18:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <HAL_ADC_ConfigChannel+0xa30>)
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fb5c 	bl	80053d8 <LL_ADC_GetCommonPathInternalCh>
 8006d20:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a62      	ldr	r2, [pc, #392]	; (8006eb4 <HAL_ADC_ConfigChannel+0xa34>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_ADC_ConfigChannel+0x8b8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a61      	ldr	r2, [pc, #388]	; (8006eb8 <HAL_ADC_ConfigChannel+0xa38>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10e      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x8d6>
 8006d38:	485e      	ldr	r0, [pc, #376]	; (8006eb4 <HAL_ADC_ConfigChannel+0xa34>)
 8006d3a:	f7fe fd9d 	bl	8005878 <LL_ADC_IsEnabled>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	485d      	ldr	r0, [pc, #372]	; (8006eb8 <HAL_ADC_ConfigChannel+0xa38>)
 8006d42:	f7fe fd99 	bl	8005878 <LL_ADC_IsEnabled>
 8006d46:	4603      	mov	r3, r0
 8006d48:	4323      	orrs	r3, r4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e008      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x8e8>
 8006d56:	4859      	ldr	r0, [pc, #356]	; (8006ebc <HAL_ADC_ConfigChannel+0xa3c>)
 8006d58:	f7fe fd8e 	bl	8005878 <LL_ADC_IsEnabled>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bf0c      	ite	eq
 8006d62:	2301      	moveq	r3, #1
 8006d64:	2300      	movne	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8084 	beq.w	8006e76 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a53      	ldr	r2, [pc, #332]	; (8006ec0 <HAL_ADC_ConfigChannel+0xa40>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d132      	bne.n	8006dde <HAL_ADC_ConfigChannel+0x95e>
 8006d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d12c      	bne.n	8006dde <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a4c      	ldr	r2, [pc, #304]	; (8006ebc <HAL_ADC_ConfigChannel+0xa3c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f040 8086 	bne.w	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a47      	ldr	r2, [pc, #284]	; (8006eb4 <HAL_ADC_ConfigChannel+0xa34>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_ADC_ConfigChannel+0x924>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a46      	ldr	r2, [pc, #280]	; (8006eb8 <HAL_ADC_ConfigChannel+0xa38>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <HAL_ADC_ConfigChannel+0x928>
 8006da4:	4a47      	ldr	r2, [pc, #284]	; (8006ec4 <HAL_ADC_ConfigChannel+0xa44>)
 8006da6:	e000      	b.n	8006daa <HAL_ADC_ConfigChannel+0x92a>
 8006da8:	4a41      	ldr	r2, [pc, #260]	; (8006eb0 <HAL_ADC_ConfigChannel+0xa30>)
 8006daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f7fe fafc 	bl	80053b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006dba:	4b43      	ldr	r3, [pc, #268]	; (8006ec8 <HAL_ADC_ConfigChannel+0xa48>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	099b      	lsrs	r3, r3, #6
 8006dc0:	4a42      	ldr	r2, [pc, #264]	; (8006ecc <HAL_ADC_ConfigChannel+0xa4c>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	099b      	lsrs	r3, r3, #6
 8006dc8:	3301      	adds	r3, #1
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006dce:	e002      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f9      	bne.n	8006dd0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ddc:	e05e      	b.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	; (8006ed0 <HAL_ADC_ConfigChannel+0xa50>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d120      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x9aa>
 8006de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11a      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <HAL_ADC_ConfigChannel+0xa3c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d14e      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <HAL_ADC_ConfigChannel+0xa34>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_ADC_ConfigChannel+0x992>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <HAL_ADC_ConfigChannel+0xa38>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d101      	bne.n	8006e16 <HAL_ADC_ConfigChannel+0x996>
 8006e12:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <HAL_ADC_ConfigChannel+0xa44>)
 8006e14:	e000      	b.n	8006e18 <HAL_ADC_ConfigChannel+0x998>
 8006e16:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <HAL_ADC_ConfigChannel+0xa30>)
 8006e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fac5 	bl	80053b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e28:	e038      	b.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <HAL_ADC_ConfigChannel+0xa54>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d133      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
 8006e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d12d      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	; (8006ebc <HAL_ADC_ConfigChannel+0xa3c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d128      	bne.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a19      	ldr	r2, [pc, #100]	; (8006eb4 <HAL_ADC_ConfigChannel+0xa34>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_ADC_ConfigChannel+0x9de>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <HAL_ADC_ConfigChannel+0xa38>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_ADC_ConfigChannel+0x9e2>
 8006e5e:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <HAL_ADC_ConfigChannel+0xa44>)
 8006e60:	e000      	b.n	8006e64 <HAL_ADC_ConfigChannel+0x9e4>
 8006e62:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <HAL_ADC_ConfigChannel+0xa30>)
 8006e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4610      	mov	r0, r2
 8006e70:	f7fe fa9f 	bl	80053b2 <LL_ADC_SetCommonPathInternalCh>
 8006e74:	e012      	b.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7a:	f043 0220 	orr.w	r2, r3, #32
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006e88:	e008      	b.n	8006e9c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006ea4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	37e4      	adds	r7, #228	; 0xe4
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}
 8006eb0:	58026300 	.word	0x58026300
 8006eb4:	40022000 	.word	0x40022000
 8006eb8:	40022100 	.word	0x40022100
 8006ebc:	58026000 	.word	0x58026000
 8006ec0:	c7520000 	.word	0xc7520000
 8006ec4:	40022300 	.word	0x40022300
 8006ec8:	20000004 	.word	0x20000004
 8006ecc:	053e2d63 	.word	0x053e2d63
 8006ed0:	c3210000 	.word	0xc3210000
 8006ed4:	cb840000 	.word	0xcb840000

08006ed8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fcc7 	bl	8005878 <LL_ADC_IsEnabled>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d16e      	bne.n	8006fce <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	4b38      	ldr	r3, [pc, #224]	; (8006fd8 <ADC_Enable+0x100>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	f043 0210 	orr.w	r2, r3, #16
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0e:	f043 0201 	orr.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e05a      	b.n	8006fd0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fc82 	bl	8005828 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006f24:	f7fe fa02 	bl	800532c <HAL_GetTick>
 8006f28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <ADC_Enable+0x104>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d004      	beq.n	8006f3e <ADC_Enable+0x66>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a29      	ldr	r2, [pc, #164]	; (8006fe0 <ADC_Enable+0x108>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <ADC_Enable+0x6a>
 8006f3e:	4b29      	ldr	r3, [pc, #164]	; (8006fe4 <ADC_Enable+0x10c>)
 8006f40:	e000      	b.n	8006f44 <ADC_Enable+0x6c>
 8006f42:	4b29      	ldr	r3, [pc, #164]	; (8006fe8 <ADC_Enable+0x110>)
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fc05 	bl	8005754 <LL_ADC_GetMultimode>
 8006f4a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <ADC_Enable+0x108>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d002      	beq.n	8006f5c <ADC_Enable+0x84>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	e000      	b.n	8006f5e <ADC_Enable+0x86>
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <ADC_Enable+0x104>)
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6812      	ldr	r2, [r2, #0]
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d130      	bne.n	8006fce <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f6c:	e028      	b.n	8006fc0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fc80 	bl	8005878 <LL_ADC_IsEnabled>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fc50 	bl	8005828 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f88:	f7fe f9d0 	bl	800532c <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d914      	bls.n	8006fc0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d00d      	beq.n	8006fc0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	f043 0210 	orr.w	r2, r3, #16
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb4:	f043 0201 	orr.w	r2, r3, #1
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e007      	b.n	8006fd0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d1cf      	bne.n	8006f6e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	8000003f 	.word	0x8000003f
 8006fdc:	40022000 	.word	0x40022000
 8006fe0:	40022100 	.word	0x40022100
 8006fe4:	40022300 	.word	0x40022300
 8006fe8:	58026300 	.word	0x58026300

08006fec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe fc50 	bl	800589e <LL_ADC_IsDisableOngoing>
 8006ffe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fc37 	bl	8005878 <LL_ADC_IsEnabled>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d047      	beq.n	80070a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d144      	bne.n	80070a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 030d 	and.w	r3, r3, #13
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10c      	bne.n	800703e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fc11 	bl	8005850 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2203      	movs	r2, #3
 8007034:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007036:	f7fe f979 	bl	800532c <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800703c:	e029      	b.n	8007092 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007042:	f043 0210 	orr.w	r2, r3, #16
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e023      	b.n	80070a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800705a:	f7fe f967 	bl	800532c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d914      	bls.n	8007092 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00d      	beq.n	8007092 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707a:	f043 0210 	orr.w	r2, r3, #16
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007086:	f043 0201 	orr.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e007      	b.n	80070a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1dc      	bne.n	800705a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a6b      	ldr	r2, [pc, #428]	; (8007268 <ADC_ConfigureBoostMode+0x1bc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d004      	beq.n	80070c8 <ADC_ConfigureBoostMode+0x1c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a6a      	ldr	r2, [pc, #424]	; (800726c <ADC_ConfigureBoostMode+0x1c0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d109      	bne.n	80070dc <ADC_ConfigureBoostMode+0x30>
 80070c8:	4b69      	ldr	r3, [pc, #420]	; (8007270 <ADC_ConfigureBoostMode+0x1c4>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf14      	ite	ne
 80070d4:	2301      	movne	r3, #1
 80070d6:	2300      	moveq	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e008      	b.n	80070ee <ADC_ConfigureBoostMode+0x42>
 80070dc:	4b65      	ldr	r3, [pc, #404]	; (8007274 <ADC_ConfigureBoostMode+0x1c8>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bf14      	ite	ne
 80070e8:	2301      	movne	r3, #1
 80070ea:	2300      	moveq	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01c      	beq.n	800712c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80070f2:	f006 f87b 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 80070f6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007100:	d010      	beq.n	8007124 <ADC_ConfigureBoostMode+0x78>
 8007102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007106:	d871      	bhi.n	80071ec <ADC_ConfigureBoostMode+0x140>
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710c:	d002      	beq.n	8007114 <ADC_ConfigureBoostMode+0x68>
 800710e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007112:	d16b      	bne.n	80071ec <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	60fb      	str	r3, [r7, #12]
        break;
 8007122:	e066      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	089b      	lsrs	r3, r3, #2
 8007128:	60fb      	str	r3, [r7, #12]
        break;
 800712a:	e062      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800712c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007130:	f006 ffb2 	bl	800e098 <HAL_RCCEx_GetPeriphCLKFreq>
 8007134:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800713e:	d051      	beq.n	80071e4 <ADC_ConfigureBoostMode+0x138>
 8007140:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007144:	d854      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 8007146:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800714a:	d047      	beq.n	80071dc <ADC_ConfigureBoostMode+0x130>
 800714c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007150:	d84e      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 8007152:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007156:	d03d      	beq.n	80071d4 <ADC_ConfigureBoostMode+0x128>
 8007158:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800715c:	d848      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007162:	d033      	beq.n	80071cc <ADC_ConfigureBoostMode+0x120>
 8007164:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007168:	d842      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 800716a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800716e:	d029      	beq.n	80071c4 <ADC_ConfigureBoostMode+0x118>
 8007170:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007174:	d83c      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 8007176:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800717a:	d01a      	beq.n	80071b2 <ADC_ConfigureBoostMode+0x106>
 800717c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007180:	d836      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 8007182:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007186:	d014      	beq.n	80071b2 <ADC_ConfigureBoostMode+0x106>
 8007188:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800718c:	d830      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 800718e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007192:	d00e      	beq.n	80071b2 <ADC_ConfigureBoostMode+0x106>
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007198:	d82a      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 800719a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800719e:	d008      	beq.n	80071b2 <ADC_ConfigureBoostMode+0x106>
 80071a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071a4:	d824      	bhi.n	80071f0 <ADC_ConfigureBoostMode+0x144>
 80071a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071aa:	d002      	beq.n	80071b2 <ADC_ConfigureBoostMode+0x106>
 80071ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071b0:	d11e      	bne.n	80071f0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	0c9b      	lsrs	r3, r3, #18
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c0:	60fb      	str	r3, [r7, #12]
        break;
 80071c2:	e016      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]
        break;
 80071ca:	e012      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	60fb      	str	r3, [r7, #12]
        break;
 80071d2:	e00e      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	60fb      	str	r3, [r7, #12]
        break;
 80071da:	e00a      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	09db      	lsrs	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
        break;
 80071e2:	e006      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	60fb      	str	r3, [r7, #12]
        break;
 80071ea:	e002      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
        break;
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80071f0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	085b      	lsrs	r3, r3, #1
 80071f6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <ADC_ConfigureBoostMode+0x1cc>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d808      	bhi.n	8007212 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800720e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007210:	e025      	b.n	800725e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a19      	ldr	r2, [pc, #100]	; (800727c <ADC_ConfigureBoostMode+0x1d0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d80a      	bhi.n	8007230 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800722c:	609a      	str	r2, [r3, #8]
}
 800722e:	e016      	b.n	800725e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4a13      	ldr	r2, [pc, #76]	; (8007280 <ADC_ConfigureBoostMode+0x1d4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d80a      	bhi.n	800724e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	e007      	b.n	800725e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40022000 	.word	0x40022000
 800726c:	40022100 	.word	0x40022100
 8007270:	40022300 	.word	0x40022300
 8007274:	58026300 	.word	0x58026300
 8007278:	005f5e10 	.word	0x005f5e10
 800727c:	00bebc20 	.word	0x00bebc20
 8007280:	017d7840 	.word	0x017d7840

08007284 <LL_ADC_IsEnabled>:
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <LL_ADC_IsEnabled+0x18>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <LL_ADC_IsEnabled+0x1a>
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <LL_ADC_StartCalibration>:
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <LL_ADC_StartCalibration+0x38>)
 80072be:	4013      	ands	r3, r2
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80072cc:	430a      	orrs	r2, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	609a      	str	r2, [r3, #8]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	3ffeffc0 	.word	0x3ffeffc0

080072e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072fc:	d101      	bne.n	8007302 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_ADC_REG_IsConversionOngoing>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b04      	cmp	r3, #4
 8007322:	d101      	bne.n	8007328 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_ADCEx_Calibration_Start+0x1e>
 8007352:	2302      	movs	r3, #2
 8007354:	e04c      	b.n	80073f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fe44 	bl	8006fec <ADC_Disable>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d135      	bne.n	80073da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007372:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007374:	4013      	ands	r3, r2
 8007376:	f043 0202 	orr.w	r2, r3, #2
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff ff90 	bl	80072ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800738c:	e014      	b.n	80073b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4a19      	ldr	r2, [pc, #100]	; (80073fc <HAL_ADCEx_Calibration_Start+0xc4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d30d      	bcc.n	80073b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a0:	f023 0312 	bic.w	r3, r3, #18
 80073a4:	f043 0210 	orr.w	r2, r3, #16
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e01b      	b.n	80073f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff ff93 	bl	80072e8 <LL_ADC_IsCalibrationOnGoing>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e2      	bne.n	800738e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073cc:	f023 0303 	bic.w	r3, r3, #3
 80073d0:	f043 0201 	orr.w	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	661a      	str	r2, [r3, #96]	; 0x60
 80073d8:	e005      	b.n	80073e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	f043 0210 	orr.w	r2, r3, #16
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	ffffeefd 	.word	0xffffeefd
 80073fc:	25c3f800 	.word	0x25c3f800

08007400 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b0a3      	sub	sp, #140	; 0x8c
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800747e:	2302      	movs	r3, #2
 8007480:	e0c1      	b.n	8007606 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800748a:	2300      	movs	r3, #0
 800748c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800748e:	2300      	movs	r3, #0
 8007490:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a5e      	ldr	r2, [pc, #376]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d102      	bne.n	80074a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800749c:	4b5d      	ldr	r3, [pc, #372]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e001      	b.n	80074a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10b      	bne.n	80074c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b0:	f043 0220 	orr.w	r2, r3, #32
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0a0      	b.n	8007606 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff ff22 	bl	8007310 <LL_ADC_REG_IsConversionOngoing>
 80074cc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff1b 	bl	8007310 <LL_ADC_REG_IsConversionOngoing>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 8081 	bne.w	80075e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80074e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d17c      	bne.n	80075e4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a48      	ldr	r2, [pc, #288]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a46      	ldr	r2, [pc, #280]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d101      	bne.n	8007502 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80074fe:	4b46      	ldr	r3, [pc, #280]	; (8007618 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007500:	e000      	b.n	8007504 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007502:	4b46      	ldr	r3, [pc, #280]	; (800761c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007504:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d039      	beq.n	8007582 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800750e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	431a      	orrs	r2, r3
 800751c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3a      	ldr	r2, [pc, #232]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a39      	ldr	r2, [pc, #228]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d10e      	bne.n	8007552 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007534:	4836      	ldr	r0, [pc, #216]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007536:	f7ff fea5 	bl	8007284 <LL_ADC_IsEnabled>
 800753a:	4604      	mov	r4, r0
 800753c:	4835      	ldr	r0, [pc, #212]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800753e:	f7ff fea1 	bl	8007284 <LL_ADC_IsEnabled>
 8007542:	4603      	mov	r3, r0
 8007544:	4323      	orrs	r3, r4
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	e008      	b.n	8007564 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007552:	4833      	ldr	r0, [pc, #204]	; (8007620 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007554:	f7ff fe96 	bl	8007284 <LL_ADC_IsEnabled>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d047      	beq.n	80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	4b2d      	ldr	r3, [pc, #180]	; (8007624 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800756e:	4013      	ands	r3, r2
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	6811      	ldr	r1, [r2, #0]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	6892      	ldr	r2, [r2, #8]
 8007578:	430a      	orrs	r2, r1
 800757a:	431a      	orrs	r2, r3
 800757c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800757e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007580:	e03a      	b.n	80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800758a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800758c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1f      	ldr	r2, [pc, #124]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10e      	bne.n	80075c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80075a2:	481b      	ldr	r0, [pc, #108]	; (8007610 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80075a4:	f7ff fe6e 	bl	8007284 <LL_ADC_IsEnabled>
 80075a8:	4604      	mov	r4, r0
 80075aa:	481a      	ldr	r0, [pc, #104]	; (8007614 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80075ac:	f7ff fe6a 	bl	8007284 <LL_ADC_IsEnabled>
 80075b0:	4603      	mov	r3, r0
 80075b2:	4323      	orrs	r3, r4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e008      	b.n	80075d2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80075c0:	4817      	ldr	r0, [pc, #92]	; (8007620 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80075c2:	f7ff fe5f 	bl	8007284 <LL_ADC_IsEnabled>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf0c      	ite	eq
 80075cc:	2301      	moveq	r3, #1
 80075ce:	2300      	movne	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80075d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	4b12      	ldr	r3, [pc, #72]	; (8007624 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80075dc:	4013      	ands	r3, r2
 80075de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80075e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075e2:	e009      	b.n	80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80075f6:	e000      	b.n	80075fa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007602:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007606:	4618      	mov	r0, r3
 8007608:	378c      	adds	r7, #140	; 0x8c
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}
 800760e:	bf00      	nop
 8007610:	40022000 	.word	0x40022000
 8007614:	40022100 	.word	0x40022100
 8007618:	40022300 	.word	0x40022300
 800761c:	58026300 	.word	0x58026300
 8007620:	58026000 	.word	0x58026000
 8007624:	fffff0e0 	.word	0xfffff0e0

08007628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <__NVIC_SetPriorityGrouping+0x40>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007644:	4013      	ands	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <__NVIC_SetPriorityGrouping+0x44>)
 8007652:	4313      	orrs	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007656:	4a04      	ldr	r2, [pc, #16]	; (8007668 <__NVIC_SetPriorityGrouping+0x40>)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	60d3      	str	r3, [r2, #12]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	e000ed00 	.word	0xe000ed00
 800766c:	05fa0000 	.word	0x05fa0000

08007670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <__NVIC_GetPriorityGrouping+0x18>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	0a1b      	lsrs	r3, r3, #8
 800767a:	f003 0307 	and.w	r3, r3, #7
}
 800767e:	4618      	mov	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	e000ed00 	.word	0xe000ed00

0800768c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800769a:	2b00      	cmp	r3, #0
 800769c:	db0b      	blt.n	80076b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	f003 021f 	and.w	r2, r3, #31
 80076a4:	4907      	ldr	r1, [pc, #28]	; (80076c4 <__NVIC_EnableIRQ+0x38>)
 80076a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2001      	movs	r0, #1
 80076ae:	fa00 f202 	lsl.w	r2, r0, r2
 80076b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	e000e100 	.word	0xe000e100

080076c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80076d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db0a      	blt.n	80076f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	490c      	ldr	r1, [pc, #48]	; (8007714 <__NVIC_SetPriority+0x4c>)
 80076e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076e6:	0112      	lsls	r2, r2, #4
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	440b      	add	r3, r1
 80076ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076f0:	e00a      	b.n	8007708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	4908      	ldr	r1, [pc, #32]	; (8007718 <__NVIC_SetPriority+0x50>)
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	3b04      	subs	r3, #4
 8007700:	0112      	lsls	r2, r2, #4
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	440b      	add	r3, r1
 8007706:	761a      	strb	r2, [r3, #24]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	e000e100 	.word	0xe000e100
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800771c:	b480      	push	{r7}
 800771e:	b089      	sub	sp, #36	; 0x24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f1c3 0307 	rsb	r3, r3, #7
 8007736:	2b04      	cmp	r3, #4
 8007738:	bf28      	it	cs
 800773a:	2304      	movcs	r3, #4
 800773c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	3304      	adds	r3, #4
 8007742:	2b06      	cmp	r3, #6
 8007744:	d902      	bls.n	800774c <NVIC_EncodePriority+0x30>
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	3b03      	subs	r3, #3
 800774a:	e000      	b.n	800774e <NVIC_EncodePriority+0x32>
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43da      	mvns	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	401a      	ands	r2, r3
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007764:	f04f 31ff 	mov.w	r1, #4294967295
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	43d9      	mvns	r1, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007774:	4313      	orrs	r3, r2
         );
}
 8007776:	4618      	mov	r0, r3
 8007778:	3724      	adds	r7, #36	; 0x24
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3b01      	subs	r3, #1
 8007790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007794:	d301      	bcc.n	800779a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007796:	2301      	movs	r3, #1
 8007798:	e00f      	b.n	80077ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800779a:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <SysTick_Config+0x40>)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3b01      	subs	r3, #1
 80077a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077a2:	210f      	movs	r1, #15
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	f7ff ff8e 	bl	80076c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <SysTick_Config+0x40>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077b2:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <SysTick_Config+0x40>)
 80077b4:	2207      	movs	r2, #7
 80077b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	e000e010 	.word	0xe000e010

080077c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ff29 	bl	8007628 <__NVIC_SetPriorityGrouping>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	4603      	mov	r3, r0
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80077ec:	f7ff ff40 	bl	8007670 <__NVIC_GetPriorityGrouping>
 80077f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	6978      	ldr	r0, [r7, #20]
 80077f8:	f7ff ff90 	bl	800771c <NVIC_EncodePriority>
 80077fc:	4602      	mov	r2, r0
 80077fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff ff5f 	bl	80076c8 <__NVIC_SetPriority>
}
 800780a:	bf00      	nop
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	4603      	mov	r3, r0
 800781a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800781c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff ff33 	bl	800768c <__NVIC_EnableIRQ>
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff ffa4 	bl	8007784 <SysTick_Config>
 800783c:	4603      	mov	r3, r0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e054      	b.n	8007904 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7f5b      	ldrb	r3, [r3, #29]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7f9 ff94 	bl	8001798 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10c      	bne.n	8007898 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_CRC_Init+0xc4>)
 8007884:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0218 	bic.w	r2, r2, #24
 8007894:	609a      	str	r2, [r3, #8]
 8007896:	e00c      	b.n	80078b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6899      	ldr	r1, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f948 	bl	8007b38 <HAL_CRCEx_Polynomial_Set>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e028      	b.n	8007904 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	795b      	ldrb	r3, [r3, #5]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f04f 32ff 	mov.w	r2, #4294967295
 80078c2:	611a      	str	r2, [r3, #16]
 80078c4:	e004      	b.n	80078d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6912      	ldr	r2, [r2, #16]
 80078ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	04c11db7 	.word	0x04c11db7

08007910 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2202      	movs	r2, #2
 8007924:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0201 	orr.w	r2, r2, #1
 8007934:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d006      	beq.n	800794c <HAL_CRC_Calculate+0x3c>
 800793e:	2b03      	cmp	r3, #3
 8007940:	d829      	bhi.n	8007996 <HAL_CRC_Calculate+0x86>
 8007942:	2b01      	cmp	r3, #1
 8007944:	d019      	beq.n	800797a <HAL_CRC_Calculate+0x6a>
 8007946:	2b02      	cmp	r3, #2
 8007948:	d01e      	beq.n	8007988 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800794a:	e024      	b.n	8007996 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e00a      	b.n	8007968 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	3301      	adds	r3, #1
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	d3f0      	bcc.n	8007952 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	613b      	str	r3, [r7, #16]
      break;
 8007978:	e00e      	b.n	8007998 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f812 	bl	80079a8 <CRC_Handle_8>
 8007984:	6138      	str	r0, [r7, #16]
      break;
 8007986:	e007      	b.n	8007998 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f899 	bl	8007ac4 <CRC_Handle_16>
 8007992:	6138      	str	r0, [r7, #16]
      break;
 8007994:	e000      	b.n	8007998 <HAL_CRC_Calculate+0x88>
      break;
 8007996:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800799e:	693b      	ldr	r3, [r7, #16]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e023      	b.n	8007a02 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	3301      	adds	r3, #1
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	440b      	add	r3, r1
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80079d4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	3302      	adds	r3, #2
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	440b      	add	r3, r1
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80079e4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	3303      	adds	r3, #3
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	440b      	add	r3, r1
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80079f8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80079fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	3301      	adds	r3, #1
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	089b      	lsrs	r3, r3, #2
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d3d6      	bcc.n	80079ba <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d04d      	beq.n	8007ab2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f003 0303 	and.w	r3, r3, #3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d107      	bne.n	8007a30 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	4413      	add	r3, r2
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d116      	bne.n	8007a68 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	4413      	add	r3, r2
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	b21a      	sxth	r2, r3
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	440b      	add	r3, r1
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b21b      	sxth	r3, r3
 8007a56:	4313      	orrs	r3, r2
 8007a58:	b21b      	sxth	r3, r3
 8007a5a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	8b7a      	ldrh	r2, [r7, #26]
 8007a66:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d11f      	bne.n	8007ab2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	b21a      	sxth	r2, r3
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	3301      	adds	r3, #1
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	440b      	add	r3, r1
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b21b      	sxth	r3, r3
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	b21b      	sxth	r3, r3
 8007a92:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	8b7a      	ldrh	r2, [r7, #26]
 8007a9e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	3302      	adds	r3, #2
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3724      	adds	r7, #36	; 0x24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e013      	b.n	8007afe <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	041a      	lsls	r2, r3, #16
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	440b      	add	r3, r1
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	4619      	mov	r1, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	3301      	adds	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3e6      	bcc.n	8007ad6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	4413      	add	r3, r2
 8007b20:	881a      	ldrh	r2, [r3, #0]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007b48:	231f      	movs	r3, #31
 8007b4a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007b4c:	bf00      	nop
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1e5a      	subs	r2, r3, #1
 8007b52:	613a      	str	r2, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <HAL_CRCEx_Polynomial_Set+0x34>
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b18      	cmp	r3, #24
 8007b70:	d846      	bhi.n	8007c00 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007c07 	.word	0x08007c07
 8007b7c:	08007c01 	.word	0x08007c01
 8007b80:	08007c01 	.word	0x08007c01
 8007b84:	08007c01 	.word	0x08007c01
 8007b88:	08007c01 	.word	0x08007c01
 8007b8c:	08007c01 	.word	0x08007c01
 8007b90:	08007c01 	.word	0x08007c01
 8007b94:	08007c01 	.word	0x08007c01
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007c01 	.word	0x08007c01
 8007ba4:	08007c01 	.word	0x08007c01
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c01 	.word	0x08007c01
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007c01 	.word	0x08007c01
 8007bb8:	08007be9 	.word	0x08007be9
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007c01 	.word	0x08007c01
 8007bc8:	08007c01 	.word	0x08007c01
 8007bcc:	08007c01 	.word	0x08007c01
 8007bd0:	08007c01 	.word	0x08007c01
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	08007bdd 	.word	0x08007bdd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b06      	cmp	r3, #6
 8007be0:	d913      	bls.n	8007c0a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007be6:	e010      	b.n	8007c0a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b07      	cmp	r3, #7
 8007bec:	d90f      	bls.n	8007c0e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007bf2:	e00c      	b.n	8007c0e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d90b      	bls.n	8007c12 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007bfe:	e008      	b.n	8007c12 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
      break;
 8007c04:	e006      	b.n	8007c14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007c06:	bf00      	nop
 8007c08:	e004      	b.n	8007c14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e002      	b.n	8007c14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007c12:	bf00      	nop
  }
  if (status == HAL_OK)
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f023 0118 	bic.w	r1, r3, #24
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007c4c:	f7fd fb6e 	bl	800532c <HAL_GetTick>
 8007c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e314      	b.n	8008286 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a66      	ldr	r2, [pc, #408]	; (8007dfc <HAL_DMA_Init+0x1b8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d04a      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a65      	ldr	r2, [pc, #404]	; (8007e00 <HAL_DMA_Init+0x1bc>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d045      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a63      	ldr	r2, [pc, #396]	; (8007e04 <HAL_DMA_Init+0x1c0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d040      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a62      	ldr	r2, [pc, #392]	; (8007e08 <HAL_DMA_Init+0x1c4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d03b      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a60      	ldr	r2, [pc, #384]	; (8007e0c <HAL_DMA_Init+0x1c8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d036      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a5f      	ldr	r2, [pc, #380]	; (8007e10 <HAL_DMA_Init+0x1cc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d031      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a5d      	ldr	r2, [pc, #372]	; (8007e14 <HAL_DMA_Init+0x1d0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d02c      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a5c      	ldr	r2, [pc, #368]	; (8007e18 <HAL_DMA_Init+0x1d4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d027      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a5a      	ldr	r2, [pc, #360]	; (8007e1c <HAL_DMA_Init+0x1d8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d022      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a59      	ldr	r2, [pc, #356]	; (8007e20 <HAL_DMA_Init+0x1dc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01d      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a57      	ldr	r2, [pc, #348]	; (8007e24 <HAL_DMA_Init+0x1e0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d018      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a56      	ldr	r2, [pc, #344]	; (8007e28 <HAL_DMA_Init+0x1e4>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a54      	ldr	r2, [pc, #336]	; (8007e2c <HAL_DMA_Init+0x1e8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a53      	ldr	r2, [pc, #332]	; (8007e30 <HAL_DMA_Init+0x1ec>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a51      	ldr	r2, [pc, #324]	; (8007e34 <HAL_DMA_Init+0x1f0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_DMA_Init+0xb8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a50      	ldr	r2, [pc, #320]	; (8007e38 <HAL_DMA_Init+0x1f4>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d101      	bne.n	8007d00 <HAL_DMA_Init+0xbc>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_DMA_Init+0xbe>
 8007d00:	2300      	movs	r3, #0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 813c 	beq.w	8007f80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a37      	ldr	r2, [pc, #220]	; (8007dfc <HAL_DMA_Init+0x1b8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04a      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a36      	ldr	r2, [pc, #216]	; (8007e00 <HAL_DMA_Init+0x1bc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d045      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a34      	ldr	r2, [pc, #208]	; (8007e04 <HAL_DMA_Init+0x1c0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d040      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a33      	ldr	r2, [pc, #204]	; (8007e08 <HAL_DMA_Init+0x1c4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d03b      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a31      	ldr	r2, [pc, #196]	; (8007e0c <HAL_DMA_Init+0x1c8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d036      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a30      	ldr	r2, [pc, #192]	; (8007e10 <HAL_DMA_Init+0x1cc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d031      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a2e      	ldr	r2, [pc, #184]	; (8007e14 <HAL_DMA_Init+0x1d0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d02c      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a2d      	ldr	r2, [pc, #180]	; (8007e18 <HAL_DMA_Init+0x1d4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d027      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a2b      	ldr	r2, [pc, #172]	; (8007e1c <HAL_DMA_Init+0x1d8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d022      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2a      	ldr	r2, [pc, #168]	; (8007e20 <HAL_DMA_Init+0x1dc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d01d      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a28      	ldr	r2, [pc, #160]	; (8007e24 <HAL_DMA_Init+0x1e0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d018      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a27      	ldr	r2, [pc, #156]	; (8007e28 <HAL_DMA_Init+0x1e4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a25      	ldr	r2, [pc, #148]	; (8007e2c <HAL_DMA_Init+0x1e8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a24      	ldr	r2, [pc, #144]	; (8007e30 <HAL_DMA_Init+0x1ec>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a22      	ldr	r2, [pc, #136]	; (8007e34 <HAL_DMA_Init+0x1f0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_DMA_Init+0x174>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a21      	ldr	r2, [pc, #132]	; (8007e38 <HAL_DMA_Init+0x1f4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d108      	bne.n	8007dca <HAL_DMA_Init+0x186>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e007      	b.n	8007dda <HAL_DMA_Init+0x196>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007dda:	e02f      	b.n	8007e3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ddc:	f7fd faa6 	bl	800532c <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d928      	bls.n	8007e3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2203      	movs	r2, #3
 8007df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e244      	b.n	8008286 <HAL_DMA_Init+0x642>
 8007dfc:	40020010 	.word	0x40020010
 8007e00:	40020028 	.word	0x40020028
 8007e04:	40020040 	.word	0x40020040
 8007e08:	40020058 	.word	0x40020058
 8007e0c:	40020070 	.word	0x40020070
 8007e10:	40020088 	.word	0x40020088
 8007e14:	400200a0 	.word	0x400200a0
 8007e18:	400200b8 	.word	0x400200b8
 8007e1c:	40020410 	.word	0x40020410
 8007e20:	40020428 	.word	0x40020428
 8007e24:	40020440 	.word	0x40020440
 8007e28:	40020458 	.word	0x40020458
 8007e2c:	40020470 	.word	0x40020470
 8007e30:	40020488 	.word	0x40020488
 8007e34:	400204a0 	.word	0x400204a0
 8007e38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1c8      	bne.n	8007ddc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4b84      	ldr	r3, [pc, #528]	; (8008068 <HAL_DMA_Init+0x424>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d107      	bne.n	8007ea0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b28      	cmp	r3, #40	; 0x28
 8007ea6:	d903      	bls.n	8007eb0 <HAL_DMA_Init+0x26c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b2e      	cmp	r3, #46	; 0x2e
 8007eae:	d91f      	bls.n	8007ef0 <HAL_DMA_Init+0x2ac>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8007eb6:	d903      	bls.n	8007ec0 <HAL_DMA_Init+0x27c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b42      	cmp	r3, #66	; 0x42
 8007ebe:	d917      	bls.n	8007ef0 <HAL_DMA_Init+0x2ac>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b46      	cmp	r3, #70	; 0x46
 8007ec6:	d903      	bls.n	8007ed0 <HAL_DMA_Init+0x28c>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	2b48      	cmp	r3, #72	; 0x48
 8007ece:	d90f      	bls.n	8007ef0 <HAL_DMA_Init+0x2ac>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2b4e      	cmp	r3, #78	; 0x4e
 8007ed6:	d903      	bls.n	8007ee0 <HAL_DMA_Init+0x29c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b52      	cmp	r3, #82	; 0x52
 8007ede:	d907      	bls.n	8007ef0 <HAL_DMA_Init+0x2ac>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b73      	cmp	r3, #115	; 0x73
 8007ee6:	d905      	bls.n	8007ef4 <HAL_DMA_Init+0x2b0>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b77      	cmp	r3, #119	; 0x77
 8007eee:	d801      	bhi.n	8007ef4 <HAL_DMA_Init+0x2b0>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <HAL_DMA_Init+0x2b2>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 0307 	bic.w	r3, r3, #7
 8007f18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d117      	bne.n	8007f5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00e      	beq.n	8007f5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 ff28 	bl	8009d94 <DMA_CheckFifoParam>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2240      	movs	r2, #64	; 0x40
 8007f4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e194      	b.n	8008286 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fe63 	bl	8009c30 <DMA_CalcBaseAndBitshift>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	223f      	movs	r2, #63	; 0x3f
 8007f78:	409a      	lsls	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	e0ca      	b.n	8008116 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a39      	ldr	r2, [pc, #228]	; (800806c <HAL_DMA_Init+0x428>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a38      	ldr	r2, [pc, #224]	; (8008070 <HAL_DMA_Init+0x42c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a36      	ldr	r2, [pc, #216]	; (8008074 <HAL_DMA_Init+0x430>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a35      	ldr	r2, [pc, #212]	; (8008078 <HAL_DMA_Init+0x434>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a33      	ldr	r2, [pc, #204]	; (800807c <HAL_DMA_Init+0x438>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a32      	ldr	r2, [pc, #200]	; (8008080 <HAL_DMA_Init+0x43c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a30      	ldr	r2, [pc, #192]	; (8008084 <HAL_DMA_Init+0x440>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_Init+0x38c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a2f      	ldr	r2, [pc, #188]	; (8008088 <HAL_DMA_Init+0x444>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d101      	bne.n	8007fd4 <HAL_DMA_Init+0x390>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e000      	b.n	8007fd6 <HAL_DMA_Init+0x392>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8094 	beq.w	8008104 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a22      	ldr	r2, [pc, #136]	; (800806c <HAL_DMA_Init+0x428>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d021      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a21      	ldr	r2, [pc, #132]	; (8008070 <HAL_DMA_Init+0x42c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d01c      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <HAL_DMA_Init+0x430>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d017      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	; (8008078 <HAL_DMA_Init+0x434>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d012      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1c      	ldr	r2, [pc, #112]	; (800807c <HAL_DMA_Init+0x438>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00d      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <HAL_DMA_Init+0x43c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d008      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a19      	ldr	r2, [pc, #100]	; (8008084 <HAL_DMA_Init+0x440>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d003      	beq.n	800802a <HAL_DMA_Init+0x3e6>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <HAL_DMA_Init+0x444>)
 8008028:	4293      	cmp	r3, r2
 800802a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <HAL_DMA_Init+0x448>)
 8008048:	4013      	ands	r3, r2
 800804a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b40      	cmp	r3, #64	; 0x40
 8008052:	d01d      	beq.n	8008090 <HAL_DMA_Init+0x44c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b80      	cmp	r3, #128	; 0x80
 800805a:	d102      	bne.n	8008062 <HAL_DMA_Init+0x41e>
 800805c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008060:	e017      	b.n	8008092 <HAL_DMA_Init+0x44e>
 8008062:	2300      	movs	r3, #0
 8008064:	e015      	b.n	8008092 <HAL_DMA_Init+0x44e>
 8008066:	bf00      	nop
 8008068:	fe10803f 	.word	0xfe10803f
 800806c:	58025408 	.word	0x58025408
 8008070:	5802541c 	.word	0x5802541c
 8008074:	58025430 	.word	0x58025430
 8008078:	58025444 	.word	0x58025444
 800807c:	58025458 	.word	0x58025458
 8008080:	5802546c 	.word	0x5802546c
 8008084:	58025480 	.word	0x58025480
 8008088:	58025494 	.word	0x58025494
 800808c:	fffe000f 	.word	0xfffe000f
 8008090:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	68d2      	ldr	r2, [r2, #12]
 8008096:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008098:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80080a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80080a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80080b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	4b6e      	ldr	r3, [pc, #440]	; (8008290 <HAL_DMA_Init+0x64c>)
 80080d8:	4413      	add	r3, r2
 80080da:	4a6e      	ldr	r2, [pc, #440]	; (8008294 <HAL_DMA_Init+0x650>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	009a      	lsls	r2, r3, #2
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fda1 	bl	8009c30 <DMA_CalcBaseAndBitshift>
 80080ee:	4603      	mov	r3, r0
 80080f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	e008      	b.n	8008116 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2240      	movs	r2, #64	; 0x40
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0b7      	b.n	8008286 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a5f      	ldr	r2, [pc, #380]	; (8008298 <HAL_DMA_Init+0x654>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d072      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a5d      	ldr	r2, [pc, #372]	; (800829c <HAL_DMA_Init+0x658>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d06d      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a5c      	ldr	r2, [pc, #368]	; (80082a0 <HAL_DMA_Init+0x65c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d068      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a5a      	ldr	r2, [pc, #360]	; (80082a4 <HAL_DMA_Init+0x660>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d063      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a59      	ldr	r2, [pc, #356]	; (80082a8 <HAL_DMA_Init+0x664>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d05e      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a57      	ldr	r2, [pc, #348]	; (80082ac <HAL_DMA_Init+0x668>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d059      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a56      	ldr	r2, [pc, #344]	; (80082b0 <HAL_DMA_Init+0x66c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d054      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a54      	ldr	r2, [pc, #336]	; (80082b4 <HAL_DMA_Init+0x670>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d04f      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a53      	ldr	r2, [pc, #332]	; (80082b8 <HAL_DMA_Init+0x674>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d04a      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a51      	ldr	r2, [pc, #324]	; (80082bc <HAL_DMA_Init+0x678>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d045      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a50      	ldr	r2, [pc, #320]	; (80082c0 <HAL_DMA_Init+0x67c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d040      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a4e      	ldr	r2, [pc, #312]	; (80082c4 <HAL_DMA_Init+0x680>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d03b      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a4d      	ldr	r2, [pc, #308]	; (80082c8 <HAL_DMA_Init+0x684>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d036      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a4b      	ldr	r2, [pc, #300]	; (80082cc <HAL_DMA_Init+0x688>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d031      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a4a      	ldr	r2, [pc, #296]	; (80082d0 <HAL_DMA_Init+0x68c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d02c      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a48      	ldr	r2, [pc, #288]	; (80082d4 <HAL_DMA_Init+0x690>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d027      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a47      	ldr	r2, [pc, #284]	; (80082d8 <HAL_DMA_Init+0x694>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d022      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a45      	ldr	r2, [pc, #276]	; (80082dc <HAL_DMA_Init+0x698>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a44      	ldr	r2, [pc, #272]	; (80082e0 <HAL_DMA_Init+0x69c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d018      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a42      	ldr	r2, [pc, #264]	; (80082e4 <HAL_DMA_Init+0x6a0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a41      	ldr	r2, [pc, #260]	; (80082e8 <HAL_DMA_Init+0x6a4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3f      	ldr	r2, [pc, #252]	; (80082ec <HAL_DMA_Init+0x6a8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a3e      	ldr	r2, [pc, #248]	; (80082f0 <HAL_DMA_Init+0x6ac>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_DMA_Init+0x5c2>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3c      	ldr	r2, [pc, #240]	; (80082f4 <HAL_DMA_Init+0x6b0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d101      	bne.n	800820a <HAL_DMA_Init+0x5c6>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <HAL_DMA_Init+0x5c8>
 800820a:	2300      	movs	r3, #0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d032      	beq.n	8008276 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fe3b 	bl	8009e8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d102      	bne.n	8008224 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008238:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_DMA_Init+0x620>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	2b08      	cmp	r3, #8
 8008248:	d80c      	bhi.n	8008264 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 feb8 	bl	8009fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008260:	605a      	str	r2, [r3, #4]
 8008262:	e008      	b.n	8008276 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	a7fdabf8 	.word	0xa7fdabf8
 8008294:	cccccccd 	.word	0xcccccccd
 8008298:	40020010 	.word	0x40020010
 800829c:	40020028 	.word	0x40020028
 80082a0:	40020040 	.word	0x40020040
 80082a4:	40020058 	.word	0x40020058
 80082a8:	40020070 	.word	0x40020070
 80082ac:	40020088 	.word	0x40020088
 80082b0:	400200a0 	.word	0x400200a0
 80082b4:	400200b8 	.word	0x400200b8
 80082b8:	40020410 	.word	0x40020410
 80082bc:	40020428 	.word	0x40020428
 80082c0:	40020440 	.word	0x40020440
 80082c4:	40020458 	.word	0x40020458
 80082c8:	40020470 	.word	0x40020470
 80082cc:	40020488 	.word	0x40020488
 80082d0:	400204a0 	.word	0x400204a0
 80082d4:	400204b8 	.word	0x400204b8
 80082d8:	58025408 	.word	0x58025408
 80082dc:	5802541c 	.word	0x5802541c
 80082e0:	58025430 	.word	0x58025430
 80082e4:	58025444 	.word	0x58025444
 80082e8:	58025458 	.word	0x58025458
 80082ec:	5802546c 	.word	0x5802546c
 80082f0:	58025480 	.word	0x58025480
 80082f4:	58025494 	.word	0x58025494

080082f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008300:	f7fd f814 	bl	800532c <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e2dc      	b.n	80088ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d008      	beq.n	800832e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e2cd      	b.n	80088ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a76      	ldr	r2, [pc, #472]	; (800850c <HAL_DMA_Abort+0x214>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d04a      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a74      	ldr	r2, [pc, #464]	; (8008510 <HAL_DMA_Abort+0x218>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d045      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a73      	ldr	r2, [pc, #460]	; (8008514 <HAL_DMA_Abort+0x21c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d040      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a71      	ldr	r2, [pc, #452]	; (8008518 <HAL_DMA_Abort+0x220>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d03b      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a70      	ldr	r2, [pc, #448]	; (800851c <HAL_DMA_Abort+0x224>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d036      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a6e      	ldr	r2, [pc, #440]	; (8008520 <HAL_DMA_Abort+0x228>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d031      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a6d      	ldr	r2, [pc, #436]	; (8008524 <HAL_DMA_Abort+0x22c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d02c      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a6b      	ldr	r2, [pc, #428]	; (8008528 <HAL_DMA_Abort+0x230>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d027      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a6a      	ldr	r2, [pc, #424]	; (800852c <HAL_DMA_Abort+0x234>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d022      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a68      	ldr	r2, [pc, #416]	; (8008530 <HAL_DMA_Abort+0x238>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d01d      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a67      	ldr	r2, [pc, #412]	; (8008534 <HAL_DMA_Abort+0x23c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d018      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a65      	ldr	r2, [pc, #404]	; (8008538 <HAL_DMA_Abort+0x240>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d013      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a64      	ldr	r2, [pc, #400]	; (800853c <HAL_DMA_Abort+0x244>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00e      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a62      	ldr	r2, [pc, #392]	; (8008540 <HAL_DMA_Abort+0x248>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d009      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a61      	ldr	r2, [pc, #388]	; (8008544 <HAL_DMA_Abort+0x24c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_DMA_Abort+0xd6>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a5f      	ldr	r2, [pc, #380]	; (8008548 <HAL_DMA_Abort+0x250>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d101      	bne.n	80083d2 <HAL_DMA_Abort+0xda>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <HAL_DMA_Abort+0xdc>
 80083d2:	2300      	movs	r3, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d013      	beq.n	8008400 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 021e 	bic.w	r2, r2, #30
 80083e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695a      	ldr	r2, [r3, #20]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e00a      	b.n	8008416 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 020e 	bic.w	r2, r2, #14
 800840e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3c      	ldr	r2, [pc, #240]	; (800850c <HAL_DMA_Abort+0x214>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d072      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a3a      	ldr	r2, [pc, #232]	; (8008510 <HAL_DMA_Abort+0x218>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d06d      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a39      	ldr	r2, [pc, #228]	; (8008514 <HAL_DMA_Abort+0x21c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d068      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a37      	ldr	r2, [pc, #220]	; (8008518 <HAL_DMA_Abort+0x220>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d063      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a36      	ldr	r2, [pc, #216]	; (800851c <HAL_DMA_Abort+0x224>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d05e      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a34      	ldr	r2, [pc, #208]	; (8008520 <HAL_DMA_Abort+0x228>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d059      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a33      	ldr	r2, [pc, #204]	; (8008524 <HAL_DMA_Abort+0x22c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d054      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a31      	ldr	r2, [pc, #196]	; (8008528 <HAL_DMA_Abort+0x230>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d04f      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a30      	ldr	r2, [pc, #192]	; (800852c <HAL_DMA_Abort+0x234>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d04a      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a2e      	ldr	r2, [pc, #184]	; (8008530 <HAL_DMA_Abort+0x238>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d045      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <HAL_DMA_Abort+0x23c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d040      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2b      	ldr	r2, [pc, #172]	; (8008538 <HAL_DMA_Abort+0x240>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d03b      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a2a      	ldr	r2, [pc, #168]	; (800853c <HAL_DMA_Abort+0x244>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d036      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a28      	ldr	r2, [pc, #160]	; (8008540 <HAL_DMA_Abort+0x248>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d031      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a27      	ldr	r2, [pc, #156]	; (8008544 <HAL_DMA_Abort+0x24c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d02c      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a25      	ldr	r2, [pc, #148]	; (8008548 <HAL_DMA_Abort+0x250>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d027      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <HAL_DMA_Abort+0x254>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d022      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <HAL_DMA_Abort+0x258>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01d      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a21      	ldr	r2, [pc, #132]	; (8008554 <HAL_DMA_Abort+0x25c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d018      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1f      	ldr	r2, [pc, #124]	; (8008558 <HAL_DMA_Abort+0x260>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d013      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_DMA_Abort+0x264>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00e      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1c      	ldr	r2, [pc, #112]	; (8008560 <HAL_DMA_Abort+0x268>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <HAL_DMA_Abort+0x26c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_DMA_Abort+0x20e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <HAL_DMA_Abort+0x270>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d132      	bne.n	800856c <HAL_DMA_Abort+0x274>
 8008506:	2301      	movs	r3, #1
 8008508:	e031      	b.n	800856e <HAL_DMA_Abort+0x276>
 800850a:	bf00      	nop
 800850c:	40020010 	.word	0x40020010
 8008510:	40020028 	.word	0x40020028
 8008514:	40020040 	.word	0x40020040
 8008518:	40020058 	.word	0x40020058
 800851c:	40020070 	.word	0x40020070
 8008520:	40020088 	.word	0x40020088
 8008524:	400200a0 	.word	0x400200a0
 8008528:	400200b8 	.word	0x400200b8
 800852c:	40020410 	.word	0x40020410
 8008530:	40020428 	.word	0x40020428
 8008534:	40020440 	.word	0x40020440
 8008538:	40020458 	.word	0x40020458
 800853c:	40020470 	.word	0x40020470
 8008540:	40020488 	.word	0x40020488
 8008544:	400204a0 	.word	0x400204a0
 8008548:	400204b8 	.word	0x400204b8
 800854c:	58025408 	.word	0x58025408
 8008550:	5802541c 	.word	0x5802541c
 8008554:	58025430 	.word	0x58025430
 8008558:	58025444 	.word	0x58025444
 800855c:	58025458 	.word	0x58025458
 8008560:	5802546c 	.word	0x5802546c
 8008564:	58025480 	.word	0x58025480
 8008568:	58025494 	.word	0x58025494
 800856c:	2300      	movs	r3, #0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008580:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a6d      	ldr	r2, [pc, #436]	; (800873c <HAL_DMA_Abort+0x444>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d04a      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a6b      	ldr	r2, [pc, #428]	; (8008740 <HAL_DMA_Abort+0x448>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d045      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a6a      	ldr	r2, [pc, #424]	; (8008744 <HAL_DMA_Abort+0x44c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d040      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a68      	ldr	r2, [pc, #416]	; (8008748 <HAL_DMA_Abort+0x450>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d03b      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a67      	ldr	r2, [pc, #412]	; (800874c <HAL_DMA_Abort+0x454>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d036      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a65      	ldr	r2, [pc, #404]	; (8008750 <HAL_DMA_Abort+0x458>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d031      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a64      	ldr	r2, [pc, #400]	; (8008754 <HAL_DMA_Abort+0x45c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d02c      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a62      	ldr	r2, [pc, #392]	; (8008758 <HAL_DMA_Abort+0x460>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d027      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a61      	ldr	r2, [pc, #388]	; (800875c <HAL_DMA_Abort+0x464>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d022      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a5f      	ldr	r2, [pc, #380]	; (8008760 <HAL_DMA_Abort+0x468>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d01d      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a5e      	ldr	r2, [pc, #376]	; (8008764 <HAL_DMA_Abort+0x46c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d018      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a5c      	ldr	r2, [pc, #368]	; (8008768 <HAL_DMA_Abort+0x470>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d013      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a5b      	ldr	r2, [pc, #364]	; (800876c <HAL_DMA_Abort+0x474>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00e      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a59      	ldr	r2, [pc, #356]	; (8008770 <HAL_DMA_Abort+0x478>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a58      	ldr	r2, [pc, #352]	; (8008774 <HAL_DMA_Abort+0x47c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d004      	beq.n	8008622 <HAL_DMA_Abort+0x32a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a56      	ldr	r2, [pc, #344]	; (8008778 <HAL_DMA_Abort+0x480>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d108      	bne.n	8008634 <HAL_DMA_Abort+0x33c>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0201 	bic.w	r2, r2, #1
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e007      	b.n	8008644 <HAL_DMA_Abort+0x34c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008644:	e013      	b.n	800866e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008646:	f7fc fe71 	bl	800532c <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b05      	cmp	r3, #5
 8008652:	d90c      	bls.n	800866e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2203      	movs	r2, #3
 800865e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e12d      	b.n	80088ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e5      	bne.n	8008646 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a2f      	ldr	r2, [pc, #188]	; (800873c <HAL_DMA_Abort+0x444>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d04a      	beq.n	800871a <HAL_DMA_Abort+0x422>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a2d      	ldr	r2, [pc, #180]	; (8008740 <HAL_DMA_Abort+0x448>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d045      	beq.n	800871a <HAL_DMA_Abort+0x422>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a2c      	ldr	r2, [pc, #176]	; (8008744 <HAL_DMA_Abort+0x44c>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d040      	beq.n	800871a <HAL_DMA_Abort+0x422>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <HAL_DMA_Abort+0x450>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d03b      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a29      	ldr	r2, [pc, #164]	; (800874c <HAL_DMA_Abort+0x454>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d036      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a27      	ldr	r2, [pc, #156]	; (8008750 <HAL_DMA_Abort+0x458>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d031      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a26      	ldr	r2, [pc, #152]	; (8008754 <HAL_DMA_Abort+0x45c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d02c      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a24      	ldr	r2, [pc, #144]	; (8008758 <HAL_DMA_Abort+0x460>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d027      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a23      	ldr	r2, [pc, #140]	; (800875c <HAL_DMA_Abort+0x464>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d022      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a21      	ldr	r2, [pc, #132]	; (8008760 <HAL_DMA_Abort+0x468>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d01d      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a20      	ldr	r2, [pc, #128]	; (8008764 <HAL_DMA_Abort+0x46c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d018      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1e      	ldr	r2, [pc, #120]	; (8008768 <HAL_DMA_Abort+0x470>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1d      	ldr	r2, [pc, #116]	; (800876c <HAL_DMA_Abort+0x474>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00e      	beq.n	800871a <HAL_DMA_Abort+0x422>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <HAL_DMA_Abort+0x478>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d009      	beq.n	800871a <HAL_DMA_Abort+0x422>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a1a      	ldr	r2, [pc, #104]	; (8008774 <HAL_DMA_Abort+0x47c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_DMA_Abort+0x422>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a18      	ldr	r2, [pc, #96]	; (8008778 <HAL_DMA_Abort+0x480>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <HAL_DMA_Abort+0x426>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <HAL_DMA_Abort+0x428>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d02b      	beq.n	800877c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008728:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	223f      	movs	r2, #63	; 0x3f
 8008734:	409a      	lsls	r2, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	e02a      	b.n	8008792 <HAL_DMA_Abort+0x49a>
 800873c:	40020010 	.word	0x40020010
 8008740:	40020028 	.word	0x40020028
 8008744:	40020040 	.word	0x40020040
 8008748:	40020058 	.word	0x40020058
 800874c:	40020070 	.word	0x40020070
 8008750:	40020088 	.word	0x40020088
 8008754:	400200a0 	.word	0x400200a0
 8008758:	400200b8 	.word	0x400200b8
 800875c:	40020410 	.word	0x40020410
 8008760:	40020428 	.word	0x40020428
 8008764:	40020440 	.word	0x40020440
 8008768:	40020458 	.word	0x40020458
 800876c:	40020470 	.word	0x40020470
 8008770:	40020488 	.word	0x40020488
 8008774:	400204a0 	.word	0x400204a0
 8008778:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008780:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	2201      	movs	r2, #1
 800878c:	409a      	lsls	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a4f      	ldr	r2, [pc, #316]	; (80088d4 <HAL_DMA_Abort+0x5dc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d072      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a4d      	ldr	r2, [pc, #308]	; (80088d8 <HAL_DMA_Abort+0x5e0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d06d      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a4c      	ldr	r2, [pc, #304]	; (80088dc <HAL_DMA_Abort+0x5e4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d068      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a4a      	ldr	r2, [pc, #296]	; (80088e0 <HAL_DMA_Abort+0x5e8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d063      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a49      	ldr	r2, [pc, #292]	; (80088e4 <HAL_DMA_Abort+0x5ec>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d05e      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a47      	ldr	r2, [pc, #284]	; (80088e8 <HAL_DMA_Abort+0x5f0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d059      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a46      	ldr	r2, [pc, #280]	; (80088ec <HAL_DMA_Abort+0x5f4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d054      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a44      	ldr	r2, [pc, #272]	; (80088f0 <HAL_DMA_Abort+0x5f8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d04f      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a43      	ldr	r2, [pc, #268]	; (80088f4 <HAL_DMA_Abort+0x5fc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d04a      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a41      	ldr	r2, [pc, #260]	; (80088f8 <HAL_DMA_Abort+0x600>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d045      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <HAL_DMA_Abort+0x604>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d040      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a3e      	ldr	r2, [pc, #248]	; (8008900 <HAL_DMA_Abort+0x608>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d03b      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a3d      	ldr	r2, [pc, #244]	; (8008904 <HAL_DMA_Abort+0x60c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d036      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a3b      	ldr	r2, [pc, #236]	; (8008908 <HAL_DMA_Abort+0x610>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d031      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a3a      	ldr	r2, [pc, #232]	; (800890c <HAL_DMA_Abort+0x614>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d02c      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a38      	ldr	r2, [pc, #224]	; (8008910 <HAL_DMA_Abort+0x618>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d027      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a37      	ldr	r2, [pc, #220]	; (8008914 <HAL_DMA_Abort+0x61c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d022      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a35      	ldr	r2, [pc, #212]	; (8008918 <HAL_DMA_Abort+0x620>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d01d      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_DMA_Abort+0x624>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d018      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a32      	ldr	r2, [pc, #200]	; (8008920 <HAL_DMA_Abort+0x628>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a31      	ldr	r2, [pc, #196]	; (8008924 <HAL_DMA_Abort+0x62c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00e      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2f      	ldr	r2, [pc, #188]	; (8008928 <HAL_DMA_Abort+0x630>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d009      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2e      	ldr	r2, [pc, #184]	; (800892c <HAL_DMA_Abort+0x634>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d004      	beq.n	8008882 <HAL_DMA_Abort+0x58a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a2c      	ldr	r2, [pc, #176]	; (8008930 <HAL_DMA_Abort+0x638>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d101      	bne.n	8008886 <HAL_DMA_Abort+0x58e>
 8008882:	2301      	movs	r3, #1
 8008884:	e000      	b.n	8008888 <HAL_DMA_Abort+0x590>
 8008886:	2300      	movs	r3, #0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d015      	beq.n	80088b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008894:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40020010 	.word	0x40020010
 80088d8:	40020028 	.word	0x40020028
 80088dc:	40020040 	.word	0x40020040
 80088e0:	40020058 	.word	0x40020058
 80088e4:	40020070 	.word	0x40020070
 80088e8:	40020088 	.word	0x40020088
 80088ec:	400200a0 	.word	0x400200a0
 80088f0:	400200b8 	.word	0x400200b8
 80088f4:	40020410 	.word	0x40020410
 80088f8:	40020428 	.word	0x40020428
 80088fc:	40020440 	.word	0x40020440
 8008900:	40020458 	.word	0x40020458
 8008904:	40020470 	.word	0x40020470
 8008908:	40020488 	.word	0x40020488
 800890c:	400204a0 	.word	0x400204a0
 8008910:	400204b8 	.word	0x400204b8
 8008914:	58025408 	.word	0x58025408
 8008918:	5802541c 	.word	0x5802541c
 800891c:	58025430 	.word	0x58025430
 8008920:	58025444 	.word	0x58025444
 8008924:	58025458 	.word	0x58025458
 8008928:	5802546c 	.word	0x5802546c
 800892c:	58025480 	.word	0x58025480
 8008930:	58025494 	.word	0x58025494

08008934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e237      	b.n	8008db6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d004      	beq.n	800895c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2280      	movs	r2, #128	; 0x80
 8008956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e22c      	b.n	8008db6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a5c      	ldr	r2, [pc, #368]	; (8008ad4 <HAL_DMA_Abort_IT+0x1a0>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d04a      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a5b      	ldr	r2, [pc, #364]	; (8008ad8 <HAL_DMA_Abort_IT+0x1a4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d045      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a59      	ldr	r2, [pc, #356]	; (8008adc <HAL_DMA_Abort_IT+0x1a8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d040      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a58      	ldr	r2, [pc, #352]	; (8008ae0 <HAL_DMA_Abort_IT+0x1ac>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d03b      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a56      	ldr	r2, [pc, #344]	; (8008ae4 <HAL_DMA_Abort_IT+0x1b0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d036      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a55      	ldr	r2, [pc, #340]	; (8008ae8 <HAL_DMA_Abort_IT+0x1b4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d031      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a53      	ldr	r2, [pc, #332]	; (8008aec <HAL_DMA_Abort_IT+0x1b8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d02c      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a52      	ldr	r2, [pc, #328]	; (8008af0 <HAL_DMA_Abort_IT+0x1bc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d027      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a50      	ldr	r2, [pc, #320]	; (8008af4 <HAL_DMA_Abort_IT+0x1c0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d022      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a4f      	ldr	r2, [pc, #316]	; (8008af8 <HAL_DMA_Abort_IT+0x1c4>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d01d      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a4d      	ldr	r2, [pc, #308]	; (8008afc <HAL_DMA_Abort_IT+0x1c8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d018      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a4c      	ldr	r2, [pc, #304]	; (8008b00 <HAL_DMA_Abort_IT+0x1cc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d013      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a4a      	ldr	r2, [pc, #296]	; (8008b04 <HAL_DMA_Abort_IT+0x1d0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00e      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a49      	ldr	r2, [pc, #292]	; (8008b08 <HAL_DMA_Abort_IT+0x1d4>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d009      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a47      	ldr	r2, [pc, #284]	; (8008b0c <HAL_DMA_Abort_IT+0x1d8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_DMA_Abort_IT+0xc8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a46      	ldr	r2, [pc, #280]	; (8008b10 <HAL_DMA_Abort_IT+0x1dc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d101      	bne.n	8008a00 <HAL_DMA_Abort_IT+0xcc>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <HAL_DMA_Abort_IT+0xce>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8086 	beq.w	8008b14 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2204      	movs	r2, #4
 8008a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a2f      	ldr	r2, [pc, #188]	; (8008ad4 <HAL_DMA_Abort_IT+0x1a0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d04a      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2e      	ldr	r2, [pc, #184]	; (8008ad8 <HAL_DMA_Abort_IT+0x1a4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d045      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	; (8008adc <HAL_DMA_Abort_IT+0x1a8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d040      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2b      	ldr	r2, [pc, #172]	; (8008ae0 <HAL_DMA_Abort_IT+0x1ac>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d03b      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <HAL_DMA_Abort_IT+0x1b0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d036      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a28      	ldr	r2, [pc, #160]	; (8008ae8 <HAL_DMA_Abort_IT+0x1b4>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d031      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a26      	ldr	r2, [pc, #152]	; (8008aec <HAL_DMA_Abort_IT+0x1b8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d02c      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a25      	ldr	r2, [pc, #148]	; (8008af0 <HAL_DMA_Abort_IT+0x1bc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d027      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_DMA_Abort_IT+0x1c0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d022      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a22      	ldr	r2, [pc, #136]	; (8008af8 <HAL_DMA_Abort_IT+0x1c4>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d01d      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a20      	ldr	r2, [pc, #128]	; (8008afc <HAL_DMA_Abort_IT+0x1c8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d018      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <HAL_DMA_Abort_IT+0x1cc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d013      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <HAL_DMA_Abort_IT+0x1d0>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00e      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_DMA_Abort_IT+0x1d4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d009      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a1a      	ldr	r2, [pc, #104]	; (8008b0c <HAL_DMA_Abort_IT+0x1d8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d004      	beq.n	8008ab0 <HAL_DMA_Abort_IT+0x17c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_DMA_Abort_IT+0x1dc>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d108      	bne.n	8008ac2 <HAL_DMA_Abort_IT+0x18e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e178      	b.n	8008db4 <HAL_DMA_Abort_IT+0x480>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e16f      	b.n	8008db4 <HAL_DMA_Abort_IT+0x480>
 8008ad4:	40020010 	.word	0x40020010
 8008ad8:	40020028 	.word	0x40020028
 8008adc:	40020040 	.word	0x40020040
 8008ae0:	40020058 	.word	0x40020058
 8008ae4:	40020070 	.word	0x40020070
 8008ae8:	40020088 	.word	0x40020088
 8008aec:	400200a0 	.word	0x400200a0
 8008af0:	400200b8 	.word	0x400200b8
 8008af4:	40020410 	.word	0x40020410
 8008af8:	40020428 	.word	0x40020428
 8008afc:	40020440 	.word	0x40020440
 8008b00:	40020458 	.word	0x40020458
 8008b04:	40020470 	.word	0x40020470
 8008b08:	40020488 	.word	0x40020488
 8008b0c:	400204a0 	.word	0x400204a0
 8008b10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 020e 	bic.w	r2, r2, #14
 8008b22:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a6c      	ldr	r2, [pc, #432]	; (8008cdc <HAL_DMA_Abort_IT+0x3a8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d04a      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a6b      	ldr	r2, [pc, #428]	; (8008ce0 <HAL_DMA_Abort_IT+0x3ac>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d045      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a69      	ldr	r2, [pc, #420]	; (8008ce4 <HAL_DMA_Abort_IT+0x3b0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d040      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a68      	ldr	r2, [pc, #416]	; (8008ce8 <HAL_DMA_Abort_IT+0x3b4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d03b      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a66      	ldr	r2, [pc, #408]	; (8008cec <HAL_DMA_Abort_IT+0x3b8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d036      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a65      	ldr	r2, [pc, #404]	; (8008cf0 <HAL_DMA_Abort_IT+0x3bc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d031      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a63      	ldr	r2, [pc, #396]	; (8008cf4 <HAL_DMA_Abort_IT+0x3c0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02c      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a62      	ldr	r2, [pc, #392]	; (8008cf8 <HAL_DMA_Abort_IT+0x3c4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d027      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a60      	ldr	r2, [pc, #384]	; (8008cfc <HAL_DMA_Abort_IT+0x3c8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d022      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a5f      	ldr	r2, [pc, #380]	; (8008d00 <HAL_DMA_Abort_IT+0x3cc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d01d      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a5d      	ldr	r2, [pc, #372]	; (8008d04 <HAL_DMA_Abort_IT+0x3d0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a5c      	ldr	r2, [pc, #368]	; (8008d08 <HAL_DMA_Abort_IT+0x3d4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a5a      	ldr	r2, [pc, #360]	; (8008d0c <HAL_DMA_Abort_IT+0x3d8>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a59      	ldr	r2, [pc, #356]	; (8008d10 <HAL_DMA_Abort_IT+0x3dc>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a57      	ldr	r2, [pc, #348]	; (8008d14 <HAL_DMA_Abort_IT+0x3e0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_DMA_Abort_IT+0x290>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a56      	ldr	r2, [pc, #344]	; (8008d18 <HAL_DMA_Abort_IT+0x3e4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d108      	bne.n	8008bd6 <HAL_DMA_Abort_IT+0x2a2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f022 0201 	bic.w	r2, r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e007      	b.n	8008be6 <HAL_DMA_Abort_IT+0x2b2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0201 	bic.w	r2, r2, #1
 8008be4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a3c      	ldr	r2, [pc, #240]	; (8008cdc <HAL_DMA_Abort_IT+0x3a8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d072      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a3a      	ldr	r2, [pc, #232]	; (8008ce0 <HAL_DMA_Abort_IT+0x3ac>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d06d      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a39      	ldr	r2, [pc, #228]	; (8008ce4 <HAL_DMA_Abort_IT+0x3b0>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d068      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a37      	ldr	r2, [pc, #220]	; (8008ce8 <HAL_DMA_Abort_IT+0x3b4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d063      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a36      	ldr	r2, [pc, #216]	; (8008cec <HAL_DMA_Abort_IT+0x3b8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d05e      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a34      	ldr	r2, [pc, #208]	; (8008cf0 <HAL_DMA_Abort_IT+0x3bc>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d059      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a33      	ldr	r2, [pc, #204]	; (8008cf4 <HAL_DMA_Abort_IT+0x3c0>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d054      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a31      	ldr	r2, [pc, #196]	; (8008cf8 <HAL_DMA_Abort_IT+0x3c4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d04f      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a30      	ldr	r2, [pc, #192]	; (8008cfc <HAL_DMA_Abort_IT+0x3c8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d04a      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a2e      	ldr	r2, [pc, #184]	; (8008d00 <HAL_DMA_Abort_IT+0x3cc>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d045      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a2d      	ldr	r2, [pc, #180]	; (8008d04 <HAL_DMA_Abort_IT+0x3d0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d040      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a2b      	ldr	r2, [pc, #172]	; (8008d08 <HAL_DMA_Abort_IT+0x3d4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d03b      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a2a      	ldr	r2, [pc, #168]	; (8008d0c <HAL_DMA_Abort_IT+0x3d8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d036      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a28      	ldr	r2, [pc, #160]	; (8008d10 <HAL_DMA_Abort_IT+0x3dc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d031      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a27      	ldr	r2, [pc, #156]	; (8008d14 <HAL_DMA_Abort_IT+0x3e0>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d02c      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a25      	ldr	r2, [pc, #148]	; (8008d18 <HAL_DMA_Abort_IT+0x3e4>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d027      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a24      	ldr	r2, [pc, #144]	; (8008d1c <HAL_DMA_Abort_IT+0x3e8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d022      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a22      	ldr	r2, [pc, #136]	; (8008d20 <HAL_DMA_Abort_IT+0x3ec>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d01d      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a21      	ldr	r2, [pc, #132]	; (8008d24 <HAL_DMA_Abort_IT+0x3f0>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d018      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1f      	ldr	r2, [pc, #124]	; (8008d28 <HAL_DMA_Abort_IT+0x3f4>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a1e      	ldr	r2, [pc, #120]	; (8008d2c <HAL_DMA_Abort_IT+0x3f8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00e      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1c      	ldr	r2, [pc, #112]	; (8008d30 <HAL_DMA_Abort_IT+0x3fc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d009      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a1b      	ldr	r2, [pc, #108]	; (8008d34 <HAL_DMA_Abort_IT+0x400>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d004      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x3a2>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <HAL_DMA_Abort_IT+0x404>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d132      	bne.n	8008d3c <HAL_DMA_Abort_IT+0x408>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e031      	b.n	8008d3e <HAL_DMA_Abort_IT+0x40a>
 8008cda:	bf00      	nop
 8008cdc:	40020010 	.word	0x40020010
 8008ce0:	40020028 	.word	0x40020028
 8008ce4:	40020040 	.word	0x40020040
 8008ce8:	40020058 	.word	0x40020058
 8008cec:	40020070 	.word	0x40020070
 8008cf0:	40020088 	.word	0x40020088
 8008cf4:	400200a0 	.word	0x400200a0
 8008cf8:	400200b8 	.word	0x400200b8
 8008cfc:	40020410 	.word	0x40020410
 8008d00:	40020428 	.word	0x40020428
 8008d04:	40020440 	.word	0x40020440
 8008d08:	40020458 	.word	0x40020458
 8008d0c:	40020470 	.word	0x40020470
 8008d10:	40020488 	.word	0x40020488
 8008d14:	400204a0 	.word	0x400204a0
 8008d18:	400204b8 	.word	0x400204b8
 8008d1c:	58025408 	.word	0x58025408
 8008d20:	5802541c 	.word	0x5802541c
 8008d24:	58025430 	.word	0x58025430
 8008d28:	58025444 	.word	0x58025444
 8008d2c:	58025458 	.word	0x58025458
 8008d30:	5802546c 	.word	0x5802546c
 8008d34:	58025480 	.word	0x58025480
 8008d38:	58025494 	.word	0x58025494
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d028      	beq.n	8008d94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5c:	f003 031f 	and.w	r3, r3, #31
 8008d60:	2201      	movs	r2, #1
 8008d62:	409a      	lsls	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	; 0x28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008dcc:	4b67      	ldr	r3, [pc, #412]	; (8008f6c <HAL_DMA_IRQHandler+0x1ac>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a67      	ldr	r2, [pc, #412]	; (8008f70 <HAL_DMA_IRQHandler+0x1b0>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	0a9b      	lsrs	r3, r3, #10
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a5f      	ldr	r2, [pc, #380]	; (8008f74 <HAL_DMA_IRQHandler+0x1b4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d04a      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a5d      	ldr	r2, [pc, #372]	; (8008f78 <HAL_DMA_IRQHandler+0x1b8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d045      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a5c      	ldr	r2, [pc, #368]	; (8008f7c <HAL_DMA_IRQHandler+0x1bc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d040      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a5a      	ldr	r2, [pc, #360]	; (8008f80 <HAL_DMA_IRQHandler+0x1c0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d03b      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a59      	ldr	r2, [pc, #356]	; (8008f84 <HAL_DMA_IRQHandler+0x1c4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d036      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a57      	ldr	r2, [pc, #348]	; (8008f88 <HAL_DMA_IRQHandler+0x1c8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d031      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a56      	ldr	r2, [pc, #344]	; (8008f8c <HAL_DMA_IRQHandler+0x1cc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d02c      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a54      	ldr	r2, [pc, #336]	; (8008f90 <HAL_DMA_IRQHandler+0x1d0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d027      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a53      	ldr	r2, [pc, #332]	; (8008f94 <HAL_DMA_IRQHandler+0x1d4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d022      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a51      	ldr	r2, [pc, #324]	; (8008f98 <HAL_DMA_IRQHandler+0x1d8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d01d      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a50      	ldr	r2, [pc, #320]	; (8008f9c <HAL_DMA_IRQHandler+0x1dc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d018      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a4e      	ldr	r2, [pc, #312]	; (8008fa0 <HAL_DMA_IRQHandler+0x1e0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d013      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a4d      	ldr	r2, [pc, #308]	; (8008fa4 <HAL_DMA_IRQHandler+0x1e4>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00e      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a4b      	ldr	r2, [pc, #300]	; (8008fa8 <HAL_DMA_IRQHandler+0x1e8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d009      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a4a      	ldr	r2, [pc, #296]	; (8008fac <HAL_DMA_IRQHandler+0x1ec>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d004      	beq.n	8008e92 <HAL_DMA_IRQHandler+0xd2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a48      	ldr	r2, [pc, #288]	; (8008fb0 <HAL_DMA_IRQHandler+0x1f0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d101      	bne.n	8008e96 <HAL_DMA_IRQHandler+0xd6>
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <HAL_DMA_IRQHandler+0xd8>
 8008e96:	2300      	movs	r3, #0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 842b 	beq.w	80096f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	f003 031f 	and.w	r3, r3, #31
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	409a      	lsls	r2, r3
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 80a2 	beq.w	8008ff8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a2e      	ldr	r2, [pc, #184]	; (8008f74 <HAL_DMA_IRQHandler+0x1b4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d04a      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a2d      	ldr	r2, [pc, #180]	; (8008f78 <HAL_DMA_IRQHandler+0x1b8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d045      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a2b      	ldr	r2, [pc, #172]	; (8008f7c <HAL_DMA_IRQHandler+0x1bc>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d040      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a2a      	ldr	r2, [pc, #168]	; (8008f80 <HAL_DMA_IRQHandler+0x1c0>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d03b      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a28      	ldr	r2, [pc, #160]	; (8008f84 <HAL_DMA_IRQHandler+0x1c4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d036      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a27      	ldr	r2, [pc, #156]	; (8008f88 <HAL_DMA_IRQHandler+0x1c8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d031      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a25      	ldr	r2, [pc, #148]	; (8008f8c <HAL_DMA_IRQHandler+0x1cc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d02c      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a24      	ldr	r2, [pc, #144]	; (8008f90 <HAL_DMA_IRQHandler+0x1d0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d027      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <HAL_DMA_IRQHandler+0x1d4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d022      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <HAL_DMA_IRQHandler+0x1d8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d01d      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <HAL_DMA_IRQHandler+0x1dc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d018      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <HAL_DMA_IRQHandler+0x1e0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d013      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <HAL_DMA_IRQHandler+0x1e4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00e      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <HAL_DMA_IRQHandler+0x1e8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d009      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a19      	ldr	r2, [pc, #100]	; (8008fac <HAL_DMA_IRQHandler+0x1ec>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d004      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x194>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <HAL_DMA_IRQHandler+0x1f0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d12f      	bne.n	8008fb4 <HAL_DMA_IRQHandler+0x1f4>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bf14      	ite	ne
 8008f62:	2301      	movne	r3, #1
 8008f64:	2300      	moveq	r3, #0
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	e02e      	b.n	8008fc8 <HAL_DMA_IRQHandler+0x208>
 8008f6a:	bf00      	nop
 8008f6c:	20000004 	.word	0x20000004
 8008f70:	1b4e81b5 	.word	0x1b4e81b5
 8008f74:	40020010 	.word	0x40020010
 8008f78:	40020028 	.word	0x40020028
 8008f7c:	40020040 	.word	0x40020040
 8008f80:	40020058 	.word	0x40020058
 8008f84:	40020070 	.word	0x40020070
 8008f88:	40020088 	.word	0x40020088
 8008f8c:	400200a0 	.word	0x400200a0
 8008f90:	400200b8 	.word	0x400200b8
 8008f94:	40020410 	.word	0x40020410
 8008f98:	40020428 	.word	0x40020428
 8008f9c:	40020440 	.word	0x40020440
 8008fa0:	40020458 	.word	0x40020458
 8008fa4:	40020470 	.word	0x40020470
 8008fa8:	40020488 	.word	0x40020488
 8008fac:	400204a0 	.word	0x400204a0
 8008fb0:	400204b8 	.word	0x400204b8
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0308 	and.w	r3, r3, #8
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bf14      	ite	ne
 8008fc2:	2301      	movne	r3, #1
 8008fc4:	2300      	moveq	r3, #0
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d015      	beq.n	8008ff8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0204 	bic.w	r2, r2, #4
 8008fda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	409a      	lsls	r2, r3
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
 8008fea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff0:	f043 0201 	orr.w	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffc:	f003 031f 	and.w	r3, r3, #31
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	fa22 f303 	lsr.w	r3, r2, r3
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d06e      	beq.n	80090ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a69      	ldr	r2, [pc, #420]	; (80091b8 <HAL_DMA_IRQHandler+0x3f8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d04a      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a67      	ldr	r2, [pc, #412]	; (80091bc <HAL_DMA_IRQHandler+0x3fc>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d045      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a66      	ldr	r2, [pc, #408]	; (80091c0 <HAL_DMA_IRQHandler+0x400>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d040      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a64      	ldr	r2, [pc, #400]	; (80091c4 <HAL_DMA_IRQHandler+0x404>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d03b      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a63      	ldr	r2, [pc, #396]	; (80091c8 <HAL_DMA_IRQHandler+0x408>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d036      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a61      	ldr	r2, [pc, #388]	; (80091cc <HAL_DMA_IRQHandler+0x40c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d031      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a60      	ldr	r2, [pc, #384]	; (80091d0 <HAL_DMA_IRQHandler+0x410>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d02c      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a5e      	ldr	r2, [pc, #376]	; (80091d4 <HAL_DMA_IRQHandler+0x414>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d027      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a5d      	ldr	r2, [pc, #372]	; (80091d8 <HAL_DMA_IRQHandler+0x418>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d022      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a5b      	ldr	r2, [pc, #364]	; (80091dc <HAL_DMA_IRQHandler+0x41c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d01d      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a5a      	ldr	r2, [pc, #360]	; (80091e0 <HAL_DMA_IRQHandler+0x420>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d018      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a58      	ldr	r2, [pc, #352]	; (80091e4 <HAL_DMA_IRQHandler+0x424>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a57      	ldr	r2, [pc, #348]	; (80091e8 <HAL_DMA_IRQHandler+0x428>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a55      	ldr	r2, [pc, #340]	; (80091ec <HAL_DMA_IRQHandler+0x42c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a54      	ldr	r2, [pc, #336]	; (80091f0 <HAL_DMA_IRQHandler+0x430>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_DMA_IRQHandler+0x2ee>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a52      	ldr	r2, [pc, #328]	; (80091f4 <HAL_DMA_IRQHandler+0x434>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10a      	bne.n	80090c4 <HAL_DMA_IRQHandler+0x304>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bf14      	ite	ne
 80090bc:	2301      	movne	r3, #1
 80090be:	2300      	moveq	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	e003      	b.n	80090cc <HAL_DMA_IRQHandler+0x30c>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2300      	movs	r3, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00d      	beq.n	80090ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2201      	movs	r2, #1
 80090da:	409a      	lsls	r2, r3
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	f043 0202 	orr.w	r2, r3, #2
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	2204      	movs	r2, #4
 80090f6:	409a      	lsls	r2, r3
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 808f 	beq.w	8009220 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a2c      	ldr	r2, [pc, #176]	; (80091b8 <HAL_DMA_IRQHandler+0x3f8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d04a      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a2a      	ldr	r2, [pc, #168]	; (80091bc <HAL_DMA_IRQHandler+0x3fc>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d045      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a29      	ldr	r2, [pc, #164]	; (80091c0 <HAL_DMA_IRQHandler+0x400>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d040      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a27      	ldr	r2, [pc, #156]	; (80091c4 <HAL_DMA_IRQHandler+0x404>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d03b      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a26      	ldr	r2, [pc, #152]	; (80091c8 <HAL_DMA_IRQHandler+0x408>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d036      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a24      	ldr	r2, [pc, #144]	; (80091cc <HAL_DMA_IRQHandler+0x40c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d031      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a23      	ldr	r2, [pc, #140]	; (80091d0 <HAL_DMA_IRQHandler+0x410>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d02c      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a21      	ldr	r2, [pc, #132]	; (80091d4 <HAL_DMA_IRQHandler+0x414>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d027      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a20      	ldr	r2, [pc, #128]	; (80091d8 <HAL_DMA_IRQHandler+0x418>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d022      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <HAL_DMA_IRQHandler+0x41c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01d      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1d      	ldr	r2, [pc, #116]	; (80091e0 <HAL_DMA_IRQHandler+0x420>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d018      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <HAL_DMA_IRQHandler+0x424>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d013      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a1a      	ldr	r2, [pc, #104]	; (80091e8 <HAL_DMA_IRQHandler+0x428>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00e      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_DMA_IRQHandler+0x42c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d009      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <HAL_DMA_IRQHandler+0x430>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d004      	beq.n	80091a2 <HAL_DMA_IRQHandler+0x3e2>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a15      	ldr	r2, [pc, #84]	; (80091f4 <HAL_DMA_IRQHandler+0x434>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d12a      	bne.n	80091f8 <HAL_DMA_IRQHandler+0x438>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0302 	and.w	r3, r3, #2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf14      	ite	ne
 80091b0:	2301      	movne	r3, #1
 80091b2:	2300      	moveq	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	e023      	b.n	8009200 <HAL_DMA_IRQHandler+0x440>
 80091b8:	40020010 	.word	0x40020010
 80091bc:	40020028 	.word	0x40020028
 80091c0:	40020040 	.word	0x40020040
 80091c4:	40020058 	.word	0x40020058
 80091c8:	40020070 	.word	0x40020070
 80091cc:	40020088 	.word	0x40020088
 80091d0:	400200a0 	.word	0x400200a0
 80091d4:	400200b8 	.word	0x400200b8
 80091d8:	40020410 	.word	0x40020410
 80091dc:	40020428 	.word	0x40020428
 80091e0:	40020440 	.word	0x40020440
 80091e4:	40020458 	.word	0x40020458
 80091e8:	40020470 	.word	0x40020470
 80091ec:	40020488 	.word	0x40020488
 80091f0:	400204a0 	.word	0x400204a0
 80091f4:	400204b8 	.word	0x400204b8
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00d      	beq.n	8009220 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	2204      	movs	r2, #4
 800920e:	409a      	lsls	r2, r3
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009218:	f043 0204 	orr.w	r2, r3, #4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	2210      	movs	r2, #16
 800922a:	409a      	lsls	r2, r3
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80a6 	beq.w	8009382 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a85      	ldr	r2, [pc, #532]	; (8009450 <HAL_DMA_IRQHandler+0x690>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d04a      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a83      	ldr	r2, [pc, #524]	; (8009454 <HAL_DMA_IRQHandler+0x694>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d045      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a82      	ldr	r2, [pc, #520]	; (8009458 <HAL_DMA_IRQHandler+0x698>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d040      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a80      	ldr	r2, [pc, #512]	; (800945c <HAL_DMA_IRQHandler+0x69c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d03b      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a7f      	ldr	r2, [pc, #508]	; (8009460 <HAL_DMA_IRQHandler+0x6a0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d036      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a7d      	ldr	r2, [pc, #500]	; (8009464 <HAL_DMA_IRQHandler+0x6a4>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d031      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a7c      	ldr	r2, [pc, #496]	; (8009468 <HAL_DMA_IRQHandler+0x6a8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d02c      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a7a      	ldr	r2, [pc, #488]	; (800946c <HAL_DMA_IRQHandler+0x6ac>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d027      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a79      	ldr	r2, [pc, #484]	; (8009470 <HAL_DMA_IRQHandler+0x6b0>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d022      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a77      	ldr	r2, [pc, #476]	; (8009474 <HAL_DMA_IRQHandler+0x6b4>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d01d      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a76      	ldr	r2, [pc, #472]	; (8009478 <HAL_DMA_IRQHandler+0x6b8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d018      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a74      	ldr	r2, [pc, #464]	; (800947c <HAL_DMA_IRQHandler+0x6bc>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a73      	ldr	r2, [pc, #460]	; (8009480 <HAL_DMA_IRQHandler+0x6c0>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00e      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a71      	ldr	r2, [pc, #452]	; (8009484 <HAL_DMA_IRQHandler+0x6c4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d009      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a70      	ldr	r2, [pc, #448]	; (8009488 <HAL_DMA_IRQHandler+0x6c8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d004      	beq.n	80092d6 <HAL_DMA_IRQHandler+0x516>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a6e      	ldr	r2, [pc, #440]	; (800948c <HAL_DMA_IRQHandler+0x6cc>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d10a      	bne.n	80092ec <HAL_DMA_IRQHandler+0x52c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0308 	and.w	r3, r3, #8
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bf14      	ite	ne
 80092e4:	2301      	movne	r3, #1
 80092e6:	2300      	moveq	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	e009      	b.n	8009300 <HAL_DMA_IRQHandler+0x540>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf14      	ite	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	2300      	moveq	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d03e      	beq.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	2210      	movs	r2, #16
 800930e:	409a      	lsls	r2, r3
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d018      	beq.n	8009354 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d108      	bne.n	8009342 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d024      	beq.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	4798      	blx	r3
 8009340:	e01f      	b.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01b      	beq.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	e016      	b.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800935e:	2b00      	cmp	r3, #0
 8009360:	d107      	bne.n	8009372 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0208 	bic.w	r2, r2, #8
 8009370:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	2220      	movs	r2, #32
 800938c:	409a      	lsls	r2, r3
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8110 	beq.w	80095b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a2c      	ldr	r2, [pc, #176]	; (8009450 <HAL_DMA_IRQHandler+0x690>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d04a      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a2b      	ldr	r2, [pc, #172]	; (8009454 <HAL_DMA_IRQHandler+0x694>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d045      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a29      	ldr	r2, [pc, #164]	; (8009458 <HAL_DMA_IRQHandler+0x698>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d040      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a28      	ldr	r2, [pc, #160]	; (800945c <HAL_DMA_IRQHandler+0x69c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d03b      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a26      	ldr	r2, [pc, #152]	; (8009460 <HAL_DMA_IRQHandler+0x6a0>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d036      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a25      	ldr	r2, [pc, #148]	; (8009464 <HAL_DMA_IRQHandler+0x6a4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d031      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a23      	ldr	r2, [pc, #140]	; (8009468 <HAL_DMA_IRQHandler+0x6a8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d02c      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a22      	ldr	r2, [pc, #136]	; (800946c <HAL_DMA_IRQHandler+0x6ac>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d027      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a20      	ldr	r2, [pc, #128]	; (8009470 <HAL_DMA_IRQHandler+0x6b0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d022      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1f      	ldr	r2, [pc, #124]	; (8009474 <HAL_DMA_IRQHandler+0x6b4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d01d      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1d      	ldr	r2, [pc, #116]	; (8009478 <HAL_DMA_IRQHandler+0x6b8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d018      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1c      	ldr	r2, [pc, #112]	; (800947c <HAL_DMA_IRQHandler+0x6bc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d013      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a1a      	ldr	r2, [pc, #104]	; (8009480 <HAL_DMA_IRQHandler+0x6c0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00e      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a19      	ldr	r2, [pc, #100]	; (8009484 <HAL_DMA_IRQHandler+0x6c4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d009      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a17      	ldr	r2, [pc, #92]	; (8009488 <HAL_DMA_IRQHandler+0x6c8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <HAL_DMA_IRQHandler+0x678>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a16      	ldr	r2, [pc, #88]	; (800948c <HAL_DMA_IRQHandler+0x6cc>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d12b      	bne.n	8009490 <HAL_DMA_IRQHandler+0x6d0>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b00      	cmp	r3, #0
 8009444:	bf14      	ite	ne
 8009446:	2301      	movne	r3, #1
 8009448:	2300      	moveq	r3, #0
 800944a:	b2db      	uxtb	r3, r3
 800944c:	e02a      	b.n	80094a4 <HAL_DMA_IRQHandler+0x6e4>
 800944e:	bf00      	nop
 8009450:	40020010 	.word	0x40020010
 8009454:	40020028 	.word	0x40020028
 8009458:	40020040 	.word	0x40020040
 800945c:	40020058 	.word	0x40020058
 8009460:	40020070 	.word	0x40020070
 8009464:	40020088 	.word	0x40020088
 8009468:	400200a0 	.word	0x400200a0
 800946c:	400200b8 	.word	0x400200b8
 8009470:	40020410 	.word	0x40020410
 8009474:	40020428 	.word	0x40020428
 8009478:	40020440 	.word	0x40020440
 800947c:	40020458 	.word	0x40020458
 8009480:	40020470 	.word	0x40020470
 8009484:	40020488 	.word	0x40020488
 8009488:	400204a0 	.word	0x400204a0
 800948c:	400204b8 	.word	0x400204b8
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	bf14      	ite	ne
 800949e:	2301      	movne	r3, #1
 80094a0:	2300      	moveq	r3, #0
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 8087 	beq.w	80095b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	2220      	movs	r2, #32
 80094b4:	409a      	lsls	r2, r3
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d139      	bne.n	800953a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0216 	bic.w	r2, r2, #22
 80094d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695a      	ldr	r2, [r3, #20]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d103      	bne.n	80094f6 <HAL_DMA_IRQHandler+0x736>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0208 	bic.w	r2, r2, #8
 8009504:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800950a:	f003 031f 	and.w	r3, r3, #31
 800950e:	223f      	movs	r2, #63	; 0x3f
 8009510:	409a      	lsls	r2, r3
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 834a 	beq.w	8009bc4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
          }
          return;
 8009538:	e344      	b.n	8009bc4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d018      	beq.n	800957a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d108      	bne.n	8009568 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	2b00      	cmp	r3, #0
 800955c:	d02c      	beq.n	80095b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
 8009566:	e027      	b.n	80095b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d023      	beq.n	80095b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
 8009578:	e01e      	b.n	80095b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10f      	bne.n	80095a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0210 	bic.w	r2, r2, #16
 8009596:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8306 	beq.w	8009bce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8088 	beq.w	80096e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a7a      	ldr	r2, [pc, #488]	; (80097c8 <HAL_DMA_IRQHandler+0xa08>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d04a      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a79      	ldr	r2, [pc, #484]	; (80097cc <HAL_DMA_IRQHandler+0xa0c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d045      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a77      	ldr	r2, [pc, #476]	; (80097d0 <HAL_DMA_IRQHandler+0xa10>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d040      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a76      	ldr	r2, [pc, #472]	; (80097d4 <HAL_DMA_IRQHandler+0xa14>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d03b      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a74      	ldr	r2, [pc, #464]	; (80097d8 <HAL_DMA_IRQHandler+0xa18>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d036      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a73      	ldr	r2, [pc, #460]	; (80097dc <HAL_DMA_IRQHandler+0xa1c>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d031      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a71      	ldr	r2, [pc, #452]	; (80097e0 <HAL_DMA_IRQHandler+0xa20>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d02c      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a70      	ldr	r2, [pc, #448]	; (80097e4 <HAL_DMA_IRQHandler+0xa24>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d027      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a6e      	ldr	r2, [pc, #440]	; (80097e8 <HAL_DMA_IRQHandler+0xa28>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d022      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a6d      	ldr	r2, [pc, #436]	; (80097ec <HAL_DMA_IRQHandler+0xa2c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d01d      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a6b      	ldr	r2, [pc, #428]	; (80097f0 <HAL_DMA_IRQHandler+0xa30>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d018      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a6a      	ldr	r2, [pc, #424]	; (80097f4 <HAL_DMA_IRQHandler+0xa34>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d013      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a68      	ldr	r2, [pc, #416]	; (80097f8 <HAL_DMA_IRQHandler+0xa38>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00e      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a67      	ldr	r2, [pc, #412]	; (80097fc <HAL_DMA_IRQHandler+0xa3c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d009      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a65      	ldr	r2, [pc, #404]	; (8009800 <HAL_DMA_IRQHandler+0xa40>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d004      	beq.n	8009678 <HAL_DMA_IRQHandler+0x8b8>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a64      	ldr	r2, [pc, #400]	; (8009804 <HAL_DMA_IRQHandler+0xa44>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d108      	bne.n	800968a <HAL_DMA_IRQHandler+0x8ca>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0201 	bic.w	r2, r2, #1
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	e007      	b.n	800969a <HAL_DMA_IRQHandler+0x8da>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 0201 	bic.w	r2, r2, #1
 8009698:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3301      	adds	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d307      	bcc.n	80096b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f2      	bne.n	800969a <HAL_DMA_IRQHandler+0x8da>
 80096b4:	e000      	b.n	80096b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80096b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d004      	beq.n	80096d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2203      	movs	r2, #3
 80096ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80096ce:	e003      	b.n	80096d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8272 	beq.w	8009bce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
 80096f2:	e26c      	b.n	8009bce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a43      	ldr	r2, [pc, #268]	; (8009808 <HAL_DMA_IRQHandler+0xa48>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d022      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a42      	ldr	r2, [pc, #264]	; (800980c <HAL_DMA_IRQHandler+0xa4c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d01d      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a40      	ldr	r2, [pc, #256]	; (8009810 <HAL_DMA_IRQHandler+0xa50>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d018      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a3f      	ldr	r2, [pc, #252]	; (8009814 <HAL_DMA_IRQHandler+0xa54>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d013      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a3d      	ldr	r2, [pc, #244]	; (8009818 <HAL_DMA_IRQHandler+0xa58>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00e      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a3c      	ldr	r2, [pc, #240]	; (800981c <HAL_DMA_IRQHandler+0xa5c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d009      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a3a      	ldr	r2, [pc, #232]	; (8009820 <HAL_DMA_IRQHandler+0xa60>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d004      	beq.n	8009744 <HAL_DMA_IRQHandler+0x984>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a39      	ldr	r2, [pc, #228]	; (8009824 <HAL_DMA_IRQHandler+0xa64>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d101      	bne.n	8009748 <HAL_DMA_IRQHandler+0x988>
 8009744:	2301      	movs	r3, #1
 8009746:	e000      	b.n	800974a <HAL_DMA_IRQHandler+0x98a>
 8009748:	2300      	movs	r3, #0
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 823f 	beq.w	8009bce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2204      	movs	r2, #4
 8009762:	409a      	lsls	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 80cd 	beq.w	8009908 <HAL_DMA_IRQHandler+0xb48>
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80c7 	beq.w	8009908 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	2204      	movs	r2, #4
 8009784:	409a      	lsls	r2, r3
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d049      	beq.n	8009828 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d109      	bne.n	80097b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 8210 	beq.w	8009bc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097b0:	e20a      	b.n	8009bc8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 8206 	beq.w	8009bc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097c4:	e200      	b.n	8009bc8 <HAL_DMA_IRQHandler+0xe08>
 80097c6:	bf00      	nop
 80097c8:	40020010 	.word	0x40020010
 80097cc:	40020028 	.word	0x40020028
 80097d0:	40020040 	.word	0x40020040
 80097d4:	40020058 	.word	0x40020058
 80097d8:	40020070 	.word	0x40020070
 80097dc:	40020088 	.word	0x40020088
 80097e0:	400200a0 	.word	0x400200a0
 80097e4:	400200b8 	.word	0x400200b8
 80097e8:	40020410 	.word	0x40020410
 80097ec:	40020428 	.word	0x40020428
 80097f0:	40020440 	.word	0x40020440
 80097f4:	40020458 	.word	0x40020458
 80097f8:	40020470 	.word	0x40020470
 80097fc:	40020488 	.word	0x40020488
 8009800:	400204a0 	.word	0x400204a0
 8009804:	400204b8 	.word	0x400204b8
 8009808:	58025408 	.word	0x58025408
 800980c:	5802541c 	.word	0x5802541c
 8009810:	58025430 	.word	0x58025430
 8009814:	58025444 	.word	0x58025444
 8009818:	58025458 	.word	0x58025458
 800981c:	5802546c 	.word	0x5802546c
 8009820:	58025480 	.word	0x58025480
 8009824:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d160      	bne.n	80098f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a7f      	ldr	r2, [pc, #508]	; (8009a34 <HAL_DMA_IRQHandler+0xc74>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d04a      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a7d      	ldr	r2, [pc, #500]	; (8009a38 <HAL_DMA_IRQHandler+0xc78>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d045      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a7c      	ldr	r2, [pc, #496]	; (8009a3c <HAL_DMA_IRQHandler+0xc7c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d040      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a7a      	ldr	r2, [pc, #488]	; (8009a40 <HAL_DMA_IRQHandler+0xc80>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d03b      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a79      	ldr	r2, [pc, #484]	; (8009a44 <HAL_DMA_IRQHandler+0xc84>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d036      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a77      	ldr	r2, [pc, #476]	; (8009a48 <HAL_DMA_IRQHandler+0xc88>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d031      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a76      	ldr	r2, [pc, #472]	; (8009a4c <HAL_DMA_IRQHandler+0xc8c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d02c      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a74      	ldr	r2, [pc, #464]	; (8009a50 <HAL_DMA_IRQHandler+0xc90>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d027      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a73      	ldr	r2, [pc, #460]	; (8009a54 <HAL_DMA_IRQHandler+0xc94>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d022      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a71      	ldr	r2, [pc, #452]	; (8009a58 <HAL_DMA_IRQHandler+0xc98>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d01d      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a70      	ldr	r2, [pc, #448]	; (8009a5c <HAL_DMA_IRQHandler+0xc9c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d018      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a6e      	ldr	r2, [pc, #440]	; (8009a60 <HAL_DMA_IRQHandler+0xca0>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a6d      	ldr	r2, [pc, #436]	; (8009a64 <HAL_DMA_IRQHandler+0xca4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00e      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a6b      	ldr	r2, [pc, #428]	; (8009a68 <HAL_DMA_IRQHandler+0xca8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d009      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a6a      	ldr	r2, [pc, #424]	; (8009a6c <HAL_DMA_IRQHandler+0xcac>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d004      	beq.n	80098d2 <HAL_DMA_IRQHandler+0xb12>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a68      	ldr	r2, [pc, #416]	; (8009a70 <HAL_DMA_IRQHandler+0xcb0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d108      	bne.n	80098e4 <HAL_DMA_IRQHandler+0xb24>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0208 	bic.w	r2, r2, #8
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e007      	b.n	80098f4 <HAL_DMA_IRQHandler+0xb34>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0204 	bic.w	r2, r2, #4
 80098f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8165 	beq.w	8009bc8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009906:	e15f      	b.n	8009bc8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2202      	movs	r2, #2
 8009912:	409a      	lsls	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4013      	ands	r3, r2
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80c5 	beq.w	8009aa8 <HAL_DMA_IRQHandler+0xce8>
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80bf 	beq.w	8009aa8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992e:	f003 031f 	and.w	r3, r3, #31
 8009932:	2202      	movs	r2, #2
 8009934:	409a      	lsls	r2, r3
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d018      	beq.n	8009976 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 813a 	beq.w	8009bcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009960:	e134      	b.n	8009bcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 8130 	beq.w	8009bcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009974:	e12a      	b.n	8009bcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b00      	cmp	r3, #0
 800997e:	f040 8089 	bne.w	8009a94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <HAL_DMA_IRQHandler+0xc74>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d04a      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a29      	ldr	r2, [pc, #164]	; (8009a38 <HAL_DMA_IRQHandler+0xc78>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d045      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a28      	ldr	r2, [pc, #160]	; (8009a3c <HAL_DMA_IRQHandler+0xc7c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d040      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a26      	ldr	r2, [pc, #152]	; (8009a40 <HAL_DMA_IRQHandler+0xc80>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d03b      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a25      	ldr	r2, [pc, #148]	; (8009a44 <HAL_DMA_IRQHandler+0xc84>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d036      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a23      	ldr	r2, [pc, #140]	; (8009a48 <HAL_DMA_IRQHandler+0xc88>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d031      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a22      	ldr	r2, [pc, #136]	; (8009a4c <HAL_DMA_IRQHandler+0xc8c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d02c      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a20      	ldr	r2, [pc, #128]	; (8009a50 <HAL_DMA_IRQHandler+0xc90>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d027      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1f      	ldr	r2, [pc, #124]	; (8009a54 <HAL_DMA_IRQHandler+0xc94>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d022      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a1d      	ldr	r2, [pc, #116]	; (8009a58 <HAL_DMA_IRQHandler+0xc98>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01d      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a1c      	ldr	r2, [pc, #112]	; (8009a5c <HAL_DMA_IRQHandler+0xc9c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d018      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1a      	ldr	r2, [pc, #104]	; (8009a60 <HAL_DMA_IRQHandler+0xca0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d013      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <HAL_DMA_IRQHandler+0xca4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00e      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <HAL_DMA_IRQHandler+0xca8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d009      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a16      	ldr	r2, [pc, #88]	; (8009a6c <HAL_DMA_IRQHandler+0xcac>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <HAL_DMA_IRQHandler+0xc62>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a14      	ldr	r2, [pc, #80]	; (8009a70 <HAL_DMA_IRQHandler+0xcb0>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d128      	bne.n	8009a74 <HAL_DMA_IRQHandler+0xcb4>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0214 	bic.w	r2, r2, #20
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e027      	b.n	8009a84 <HAL_DMA_IRQHandler+0xcc4>
 8009a34:	40020010 	.word	0x40020010
 8009a38:	40020028 	.word	0x40020028
 8009a3c:	40020040 	.word	0x40020040
 8009a40:	40020058 	.word	0x40020058
 8009a44:	40020070 	.word	0x40020070
 8009a48:	40020088 	.word	0x40020088
 8009a4c:	400200a0 	.word	0x400200a0
 8009a50:	400200b8 	.word	0x400200b8
 8009a54:	40020410 	.word	0x40020410
 8009a58:	40020428 	.word	0x40020428
 8009a5c:	40020440 	.word	0x40020440
 8009a60:	40020458 	.word	0x40020458
 8009a64:	40020470 	.word	0x40020470
 8009a68:	40020488 	.word	0x40020488
 8009a6c:	400204a0 	.word	0x400204a0
 8009a70:	400204b8 	.word	0x400204b8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f022 020a 	bic.w	r2, r2, #10
 8009a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f000 8097 	beq.w	8009bcc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009aa6:	e091      	b.n	8009bcc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	409a      	lsls	r2, r3
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8088 	beq.w	8009bce <HAL_DMA_IRQHandler+0xe0e>
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f003 0308 	and.w	r3, r3, #8
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8082 	beq.w	8009bce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a41      	ldr	r2, [pc, #260]	; (8009bd4 <HAL_DMA_IRQHandler+0xe14>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d04a      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a3f      	ldr	r2, [pc, #252]	; (8009bd8 <HAL_DMA_IRQHandler+0xe18>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d045      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a3e      	ldr	r2, [pc, #248]	; (8009bdc <HAL_DMA_IRQHandler+0xe1c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d040      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a3c      	ldr	r2, [pc, #240]	; (8009be0 <HAL_DMA_IRQHandler+0xe20>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d03b      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a3b      	ldr	r2, [pc, #236]	; (8009be4 <HAL_DMA_IRQHandler+0xe24>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d036      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a39      	ldr	r2, [pc, #228]	; (8009be8 <HAL_DMA_IRQHandler+0xe28>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d031      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a38      	ldr	r2, [pc, #224]	; (8009bec <HAL_DMA_IRQHandler+0xe2c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d02c      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a36      	ldr	r2, [pc, #216]	; (8009bf0 <HAL_DMA_IRQHandler+0xe30>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d027      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a35      	ldr	r2, [pc, #212]	; (8009bf4 <HAL_DMA_IRQHandler+0xe34>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d022      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a33      	ldr	r2, [pc, #204]	; (8009bf8 <HAL_DMA_IRQHandler+0xe38>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01d      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a32      	ldr	r2, [pc, #200]	; (8009bfc <HAL_DMA_IRQHandler+0xe3c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d018      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a30      	ldr	r2, [pc, #192]	; (8009c00 <HAL_DMA_IRQHandler+0xe40>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a2f      	ldr	r2, [pc, #188]	; (8009c04 <HAL_DMA_IRQHandler+0xe44>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a2d      	ldr	r2, [pc, #180]	; (8009c08 <HAL_DMA_IRQHandler+0xe48>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a2c      	ldr	r2, [pc, #176]	; (8009c0c <HAL_DMA_IRQHandler+0xe4c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xdaa>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a2a      	ldr	r2, [pc, #168]	; (8009c10 <HAL_DMA_IRQHandler+0xe50>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d108      	bne.n	8009b7c <HAL_DMA_IRQHandler+0xdbc>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 021c 	bic.w	r2, r2, #28
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e007      	b.n	8009b8c <HAL_DMA_IRQHandler+0xdcc>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 020e 	bic.w	r2, r2, #14
 8009b8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	2201      	movs	r2, #1
 8009b96:	409a      	lsls	r2, r3
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d009      	beq.n	8009bce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	e004      	b.n	8009bce <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009bc4:	bf00      	nop
 8009bc6:	e002      	b.n	8009bce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bc8:	bf00      	nop
 8009bca:	e000      	b.n	8009bce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bcc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009bce:	3728      	adds	r7, #40	; 0x28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40020010 	.word	0x40020010
 8009bd8:	40020028 	.word	0x40020028
 8009bdc:	40020040 	.word	0x40020040
 8009be0:	40020058 	.word	0x40020058
 8009be4:	40020070 	.word	0x40020070
 8009be8:	40020088 	.word	0x40020088
 8009bec:	400200a0 	.word	0x400200a0
 8009bf0:	400200b8 	.word	0x400200b8
 8009bf4:	40020410 	.word	0x40020410
 8009bf8:	40020428 	.word	0x40020428
 8009bfc:	40020440 	.word	0x40020440
 8009c00:	40020458 	.word	0x40020458
 8009c04:	40020470 	.word	0x40020470
 8009c08:	40020488 	.word	0x40020488
 8009c0c:	400204a0 	.word	0x400204a0
 8009c10:	400204b8 	.word	0x400204b8

08009c14 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c22:	b2db      	uxtb	r3, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a42      	ldr	r2, [pc, #264]	; (8009d48 <DMA_CalcBaseAndBitshift+0x118>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d04a      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a41      	ldr	r2, [pc, #260]	; (8009d4c <DMA_CalcBaseAndBitshift+0x11c>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d045      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a3f      	ldr	r2, [pc, #252]	; (8009d50 <DMA_CalcBaseAndBitshift+0x120>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d040      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a3e      	ldr	r2, [pc, #248]	; (8009d54 <DMA_CalcBaseAndBitshift+0x124>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d03b      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a3c      	ldr	r2, [pc, #240]	; (8009d58 <DMA_CalcBaseAndBitshift+0x128>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d036      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a3b      	ldr	r2, [pc, #236]	; (8009d5c <DMA_CalcBaseAndBitshift+0x12c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d031      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a39      	ldr	r2, [pc, #228]	; (8009d60 <DMA_CalcBaseAndBitshift+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d02c      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a38      	ldr	r2, [pc, #224]	; (8009d64 <DMA_CalcBaseAndBitshift+0x134>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d027      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a36      	ldr	r2, [pc, #216]	; (8009d68 <DMA_CalcBaseAndBitshift+0x138>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d022      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a35      	ldr	r2, [pc, #212]	; (8009d6c <DMA_CalcBaseAndBitshift+0x13c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d01d      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a33      	ldr	r2, [pc, #204]	; (8009d70 <DMA_CalcBaseAndBitshift+0x140>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d018      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a32      	ldr	r2, [pc, #200]	; (8009d74 <DMA_CalcBaseAndBitshift+0x144>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d013      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a30      	ldr	r2, [pc, #192]	; (8009d78 <DMA_CalcBaseAndBitshift+0x148>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d00e      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a2f      	ldr	r2, [pc, #188]	; (8009d7c <DMA_CalcBaseAndBitshift+0x14c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d009      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a2d      	ldr	r2, [pc, #180]	; (8009d80 <DMA_CalcBaseAndBitshift+0x150>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a2c      	ldr	r2, [pc, #176]	; (8009d84 <DMA_CalcBaseAndBitshift+0x154>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d101      	bne.n	8009cdc <DMA_CalcBaseAndBitshift+0xac>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <DMA_CalcBaseAndBitshift+0xae>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d024      	beq.n	8009d2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	3b10      	subs	r3, #16
 8009cea:	4a27      	ldr	r2, [pc, #156]	; (8009d88 <DMA_CalcBaseAndBitshift+0x158>)
 8009cec:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf0:	091b      	lsrs	r3, r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	4a24      	ldr	r2, [pc, #144]	; (8009d8c <DMA_CalcBaseAndBitshift+0x15c>)
 8009cfc:	5cd3      	ldrb	r3, [r2, r3]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d908      	bls.n	8009d1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	4b1f      	ldr	r3, [pc, #124]	; (8009d90 <DMA_CalcBaseAndBitshift+0x160>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	1d1a      	adds	r2, r3, #4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	659a      	str	r2, [r3, #88]	; 0x58
 8009d1a:	e00d      	b.n	8009d38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <DMA_CalcBaseAndBitshift+0x160>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	6593      	str	r3, [r2, #88]	; 0x58
 8009d2a:	e005      	b.n	8009d38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	40020010 	.word	0x40020010
 8009d4c:	40020028 	.word	0x40020028
 8009d50:	40020040 	.word	0x40020040
 8009d54:	40020058 	.word	0x40020058
 8009d58:	40020070 	.word	0x40020070
 8009d5c:	40020088 	.word	0x40020088
 8009d60:	400200a0 	.word	0x400200a0
 8009d64:	400200b8 	.word	0x400200b8
 8009d68:	40020410 	.word	0x40020410
 8009d6c:	40020428 	.word	0x40020428
 8009d70:	40020440 	.word	0x40020440
 8009d74:	40020458 	.word	0x40020458
 8009d78:	40020470 	.word	0x40020470
 8009d7c:	40020488 	.word	0x40020488
 8009d80:	400204a0 	.word	0x400204a0
 8009d84:	400204b8 	.word	0x400204b8
 8009d88:	aaaaaaab 	.word	0xaaaaaaab
 8009d8c:	08015618 	.word	0x08015618
 8009d90:	fffffc00 	.word	0xfffffc00

08009d94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d120      	bne.n	8009dea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d858      	bhi.n	8009e62 <DMA_CheckFifoParam+0xce>
 8009db0:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <DMA_CheckFifoParam+0x24>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009ddb 	.word	0x08009ddb
 8009dc0:	08009dc9 	.word	0x08009dc9
 8009dc4:	08009e63 	.word	0x08009e63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d048      	beq.n	8009e66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009dd8:	e045      	b.n	8009e66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009de2:	d142      	bne.n	8009e6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009de8:	e03f      	b.n	8009e6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df2:	d123      	bne.n	8009e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d838      	bhi.n	8009e6e <DMA_CheckFifoParam+0xda>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <DMA_CheckFifoParam+0x70>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e1b 	.word	0x08009e1b
 8009e0c:	08009e15 	.word	0x08009e15
 8009e10:	08009e2d 	.word	0x08009e2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
        break;
 8009e18:	e030      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d025      	beq.n	8009e72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e2a:	e022      	b.n	8009e72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e34:	d11f      	bne.n	8009e76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009e3a:	e01c      	b.n	8009e76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d902      	bls.n	8009e4a <DMA_CheckFifoParam+0xb6>
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d003      	beq.n	8009e50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009e48:	e018      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8009e4e:	e015      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e60:	e00b      	b.n	8009e7a <DMA_CheckFifoParam+0xe6>
        break;
 8009e62:	bf00      	nop
 8009e64:	e00a      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        break;
 8009e66:	bf00      	nop
 8009e68:	e008      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        break;
 8009e6a:	bf00      	nop
 8009e6c:	e006      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        break;
 8009e6e:	bf00      	nop
 8009e70:	e004      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        break;
 8009e72:	bf00      	nop
 8009e74:	e002      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
        break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <DMA_CheckFifoParam+0xe8>
    break;
 8009e7a:	bf00      	nop
    }
  }

  return status;
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop

08009e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a38      	ldr	r2, [pc, #224]	; (8009f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d022      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a36      	ldr	r2, [pc, #216]	; (8009f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01d      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a35      	ldr	r2, [pc, #212]	; (8009f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d018      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a33      	ldr	r2, [pc, #204]	; (8009f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d013      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a32      	ldr	r2, [pc, #200]	; (8009f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00e      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a30      	ldr	r2, [pc, #192]	; (8009f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d009      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a2f      	ldr	r2, [pc, #188]	; (8009f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d004      	beq.n	8009eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a2d      	ldr	r2, [pc, #180]	; (8009f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d101      	bne.n	8009eee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01a      	beq.n	8009f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	3b08      	subs	r3, #8
 8009efc:	4a28      	ldr	r2, [pc, #160]	; (8009fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009efe:	fba2 2303 	umull	r2, r3, r2, r3
 8009f02:	091b      	lsrs	r3, r3, #4
 8009f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	4b26      	ldr	r3, [pc, #152]	; (8009fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	461a      	mov	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a24      	ldr	r2, [pc, #144]	; (8009fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 031f 	and.w	r3, r3, #31
 8009f20:	2201      	movs	r2, #1
 8009f22:	409a      	lsls	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009f28:	e024      	b.n	8009f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	3b10      	subs	r3, #16
 8009f32:	4a1e      	ldr	r2, [pc, #120]	; (8009fac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009f34:	fba2 2303 	umull	r2, r3, r2, r3
 8009f38:	091b      	lsrs	r3, r3, #4
 8009f3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4a1c      	ldr	r2, [pc, #112]	; (8009fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d806      	bhi.n	8009f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	4a1b      	ldr	r2, [pc, #108]	; (8009fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d902      	bls.n	8009f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3308      	adds	r3, #8
 8009f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009f64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	409a      	lsls	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	58025408 	.word	0x58025408
 8009f84:	5802541c 	.word	0x5802541c
 8009f88:	58025430 	.word	0x58025430
 8009f8c:	58025444 	.word	0x58025444
 8009f90:	58025458 	.word	0x58025458
 8009f94:	5802546c 	.word	0x5802546c
 8009f98:	58025480 	.word	0x58025480
 8009f9c:	58025494 	.word	0x58025494
 8009fa0:	cccccccd 	.word	0xcccccccd
 8009fa4:	16009600 	.word	0x16009600
 8009fa8:	58025880 	.word	0x58025880
 8009fac:	aaaaaaab 	.word	0xaaaaaaab
 8009fb0:	400204b8 	.word	0x400204b8
 8009fb4:	4002040f 	.word	0x4002040f
 8009fb8:	10008200 	.word	0x10008200
 8009fbc:	40020880 	.word	0x40020880

08009fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d04a      	beq.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d847      	bhi.n	800a06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a25      	ldr	r2, [pc, #148]	; (800a078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d022      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a24      	ldr	r2, [pc, #144]	; (800a07c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d01d      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a22      	ldr	r2, [pc, #136]	; (800a080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d018      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a21      	ldr	r2, [pc, #132]	; (800a084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d013      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a1f      	ldr	r2, [pc, #124]	; (800a088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d00e      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d009      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a1c      	ldr	r2, [pc, #112]	; (800a090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d004      	beq.n	800a02c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a1b      	ldr	r2, [pc, #108]	; (800a094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d101      	bne.n	800a030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e000      	b.n	800a032 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a030:	2300      	movs	r3, #0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4b17      	ldr	r3, [pc, #92]	; (800a098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a15      	ldr	r2, [pc, #84]	; (800a09c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a048:	671a      	str	r2, [r3, #112]	; 0x70
 800a04a:	e009      	b.n	800a060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a050:	4413      	add	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a11      	ldr	r2, [pc, #68]	; (800a0a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a05e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3b01      	subs	r3, #1
 800a064:	2201      	movs	r2, #1
 800a066:	409a      	lsls	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	58025408 	.word	0x58025408
 800a07c:	5802541c 	.word	0x5802541c
 800a080:	58025430 	.word	0x58025430
 800a084:	58025444 	.word	0x58025444
 800a088:	58025458 	.word	0x58025458
 800a08c:	5802546c 	.word	0x5802546c
 800a090:	58025480 	.word	0x58025480
 800a094:	58025494 	.word	0x58025494
 800a098:	1600963f 	.word	0x1600963f
 800a09c:	58025940 	.word	0x58025940
 800a0a0:	1000823f 	.word	0x1000823f
 800a0a4:	40020940 	.word	0x40020940

0800a0a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b089      	sub	sp, #36	; 0x24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a0b6:	4b86      	ldr	r3, [pc, #536]	; (800a2d0 <HAL_GPIO_Init+0x228>)
 800a0b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a0ba:	e18c      	b.n	800a3d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 817e 	beq.w	800a3d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d005      	beq.n	800a0ec <HAL_GPIO_Init+0x44>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d130      	bne.n	800a14e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fc:	43db      	mvns	r3, r3
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	4013      	ands	r3, r2
 800a102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	fa02 f303 	lsl.w	r3, r2, r3
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	4313      	orrs	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a122:	2201      	movs	r2, #1
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	43db      	mvns	r3, r3
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	4013      	ands	r3, r2
 800a130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	091b      	lsrs	r3, r3, #4
 800a138:	f003 0201 	and.w	r2, r3, #1
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	4313      	orrs	r3, r2
 800a146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d017      	beq.n	800a18a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	2203      	movs	r2, #3
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43db      	mvns	r3, r3
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	4013      	ands	r3, r2
 800a170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	fa02 f303 	lsl.w	r3, r2, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4313      	orrs	r3, r2
 800a182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d123      	bne.n	800a1de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	08da      	lsrs	r2, r3, #3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3208      	adds	r2, #8
 800a19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	220f      	movs	r2, #15
 800a1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	08da      	lsrs	r2, r3, #3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3208      	adds	r2, #8
 800a1d8:	69b9      	ldr	r1, [r7, #24]
 800a1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ee:	43db      	mvns	r3, r3
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 0203 	and.w	r2, r3, #3
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	fa02 f303 	lsl.w	r3, r2, r3
 800a206:	69ba      	ldr	r2, [r7, #24]
 800a208:	4313      	orrs	r3, r2
 800a20a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 80d8 	beq.w	800a3d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a220:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <HAL_GPIO_Init+0x22c>)
 800a222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a226:	4a2b      	ldr	r2, [pc, #172]	; (800a2d4 <HAL_GPIO_Init+0x22c>)
 800a228:	f043 0302 	orr.w	r3, r3, #2
 800a22c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a230:	4b28      	ldr	r3, [pc, #160]	; (800a2d4 <HAL_GPIO_Init+0x22c>)
 800a232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a23e:	4a26      	ldr	r2, [pc, #152]	; (800a2d8 <HAL_GPIO_Init+0x230>)
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	089b      	lsrs	r3, r3, #2
 800a244:	3302      	adds	r3, #2
 800a246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	f003 0303 	and.w	r3, r3, #3
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	220f      	movs	r2, #15
 800a256:	fa02 f303 	lsl.w	r3, r2, r3
 800a25a:	43db      	mvns	r3, r3
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	4013      	ands	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a1d      	ldr	r2, [pc, #116]	; (800a2dc <HAL_GPIO_Init+0x234>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d04a      	beq.n	800a300 <HAL_GPIO_Init+0x258>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <HAL_GPIO_Init+0x238>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d02b      	beq.n	800a2ca <HAL_GPIO_Init+0x222>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <HAL_GPIO_Init+0x23c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d025      	beq.n	800a2c6 <HAL_GPIO_Init+0x21e>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a1a      	ldr	r2, [pc, #104]	; (800a2e8 <HAL_GPIO_Init+0x240>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01f      	beq.n	800a2c2 <HAL_GPIO_Init+0x21a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a19      	ldr	r2, [pc, #100]	; (800a2ec <HAL_GPIO_Init+0x244>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d019      	beq.n	800a2be <HAL_GPIO_Init+0x216>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <HAL_GPIO_Init+0x248>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <HAL_GPIO_Init+0x212>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a17      	ldr	r2, [pc, #92]	; (800a2f4 <HAL_GPIO_Init+0x24c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00d      	beq.n	800a2b6 <HAL_GPIO_Init+0x20e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a16      	ldr	r2, [pc, #88]	; (800a2f8 <HAL_GPIO_Init+0x250>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d007      	beq.n	800a2b2 <HAL_GPIO_Init+0x20a>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a15      	ldr	r2, [pc, #84]	; (800a2fc <HAL_GPIO_Init+0x254>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d101      	bne.n	800a2ae <HAL_GPIO_Init+0x206>
 800a2aa:	2309      	movs	r3, #9
 800a2ac:	e029      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2ae:	230a      	movs	r3, #10
 800a2b0:	e027      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2b2:	2307      	movs	r3, #7
 800a2b4:	e025      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2b6:	2306      	movs	r3, #6
 800a2b8:	e023      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2ba:	2305      	movs	r3, #5
 800a2bc:	e021      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2be:	2304      	movs	r3, #4
 800a2c0:	e01f      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e01d      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e01b      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e019      	b.n	800a302 <HAL_GPIO_Init+0x25a>
 800a2ce:	bf00      	nop
 800a2d0:	58000080 	.word	0x58000080
 800a2d4:	58024400 	.word	0x58024400
 800a2d8:	58000400 	.word	0x58000400
 800a2dc:	58020000 	.word	0x58020000
 800a2e0:	58020400 	.word	0x58020400
 800a2e4:	58020800 	.word	0x58020800
 800a2e8:	58020c00 	.word	0x58020c00
 800a2ec:	58021000 	.word	0x58021000
 800a2f0:	58021400 	.word	0x58021400
 800a2f4:	58021800 	.word	0x58021800
 800a2f8:	58021c00 	.word	0x58021c00
 800a2fc:	58022400 	.word	0x58022400
 800a300:	2300      	movs	r3, #0
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	f002 0203 	and.w	r2, r2, #3
 800a308:	0092      	lsls	r2, r2, #2
 800a30a:	4093      	lsls	r3, r2
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	4313      	orrs	r3, r2
 800a310:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a312:	4938      	ldr	r1, [pc, #224]	; (800a3f4 <HAL_GPIO_Init+0x34c>)
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	089b      	lsrs	r3, r3, #2
 800a318:	3302      	adds	r3, #2
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	43db      	mvns	r3, r3
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	4013      	ands	r3, r2
 800a330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a34e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	43db      	mvns	r3, r3
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	4013      	ands	r3, r2
 800a35e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4313      	orrs	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	43db      	mvns	r3, r3
 800a386:	69ba      	ldr	r2, [r7, #24]
 800a388:	4013      	ands	r3, r2
 800a38a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	43db      	mvns	r3, r3
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	69ba      	ldr	r2, [r7, #24]
 800a3ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f47f ae6b 	bne.w	800a0bc <HAL_GPIO_Init+0x14>
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	3724      	adds	r7, #36	; 0x24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	58000400 	.word	0x58000400

0800a3f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a408:	787b      	ldrb	r3, [r7, #1]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a40e:	887a      	ldrh	r2, [r7, #2]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a414:	e003      	b.n	800a41e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a416:	887b      	ldrh	r3, [r7, #2]
 800a418:	041a      	lsls	r2, r3, #16
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	619a      	str	r2, [r3, #24]
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b085      	sub	sp, #20
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	460b      	mov	r3, r1
 800a434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a43c:	887a      	ldrh	r2, [r7, #2]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4013      	ands	r3, r2
 800a442:	041a      	lsls	r2, r3, #16
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	43d9      	mvns	r1, r3
 800a448:	887b      	ldrh	r3, [r7, #2]
 800a44a:	400b      	ands	r3, r1
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	619a      	str	r2, [r3, #24]
}
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e07f      	b.n	800a572 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7f7 fb74 	bl	8001b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2224      	movs	r2, #36	; 0x24
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 0201 	bic.w	r2, r2, #1
 800a4a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a4b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d107      	bne.n	800a4da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4d6:	609a      	str	r2, [r3, #8]
 800a4d8:	e006      	b.n	800a4e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689a      	ldr	r2, [r3, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a4e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d104      	bne.n	800a4fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6859      	ldr	r1, [r3, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <HAL_I2C_Init+0x11c>)
 800a506:	430b      	orrs	r3, r1
 800a508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68da      	ldr	r2, [r3, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	69d9      	ldr	r1, [r3, #28]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0201 	orr.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	02008000 	.word	0x02008000

0800a580 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af02      	add	r7, sp, #8
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	4608      	mov	r0, r1
 800a58a:	4611      	mov	r1, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	4603      	mov	r3, r0
 800a590:	817b      	strh	r3, [r7, #10]
 800a592:	460b      	mov	r3, r1
 800a594:	813b      	strh	r3, [r7, #8]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d176      	bne.n	800a694 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <HAL_I2C_Mem_Read_IT+0x32>
 800a5ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e06b      	b.n	800a696 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5cc:	d101      	bne.n	800a5d2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	e061      	b.n	800a696 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d101      	bne.n	800a5e0 <HAL_I2C_Mem_Read_IT+0x60>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e05a      	b.n	800a696 <HAL_I2C_Mem_Read_IT+0x116>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a5e8:	f7fa fea0 	bl	800532c <HAL_GetTick>
 800a5ec:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2222      	movs	r2, #34	; 0x22
 800a5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2240      	movs	r2, #64	; 0x40
 800a5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6a3a      	ldr	r2, [r7, #32]
 800a608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a60e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a23      	ldr	r2, [pc, #140]	; (800a6a0 <HAL_I2C_Mem_Read_IT+0x120>)
 800a614:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4a22      	ldr	r2, [pc, #136]	; (800a6a4 <HAL_I2C_Mem_Read_IT+0x124>)
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a620:	b29b      	uxth	r3, r3
 800a622:	2bff      	cmp	r3, #255	; 0xff
 800a624:	d906      	bls.n	800a634 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	22ff      	movs	r2, #255	; 0xff
 800a62a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a62c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	e007      	b.n	800a644 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a63e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a642:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a644:	88f8      	ldrh	r0, [r7, #6]
 800a646:	893a      	ldrh	r2, [r7, #8]
 800a648:	8979      	ldrh	r1, [r7, #10]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2319      	movs	r3, #25
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	4603      	mov	r3, r0
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 fdf3 	bl	800b240 <I2C_RequestMemoryRead>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e014      	b.n	800a696 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a670:	b2da      	uxtb	r2, r3
 800a672:	8979      	ldrh	r1, [r7, #10]
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <HAL_I2C_Mem_Read_IT+0x128>)
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f001 fd12 	bl	800c0a4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a688:	2102      	movs	r1, #2
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 fd3c 	bl	800c108 <I2C_Enable_IRQ>

    return HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	e000      	b.n	800a696 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800a694:	2302      	movs	r3, #2
  }
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	ffff0000 	.word	0xffff0000
 800a6a4:	0800a83f 	.word	0x0800a83f
 800a6a8:	80002400 	.word	0x80002400

0800a6ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	0a1b      	lsrs	r3, r3, #8
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	09db      	lsrs	r3, r3, #7
 800a6d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e0:	f043 0201 	orr.w	r2, r3, #1
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	0a9b      	lsrs	r3, r3, #10
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d010      	beq.n	800a720 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	09db      	lsrs	r3, r3, #7
 800a702:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70e:	f043 0208 	orr.w	r2, r3, #8
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a71e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	0a5b      	lsrs	r3, r3, #9
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	09db      	lsrs	r3, r3, #7
 800a730:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73c:	f043 0202 	orr.w	r2, r3, #2
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a752:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f003 030b 	and.w	r3, r3, #11
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f9f9 	bl	800bb58 <I2C_ITError>
  }
}
 800a766:	bf00      	nop
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a76e:	b480      	push	{r7}
 800a770:	b083      	sub	sp, #12
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	70fb      	strb	r3, [r7, #3]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a7ce:	bf00      	nop
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a832:	bf00      	nop
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b088      	sub	sp, #32
 800a842:	af02      	add	r7, sp, #8
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <I2C_Master_ISR_IT+0x1e>
 800a858:	2302      	movs	r3, #2
 800a85a:	e114      	b.n	800aa86 <I2C_Master_ISR_IT+0x248>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	091b      	lsrs	r3, r3, #4
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d013      	beq.n	800a898 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	091b      	lsrs	r3, r3, #4
 800a874:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00d      	beq.n	800a898 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2210      	movs	r2, #16
 800a882:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a888:	f043 0204 	orr.w	r2, r3, #4
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f001 fa58 	bl	800bd46 <I2C_Flush_TXDR>
 800a896:	e0e1      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	089b      	lsrs	r3, r3, #2
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d023      	beq.n	800a8ec <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	089b      	lsrs	r3, r3, #2
 800a8a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01d      	beq.n	800a8ec <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f023 0304 	bic.w	r3, r3, #4
 800a8b6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	b2d2      	uxtb	r2, r2
 800a8c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a8ea:	e0b7      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	085b      	lsrs	r3, r3, #1
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01e      	beq.n	800a936 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a900:	2b00      	cmp	r3, #0
 800a902:	d018      	beq.n	800a936 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	781a      	ldrb	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a91e:	3b01      	subs	r3, #1
 800a920:	b29a      	uxth	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a934:	e092      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	09db      	lsrs	r3, r3, #7
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d05d      	beq.n	800a9fe <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	099b      	lsrs	r3, r3, #6
 800a946:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d057      	beq.n	800a9fe <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d040      	beq.n	800a9da <I2C_Master_ISR_IT+0x19c>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d13c      	bne.n	800a9da <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a96c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a972:	b29b      	uxth	r3, r3
 800a974:	2bff      	cmp	r3, #255	; 0xff
 800a976:	d90e      	bls.n	800a996 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	22ff      	movs	r2, #255	; 0xff
 800a97c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a982:	b2da      	uxtb	r2, r3
 800a984:	8a79      	ldrh	r1, [r7, #18]
 800a986:	2300      	movs	r3, #0
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f001 fb88 	bl	800c0a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a994:	e032      	b.n	800a9fc <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9a8:	d00b      	beq.n	800a9c2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	8a79      	ldrh	r1, [r7, #18]
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	9000      	str	r0, [sp, #0]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f001 fb72 	bl	800c0a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9c0:	e01c      	b.n	800a9fc <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	8a79      	ldrh	r1, [r7, #18]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f001 fb66 	bl	800c0a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9d8:	e010      	b.n	800a9fc <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e8:	d003      	beq.n	800a9f2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 fd00 	bl	800b3f0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9f0:	e034      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a9f2:	2140      	movs	r1, #64	; 0x40
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f001 f8af 	bl	800bb58 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9fa:	e02f      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
 800a9fc:	e02e      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	099b      	lsrs	r3, r3, #6
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d028      	beq.n	800aa5c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	099b      	lsrs	r3, r3, #6
 800aa0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d022      	beq.n	800aa5c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d119      	bne.n	800aa54 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa2e:	d015      	beq.n	800aa5c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aa38:	d108      	bne.n	800aa4c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa48:	605a      	str	r2, [r3, #4]
 800aa4a:	e007      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fccf 	bl	800b3f0 <I2C_ITMasterSeqCplt>
 800aa52:	e003      	b.n	800aa5c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aa54:	2140      	movs	r1, #64	; 0x40
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f001 f87e 	bl	800bb58 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	095b      	lsrs	r3, r3, #5
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	095b      	lsrs	r3, r3, #5
 800aa6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f000 fd56 	bl	800b528 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b086      	sub	sp, #24
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <I2C_Slave_ISR_IT+0x24>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e0ec      	b.n	800ac8c <I2C_Slave_ISR_IT+0x1fe>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	095b      	lsrs	r3, r3, #5
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	095b      	lsrs	r3, r3, #5
 800aaca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800aad2:	6939      	ldr	r1, [r7, #16]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fdf1 	bl	800b6bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	091b      	lsrs	r3, r3, #4
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d04d      	beq.n	800ab82 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	091b      	lsrs	r3, r3, #4
 800aaea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d047      	beq.n	800ab82 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d128      	bne.n	800ab4e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b28      	cmp	r3, #40	; 0x28
 800ab06:	d108      	bne.n	800ab1a <I2C_Slave_ISR_IT+0x8c>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab0e:	d104      	bne.n	800ab1a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ab10:	6939      	ldr	r1, [r7, #16]
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 ffca 	bl	800baac <I2C_ITListenCplt>
 800ab18:	e032      	b.n	800ab80 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b29      	cmp	r3, #41	; 0x29
 800ab24:	d10e      	bne.n	800ab44 <I2C_Slave_ISR_IT+0xb6>
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab2c:	d00a      	beq.n	800ab44 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2210      	movs	r2, #16
 800ab34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f001 f905 	bl	800bd46 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 fc94 	bl	800b46a <I2C_ITSlaveSeqCplt>
 800ab42:	e01d      	b.n	800ab80 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2210      	movs	r2, #16
 800ab4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ab4c:	e096      	b.n	800ac7c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2210      	movs	r2, #16
 800ab54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5a:	f043 0204 	orr.w	r2, r3, #4
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <I2C_Slave_ISR_IT+0xe4>
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab6e:	f040 8085 	bne.w	800ac7c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab76:	4619      	mov	r1, r3
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 ffed 	bl	800bb58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ab7e:	e07d      	b.n	800ac7c <I2C_Slave_ISR_IT+0x1ee>
 800ab80:	e07c      	b.n	800ac7c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	089b      	lsrs	r3, r3, #2
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d030      	beq.n	800abf0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	089b      	lsrs	r3, r3, #2
 800ab92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d02a      	beq.n	800abf0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d018      	beq.n	800abd6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abcc:	b29b      	uxth	r3, r3
 800abce:	3b01      	subs	r3, #1
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abda:	b29b      	uxth	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d14f      	bne.n	800ac80 <I2C_Slave_ISR_IT+0x1f2>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abe6:	d04b      	beq.n	800ac80 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fc3e 	bl	800b46a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800abee:	e047      	b.n	800ac80 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	08db      	lsrs	r3, r3, #3
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00a      	beq.n	800ac12 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ac08:	6939      	ldr	r1, [r7, #16]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fb6c 	bl	800b2e8 <I2C_ITAddrCplt>
 800ac10:	e037      	b.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	085b      	lsrs	r3, r3, #1
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d031      	beq.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	085b      	lsrs	r3, r3, #1
 800ac22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d02b      	beq.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d018      	beq.n	800ac66 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	3b01      	subs	r3, #1
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	851a      	strh	r2, [r3, #40]	; 0x28
 800ac64:	e00d      	b.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac6c:	d002      	beq.n	800ac74 <I2C_Slave_ISR_IT+0x1e6>
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 fbf8 	bl	800b46a <I2C_ITSlaveSeqCplt>
 800ac7a:	e002      	b.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800ac7c:	bf00      	nop
 800ac7e:	e000      	b.n	800ac82 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800ac80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af02      	add	r7, sp, #8
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d101      	bne.n	800acae <I2C_Master_ISR_DMA+0x1a>
 800acaa:	2302      	movs	r3, #2
 800acac:	e0e1      	b.n	800ae72 <I2C_Master_ISR_DMA+0x1de>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	091b      	lsrs	r3, r3, #4
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d017      	beq.n	800acf2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	091b      	lsrs	r3, r3, #4
 800acc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800acca:	2b00      	cmp	r3, #0
 800accc:	d011      	beq.n	800acf2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2210      	movs	r2, #16
 800acd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acda:	f043 0204 	orr.w	r2, r3, #4
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ace2:	2120      	movs	r1, #32
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f001 fa0f 	bl	800c108 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f001 f82b 	bl	800bd46 <I2C_Flush_TXDR>
 800acf0:	e0ba      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	09db      	lsrs	r3, r3, #7
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d072      	beq.n	800ade4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	099b      	lsrs	r3, r3, #6
 800ad02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d06c      	beq.n	800ade4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad18:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d04e      	beq.n	800adc2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad30:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2bff      	cmp	r3, #255	; 0xff
 800ad3a:	d906      	bls.n	800ad4a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	22ff      	movs	r2, #255	; 0xff
 800ad40:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800ad42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	e010      	b.n	800ad6c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad5c:	d003      	beq.n	800ad66 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	e002      	b.n	800ad6c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800ad66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad6a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	8a79      	ldrh	r1, [r7, #18]
 800ad74:	2300      	movs	r3, #0
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f001 f992 	bl	800c0a4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b22      	cmp	r3, #34	; 0x22
 800ad9c:	d108      	bne.n	800adb0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800adae:	e05b      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adbe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800adc0:	e052      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add0:	d003      	beq.n	800adda <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 fb0c 	bl	800b3f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800add8:	e046      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800adda:	2140      	movs	r1, #64	; 0x40
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 febb 	bl	800bb58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ade2:	e041      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	099b      	lsrs	r3, r3, #6
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d029      	beq.n	800ae44 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	099b      	lsrs	r3, r3, #6
 800adf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d023      	beq.n	800ae44 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d119      	bne.n	800ae3a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae14:	d027      	beq.n	800ae66 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ae1e:	d108      	bne.n	800ae32 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae2e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ae30:	e019      	b.n	800ae66 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 fadc 	bl	800b3f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ae38:	e015      	b.n	800ae66 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ae3a:	2140      	movs	r1, #64	; 0x40
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fe8b 	bl	800bb58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ae42:	e010      	b.n	800ae66 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	095b      	lsrs	r3, r3, #5
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	095b      	lsrs	r3, r3, #5
 800ae54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fb62 	bl	800b528 <I2C_ITMasterCplt>
 800ae64:	e000      	b.n	800ae68 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800ae66:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <I2C_Slave_ISR_DMA+0x24>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e1ca      	b.n	800b236 <I2C_Slave_ISR_DMA+0x3ba>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	095b      	lsrs	r3, r3, #5
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d009      	beq.n	800aec8 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	095b      	lsrs	r3, r3, #5
 800aeb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d003      	beq.n	800aec8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fbfa 	bl	800b6bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	091b      	lsrs	r3, r3, #4
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 819b 	beq.w	800b20c <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 8194 	beq.w	800b20c <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	0b9b      	lsrs	r3, r3, #14
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d106      	bne.n	800aefe <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	0bdb      	lsrs	r3, r3, #15
 800aef4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 8180 	beq.w	800b1fe <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d07c      	beq.n	800b000 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	0bdb      	lsrs	r3, r3, #15
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d076      	beq.n	800b000 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a74      	ldr	r2, [pc, #464]	; (800b0ec <I2C_Slave_ISR_DMA+0x270>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d059      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a72      	ldr	r2, [pc, #456]	; (800b0f0 <I2C_Slave_ISR_DMA+0x274>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d053      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a70      	ldr	r2, [pc, #448]	; (800b0f4 <I2C_Slave_ISR_DMA+0x278>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d04d      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a6e      	ldr	r2, [pc, #440]	; (800b0f8 <I2C_Slave_ISR_DMA+0x27c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d047      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a6c      	ldr	r2, [pc, #432]	; (800b0fc <I2C_Slave_ISR_DMA+0x280>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d041      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a6a      	ldr	r2, [pc, #424]	; (800b100 <I2C_Slave_ISR_DMA+0x284>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d03b      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a68      	ldr	r2, [pc, #416]	; (800b104 <I2C_Slave_ISR_DMA+0x288>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d035      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a66      	ldr	r2, [pc, #408]	; (800b108 <I2C_Slave_ISR_DMA+0x28c>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d02f      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a64      	ldr	r2, [pc, #400]	; (800b10c <I2C_Slave_ISR_DMA+0x290>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d029      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a62      	ldr	r2, [pc, #392]	; (800b110 <I2C_Slave_ISR_DMA+0x294>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d023      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a60      	ldr	r2, [pc, #384]	; (800b114 <I2C_Slave_ISR_DMA+0x298>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d01d      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a5e      	ldr	r2, [pc, #376]	; (800b118 <I2C_Slave_ISR_DMA+0x29c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d017      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a5c      	ldr	r2, [pc, #368]	; (800b11c <I2C_Slave_ISR_DMA+0x2a0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d011      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a5a      	ldr	r2, [pc, #360]	; (800b120 <I2C_Slave_ISR_DMA+0x2a4>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d00b      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a58      	ldr	r2, [pc, #352]	; (800b124 <I2C_Slave_ISR_DMA+0x2a8>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d005      	beq.n	800afd2 <I2C_Slave_ISR_DMA+0x156>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a56      	ldr	r2, [pc, #344]	; (800b128 <I2C_Slave_ISR_DMA+0x2ac>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d109      	bne.n	800afe6 <I2C_Slave_ISR_DMA+0x16a>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	bf0c      	ite	eq
 800afde:	2301      	moveq	r3, #1
 800afe0:	2300      	movne	r3, #0
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	e008      	b.n	800aff8 <I2C_Slave_ISR_DMA+0x17c>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bf0c      	ite	eq
 800aff2:	2301      	moveq	r3, #1
 800aff4:	2300      	movne	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800affc:	2301      	movs	r3, #1
 800affe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 809e 	beq.w	800b146 <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	0b9b      	lsrs	r3, r3, #14
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8097 	beq.w	800b146 <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a33      	ldr	r2, [pc, #204]	; (800b0ec <I2C_Slave_ISR_DMA+0x270>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d059      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a31      	ldr	r2, [pc, #196]	; (800b0f0 <I2C_Slave_ISR_DMA+0x274>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d053      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a2f      	ldr	r2, [pc, #188]	; (800b0f4 <I2C_Slave_ISR_DMA+0x278>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d04d      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a2d      	ldr	r2, [pc, #180]	; (800b0f8 <I2C_Slave_ISR_DMA+0x27c>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d047      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a2b      	ldr	r2, [pc, #172]	; (800b0fc <I2C_Slave_ISR_DMA+0x280>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d041      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a29      	ldr	r2, [pc, #164]	; (800b100 <I2C_Slave_ISR_DMA+0x284>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d03b      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a27      	ldr	r2, [pc, #156]	; (800b104 <I2C_Slave_ISR_DMA+0x288>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d035      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a25      	ldr	r2, [pc, #148]	; (800b108 <I2C_Slave_ISR_DMA+0x28c>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d02f      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a23      	ldr	r2, [pc, #140]	; (800b10c <I2C_Slave_ISR_DMA+0x290>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d029      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a21      	ldr	r2, [pc, #132]	; (800b110 <I2C_Slave_ISR_DMA+0x294>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d023      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a1f      	ldr	r2, [pc, #124]	; (800b114 <I2C_Slave_ISR_DMA+0x298>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d01d      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a1d      	ldr	r2, [pc, #116]	; (800b118 <I2C_Slave_ISR_DMA+0x29c>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d017      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <I2C_Slave_ISR_DMA+0x2a0>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d011      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a19      	ldr	r2, [pc, #100]	; (800b120 <I2C_Slave_ISR_DMA+0x2a4>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d00b      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a17      	ldr	r2, [pc, #92]	; (800b124 <I2C_Slave_ISR_DMA+0x2a8>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d005      	beq.n	800b0d8 <I2C_Slave_ISR_DMA+0x25c>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a15      	ldr	r2, [pc, #84]	; (800b128 <I2C_Slave_ISR_DMA+0x2ac>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d129      	bne.n	800b12c <I2C_Slave_ISR_DMA+0x2b0>
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	e028      	b.n	800b13e <I2C_Slave_ISR_DMA+0x2c2>
 800b0ec:	40020010 	.word	0x40020010
 800b0f0:	40020028 	.word	0x40020028
 800b0f4:	40020040 	.word	0x40020040
 800b0f8:	40020058 	.word	0x40020058
 800b0fc:	40020070 	.word	0x40020070
 800b100:	40020088 	.word	0x40020088
 800b104:	400200a0 	.word	0x400200a0
 800b108:	400200b8 	.word	0x400200b8
 800b10c:	40020410 	.word	0x40020410
 800b110:	40020428 	.word	0x40020428
 800b114:	40020440 	.word	0x40020440
 800b118:	40020458 	.word	0x40020458
 800b11c:	40020470 	.word	0x40020470
 800b120:	40020488 	.word	0x40020488
 800b124:	400204a0 	.word	0x400204a0
 800b128:	400204b8 	.word	0x400204b8
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	bf0c      	ite	eq
 800b138:	2301      	moveq	r3, #1
 800b13a:	2300      	movne	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 800b142:	2301      	movs	r3, #1
 800b144:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d128      	bne.n	800b19e <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b28      	cmp	r3, #40	; 0x28
 800b156:	d108      	bne.n	800b16a <I2C_Slave_ISR_DMA+0x2ee>
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b15e:	d104      	bne.n	800b16a <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fca2 	bl	800baac <I2C_ITListenCplt>
 800b168:	e048      	b.n	800b1fc <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b29      	cmp	r3, #41	; 0x29
 800b174:	d10e      	bne.n	800b194 <I2C_Slave_ISR_DMA+0x318>
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b17c:	d00a      	beq.n	800b194 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2210      	movs	r2, #16
 800b184:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fddd 	bl	800bd46 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f96c 	bl	800b46a <I2C_ITSlaveSeqCplt>
 800b192:	e033      	b.n	800b1fc <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2210      	movs	r2, #16
 800b19a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b19c:	e034      	b.n	800b208 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2210      	movs	r2, #16
 800b1a4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1aa:	f043 0204 	orr.w	r2, r3, #4
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1b8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <I2C_Slave_ISR_DMA+0x34c>
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1c6:	d11f      	bne.n	800b208 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	2b21      	cmp	r3, #33	; 0x21
 800b1cc:	d002      	beq.n	800b1d4 <I2C_Slave_ISR_DMA+0x358>
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	2b29      	cmp	r3, #41	; 0x29
 800b1d2:	d103      	bne.n	800b1dc <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2221      	movs	r2, #33	; 0x21
 800b1d8:	631a      	str	r2, [r3, #48]	; 0x30
 800b1da:	e008      	b.n	800b1ee <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b22      	cmp	r3, #34	; 0x22
 800b1e0:	d002      	beq.n	800b1e8 <I2C_Slave_ISR_DMA+0x36c>
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e6:	d102      	bne.n	800b1ee <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2222      	movs	r2, #34	; 0x22
 800b1ec:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fcaf 	bl	800bb58 <I2C_ITError>
      if (treatdmanack == 1U)
 800b1fa:	e005      	b.n	800b208 <I2C_Slave_ISR_DMA+0x38c>
 800b1fc:	e004      	b.n	800b208 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2210      	movs	r2, #16
 800b204:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b206:	e011      	b.n	800b22c <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 800b208:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b20a:	e00f      	b.n	800b22c <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	08db      	lsrs	r3, r3, #3
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d009      	beq.n	800b22c <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	08db      	lsrs	r3, r3, #3
 800b21c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 f85e 	bl	800b2e8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3720      	adds	r7, #32
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop

0800b240 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	4608      	mov	r0, r1
 800b24a:	4611      	mov	r1, r2
 800b24c:	461a      	mov	r2, r3
 800b24e:	4603      	mov	r3, r0
 800b250:	817b      	strh	r3, [r7, #10]
 800b252:	460b      	mov	r3, r1
 800b254:	813b      	strh	r3, [r7, #8]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	8979      	ldrh	r1, [r7, #10]
 800b260:	4b20      	ldr	r3, [pc, #128]	; (800b2e4 <I2C_RequestMemoryRead+0xa4>)
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 ff1c 	bl	800c0a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b26c:	69fa      	ldr	r2, [r7, #28]
 800b26e:	69b9      	ldr	r1, [r7, #24]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fdea 	bl	800be4a <I2C_WaitOnTXISFlagUntilTimeout>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e02c      	b.n	800b2da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d105      	bne.n	800b292 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b286:	893b      	ldrh	r3, [r7, #8]
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	629a      	str	r2, [r3, #40]	; 0x28
 800b290:	e015      	b.n	800b2be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b292:	893b      	ldrh	r3, [r7, #8]
 800b294:	0a1b      	lsrs	r3, r3, #8
 800b296:	b29b      	uxth	r3, r3
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2a0:	69fa      	ldr	r2, [r7, #28]
 800b2a2:	69b9      	ldr	r1, [r7, #24]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 fdd0 	bl	800be4a <I2C_WaitOnTXISFlagUntilTimeout>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e012      	b.n	800b2da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2b4:	893b      	ldrh	r3, [r7, #8]
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2140      	movs	r1, #64	; 0x40
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f000 fd7e 	bl	800bdca <I2C_WaitOnFlagUntilTimeout>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e000      	b.n	800b2da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	80002000 	.word	0x80002000

0800b2e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2fe:	2b28      	cmp	r3, #40	; 0x28
 800b300:	d16a      	bne.n	800b3d8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	0c1b      	lsrs	r3, r3, #16
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	699b      	ldr	r3, [r3, #24]
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b320:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b32e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	b29b      	uxth	r3, r3
 800b338:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b33c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	2b02      	cmp	r3, #2
 800b344:	d138      	bne.n	800b3b8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b346:	897b      	ldrh	r3, [r7, #10]
 800b348:	09db      	lsrs	r3, r3, #7
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	89bb      	ldrh	r3, [r7, #12]
 800b34e:	4053      	eors	r3, r2
 800b350:	b29b      	uxth	r3, r3
 800b352:	f003 0306 	and.w	r3, r3, #6
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11c      	bne.n	800b394 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b35a:	897b      	ldrh	r3, [r7, #10]
 800b35c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d13b      	bne.n	800b3e8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2208      	movs	r2, #8
 800b37c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b386:	89ba      	ldrh	r2, [r7, #12]
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff fa16 	bl	800a7be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b392:	e029      	b.n	800b3e8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b394:	893b      	ldrh	r3, [r7, #8]
 800b396:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 ff17 	bl	800c1d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b3aa:	89ba      	ldrh	r2, [r7, #12]
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff fa04 	bl	800a7be <HAL_I2C_AddrCallback>
}
 800b3b6:	e017      	b.n	800b3e8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b3b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 ff07 	bl	800c1d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b3ca:	89ba      	ldrh	r2, [r7, #12]
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff f9f4 	bl	800a7be <HAL_I2C_AddrCallback>
}
 800b3d6:	e007      	b.n	800b3e8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2208      	movs	r2, #8
 800b3de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b21      	cmp	r3, #33	; 0x21
 800b40a:	d115      	bne.n	800b438 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2220      	movs	r2, #32
 800b410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2211      	movs	r2, #17
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b420:	2101      	movs	r1, #1
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fed4 	bl	800c1d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff f99c 	bl	800a76e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b436:	e014      	b.n	800b462 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2212      	movs	r2, #18
 800b444:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b44c:	2102      	movs	r1, #2
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 febe 	bl	800c1d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff f990 	bl	800a782 <HAL_I2C_MasterRxCpltCallback>
}
 800b462:	bf00      	nop
 800b464:	3708      	adds	r7, #8
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b084      	sub	sp, #16
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	0b9b      	lsrs	r3, r3, #14
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d008      	beq.n	800b4a0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	e00d      	b.n	800b4bc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	0bdb      	lsrs	r3, r3, #15
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d007      	beq.n	800b4bc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b29      	cmp	r3, #41	; 0x29
 800b4c6:	d112      	bne.n	800b4ee <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2228      	movs	r2, #40	; 0x28
 800b4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2221      	movs	r2, #33	; 0x21
 800b4d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fe79 	bl	800c1d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff f955 	bl	800a796 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b4ec:	e017      	b.n	800b51e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f8:	d111      	bne.n	800b51e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2228      	movs	r2, #40	; 0x28
 800b4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2222      	movs	r2, #34	; 0x22
 800b506:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b508:	2102      	movs	r1, #2
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fe60 	bl	800c1d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff f946 	bl	800a7aa <HAL_I2C_SlaveRxCpltCallback>
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2220      	movs	r2, #32
 800b53c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b21      	cmp	r3, #33	; 0x21
 800b548:	d107      	bne.n	800b55a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b54a:	2101      	movs	r1, #1
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fe3f 	bl	800c1d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2211      	movs	r2, #17
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
 800b558:	e00c      	b.n	800b574 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b22      	cmp	r3, #34	; 0x22
 800b564:	d106      	bne.n	800b574 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b566:	2102      	movs	r1, #2
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fe31 	bl	800c1d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2212      	movs	r2, #18
 800b572:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6859      	ldr	r1, [r3, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	4b4d      	ldr	r3, [pc, #308]	; (800b6b4 <I2C_ITMasterCplt+0x18c>)
 800b580:	400b      	ands	r3, r1
 800b582:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a4a      	ldr	r2, [pc, #296]	; (800b6b8 <I2C_ITMasterCplt+0x190>)
 800b58e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	091b      	lsrs	r3, r3, #4
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d009      	beq.n	800b5b0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2210      	movs	r2, #16
 800b5a2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a8:	f043 0204 	orr.w	r2, r3, #4
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b60      	cmp	r3, #96	; 0x60
 800b5ba:	d10b      	bne.n	800b5d4 <I2C_ITMasterCplt+0xac>
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	089b      	lsrs	r3, r3, #2
 800b5c0:	f003 0301 	and.w	r3, r3, #1
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fbb6 	bl	800bd46 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b60      	cmp	r3, #96	; 0x60
 800b5ea:	d002      	beq.n	800b5f2 <I2C_ITMasterCplt+0xca>
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d006      	beq.n	800b600 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 faad 	bl	800bb58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b5fe:	e054      	b.n	800b6aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b21      	cmp	r3, #33	; 0x21
 800b60a:	d124      	bne.n	800b656 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b40      	cmp	r3, #64	; 0x40
 800b624:	d10b      	bne.n	800b63e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff f8d9 	bl	800a7ee <HAL_I2C_MemTxCpltCallback>
}
 800b63c:	e035      	b.n	800b6aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff f88d 	bl	800a76e <HAL_I2C_MasterTxCpltCallback>
}
 800b654:	e029      	b.n	800b6aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b22      	cmp	r3, #34	; 0x22
 800b660:	d123      	bne.n	800b6aa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2220      	movs	r2, #32
 800b666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b40      	cmp	r3, #64	; 0x40
 800b67a:	d10b      	bne.n	800b694 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff f8b8 	bl	800a802 <HAL_I2C_MemRxCpltCallback>
}
 800b692:	e00a      	b.n	800b6aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff f86c 	bl	800a782 <HAL_I2C_MasterRxCpltCallback>
}
 800b6aa:	bf00      	nop
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	fe00e800 	.word	0xfe00e800
 800b6b8:	ffff0000 	.word	0xffff0000

0800b6bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6d8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	2b21      	cmp	r3, #33	; 0x21
 800b6e6:	d002      	beq.n	800b6ee <I2C_ITSlaveCplt+0x32>
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b29      	cmp	r3, #41	; 0x29
 800b6ec:	d108      	bne.n	800b700 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b6ee:	f248 0101 	movw	r1, #32769	; 0x8001
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fd6c 	bl	800c1d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2221      	movs	r2, #33	; 0x21
 800b6fc:	631a      	str	r2, [r3, #48]	; 0x30
 800b6fe:	e00d      	b.n	800b71c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b22      	cmp	r3, #34	; 0x22
 800b704:	d002      	beq.n	800b70c <I2C_ITSlaveCplt+0x50>
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	2b2a      	cmp	r3, #42	; 0x2a
 800b70a:	d107      	bne.n	800b71c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b70c:	f248 0102 	movw	r1, #32770	; 0x8002
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fd5d 	bl	800c1d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2222      	movs	r2, #34	; 0x22
 800b71a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b72a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6859      	ldr	r1, [r3, #4]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	4b80      	ldr	r3, [pc, #512]	; (800b938 <I2C_ITSlaveCplt+0x27c>)
 800b738:	400b      	ands	r3, r1
 800b73a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fb02 	bl	800bd46 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	0b9b      	lsrs	r3, r3, #14
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d07a      	beq.n	800b844 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b75c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8111 	beq.w	800b98a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a73      	ldr	r2, [pc, #460]	; (800b93c <I2C_ITSlaveCplt+0x280>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d059      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a71      	ldr	r2, [pc, #452]	; (800b940 <I2C_ITSlaveCplt+0x284>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d053      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a6f      	ldr	r2, [pc, #444]	; (800b944 <I2C_ITSlaveCplt+0x288>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d04d      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a6d      	ldr	r2, [pc, #436]	; (800b948 <I2C_ITSlaveCplt+0x28c>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d047      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a6b      	ldr	r2, [pc, #428]	; (800b94c <I2C_ITSlaveCplt+0x290>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d041      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a69      	ldr	r2, [pc, #420]	; (800b950 <I2C_ITSlaveCplt+0x294>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d03b      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a67      	ldr	r2, [pc, #412]	; (800b954 <I2C_ITSlaveCplt+0x298>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d035      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a65      	ldr	r2, [pc, #404]	; (800b958 <I2C_ITSlaveCplt+0x29c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d02f      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a63      	ldr	r2, [pc, #396]	; (800b95c <I2C_ITSlaveCplt+0x2a0>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d029      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a61      	ldr	r2, [pc, #388]	; (800b960 <I2C_ITSlaveCplt+0x2a4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d023      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a5f      	ldr	r2, [pc, #380]	; (800b964 <I2C_ITSlaveCplt+0x2a8>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d01d      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a5d      	ldr	r2, [pc, #372]	; (800b968 <I2C_ITSlaveCplt+0x2ac>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d017      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a5b      	ldr	r2, [pc, #364]	; (800b96c <I2C_ITSlaveCplt+0x2b0>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d011      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a59      	ldr	r2, [pc, #356]	; (800b970 <I2C_ITSlaveCplt+0x2b4>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00b      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a57      	ldr	r2, [pc, #348]	; (800b974 <I2C_ITSlaveCplt+0x2b8>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d005      	beq.n	800b828 <I2C_ITSlaveCplt+0x16c>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a55      	ldr	r2, [pc, #340]	; (800b978 <I2C_ITSlaveCplt+0x2bc>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d105      	bne.n	800b834 <I2C_ITSlaveCplt+0x178>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	b29b      	uxth	r3, r3
 800b832:	e004      	b.n	800b83e <I2C_ITSlaveCplt+0x182>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	8553      	strh	r3, [r2, #42]	; 0x2a
 800b842:	e0a2      	b.n	800b98a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	0bdb      	lsrs	r3, r3, #15
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 809c 	beq.w	800b98a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b860:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 808f 	beq.w	800b98a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a32      	ldr	r2, [pc, #200]	; (800b93c <I2C_ITSlaveCplt+0x280>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d059      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a30      	ldr	r2, [pc, #192]	; (800b940 <I2C_ITSlaveCplt+0x284>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d053      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a2e      	ldr	r2, [pc, #184]	; (800b944 <I2C_ITSlaveCplt+0x288>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d04d      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a2c      	ldr	r2, [pc, #176]	; (800b948 <I2C_ITSlaveCplt+0x28c>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d047      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a2a      	ldr	r2, [pc, #168]	; (800b94c <I2C_ITSlaveCplt+0x290>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d041      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a28      	ldr	r2, [pc, #160]	; (800b950 <I2C_ITSlaveCplt+0x294>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d03b      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a26      	ldr	r2, [pc, #152]	; (800b954 <I2C_ITSlaveCplt+0x298>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d035      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a24      	ldr	r2, [pc, #144]	; (800b958 <I2C_ITSlaveCplt+0x29c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d02f      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a22      	ldr	r2, [pc, #136]	; (800b95c <I2C_ITSlaveCplt+0x2a0>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d029      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a20      	ldr	r2, [pc, #128]	; (800b960 <I2C_ITSlaveCplt+0x2a4>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d023      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a1e      	ldr	r2, [pc, #120]	; (800b964 <I2C_ITSlaveCplt+0x2a8>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d01d      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a1c      	ldr	r2, [pc, #112]	; (800b968 <I2C_ITSlaveCplt+0x2ac>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d017      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a1a      	ldr	r2, [pc, #104]	; (800b96c <I2C_ITSlaveCplt+0x2b0>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d011      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a18      	ldr	r2, [pc, #96]	; (800b970 <I2C_ITSlaveCplt+0x2b4>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d00b      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a16      	ldr	r2, [pc, #88]	; (800b974 <I2C_ITSlaveCplt+0x2b8>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d005      	beq.n	800b92c <I2C_ITSlaveCplt+0x270>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a14      	ldr	r2, [pc, #80]	; (800b978 <I2C_ITSlaveCplt+0x2bc>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d127      	bne.n	800b97c <I2C_ITSlaveCplt+0x2c0>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	b29b      	uxth	r3, r3
 800b936:	e026      	b.n	800b986 <I2C_ITSlaveCplt+0x2ca>
 800b938:	fe00e800 	.word	0xfe00e800
 800b93c:	40020010 	.word	0x40020010
 800b940:	40020028 	.word	0x40020028
 800b944:	40020040 	.word	0x40020040
 800b948:	40020058 	.word	0x40020058
 800b94c:	40020070 	.word	0x40020070
 800b950:	40020088 	.word	0x40020088
 800b954:	400200a0 	.word	0x400200a0
 800b958:	400200b8 	.word	0x400200b8
 800b95c:	40020410 	.word	0x40020410
 800b960:	40020428 	.word	0x40020428
 800b964:	40020440 	.word	0x40020440
 800b968:	40020458 	.word	0x40020458
 800b96c:	40020470 	.word	0x40020470
 800b970:	40020488 	.word	0x40020488
 800b974:	400204a0 	.word	0x400204a0
 800b978:	400204b8 	.word	0x400204b8
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	b29b      	uxth	r3, r3
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	089b      	lsrs	r3, r3, #2
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	d020      	beq.n	800b9d8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f023 0304 	bic.w	r3, r3, #4
 800b99c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00c      	beq.n	800b9d8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d005      	beq.n	800b9ee <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e6:	f043 0204 	orr.w	r2, r3, #4
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d010      	beq.n	800ba26 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f8a4 	bl	800bb58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b28      	cmp	r3, #40	; 0x28
 800ba1a:	d141      	bne.n	800baa0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f844 	bl	800baac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba24:	e03c      	b.n	800baa0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba2e:	d014      	beq.n	800ba5a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff fd1a 	bl	800b46a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a1b      	ldr	r2, [pc, #108]	; (800baa8 <I2C_ITSlaveCplt+0x3ec>)
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7fe fec1 	bl	800a7da <HAL_I2C_ListenCpltCallback>
}
 800ba58:	e022      	b.n	800baa0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b22      	cmp	r3, #34	; 0x22
 800ba64:	d10e      	bne.n	800ba84 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2220      	movs	r2, #32
 800ba6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7fe fe94 	bl	800a7aa <HAL_I2C_SlaveRxCpltCallback>
}
 800ba82:	e00d      	b.n	800baa0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2220      	movs	r2, #32
 800ba88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7fe fe7b 	bl	800a796 <HAL_I2C_SlaveTxCpltCallback>
}
 800baa0:	bf00      	nop
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	ffff0000 	.word	0xffff0000

0800baac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a26      	ldr	r2, [pc, #152]	; (800bb54 <I2C_ITListenCplt+0xa8>)
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	089b      	lsrs	r3, r3, #2
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d022      	beq.n	800bb2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf6:	1c5a      	adds	r2, r3, #1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d012      	beq.n	800bb2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	f043 0204 	orr.w	r2, r3, #4
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb2a:	f248 0103 	movw	r1, #32771	; 0x8003
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fb4e 	bl	800c1d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2210      	movs	r2, #16
 800bb3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7fe fe48 	bl	800a7da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bb4a:	bf00      	nop
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	ffff0000 	.word	0xffff0000

0800bb58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a5d      	ldr	r2, [pc, #372]	; (800bcec <I2C_ITError+0x194>)
 800bb76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	431a      	orrs	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	2b28      	cmp	r3, #40	; 0x28
 800bb8e:	d005      	beq.n	800bb9c <I2C_ITError+0x44>
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	2b29      	cmp	r3, #41	; 0x29
 800bb94:	d002      	beq.n	800bb9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	2b2a      	cmp	r3, #42	; 0x2a
 800bb9a:	d10b      	bne.n	800bbb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb9c:	2103      	movs	r1, #3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb16 	bl	800c1d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2228      	movs	r2, #40	; 0x28
 800bba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a50      	ldr	r2, [pc, #320]	; (800bcf0 <I2C_ITError+0x198>)
 800bbb0:	635a      	str	r2, [r3, #52]	; 0x34
 800bbb2:	e011      	b.n	800bbd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bbb4:	f248 0103 	movw	r1, #32771	; 0x8003
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fb09 	bl	800c1d0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b60      	cmp	r3, #96	; 0x60
 800bbc8:	d003      	beq.n	800bbd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2220      	movs	r2, #32
 800bbce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d039      	beq.n	800bc5a <I2C_ITError+0x102>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b11      	cmp	r3, #17
 800bbea:	d002      	beq.n	800bbf2 <I2C_ITError+0x9a>
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b21      	cmp	r3, #33	; 0x21
 800bbf0:	d133      	bne.n	800bc5a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc00:	d107      	bne.n	800bc12 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fd fffc 	bl	8009c14 <HAL_DMA_GetState>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d017      	beq.n	800bc52 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc26:	4a33      	ldr	r2, [pc, #204]	; (800bcf4 <I2C_ITError+0x19c>)
 800bc28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fc fe7c 	bl	8008934 <HAL_DMA_Abort_IT>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d04d      	beq.n	800bcde <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc50:	e045      	b.n	800bcde <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f850 	bl	800bcf8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bc58:	e041      	b.n	800bcde <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d039      	beq.n	800bcd6 <I2C_ITError+0x17e>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b12      	cmp	r3, #18
 800bc66:	d002      	beq.n	800bc6e <I2C_ITError+0x116>
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b22      	cmp	r3, #34	; 0x22
 800bc6c:	d133      	bne.n	800bcd6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc7c:	d107      	bne.n	800bc8e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fd ffbe 	bl	8009c14 <HAL_DMA_GetState>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d017      	beq.n	800bcce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	4a14      	ldr	r2, [pc, #80]	; (800bcf4 <I2C_ITError+0x19c>)
 800bca4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7fc fe3e 	bl	8008934 <HAL_DMA_Abort_IT>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d011      	beq.n	800bce2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bcc8:	4610      	mov	r0, r2
 800bcca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bccc:	e009      	b.n	800bce2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f812 	bl	800bcf8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bcd4:	e005      	b.n	800bce2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f80e 	bl	800bcf8 <I2C_TreatErrorCallback>
  }
}
 800bcdc:	e002      	b.n	800bce4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bcde:	bf00      	nop
 800bce0:	e000      	b.n	800bce4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bce2:	bf00      	nop
}
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	ffff0000 	.word	0xffff0000
 800bcf0:	0800aa8f 	.word	0x0800aa8f
 800bcf4:	0800bd8f 	.word	0x0800bd8f

0800bcf8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b60      	cmp	r3, #96	; 0x60
 800bd0a:	d10e      	bne.n	800bd2a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7fe fd81 	bl	800a82a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd28:	e009      	b.n	800bd3e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7fe fd6c 	bl	800a816 <HAL_I2C_ErrorCallback>
}
 800bd3e:	bf00      	nop
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d103      	bne.n	800bd64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d007      	beq.n	800bd82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	699a      	ldr	r2, [r3, #24]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f042 0201 	orr.w	r2, r2, #1
 800bd80:	619a      	str	r2, [r3, #24]
  }
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b084      	sub	sp, #16
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda8:	2200      	movs	r2, #0
 800bdaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb8:	2200      	movs	r2, #0
 800bdba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7ff ff9b 	bl	800bcf8 <I2C_TreatErrorCallback>
}
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	603b      	str	r3, [r7, #0]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdda:	e022      	b.n	800be22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde2:	d01e      	beq.n	800be22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bde4:	f7f9 faa2 	bl	800532c <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d302      	bcc.n	800bdfa <I2C_WaitOnFlagUntilTimeout+0x30>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d113      	bne.n	800be22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfe:	f043 0220 	orr.w	r2, r3, #32
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2220      	movs	r2, #32
 800be0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e00f      	b.n	800be42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	699a      	ldr	r2, [r3, #24]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4013      	ands	r3, r2
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	429a      	cmp	r2, r3
 800be30:	bf0c      	ite	eq
 800be32:	2301      	moveq	r3, #1
 800be34:	2300      	movne	r3, #0
 800be36:	b2db      	uxtb	r3, r3
 800be38:	461a      	mov	r2, r3
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d0cd      	beq.n	800bddc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	60f8      	str	r0, [r7, #12]
 800be52:	60b9      	str	r1, [r7, #8]
 800be54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800be56:	e02c      	b.n	800beb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f835 	bl	800becc <I2C_IsErrorOccurred>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e02a      	b.n	800bec2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be72:	d01e      	beq.n	800beb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be74:	f7f9 fa5a 	bl	800532c <HAL_GetTick>
 800be78:	4602      	mov	r2, r0
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	d302      	bcc.n	800be8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d113      	bne.n	800beb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be8e:	f043 0220 	orr.w	r2, r3, #32
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2220      	movs	r2, #32
 800be9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e007      	b.n	800bec2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d1cb      	bne.n	800be58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	; 0x28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d075      	beq.n	800bfe4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2210      	movs	r2, #16
 800befe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bf00:	e056      	b.n	800bfb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d052      	beq.n	800bfb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bf0a:	f7f9 fa0f 	bl	800532c <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <I2C_IsErrorOccurred+0x54>
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d147      	bne.n	800bfb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf42:	d12e      	bne.n	800bfa2 <I2C_IsErrorOccurred+0xd6>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf4a:	d02a      	beq.n	800bfa2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800bf4c:	7cfb      	ldrb	r3, [r7, #19]
 800bf4e:	2b20      	cmp	r3, #32
 800bf50:	d027      	beq.n	800bfa2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf60:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bf62:	f7f9 f9e3 	bl	800532c <HAL_GetTick>
 800bf66:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf68:	e01b      	b.n	800bfa2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bf6a:	f7f9 f9df 	bl	800532c <HAL_GetTick>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	2b19      	cmp	r3, #25
 800bf76:	d914      	bls.n	800bfa2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7c:	f043 0220 	orr.w	r2, r3, #32
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2220      	movs	r2, #32
 800bf88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	d1dc      	bne.n	800bf6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	d003      	beq.n	800bfc6 <I2C_IsErrorOccurred+0xfa>
 800bfbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d09d      	beq.n	800bf02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bfc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d103      	bne.n	800bfd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	f043 0304 	orr.w	r3, r3, #4
 800bfdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00b      	beq.n	800c00e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c006:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	f043 0308 	orr.w	r3, r3, #8
 800c01e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00b      	beq.n	800c052 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	f043 0302 	orr.w	r3, r3, #2
 800c040:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c04a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c056:	2b00      	cmp	r3, #0
 800c058:	d01c      	beq.n	800c094 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fe73 	bl	800bd46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6859      	ldr	r1, [r3, #4]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <I2C_IsErrorOccurred+0x1d4>)
 800c06c:	400b      	ands	r3, r1
 800c06e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	431a      	orrs	r2, r3
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2220      	movs	r2, #32
 800c080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3728      	adds	r7, #40	; 0x28
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	fe00e800 	.word	0xfe00e800

0800c0a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	817b      	strh	r3, [r7, #10]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c0b6:	897b      	ldrh	r3, [r7, #10]
 800c0b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c0bc:	7a7b      	ldrb	r3, [r7, #9]
 800c0be:	041b      	lsls	r3, r3, #16
 800c0c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c0c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	0d5b      	lsrs	r3, r3, #21
 800c0de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c0e2:	4b08      	ldr	r3, [pc, #32]	; (800c104 <I2C_TransferConfig+0x60>)
 800c0e4:	430b      	orrs	r3, r1
 800c0e6:	43db      	mvns	r3, r3
 800c0e8:	ea02 0103 	and.w	r1, r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c0f6:	bf00      	nop
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	03ff63ff 	.word	0x03ff63ff

0800c108 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c114:	2300      	movs	r3, #0
 800c116:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c11c:	4a2a      	ldr	r2, [pc, #168]	; (800c1c8 <I2C_Enable_IRQ+0xc0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d004      	beq.n	800c12c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c126:	4a29      	ldr	r2, [pc, #164]	; (800c1cc <I2C_Enable_IRQ+0xc4>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d11d      	bne.n	800c168 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c12c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c130:	2b00      	cmp	r3, #0
 800c132:	da03      	bge.n	800c13c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c13a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c13c:	887b      	ldrh	r3, [r7, #2]
 800c13e:	2b10      	cmp	r3, #16
 800c140:	d103      	bne.n	800c14a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c148:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c14a:	887b      	ldrh	r3, [r7, #2]
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	d103      	bne.n	800c158 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c156:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c158:	887b      	ldrh	r3, [r7, #2]
 800c15a:	2b40      	cmp	r3, #64	; 0x40
 800c15c:	d125      	bne.n	800c1aa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c164:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c166:	e020      	b.n	800c1aa <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da03      	bge.n	800c178 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c176:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c178:	887b      	ldrh	r3, [r7, #2]
 800c17a:	f003 0301 	and.w	r3, r3, #1
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800c188:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c18a:	887b      	ldrh	r3, [r7, #2]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	d003      	beq.n	800c19c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800c19a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c19c:	887b      	ldrh	r3, [r7, #2]
 800c19e:	2b20      	cmp	r3, #32
 800c1a0:	d103      	bne.n	800c1aa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f043 0320 	orr.w	r3, r3, #32
 800c1a8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6819      	ldr	r1, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	601a      	str	r2, [r3, #0]
}
 800c1ba:	bf00      	nop
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	0800ac95 	.word	0x0800ac95
 800c1cc:	0800ae7d 	.word	0x0800ae7d

0800c1d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c1e0:	887b      	ldrh	r3, [r7, #2]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00f      	beq.n	800c20a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800c1f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c1fe:	2b28      	cmp	r3, #40	; 0x28
 800c200:	d003      	beq.n	800c20a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c208:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c20a:	887b      	ldrh	r3, [r7, #2]
 800c20c:	f003 0302 	and.w	r3, r3, #2
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00f      	beq.n	800c234 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800c21a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c228:	2b28      	cmp	r3, #40	; 0x28
 800c22a:	d003      	beq.n	800c234 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c232:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	da03      	bge.n	800c244 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c242:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c244:	887b      	ldrh	r3, [r7, #2]
 800c246:	2b10      	cmp	r3, #16
 800c248:	d103      	bne.n	800c252 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c250:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c252:	887b      	ldrh	r3, [r7, #2]
 800c254:	2b20      	cmp	r3, #32
 800c256:	d103      	bne.n	800c260 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f043 0320 	orr.w	r3, r3, #32
 800c25e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c260:	887b      	ldrh	r3, [r7, #2]
 800c262:	2b40      	cmp	r3, #64	; 0x40
 800c264:	d103      	bne.n	800c26e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c26c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	43da      	mvns	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	400a      	ands	r2, r1
 800c27e:	601a      	str	r2, [r3, #0]
}
 800c280:	bf00      	nop
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d138      	bne.n	800c314 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e032      	b.n	800c316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2224      	movs	r2, #36	; 0x24
 800c2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f022 0201 	bic.w	r2, r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6819      	ldr	r1, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f042 0201 	orr.w	r2, r2, #1
 800c2fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2220      	movs	r2, #32
 800c304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e000      	b.n	800c316 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c314:	2302      	movs	r3, #2
  }
}
 800c316:	4618      	mov	r0, r3
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c322:	b480      	push	{r7}
 800c324:	b085      	sub	sp, #20
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b20      	cmp	r3, #32
 800c336:	d139      	bne.n	800c3ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d101      	bne.n	800c346 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c342:	2302      	movs	r3, #2
 800c344:	e033      	b.n	800c3ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2224      	movs	r2, #36	; 0x24
 800c352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f022 0201 	bic.w	r2, r2, #1
 800c364:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c374:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	021b      	lsls	r3, r3, #8
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f042 0201 	orr.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2220      	movs	r2, #32
 800c39c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e000      	b.n	800c3ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c3ac:	2302      	movs	r3, #2
  }
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
	...

0800c3bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c3c4:	4b19      	ldr	r3, [pc, #100]	; (800c42c <HAL_PWREx_ConfigSupply+0x70>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d00a      	beq.n	800c3e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c3d0:	4b16      	ldr	r3, [pc, #88]	; (800c42c <HAL_PWREx_ConfigSupply+0x70>)
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f003 0307 	and.w	r3, r3, #7
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d001      	beq.n	800c3e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e01f      	b.n	800c422 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e01d      	b.n	800c422 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <HAL_PWREx_ConfigSupply+0x70>)
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f023 0207 	bic.w	r2, r3, #7
 800c3ee:	490f      	ldr	r1, [pc, #60]	; (800c42c <HAL_PWREx_ConfigSupply+0x70>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c3f6:	f7f8 ff99 	bl	800532c <HAL_GetTick>
 800c3fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c3fc:	e009      	b.n	800c412 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c3fe:	f7f8 ff95 	bl	800532c <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c40c:	d901      	bls.n	800c412 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	e007      	b.n	800c422 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c412:	4b06      	ldr	r3, [pc, #24]	; (800c42c <HAL_PWREx_ConfigSupply+0x70>)
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c41e:	d1ee      	bne.n	800c3fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	58024800 	.word	0x58024800

0800c430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08c      	sub	sp, #48	; 0x30
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e39d      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 8087 	beq.w	800c55e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c450:	4b88      	ldr	r3, [pc, #544]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c458:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c45a:	4b86      	ldr	r3, [pc, #536]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	2b10      	cmp	r3, #16
 800c464:	d007      	beq.n	800c476 <HAL_RCC_OscConfig+0x46>
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	2b18      	cmp	r3, #24
 800c46a:	d110      	bne.n	800c48e <HAL_RCC_OscConfig+0x5e>
 800c46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	2b02      	cmp	r3, #2
 800c474:	d10b      	bne.n	800c48e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c476:	4b7f      	ldr	r3, [pc, #508]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d06c      	beq.n	800c55c <HAL_RCC_OscConfig+0x12c>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d168      	bne.n	800c55c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e377      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c496:	d106      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x76>
 800c498:	4b76      	ldr	r3, [pc, #472]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a75      	ldr	r2, [pc, #468]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c49e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	e02e      	b.n	800c504 <HAL_RCC_OscConfig+0xd4>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10c      	bne.n	800c4c8 <HAL_RCC_OscConfig+0x98>
 800c4ae:	4b71      	ldr	r3, [pc, #452]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a70      	ldr	r2, [pc, #448]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	4b6e      	ldr	r3, [pc, #440]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a6d      	ldr	r2, [pc, #436]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	e01d      	b.n	800c504 <HAL_RCC_OscConfig+0xd4>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4d0:	d10c      	bne.n	800c4ec <HAL_RCC_OscConfig+0xbc>
 800c4d2:	4b68      	ldr	r3, [pc, #416]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a67      	ldr	r2, [pc, #412]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	4b65      	ldr	r3, [pc, #404]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a64      	ldr	r2, [pc, #400]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	e00b      	b.n	800c504 <HAL_RCC_OscConfig+0xd4>
 800c4ec:	4b61      	ldr	r3, [pc, #388]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a60      	ldr	r2, [pc, #384]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	4b5e      	ldr	r3, [pc, #376]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a5d      	ldr	r2, [pc, #372]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c4fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d013      	beq.n	800c534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c50c:	f7f8 ff0e 	bl	800532c <HAL_GetTick>
 800c510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c512:	e008      	b.n	800c526 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c514:	f7f8 ff0a 	bl	800532c <HAL_GetTick>
 800c518:	4602      	mov	r2, r0
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	2b64      	cmp	r3, #100	; 0x64
 800c520:	d901      	bls.n	800c526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c522:	2303      	movs	r3, #3
 800c524:	e32b      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c526:	4b53      	ldr	r3, [pc, #332]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0f0      	beq.n	800c514 <HAL_RCC_OscConfig+0xe4>
 800c532:	e014      	b.n	800c55e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c534:	f7f8 fefa 	bl	800532c <HAL_GetTick>
 800c538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c53a:	e008      	b.n	800c54e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c53c:	f7f8 fef6 	bl	800532c <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b64      	cmp	r3, #100	; 0x64
 800c548:	d901      	bls.n	800c54e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e317      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c54e:	4b49      	ldr	r3, [pc, #292]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f0      	bne.n	800c53c <HAL_RCC_OscConfig+0x10c>
 800c55a:	e000      	b.n	800c55e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c55c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 0302 	and.w	r3, r3, #2
 800c566:	2b00      	cmp	r3, #0
 800c568:	f000 808c 	beq.w	800c684 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c56c:	4b41      	ldr	r3, [pc, #260]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c574:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c576:	4b3f      	ldr	r3, [pc, #252]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d007      	beq.n	800c592 <HAL_RCC_OscConfig+0x162>
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	2b18      	cmp	r3, #24
 800c586:	d137      	bne.n	800c5f8 <HAL_RCC_OscConfig+0x1c8>
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f003 0303 	and.w	r3, r3, #3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d132      	bne.n	800c5f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c592:	4b38      	ldr	r3, [pc, #224]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 0304 	and.w	r3, r3, #4
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <HAL_RCC_OscConfig+0x17a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d101      	bne.n	800c5aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e2e9      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c5aa:	4b32      	ldr	r3, [pc, #200]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f023 0219 	bic.w	r2, r3, #25
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	492f      	ldr	r1, [pc, #188]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c5bc:	f7f8 feb6 	bl	800532c <HAL_GetTick>
 800c5c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c5c2:	e008      	b.n	800c5d6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c5c4:	f7f8 feb2 	bl	800532c <HAL_GetTick>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d901      	bls.n	800c5d6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e2d3      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c5d6:	4b27      	ldr	r3, [pc, #156]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0304 	and.w	r3, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d0f0      	beq.n	800c5c4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5e2:	4b24      	ldr	r3, [pc, #144]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	061b      	lsls	r3, r3, #24
 800c5f0:	4920      	ldr	r1, [pc, #128]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c5f6:	e045      	b.n	800c684 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d026      	beq.n	800c64e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c600:	4b1c      	ldr	r3, [pc, #112]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f023 0219 	bic.w	r2, r3, #25
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	4919      	ldr	r1, [pc, #100]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c612:	f7f8 fe8b 	bl	800532c <HAL_GetTick>
 800c616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c618:	e008      	b.n	800c62c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c61a:	f7f8 fe87 	bl	800532c <HAL_GetTick>
 800c61e:	4602      	mov	r2, r0
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	2b02      	cmp	r3, #2
 800c626:	d901      	bls.n	800c62c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e2a8      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c62c:	4b11      	ldr	r3, [pc, #68]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0304 	and.w	r3, r3, #4
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0f0      	beq.n	800c61a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c638:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	061b      	lsls	r3, r3, #24
 800c646:	490b      	ldr	r1, [pc, #44]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c648:	4313      	orrs	r3, r2
 800c64a:	604b      	str	r3, [r1, #4]
 800c64c:	e01a      	b.n	800c684 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c64e:	4b09      	ldr	r3, [pc, #36]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a08      	ldr	r2, [pc, #32]	; (800c674 <HAL_RCC_OscConfig+0x244>)
 800c654:	f023 0301 	bic.w	r3, r3, #1
 800c658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c65a:	f7f8 fe67 	bl	800532c <HAL_GetTick>
 800c65e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c660:	e00a      	b.n	800c678 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c662:	f7f8 fe63 	bl	800532c <HAL_GetTick>
 800c666:	4602      	mov	r2, r0
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d903      	bls.n	800c678 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800c670:	2303      	movs	r3, #3
 800c672:	e284      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
 800c674:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c678:	4b96      	ldr	r3, [pc, #600]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1ee      	bne.n	800c662 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d06a      	beq.n	800c766 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c690:	4b90      	ldr	r3, [pc, #576]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c698:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c69a:	4b8e      	ldr	r3, [pc, #568]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	2b08      	cmp	r3, #8
 800c6a4:	d007      	beq.n	800c6b6 <HAL_RCC_OscConfig+0x286>
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	2b18      	cmp	r3, #24
 800c6aa:	d11b      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x2b4>
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d116      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c6b6:	4b87      	ldr	r3, [pc, #540]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <HAL_RCC_OscConfig+0x29e>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	2b80      	cmp	r3, #128	; 0x80
 800c6c8:	d001      	beq.n	800c6ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e257      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c6ce:	4b81      	ldr	r3, [pc, #516]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	061b      	lsls	r3, r3, #24
 800c6dc:	497d      	ldr	r1, [pc, #500]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c6e2:	e040      	b.n	800c766 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d023      	beq.n	800c734 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c6ec:	4b79      	ldr	r3, [pc, #484]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a78      	ldr	r2, [pc, #480]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6f8:	f7f8 fe18 	bl	800532c <HAL_GetTick>
 800c6fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c6fe:	e008      	b.n	800c712 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c700:	f7f8 fe14 	bl	800532c <HAL_GetTick>
 800c704:	4602      	mov	r2, r0
 800c706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d901      	bls.n	800c712 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e235      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c712:	4b70      	ldr	r3, [pc, #448]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0f0      	beq.n	800c700 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c71e:	4b6d      	ldr	r3, [pc, #436]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	061b      	lsls	r3, r3, #24
 800c72c:	4969      	ldr	r1, [pc, #420]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c72e:	4313      	orrs	r3, r2
 800c730:	60cb      	str	r3, [r1, #12]
 800c732:	e018      	b.n	800c766 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c734:	4b67      	ldr	r3, [pc, #412]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a66      	ldr	r2, [pc, #408]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c73a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c73e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c740:	f7f8 fdf4 	bl	800532c <HAL_GetTick>
 800c744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c746:	e008      	b.n	800c75a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c748:	f7f8 fdf0 	bl	800532c <HAL_GetTick>
 800c74c:	4602      	mov	r2, r0
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	2b02      	cmp	r3, #2
 800c754:	d901      	bls.n	800c75a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800c756:	2303      	movs	r3, #3
 800c758:	e211      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c75a:	4b5e      	ldr	r3, [pc, #376]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1f0      	bne.n	800c748 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0308 	and.w	r3, r3, #8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d036      	beq.n	800c7e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d019      	beq.n	800c7ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c77a:	4b56      	ldr	r3, [pc, #344]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c77e:	4a55      	ldr	r2, [pc, #340]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c786:	f7f8 fdd1 	bl	800532c <HAL_GetTick>
 800c78a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c78c:	e008      	b.n	800c7a0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c78e:	f7f8 fdcd 	bl	800532c <HAL_GetTick>
 800c792:	4602      	mov	r2, r0
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d901      	bls.n	800c7a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800c79c:	2303      	movs	r3, #3
 800c79e:	e1ee      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c7a0:	4b4c      	ldr	r3, [pc, #304]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a4:	f003 0302 	and.w	r3, r3, #2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0f0      	beq.n	800c78e <HAL_RCC_OscConfig+0x35e>
 800c7ac:	e018      	b.n	800c7e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7ae:	4b49      	ldr	r3, [pc, #292]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b2:	4a48      	ldr	r2, [pc, #288]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7b4:	f023 0301 	bic.w	r3, r3, #1
 800c7b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ba:	f7f8 fdb7 	bl	800532c <HAL_GetTick>
 800c7be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c7c0:	e008      	b.n	800c7d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7c2:	f7f8 fdb3 	bl	800532c <HAL_GetTick>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d901      	bls.n	800c7d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e1d4      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c7d4:	4b3f      	ldr	r3, [pc, #252]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1f0      	bne.n	800c7c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d036      	beq.n	800c85a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d019      	beq.n	800c828 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c7f4:	4b37      	ldr	r3, [pc, #220]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a36      	ldr	r2, [pc, #216]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c7fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c800:	f7f8 fd94 	bl	800532c <HAL_GetTick>
 800c804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c806:	e008      	b.n	800c81a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c808:	f7f8 fd90 	bl	800532c <HAL_GetTick>
 800c80c:	4602      	mov	r2, r0
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	2b02      	cmp	r3, #2
 800c814:	d901      	bls.n	800c81a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e1b1      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c81a:	4b2e      	ldr	r3, [pc, #184]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0f0      	beq.n	800c808 <HAL_RCC_OscConfig+0x3d8>
 800c826:	e018      	b.n	800c85a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c828:	4b2a      	ldr	r3, [pc, #168]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a29      	ldr	r2, [pc, #164]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c834:	f7f8 fd7a 	bl	800532c <HAL_GetTick>
 800c838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c83c:	f7f8 fd76 	bl	800532c <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e197      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c84e:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1f0      	bne.n	800c83c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 8086 	beq.w	800c974 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c868:	4b1b      	ldr	r3, [pc, #108]	; (800c8d8 <HAL_RCC_OscConfig+0x4a8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a1a      	ldr	r2, [pc, #104]	; (800c8d8 <HAL_RCC_OscConfig+0x4a8>)
 800c86e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c874:	f7f8 fd5a 	bl	800532c <HAL_GetTick>
 800c878:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c87a:	e008      	b.n	800c88e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c87c:	f7f8 fd56 	bl	800532c <HAL_GetTick>
 800c880:	4602      	mov	r2, r0
 800c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b64      	cmp	r3, #100	; 0x64
 800c888:	d901      	bls.n	800c88e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e177      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c88e:	4b12      	ldr	r3, [pc, #72]	; (800c8d8 <HAL_RCC_OscConfig+0x4a8>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0f0      	beq.n	800c87c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d106      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x480>
 800c8a2:	4b0c      	ldr	r3, [pc, #48]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a6:	4a0b      	ldr	r2, [pc, #44]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8a8:	f043 0301 	orr.w	r3, r3, #1
 800c8ac:	6713      	str	r3, [r2, #112]	; 0x70
 800c8ae:	e032      	b.n	800c916 <HAL_RCC_OscConfig+0x4e6>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d111      	bne.n	800c8dc <HAL_RCC_OscConfig+0x4ac>
 800c8b8:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8bc:	4a05      	ldr	r2, [pc, #20]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8be:	f023 0301 	bic.w	r3, r3, #1
 800c8c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c8c4:	4b03      	ldr	r3, [pc, #12]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c8:	4a02      	ldr	r2, [pc, #8]	; (800c8d4 <HAL_RCC_OscConfig+0x4a4>)
 800c8ca:	f023 0304 	bic.w	r3, r3, #4
 800c8ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c8d0:	e021      	b.n	800c916 <HAL_RCC_OscConfig+0x4e6>
 800c8d2:	bf00      	nop
 800c8d4:	58024400 	.word	0x58024400
 800c8d8:	58024800 	.word	0x58024800
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	2b05      	cmp	r3, #5
 800c8e2:	d10c      	bne.n	800c8fe <HAL_RCC_OscConfig+0x4ce>
 800c8e4:	4b83      	ldr	r3, [pc, #524]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e8:	4a82      	ldr	r2, [pc, #520]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c8ea:	f043 0304 	orr.w	r3, r3, #4
 800c8ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c8f0:	4b80      	ldr	r3, [pc, #512]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f4:	4a7f      	ldr	r2, [pc, #508]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c8f6:	f043 0301 	orr.w	r3, r3, #1
 800c8fa:	6713      	str	r3, [r2, #112]	; 0x70
 800c8fc:	e00b      	b.n	800c916 <HAL_RCC_OscConfig+0x4e6>
 800c8fe:	4b7d      	ldr	r3, [pc, #500]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c902:	4a7c      	ldr	r2, [pc, #496]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c904:	f023 0301 	bic.w	r3, r3, #1
 800c908:	6713      	str	r3, [r2, #112]	; 0x70
 800c90a:	4b7a      	ldr	r3, [pc, #488]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c90e:	4a79      	ldr	r2, [pc, #484]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c910:	f023 0304 	bic.w	r3, r3, #4
 800c914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d015      	beq.n	800c94a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c91e:	f7f8 fd05 	bl	800532c <HAL_GetTick>
 800c922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c924:	e00a      	b.n	800c93c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c926:	f7f8 fd01 	bl	800532c <HAL_GetTick>
 800c92a:	4602      	mov	r2, r0
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	f241 3288 	movw	r2, #5000	; 0x1388
 800c934:	4293      	cmp	r3, r2
 800c936:	d901      	bls.n	800c93c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e120      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c93c:	4b6d      	ldr	r3, [pc, #436]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c940:	f003 0302 	and.w	r3, r3, #2
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0ee      	beq.n	800c926 <HAL_RCC_OscConfig+0x4f6>
 800c948:	e014      	b.n	800c974 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c94a:	f7f8 fcef 	bl	800532c <HAL_GetTick>
 800c94e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c950:	e00a      	b.n	800c968 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c952:	f7f8 fceb 	bl	800532c <HAL_GetTick>
 800c956:	4602      	mov	r2, r0
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c960:	4293      	cmp	r3, r2
 800c962:	d901      	bls.n	800c968 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e10a      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c968:	4b62      	ldr	r3, [pc, #392]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96c:	f003 0302 	and.w	r3, r3, #2
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1ee      	bne.n	800c952 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 80ff 	beq.w	800cb7c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c97e:	4b5d      	ldr	r3, [pc, #372]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c986:	2b18      	cmp	r3, #24
 800c988:	f000 80ba 	beq.w	800cb00 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	2b02      	cmp	r3, #2
 800c992:	f040 8095 	bne.w	800cac0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c996:	4b57      	ldr	r3, [pc, #348]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a56      	ldr	r2, [pc, #344]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c99c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a2:	f7f8 fcc3 	bl	800532c <HAL_GetTick>
 800c9a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c9a8:	e008      	b.n	800c9bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9aa:	f7f8 fcbf 	bl	800532c <HAL_GetTick>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d901      	bls.n	800c9bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800c9b8:	2303      	movs	r3, #3
 800c9ba:	e0e0      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c9bc:	4b4d      	ldr	r3, [pc, #308]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1f0      	bne.n	800c9aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c9c8:	4b4a      	ldr	r3, [pc, #296]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c9ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9cc:	4b4a      	ldr	r3, [pc, #296]	; (800caf8 <HAL_RCC_OscConfig+0x6c8>)
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c9d8:	0112      	lsls	r2, r2, #4
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	4945      	ldr	r1, [pc, #276]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	628b      	str	r3, [r1, #40]	; 0x28
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	025b      	lsls	r3, r3, #9
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	041b      	lsls	r3, r3, #16
 800ca00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca04:	431a      	orrs	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	061b      	lsls	r3, r3, #24
 800ca0e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca12:	4938      	ldr	r1, [pc, #224]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca14:	4313      	orrs	r3, r2
 800ca16:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ca18:	4b36      	ldr	r3, [pc, #216]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca1c:	4a35      	ldr	r2, [pc, #212]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca1e:	f023 0301 	bic.w	r3, r3, #1
 800ca22:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ca24:	4b33      	ldr	r3, [pc, #204]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca28:	4b34      	ldr	r3, [pc, #208]	; (800cafc <HAL_RCC_OscConfig+0x6cc>)
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ca30:	00d2      	lsls	r2, r2, #3
 800ca32:	4930      	ldr	r1, [pc, #192]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca34:	4313      	orrs	r3, r2
 800ca36:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ca38:	4b2e      	ldr	r3, [pc, #184]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	f023 020c 	bic.w	r2, r3, #12
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	492b      	ldr	r1, [pc, #172]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca46:	4313      	orrs	r3, r2
 800ca48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ca4a:	4b2a      	ldr	r3, [pc, #168]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	f023 0202 	bic.w	r2, r3, #2
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca56:	4927      	ldr	r1, [pc, #156]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ca5c:	4b25      	ldr	r3, [pc, #148]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca60:	4a24      	ldr	r2, [pc, #144]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca68:	4b22      	ldr	r3, [pc, #136]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6c:	4a21      	ldr	r2, [pc, #132]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ca74:	4b1f      	ldr	r3, [pc, #124]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	4a1e      	ldr	r2, [pc, #120]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ca80:	4b1c      	ldr	r3, [pc, #112]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	4a1b      	ldr	r2, [pc, #108]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca86:	f043 0301 	orr.w	r3, r3, #1
 800ca8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca8c:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a18      	ldr	r2, [pc, #96]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800ca92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca98:	f7f8 fc48 	bl	800532c <HAL_GetTick>
 800ca9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800caa0:	f7f8 fc44 	bl	800532c <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e065      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cab2:	4b10      	ldr	r3, [pc, #64]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0f0      	beq.n	800caa0 <HAL_RCC_OscConfig+0x670>
 800cabe:	e05d      	b.n	800cb7c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cac0:	4b0c      	ldr	r3, [pc, #48]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a0b      	ldr	r2, [pc, #44]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800cac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800caca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cacc:	f7f8 fc2e 	bl	800532c <HAL_GetTick>
 800cad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cad2:	e008      	b.n	800cae6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cad4:	f7f8 fc2a 	bl	800532c <HAL_GetTick>
 800cad8:	4602      	mov	r2, r0
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d901      	bls.n	800cae6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e04b      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cae6:	4b03      	ldr	r3, [pc, #12]	; (800caf4 <HAL_RCC_OscConfig+0x6c4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1f0      	bne.n	800cad4 <HAL_RCC_OscConfig+0x6a4>
 800caf2:	e043      	b.n	800cb7c <HAL_RCC_OscConfig+0x74c>
 800caf4:	58024400 	.word	0x58024400
 800caf8:	fffffc0c 	.word	0xfffffc0c
 800cafc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cb00:	4b21      	ldr	r3, [pc, #132]	; (800cb88 <HAL_RCC_OscConfig+0x758>)
 800cb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cb06:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <HAL_RCC_OscConfig+0x758>)
 800cb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d031      	beq.n	800cb78 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	f003 0203 	and.w	r2, r3, #3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d12a      	bne.n	800cb78 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	091b      	lsrs	r3, r3, #4
 800cb26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d122      	bne.n	800cb78 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d11a      	bne.n	800cb78 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	0a5b      	lsrs	r3, r3, #9
 800cb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d111      	bne.n	800cb78 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	0c1b      	lsrs	r3, r3, #16
 800cb58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d108      	bne.n	800cb78 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	0e1b      	lsrs	r3, r3, #24
 800cb6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d001      	beq.n	800cb7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e000      	b.n	800cb7e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3730      	adds	r7, #48	; 0x30
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	58024400 	.word	0x58024400

0800cb8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e19c      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cba0:	4b8a      	ldr	r3, [pc, #552]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 030f 	and.w	r3, r3, #15
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d910      	bls.n	800cbd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbae:	4b87      	ldr	r3, [pc, #540]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f023 020f 	bic.w	r2, r3, #15
 800cbb6:	4985      	ldr	r1, [pc, #532]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbbe:	4b83      	ldr	r3, [pc, #524]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d001      	beq.n	800cbd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e184      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d010      	beq.n	800cbfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	691a      	ldr	r2, [r3, #16]
 800cbe0:	4b7b      	ldr	r3, [pc, #492]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d908      	bls.n	800cbfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cbec:	4b78      	ldr	r3, [pc, #480]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	4975      	ldr	r1, [pc, #468]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0308 	and.w	r3, r3, #8
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d010      	beq.n	800cc2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	695a      	ldr	r2, [r3, #20]
 800cc0e:	4b70      	ldr	r3, [pc, #448]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc10:	69db      	ldr	r3, [r3, #28]
 800cc12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d908      	bls.n	800cc2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cc1a:	4b6d      	ldr	r3, [pc, #436]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	496a      	ldr	r1, [pc, #424]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0310 	and.w	r3, r3, #16
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d010      	beq.n	800cc5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	4b64      	ldr	r3, [pc, #400]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc3e:	69db      	ldr	r3, [r3, #28]
 800cc40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d908      	bls.n	800cc5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cc48:	4b61      	ldr	r3, [pc, #388]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc4a:	69db      	ldr	r3, [r3, #28]
 800cc4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	495e      	ldr	r1, [pc, #376]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0320 	and.w	r3, r3, #32
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d010      	beq.n	800cc88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	69da      	ldr	r2, [r3, #28]
 800cc6a:	4b59      	ldr	r3, [pc, #356]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d908      	bls.n	800cc88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800cc76:	4b56      	ldr	r3, [pc, #344]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	4953      	ldr	r1, [pc, #332]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc84:	4313      	orrs	r3, r2
 800cc86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0302 	and.w	r3, r3, #2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d010      	beq.n	800ccb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68da      	ldr	r2, [r3, #12]
 800cc98:	4b4d      	ldr	r3, [pc, #308]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	f003 030f 	and.w	r3, r3, #15
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d908      	bls.n	800ccb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cca4:	4b4a      	ldr	r3, [pc, #296]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	f023 020f 	bic.w	r2, r3, #15
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	4947      	ldr	r1, [pc, #284]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d055      	beq.n	800cd6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ccc2:	4b43      	ldr	r3, [pc, #268]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	4940      	ldr	r1, [pc, #256]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d107      	bne.n	800ccec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ccdc:	4b3c      	ldr	r3, [pc, #240]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d121      	bne.n	800cd2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e0f6      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d107      	bne.n	800cd04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ccf4:	4b36      	ldr	r3, [pc, #216]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d115      	bne.n	800cd2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e0ea      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d107      	bne.n	800cd1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cd0c:	4b30      	ldr	r3, [pc, #192]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d109      	bne.n	800cd2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e0de      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd1c:	4b2c      	ldr	r3, [pc, #176]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e0d6      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cd2c:	4b28      	ldr	r3, [pc, #160]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	f023 0207 	bic.w	r2, r3, #7
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4925      	ldr	r1, [pc, #148]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd3e:	f7f8 faf5 	bl	800532c <HAL_GetTick>
 800cd42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd44:	e00a      	b.n	800cd5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd46:	f7f8 faf1 	bl	800532c <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d901      	bls.n	800cd5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e0be      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd5c:	4b1c      	ldr	r3, [pc, #112]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d1eb      	bne.n	800cd46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0302 	and.w	r3, r3, #2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d010      	beq.n	800cd9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68da      	ldr	r2, [r3, #12]
 800cd7e:	4b14      	ldr	r3, [pc, #80]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	f003 030f 	and.w	r3, r3, #15
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d208      	bcs.n	800cd9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd8a:	4b11      	ldr	r3, [pc, #68]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	f023 020f 	bic.w	r2, r3, #15
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	490e      	ldr	r1, [pc, #56]	; (800cdd0 <HAL_RCC_ClockConfig+0x244>)
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd9c:	4b0b      	ldr	r3, [pc, #44]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 030f 	and.w	r3, r3, #15
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d214      	bcs.n	800cdd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdaa:	4b08      	ldr	r3, [pc, #32]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f023 020f 	bic.w	r2, r3, #15
 800cdb2:	4906      	ldr	r1, [pc, #24]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdba:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <HAL_RCC_ClockConfig+0x240>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 030f 	and.w	r3, r3, #15
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d005      	beq.n	800cdd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e086      	b.n	800ceda <HAL_RCC_ClockConfig+0x34e>
 800cdcc:	52002000 	.word	0x52002000
 800cdd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d010      	beq.n	800ce02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	691a      	ldr	r2, [r3, #16]
 800cde4:	4b3f      	ldr	r3, [pc, #252]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d208      	bcs.n	800ce02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cdf0:	4b3c      	ldr	r3, [pc, #240]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800cdf2:	699b      	ldr	r3, [r3, #24]
 800cdf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	4939      	ldr	r1, [pc, #228]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0308 	and.w	r3, r3, #8
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d010      	beq.n	800ce30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	695a      	ldr	r2, [r3, #20]
 800ce12:	4b34      	ldr	r3, [pc, #208]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d208      	bcs.n	800ce30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ce1e:	4b31      	ldr	r3, [pc, #196]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	492e      	ldr	r1, [pc, #184]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d010      	beq.n	800ce5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	699a      	ldr	r2, [r3, #24]
 800ce40:	4b28      	ldr	r3, [pc, #160]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce42:	69db      	ldr	r3, [r3, #28]
 800ce44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d208      	bcs.n	800ce5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ce4c:	4b25      	ldr	r3, [pc, #148]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce4e:	69db      	ldr	r3, [r3, #28]
 800ce50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	4922      	ldr	r1, [pc, #136]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f003 0320 	and.w	r3, r3, #32
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d010      	beq.n	800ce8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	69da      	ldr	r2, [r3, #28]
 800ce6e:	4b1d      	ldr	r3, [pc, #116]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d208      	bcs.n	800ce8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ce7a:	4b1a      	ldr	r3, [pc, #104]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	69db      	ldr	r3, [r3, #28]
 800ce86:	4917      	ldr	r1, [pc, #92]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ce8c:	f000 f834 	bl	800cef8 <HAL_RCC_GetSysClockFreq>
 800ce90:	4602      	mov	r2, r0
 800ce92:	4b14      	ldr	r3, [pc, #80]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	0a1b      	lsrs	r3, r3, #8
 800ce98:	f003 030f 	and.w	r3, r3, #15
 800ce9c:	4912      	ldr	r1, [pc, #72]	; (800cee8 <HAL_RCC_ClockConfig+0x35c>)
 800ce9e:	5ccb      	ldrb	r3, [r1, r3]
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	fa22 f303 	lsr.w	r3, r2, r3
 800cea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ceaa:	4b0e      	ldr	r3, [pc, #56]	; (800cee4 <HAL_RCC_ClockConfig+0x358>)
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	f003 030f 	and.w	r3, r3, #15
 800ceb2:	4a0d      	ldr	r2, [pc, #52]	; (800cee8 <HAL_RCC_ClockConfig+0x35c>)
 800ceb4:	5cd3      	ldrb	r3, [r2, r3]
 800ceb6:	f003 031f 	and.w	r3, r3, #31
 800ceba:	693a      	ldr	r2, [r7, #16]
 800cebc:	fa22 f303 	lsr.w	r3, r2, r3
 800cec0:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <HAL_RCC_ClockConfig+0x360>)
 800cec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cec4:	4a0a      	ldr	r2, [pc, #40]	; (800cef0 <HAL_RCC_ClockConfig+0x364>)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ceca:	4b0a      	ldr	r3, [pc, #40]	; (800cef4 <HAL_RCC_ClockConfig+0x368>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f8 f9e2 	bl	8005298 <HAL_InitTick>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	58024400 	.word	0x58024400
 800cee8:	08015608 	.word	0x08015608
 800ceec:	20000008 	.word	0x20000008
 800cef0:	20000004 	.word	0x20000004
 800cef4:	2000000c 	.word	0x2000000c

0800cef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b089      	sub	sp, #36	; 0x24
 800cefc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cefe:	4bb3      	ldr	r3, [pc, #716]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf06:	2b18      	cmp	r3, #24
 800cf08:	f200 8155 	bhi.w	800d1b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800cf0c:	a201      	add	r2, pc, #4	; (adr r2, 800cf14 <HAL_RCC_GetSysClockFreq+0x1c>)
 800cf0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf12:	bf00      	nop
 800cf14:	0800cf79 	.word	0x0800cf79
 800cf18:	0800d1b7 	.word	0x0800d1b7
 800cf1c:	0800d1b7 	.word	0x0800d1b7
 800cf20:	0800d1b7 	.word	0x0800d1b7
 800cf24:	0800d1b7 	.word	0x0800d1b7
 800cf28:	0800d1b7 	.word	0x0800d1b7
 800cf2c:	0800d1b7 	.word	0x0800d1b7
 800cf30:	0800d1b7 	.word	0x0800d1b7
 800cf34:	0800cf9f 	.word	0x0800cf9f
 800cf38:	0800d1b7 	.word	0x0800d1b7
 800cf3c:	0800d1b7 	.word	0x0800d1b7
 800cf40:	0800d1b7 	.word	0x0800d1b7
 800cf44:	0800d1b7 	.word	0x0800d1b7
 800cf48:	0800d1b7 	.word	0x0800d1b7
 800cf4c:	0800d1b7 	.word	0x0800d1b7
 800cf50:	0800d1b7 	.word	0x0800d1b7
 800cf54:	0800cfa5 	.word	0x0800cfa5
 800cf58:	0800d1b7 	.word	0x0800d1b7
 800cf5c:	0800d1b7 	.word	0x0800d1b7
 800cf60:	0800d1b7 	.word	0x0800d1b7
 800cf64:	0800d1b7 	.word	0x0800d1b7
 800cf68:	0800d1b7 	.word	0x0800d1b7
 800cf6c:	0800d1b7 	.word	0x0800d1b7
 800cf70:	0800d1b7 	.word	0x0800d1b7
 800cf74:	0800cfab 	.word	0x0800cfab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf78:	4b94      	ldr	r3, [pc, #592]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0320 	and.w	r3, r3, #32
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d009      	beq.n	800cf98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf84:	4b91      	ldr	r3, [pc, #580]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	08db      	lsrs	r3, r3, #3
 800cf8a:	f003 0303 	and.w	r3, r3, #3
 800cf8e:	4a90      	ldr	r2, [pc, #576]	; (800d1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cf90:	fa22 f303 	lsr.w	r3, r2, r3
 800cf94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800cf96:	e111      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cf98:	4b8d      	ldr	r3, [pc, #564]	; (800d1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cf9a:	61bb      	str	r3, [r7, #24]
    break;
 800cf9c:	e10e      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800cf9e:	4b8d      	ldr	r3, [pc, #564]	; (800d1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cfa0:	61bb      	str	r3, [r7, #24]
    break;
 800cfa2:	e10b      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800cfa4:	4b8c      	ldr	r3, [pc, #560]	; (800d1d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800cfa6:	61bb      	str	r3, [r7, #24]
    break;
 800cfa8:	e108      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfaa:	4b88      	ldr	r3, [pc, #544]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	f003 0303 	and.w	r3, r3, #3
 800cfb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cfb4:	4b85      	ldr	r3, [pc, #532]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb8:	091b      	lsrs	r3, r3, #4
 800cfba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cfc0:	4b82      	ldr	r3, [pc, #520]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cfca:	4b80      	ldr	r3, [pc, #512]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	fb02 f303 	mul.w	r3, r2, r3
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 80e1 	beq.w	800d1b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	f000 8083 	beq.w	800d0fc <HAL_RCC_GetSysClockFreq+0x204>
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	f200 80a1 	bhi.w	800d140 <HAL_RCC_GetSysClockFreq+0x248>
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <HAL_RCC_GetSysClockFreq+0x114>
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d056      	beq.n	800d0b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d00a:	e099      	b.n	800d140 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d00c:	4b6f      	ldr	r3, [pc, #444]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0320 	and.w	r3, r3, #32
 800d014:	2b00      	cmp	r3, #0
 800d016:	d02d      	beq.n	800d074 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d018:	4b6c      	ldr	r3, [pc, #432]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	08db      	lsrs	r3, r3, #3
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	4a6b      	ldr	r2, [pc, #428]	; (800d1d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d024:	fa22 f303 	lsr.w	r3, r2, r3
 800d028:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d042:	4b62      	ldr	r3, [pc, #392]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04a:	ee07 3a90 	vmov	s15, r3
 800d04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d052:	ed97 6a02 	vldr	s12, [r7, #8]
 800d056:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d06e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800d072:	e087      	b.n	800d184 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	ee07 3a90 	vmov	s15, r3
 800d07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d07e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d1e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d086:	4b51      	ldr	r3, [pc, #324]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d096:	ed97 6a02 	vldr	s12, [r7, #8]
 800d09a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0b6:	e065      	b.n	800d184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ca:	4b40      	ldr	r3, [pc, #256]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d2:	ee07 3a90 	vmov	s15, r3
 800d0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0da:	ed97 6a02 	vldr	s12, [r7, #8]
 800d0de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0fa:	e043      	b.n	800d184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d106:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d1e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d10e:	4b2f      	ldr	r3, [pc, #188]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d122:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d13e:	e021      	b.n	800d184 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d1e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d152:	4b1e      	ldr	r3, [pc, #120]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d162:	ed97 6a02 	vldr	s12, [r7, #8]
 800d166:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d1dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800d16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d182:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d184:	4b11      	ldr	r3, [pc, #68]	; (800d1cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	0a5b      	lsrs	r3, r3, #9
 800d18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18e:	3301      	adds	r3, #1
 800d190:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	ee07 3a90 	vmov	s15, r3
 800d198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1a8:	ee17 3a90 	vmov	r3, s15
 800d1ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800d1ae:	e005      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61bb      	str	r3, [r7, #24]
    break;
 800d1b4:	e002      	b.n	800d1bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800d1b6:	4b07      	ldr	r3, [pc, #28]	; (800d1d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d1b8:	61bb      	str	r3, [r7, #24]
    break;
 800d1ba:	bf00      	nop
  }

  return sysclockfreq;
 800d1bc:	69bb      	ldr	r3, [r7, #24]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3724      	adds	r7, #36	; 0x24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	58024400 	.word	0x58024400
 800d1d0:	03d09000 	.word	0x03d09000
 800d1d4:	003d0900 	.word	0x003d0900
 800d1d8:	017d7840 	.word	0x017d7840
 800d1dc:	46000000 	.word	0x46000000
 800d1e0:	4c742400 	.word	0x4c742400
 800d1e4:	4a742400 	.word	0x4a742400
 800d1e8:	4bbebc20 	.word	0x4bbebc20

0800d1ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d1f2:	f7ff fe81 	bl	800cef8 <HAL_RCC_GetSysClockFreq>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	4b10      	ldr	r3, [pc, #64]	; (800d23c <HAL_RCC_GetHCLKFreq+0x50>)
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	0a1b      	lsrs	r3, r3, #8
 800d1fe:	f003 030f 	and.w	r3, r3, #15
 800d202:	490f      	ldr	r1, [pc, #60]	; (800d240 <HAL_RCC_GetHCLKFreq+0x54>)
 800d204:	5ccb      	ldrb	r3, [r1, r3]
 800d206:	f003 031f 	and.w	r3, r3, #31
 800d20a:	fa22 f303 	lsr.w	r3, r2, r3
 800d20e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <HAL_RCC_GetHCLKFreq+0x50>)
 800d212:	699b      	ldr	r3, [r3, #24]
 800d214:	f003 030f 	and.w	r3, r3, #15
 800d218:	4a09      	ldr	r2, [pc, #36]	; (800d240 <HAL_RCC_GetHCLKFreq+0x54>)
 800d21a:	5cd3      	ldrb	r3, [r2, r3]
 800d21c:	f003 031f 	and.w	r3, r3, #31
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	fa22 f303 	lsr.w	r3, r2, r3
 800d226:	4a07      	ldr	r2, [pc, #28]	; (800d244 <HAL_RCC_GetHCLKFreq+0x58>)
 800d228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d22a:	4a07      	ldr	r2, [pc, #28]	; (800d248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d230:	4b04      	ldr	r3, [pc, #16]	; (800d244 <HAL_RCC_GetHCLKFreq+0x58>)
 800d232:	681b      	ldr	r3, [r3, #0]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	58024400 	.word	0x58024400
 800d240:	08015608 	.word	0x08015608
 800d244:	20000008 	.word	0x20000008
 800d248:	20000004 	.word	0x20000004

0800d24c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d250:	f7ff ffcc 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800d254:	4602      	mov	r2, r0
 800d256:	4b06      	ldr	r3, [pc, #24]	; (800d270 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	091b      	lsrs	r3, r3, #4
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	4904      	ldr	r1, [pc, #16]	; (800d274 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d262:	5ccb      	ldrb	r3, [r1, r3]
 800d264:	f003 031f 	and.w	r3, r3, #31
 800d268:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	58024400 	.word	0x58024400
 800d274:	08015608 	.word	0x08015608

0800d278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d27c:	f7ff ffb6 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800d280:	4602      	mov	r2, r0
 800d282:	4b06      	ldr	r3, [pc, #24]	; (800d29c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	0a1b      	lsrs	r3, r3, #8
 800d288:	f003 0307 	and.w	r3, r3, #7
 800d28c:	4904      	ldr	r1, [pc, #16]	; (800d2a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d28e:	5ccb      	ldrb	r3, [r1, r3]
 800d290:	f003 031f 	and.w	r3, r3, #31
 800d294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d298:	4618      	mov	r0, r3
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	58024400 	.word	0x58024400
 800d2a0:	08015608 	.word	0x08015608

0800d2a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d03f      	beq.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d2c8:	d02a      	beq.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d2ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d2ce:	d824      	bhi.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d2d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2d4:	d018      	beq.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2da:	d81e      	bhi.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d003      	beq.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d2e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2e4:	d007      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d2e6:	e018      	b.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2e8:	4ba4      	ldr	r3, [pc, #656]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	4aa3      	ldr	r2, [pc, #652]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d2f4:	e015      	b.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	2102      	movs	r1, #2
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f001 ff01 	bl	800f104 <RCCEx_PLL2_Config>
 800d302:	4603      	mov	r3, r0
 800d304:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d306:	e00c      	b.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3324      	adds	r3, #36	; 0x24
 800d30c:	2102      	movs	r1, #2
 800d30e:	4618      	mov	r0, r3
 800d310:	f001 ffaa 	bl	800f268 <RCCEx_PLL3_Config>
 800d314:	4603      	mov	r3, r0
 800d316:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d318:	e003      	b.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	75fb      	strb	r3, [r7, #23]
      break;
 800d31e:	e000      	b.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d320:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d109      	bne.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d328:	4b94      	ldr	r3, [pc, #592]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d334:	4991      	ldr	r1, [pc, #580]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d336:	4313      	orrs	r3, r2
 800d338:	650b      	str	r3, [r1, #80]	; 0x50
 800d33a:	e001      	b.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d03d      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d350:	2b04      	cmp	r3, #4
 800d352:	d826      	bhi.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d354:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800d356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35a:	bf00      	nop
 800d35c:	0800d371 	.word	0x0800d371
 800d360:	0800d37f 	.word	0x0800d37f
 800d364:	0800d391 	.word	0x0800d391
 800d368:	0800d3a9 	.word	0x0800d3a9
 800d36c:	0800d3a9 	.word	0x0800d3a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d370:	4b82      	ldr	r3, [pc, #520]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d374:	4a81      	ldr	r2, [pc, #516]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d37a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d37c:	e015      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3304      	adds	r3, #4
 800d382:	2100      	movs	r1, #0
 800d384:	4618      	mov	r0, r3
 800d386:	f001 febd 	bl	800f104 <RCCEx_PLL2_Config>
 800d38a:	4603      	mov	r3, r0
 800d38c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d38e:	e00c      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3324      	adds	r3, #36	; 0x24
 800d394:	2100      	movs	r1, #0
 800d396:	4618      	mov	r0, r3
 800d398:	f001 ff66 	bl	800f268 <RCCEx_PLL3_Config>
 800d39c:	4603      	mov	r3, r0
 800d39e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d3a0:	e003      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800d3a6:	e000      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d3a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d3aa:	7dfb      	ldrb	r3, [r7, #23]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d109      	bne.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3b0:	4b72      	ldr	r3, [pc, #456]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3b4:	f023 0207 	bic.w	r2, r3, #7
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3bc:	496f      	ldr	r1, [pc, #444]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	650b      	str	r3, [r1, #80]	; 0x50
 800d3c2:	e001      	b.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
 800d3c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d051      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d3de:	d036      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d3e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d3e4:	d830      	bhi.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d3e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3ea:	d032      	beq.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800d3ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3f0:	d82a      	bhi.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d3f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d3f6:	d02e      	beq.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800d3f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d3fc:	d824      	bhi.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d3fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d402:	d018      	beq.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d408:	d81e      	bhi.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d003      	beq.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800d40e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d412:	d007      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d414:	e018      	b.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d416:	4b59      	ldr	r3, [pc, #356]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	4a58      	ldr	r2, [pc, #352]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d422:	e019      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3304      	adds	r3, #4
 800d428:	2100      	movs	r1, #0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fe6a 	bl	800f104 <RCCEx_PLL2_Config>
 800d430:	4603      	mov	r3, r0
 800d432:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d434:	e010      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3324      	adds	r3, #36	; 0x24
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f001 ff13 	bl	800f268 <RCCEx_PLL3_Config>
 800d442:	4603      	mov	r3, r0
 800d444:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d446:	e007      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	75fb      	strb	r3, [r7, #23]
      break;
 800d44c:	e004      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d44e:	bf00      	nop
 800d450:	e002      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d452:	bf00      	nop
 800d454:	e000      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d456:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d45e:	4b47      	ldr	r3, [pc, #284]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d462:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d46c:	4943      	ldr	r1, [pc, #268]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	658b      	str	r3, [r1, #88]	; 0x58
 800d472:	e001      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d474:	7dfb      	ldrb	r3, [r7, #23]
 800d476:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d480:	2b00      	cmp	r3, #0
 800d482:	d051      	beq.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d48a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d48e:	d036      	beq.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d490:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800d494:	d830      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d49a:	d032      	beq.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800d49c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4a0:	d82a      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d4a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d4a6:	d02e      	beq.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800d4a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d4ac:	d824      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d4ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4b2:	d018      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800d4b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4b8:	d81e      	bhi.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800d4be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d4c2:	d007      	beq.n	800d4d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800d4c4:	e018      	b.n	800d4f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4c6:	4b2d      	ldr	r3, [pc, #180]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ca:	4a2c      	ldr	r2, [pc, #176]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d4cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d4d2:	e019      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f001 fe12 	bl	800f104 <RCCEx_PLL2_Config>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d4e4:	e010      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	3324      	adds	r3, #36	; 0x24
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f001 febb 	bl	800f268 <RCCEx_PLL3_Config>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d4f6:	e007      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d4fc:	e004      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d4fe:	bf00      	nop
 800d500:	e002      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d502:	bf00      	nop
 800d504:	e000      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d506:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d508:	7dfb      	ldrb	r3, [r7, #23]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10a      	bne.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d50e:	4b1b      	ldr	r3, [pc, #108]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d512:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d51c:	4917      	ldr	r1, [pc, #92]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	658b      	str	r3, [r1, #88]	; 0x58
 800d522:	e001      	b.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d530:	2b00      	cmp	r3, #0
 800d532:	d035      	beq.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d538:	2b30      	cmp	r3, #48	; 0x30
 800d53a:	d01c      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d53c:	2b30      	cmp	r3, #48	; 0x30
 800d53e:	d817      	bhi.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d540:	2b20      	cmp	r3, #32
 800d542:	d00c      	beq.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800d544:	2b20      	cmp	r3, #32
 800d546:	d813      	bhi.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d019      	beq.n	800d580 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800d54c:	2b10      	cmp	r3, #16
 800d54e:	d10f      	bne.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d550:	4b0a      	ldr	r3, [pc, #40]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	4a09      	ldr	r2, [pc, #36]	; (800d57c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d55a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d55c:	e011      	b.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3304      	adds	r3, #4
 800d562:	2102      	movs	r1, #2
 800d564:	4618      	mov	r0, r3
 800d566:	f001 fdcd 	bl	800f104 <RCCEx_PLL2_Config>
 800d56a:	4603      	mov	r3, r0
 800d56c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d56e:	e008      	b.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	75fb      	strb	r3, [r7, #23]
      break;
 800d574:	e005      	b.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800d576:	bf00      	nop
 800d578:	e003      	b.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d57a:	bf00      	nop
 800d57c:	58024400 	.word	0x58024400
      break;
 800d580:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d109      	bne.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d588:	4ba3      	ldr	r3, [pc, #652]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d58a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d58c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d594:	49a0      	ldr	r1, [pc, #640]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d596:	4313      	orrs	r3, r2
 800d598:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d59a:	e001      	b.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d047      	beq.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5b4:	d030      	beq.n	800d618 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800d5b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5ba:	d82a      	bhi.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d5bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d5c0:	d02c      	beq.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800d5c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d5c6:	d824      	bhi.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5cc:	d018      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800d5ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5d2:	d81e      	bhi.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5dc:	d007      	beq.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d5de:	e018      	b.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5e0:	4b8d      	ldr	r3, [pc, #564]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e4:	4a8c      	ldr	r2, [pc, #560]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d5ec:	e017      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f001 fd85 	bl	800f104 <RCCEx_PLL2_Config>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d5fe:	e00e      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3324      	adds	r3, #36	; 0x24
 800d604:	2100      	movs	r1, #0
 800d606:	4618      	mov	r0, r3
 800d608:	f001 fe2e 	bl	800f268 <RCCEx_PLL3_Config>
 800d60c:	4603      	mov	r3, r0
 800d60e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d610:	e005      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	75fb      	strb	r3, [r7, #23]
      break;
 800d616:	e002      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800d618:	bf00      	nop
 800d61a:	e000      	b.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800d61c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d109      	bne.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d624:	4b7c      	ldr	r3, [pc, #496]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d628:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d630:	4979      	ldr	r1, [pc, #484]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d632:	4313      	orrs	r3, r2
 800d634:	650b      	str	r3, [r1, #80]	; 0x50
 800d636:	e001      	b.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d049      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d64c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d650:	d02e      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800d652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d656:	d828      	bhi.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d65c:	d02a      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d65e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d662:	d822      	bhi.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d668:	d026      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d66a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d66e:	d81c      	bhi.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d674:	d010      	beq.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d67a:	d816      	bhi.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01d      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d684:	d111      	bne.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	3304      	adds	r3, #4
 800d68a:	2101      	movs	r1, #1
 800d68c:	4618      	mov	r0, r3
 800d68e:	f001 fd39 	bl	800f104 <RCCEx_PLL2_Config>
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800d696:	e012      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3324      	adds	r3, #36	; 0x24
 800d69c:	2101      	movs	r1, #1
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 fde2 	bl	800f268 <RCCEx_PLL3_Config>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800d6a8:	e009      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800d6ae:	e006      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d6b0:	bf00      	nop
 800d6b2:	e004      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d6b4:	bf00      	nop
 800d6b6:	e002      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d6b8:	bf00      	nop
 800d6ba:	e000      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d6bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d6c4:	4b54      	ldr	r3, [pc, #336]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6d0:	4951      	ldr	r1, [pc, #324]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	650b      	str	r3, [r1, #80]	; 0x50
 800d6d6:	e001      	b.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
 800d6da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d04b      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d6ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6f2:	d02e      	beq.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800d6f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6f8:	d828      	bhi.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6fe:	d02a      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d704:	d822      	bhi.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d706:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d70a:	d026      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800d70c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d710:	d81c      	bhi.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d716:	d010      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800d718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d71c:	d816      	bhi.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d01d      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800d722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d726:	d111      	bne.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	3304      	adds	r3, #4
 800d72c:	2101      	movs	r1, #1
 800d72e:	4618      	mov	r0, r3
 800d730:	f001 fce8 	bl	800f104 <RCCEx_PLL2_Config>
 800d734:	4603      	mov	r3, r0
 800d736:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800d738:	e012      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3324      	adds	r3, #36	; 0x24
 800d73e:	2101      	movs	r1, #1
 800d740:	4618      	mov	r0, r3
 800d742:	f001 fd91 	bl	800f268 <RCCEx_PLL3_Config>
 800d746:	4603      	mov	r3, r0
 800d748:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800d74a:	e009      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	75fb      	strb	r3, [r7, #23]
      break;
 800d750:	e006      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d752:	bf00      	nop
 800d754:	e004      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d756:	bf00      	nop
 800d758:	e002      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d75a:	bf00      	nop
 800d75c:	e000      	b.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d75e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10a      	bne.n	800d77c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d766:	4b2c      	ldr	r3, [pc, #176]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d76a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d774:	4928      	ldr	r1, [pc, #160]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d776:	4313      	orrs	r3, r2
 800d778:	658b      	str	r3, [r1, #88]	; 0x58
 800d77a:	e001      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d02f      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d794:	d00e      	beq.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800d796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d79a:	d814      	bhi.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d015      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800d7a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7a4:	d10f      	bne.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7a6:	4b1c      	ldr	r3, [pc, #112]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	4a1b      	ldr	r2, [pc, #108]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d7ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800d7b2:	e00c      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f001 fca2 	bl	800f104 <RCCEx_PLL2_Config>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800d7c4:	e003      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d7ca:	e000      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800d7cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d7ce:	7dfb      	ldrb	r3, [r7, #23]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d109      	bne.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d7d4:	4b10      	ldr	r3, [pc, #64]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e0:	490d      	ldr	r1, [pc, #52]	; (800d818 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	650b      	str	r3, [r1, #80]	; 0x50
 800d7e6:	e001      	b.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d034      	beq.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	d81d      	bhi.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d800:	a201      	add	r2, pc, #4	; (adr r2, 800d808 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800d802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d806:	bf00      	nop
 800d808:	0800d843 	.word	0x0800d843
 800d80c:	0800d81d 	.word	0x0800d81d
 800d810:	0800d82b 	.word	0x0800d82b
 800d814:	0800d843 	.word	0x0800d843
 800d818:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d81c:	4bb1      	ldr	r3, [pc, #708]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	4ab0      	ldr	r2, [pc, #704]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d828:	e00c      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3304      	adds	r3, #4
 800d82e:	2102      	movs	r1, #2
 800d830:	4618      	mov	r0, r3
 800d832:	f001 fc67 	bl	800f104 <RCCEx_PLL2_Config>
 800d836:	4603      	mov	r3, r0
 800d838:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d83a:	e003      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	75fb      	strb	r3, [r7, #23]
      break;
 800d840:	e000      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800d842:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d844:	7dfb      	ldrb	r3, [r7, #23]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d109      	bne.n	800d85e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d84a:	4ba6      	ldr	r3, [pc, #664]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d84e:	f023 0203 	bic.w	r2, r3, #3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	49a3      	ldr	r1, [pc, #652]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d858:	4313      	orrs	r3, r2
 800d85a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d85c:	e001      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 8086 	beq.w	800d97c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d870:	4b9d      	ldr	r3, [pc, #628]	; (800dae8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a9c      	ldr	r2, [pc, #624]	; (800dae8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d87a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d87c:	f7f7 fd56 	bl	800532c <HAL_GetTick>
 800d880:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d882:	e009      	b.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d884:	f7f7 fd52 	bl	800532c <HAL_GetTick>
 800d888:	4602      	mov	r2, r0
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	2b64      	cmp	r3, #100	; 0x64
 800d890:	d902      	bls.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	75fb      	strb	r3, [r7, #23]
        break;
 800d896:	e005      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d898:	4b93      	ldr	r3, [pc, #588]	; (800dae8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0ef      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d166      	bne.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d8aa:	4b8e      	ldr	r3, [pc, #568]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8b4:	4053      	eors	r3, r2
 800d8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d013      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d8be:	4b89      	ldr	r3, [pc, #548]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d8c8:	4b86      	ldr	r3, [pc, #536]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8cc:	4a85      	ldr	r2, [pc, #532]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d8d4:	4b83      	ldr	r3, [pc, #524]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d8:	4a82      	ldr	r2, [pc, #520]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d8e0:	4a80      	ldr	r2, [pc, #512]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d8ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8f0:	d115      	bne.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8f2:	f7f7 fd1b 	bl	800532c <HAL_GetTick>
 800d8f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d8f8:	e00b      	b.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8fa:	f7f7 fd17 	bl	800532c <HAL_GetTick>
 800d8fe:	4602      	mov	r2, r0
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	f241 3288 	movw	r2, #5000	; 0x1388
 800d908:	4293      	cmp	r3, r2
 800d90a:	d902      	bls.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800d90c:	2303      	movs	r3, #3
 800d90e:	75fb      	strb	r3, [r7, #23]
            break;
 800d910:	e005      	b.n	800d91e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d912:	4b74      	ldr	r3, [pc, #464]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d0ed      	beq.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800d91e:	7dfb      	ldrb	r3, [r7, #23]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d126      	bne.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d92a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d92e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d932:	d10d      	bne.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800d934:	4b6b      	ldr	r3, [pc, #428]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d942:	0919      	lsrs	r1, r3, #4
 800d944:	4b69      	ldr	r3, [pc, #420]	; (800daec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800d946:	400b      	ands	r3, r1
 800d948:	4966      	ldr	r1, [pc, #408]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d94a:	4313      	orrs	r3, r2
 800d94c:	610b      	str	r3, [r1, #16]
 800d94e:	e005      	b.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800d950:	4b64      	ldr	r3, [pc, #400]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	4a63      	ldr	r2, [pc, #396]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d956:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d95a:	6113      	str	r3, [r2, #16]
 800d95c:	4b61      	ldr	r3, [pc, #388]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d95e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d96a:	495e      	ldr	r1, [pc, #376]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	670b      	str	r3, [r1, #112]	; 0x70
 800d970:	e004      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	75bb      	strb	r3, [r7, #22]
 800d976:	e001      	b.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
 800d97a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f003 0301 	and.w	r3, r3, #1
 800d984:	2b00      	cmp	r3, #0
 800d986:	d07e      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d98c:	2b28      	cmp	r3, #40	; 0x28
 800d98e:	d867      	bhi.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800d990:	a201      	add	r2, pc, #4	; (adr r2, 800d998 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800d992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d996:	bf00      	nop
 800d998:	0800da67 	.word	0x0800da67
 800d99c:	0800da61 	.word	0x0800da61
 800d9a0:	0800da61 	.word	0x0800da61
 800d9a4:	0800da61 	.word	0x0800da61
 800d9a8:	0800da61 	.word	0x0800da61
 800d9ac:	0800da61 	.word	0x0800da61
 800d9b0:	0800da61 	.word	0x0800da61
 800d9b4:	0800da61 	.word	0x0800da61
 800d9b8:	0800da3d 	.word	0x0800da3d
 800d9bc:	0800da61 	.word	0x0800da61
 800d9c0:	0800da61 	.word	0x0800da61
 800d9c4:	0800da61 	.word	0x0800da61
 800d9c8:	0800da61 	.word	0x0800da61
 800d9cc:	0800da61 	.word	0x0800da61
 800d9d0:	0800da61 	.word	0x0800da61
 800d9d4:	0800da61 	.word	0x0800da61
 800d9d8:	0800da4f 	.word	0x0800da4f
 800d9dc:	0800da61 	.word	0x0800da61
 800d9e0:	0800da61 	.word	0x0800da61
 800d9e4:	0800da61 	.word	0x0800da61
 800d9e8:	0800da61 	.word	0x0800da61
 800d9ec:	0800da61 	.word	0x0800da61
 800d9f0:	0800da61 	.word	0x0800da61
 800d9f4:	0800da61 	.word	0x0800da61
 800d9f8:	0800da67 	.word	0x0800da67
 800d9fc:	0800da61 	.word	0x0800da61
 800da00:	0800da61 	.word	0x0800da61
 800da04:	0800da61 	.word	0x0800da61
 800da08:	0800da61 	.word	0x0800da61
 800da0c:	0800da61 	.word	0x0800da61
 800da10:	0800da61 	.word	0x0800da61
 800da14:	0800da61 	.word	0x0800da61
 800da18:	0800da67 	.word	0x0800da67
 800da1c:	0800da61 	.word	0x0800da61
 800da20:	0800da61 	.word	0x0800da61
 800da24:	0800da61 	.word	0x0800da61
 800da28:	0800da61 	.word	0x0800da61
 800da2c:	0800da61 	.word	0x0800da61
 800da30:	0800da61 	.word	0x0800da61
 800da34:	0800da61 	.word	0x0800da61
 800da38:	0800da67 	.word	0x0800da67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	2101      	movs	r1, #1
 800da42:	4618      	mov	r0, r3
 800da44:	f001 fb5e 	bl	800f104 <RCCEx_PLL2_Config>
 800da48:	4603      	mov	r3, r0
 800da4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800da4c:	e00c      	b.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3324      	adds	r3, #36	; 0x24
 800da52:	2101      	movs	r1, #1
 800da54:	4618      	mov	r0, r3
 800da56:	f001 fc07 	bl	800f268 <RCCEx_PLL3_Config>
 800da5a:	4603      	mov	r3, r0
 800da5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800da5e:	e003      	b.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	75fb      	strb	r3, [r7, #23]
      break;
 800da64:	e000      	b.n	800da68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800da66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da68:	7dfb      	ldrb	r3, [r7, #23]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800da6e:	4b1d      	ldr	r3, [pc, #116]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800da70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da7a:	491a      	ldr	r1, [pc, #104]	; (800dae4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	654b      	str	r3, [r1, #84]	; 0x54
 800da80:	e001      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 0302 	and.w	r3, r3, #2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d03e      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da96:	2b05      	cmp	r3, #5
 800da98:	d820      	bhi.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800da9a:	a201      	add	r2, pc, #4	; (adr r2, 800daa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800da9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa0:	0800daf1 	.word	0x0800daf1
 800daa4:	0800dab9 	.word	0x0800dab9
 800daa8:	0800dacb 	.word	0x0800dacb
 800daac:	0800daf1 	.word	0x0800daf1
 800dab0:	0800daf1 	.word	0x0800daf1
 800dab4:	0800daf1 	.word	0x0800daf1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3304      	adds	r3, #4
 800dabc:	2101      	movs	r1, #1
 800dabe:	4618      	mov	r0, r3
 800dac0:	f001 fb20 	bl	800f104 <RCCEx_PLL2_Config>
 800dac4:	4603      	mov	r3, r0
 800dac6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800dac8:	e013      	b.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	3324      	adds	r3, #36	; 0x24
 800dace:	2101      	movs	r1, #1
 800dad0:	4618      	mov	r0, r3
 800dad2:	f001 fbc9 	bl	800f268 <RCCEx_PLL3_Config>
 800dad6:	4603      	mov	r3, r0
 800dad8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800dada:	e00a      	b.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	75fb      	strb	r3, [r7, #23]
      break;
 800dae0:	e007      	b.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800dae2:	bf00      	nop
 800dae4:	58024400 	.word	0x58024400
 800dae8:	58024800 	.word	0x58024800
 800daec:	00ffffcf 	.word	0x00ffffcf
      break;
 800daf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800daf8:	4b9f      	ldr	r3, [pc, #636]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafc:	f023 0207 	bic.w	r2, r3, #7
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db04:	499c      	ldr	r1, [pc, #624]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800db06:	4313      	orrs	r3, r2
 800db08:	654b      	str	r3, [r1, #84]	; 0x54
 800db0a:	e001      	b.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d039      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db22:	2b05      	cmp	r3, #5
 800db24:	d820      	bhi.n	800db68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800db26:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800db28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2c:	0800db6f 	.word	0x0800db6f
 800db30:	0800db45 	.word	0x0800db45
 800db34:	0800db57 	.word	0x0800db57
 800db38:	0800db6f 	.word	0x0800db6f
 800db3c:	0800db6f 	.word	0x0800db6f
 800db40:	0800db6f 	.word	0x0800db6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	3304      	adds	r3, #4
 800db48:	2101      	movs	r1, #1
 800db4a:	4618      	mov	r0, r3
 800db4c:	f001 fada 	bl	800f104 <RCCEx_PLL2_Config>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800db54:	e00c      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3324      	adds	r3, #36	; 0x24
 800db5a:	2101      	movs	r1, #1
 800db5c:	4618      	mov	r0, r3
 800db5e:	f001 fb83 	bl	800f268 <RCCEx_PLL3_Config>
 800db62:	4603      	mov	r3, r0
 800db64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800db66:	e003      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	75fb      	strb	r3, [r7, #23]
      break;
 800db6c:	e000      	b.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800db6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10a      	bne.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800db76:	4b80      	ldr	r3, [pc, #512]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800db78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db7a:	f023 0207 	bic.w	r2, r3, #7
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db84:	497c      	ldr	r1, [pc, #496]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800db86:	4313      	orrs	r3, r2
 800db88:	658b      	str	r3, [r1, #88]	; 0x58
 800db8a:	e001      	b.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d04b      	beq.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dba6:	d02e      	beq.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800dba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dbac:	d828      	bhi.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800dbae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb2:	d02a      	beq.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800dbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb8:	d822      	bhi.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800dbba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dbbe:	d026      	beq.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800dbc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dbc4:	d81c      	bhi.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800dbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbca:	d010      	beq.n	800dbee <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800dbcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbd0:	d816      	bhi.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d01d      	beq.n	800dc12 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800dbd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbda:	d111      	bne.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 fa8e 	bl	800f104 <RCCEx_PLL2_Config>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800dbec:	e012      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	3324      	adds	r3, #36	; 0x24
 800dbf2:	2102      	movs	r1, #2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f001 fb37 	bl	800f268 <RCCEx_PLL3_Config>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800dbfe:	e009      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	75fb      	strb	r3, [r7, #23]
      break;
 800dc04:	e006      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800dc06:	bf00      	nop
 800dc08:	e004      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800dc0a:	bf00      	nop
 800dc0c:	e002      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800dc0e:	bf00      	nop
 800dc10:	e000      	b.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800dc12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dc14:	7dfb      	ldrb	r3, [r7, #23]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d10a      	bne.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc1a:	4b57      	ldr	r3, [pc, #348]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc28:	4953      	ldr	r1, [pc, #332]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	654b      	str	r3, [r1, #84]	; 0x54
 800dc2e:	e001      	b.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d04b      	beq.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dc4a:	d02e      	beq.n	800dcaa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800dc4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dc50:	d828      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800dc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc56:	d02a      	beq.n	800dcae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800dc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc5c:	d822      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800dc5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc62:	d026      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800dc64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc68:	d81c      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800dc6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc6e:	d010      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800dc70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc74:	d816      	bhi.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d01d      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800dc7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc7e:	d111      	bne.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3304      	adds	r3, #4
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 fa3c 	bl	800f104 <RCCEx_PLL2_Config>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800dc90:	e012      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	3324      	adds	r3, #36	; 0x24
 800dc96:	2102      	movs	r1, #2
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f001 fae5 	bl	800f268 <RCCEx_PLL3_Config>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800dca2:	e009      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	75fb      	strb	r3, [r7, #23]
      break;
 800dca8:	e006      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800dcaa:	bf00      	nop
 800dcac:	e004      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800dcae:	bf00      	nop
 800dcb0:	e002      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800dcb2:	bf00      	nop
 800dcb4:	e000      	b.n	800dcb8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800dcb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d10a      	bne.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dcbe:	4b2e      	ldr	r3, [pc, #184]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dcc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dccc:	492a      	ldr	r1, [pc, #168]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	658b      	str	r3, [r1, #88]	; 0x58
 800dcd2:	e001      	b.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
 800dcd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d04d      	beq.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dcea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dcee:	d02e      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800dcf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dcf4:	d828      	bhi.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800dcf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcfa:	d02a      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800dcfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd00:	d822      	bhi.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800dd02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800dd06:	d026      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800dd08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800dd0c:	d81c      	bhi.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800dd0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd12:	d010      	beq.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800dd14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd18:	d816      	bhi.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d01d      	beq.n	800dd5a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800dd1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd22:	d111      	bne.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3304      	adds	r3, #4
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 f9ea 	bl	800f104 <RCCEx_PLL2_Config>
 800dd30:	4603      	mov	r3, r0
 800dd32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800dd34:	e012      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3324      	adds	r3, #36	; 0x24
 800dd3a:	2102      	movs	r1, #2
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f001 fa93 	bl	800f268 <RCCEx_PLL3_Config>
 800dd42:	4603      	mov	r3, r0
 800dd44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800dd46:	e009      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd4c:	e006      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800dd4e:	bf00      	nop
 800dd50:	e004      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800dd52:	bf00      	nop
 800dd54:	e002      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800dd56:	bf00      	nop
 800dd58:	e000      	b.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800dd5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10c      	bne.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800dd62:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dd70:	4901      	ldr	r1, [pc, #4]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dd72:	4313      	orrs	r3, r2
 800dd74:	658b      	str	r3, [r1, #88]	; 0x58
 800dd76:	e003      	b.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800dd78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd7c:	7dfb      	ldrb	r3, [r7, #23]
 800dd7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0308 	and.w	r3, r3, #8
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d018      	beq.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd94:	d10a      	bne.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	3324      	adds	r3, #36	; 0x24
 800dd9a:	2102      	movs	r1, #2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 fa63 	bl	800f268 <RCCEx_PLL3_Config>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ddac:	4b8a      	ldr	r3, [pc, #552]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ddae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddb8:	4987      	ldr	r1, [pc, #540]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0310 	and.w	r3, r3, #16
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d01a      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddd4:	d10a      	bne.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	3324      	adds	r3, #36	; 0x24
 800ddda:	2102      	movs	r1, #2
 800dddc:	4618      	mov	r0, r3
 800ddde:	f001 fa43 	bl	800f268 <RCCEx_PLL3_Config>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800dde8:	2301      	movs	r3, #1
 800ddea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ddec:	4b7a      	ldr	r3, [pc, #488]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ddee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ddfa:	4977      	ldr	r1, [pc, #476]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d034      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de16:	d01d      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800de18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de1c:	d817      	bhi.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800de22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de26:	d009      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800de28:	e011      	b.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	3304      	adds	r3, #4
 800de2e:	2100      	movs	r1, #0
 800de30:	4618      	mov	r0, r3
 800de32:	f001 f967 	bl	800f104 <RCCEx_PLL2_Config>
 800de36:	4603      	mov	r3, r0
 800de38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800de3a:	e00c      	b.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3324      	adds	r3, #36	; 0x24
 800de40:	2102      	movs	r1, #2
 800de42:	4618      	mov	r0, r3
 800de44:	f001 fa10 	bl	800f268 <RCCEx_PLL3_Config>
 800de48:	4603      	mov	r3, r0
 800de4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800de4c:	e003      	b.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800de4e:	2301      	movs	r3, #1
 800de50:	75fb      	strb	r3, [r7, #23]
      break;
 800de52:	e000      	b.n	800de56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800de54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d10a      	bne.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800de5c:	4b5e      	ldr	r3, [pc, #376]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800de5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de6a:	495b      	ldr	r1, [pc, #364]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800de6c:	4313      	orrs	r3, r2
 800de6e:	658b      	str	r3, [r1, #88]	; 0x58
 800de70:	e001      	b.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d033      	beq.n	800deea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800de8c:	d01c      	beq.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800de8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800de92:	d816      	bhi.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800de94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de98:	d003      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800de9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de9e:	d007      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800dea0:	e00f      	b.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dea2:	4b4d      	ldr	r3, [pc, #308]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea6:	4a4c      	ldr	r2, [pc, #304]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800deac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800deae:	e00c      	b.n	800deca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3324      	adds	r3, #36	; 0x24
 800deb4:	2101      	movs	r1, #1
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 f9d6 	bl	800f268 <RCCEx_PLL3_Config>
 800debc:	4603      	mov	r3, r0
 800debe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800dec0:	e003      	b.n	800deca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dec2:	2301      	movs	r3, #1
 800dec4:	75fb      	strb	r3, [r7, #23]
      break;
 800dec6:	e000      	b.n	800deca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800dec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10a      	bne.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ded0:	4b41      	ldr	r3, [pc, #260]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ded2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dede:	493e      	ldr	r1, [pc, #248]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dee0:	4313      	orrs	r3, r2
 800dee2:	654b      	str	r3, [r1, #84]	; 0x54
 800dee4:	e001      	b.n	800deea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800def2:	2b00      	cmp	r3, #0
 800def4:	d029      	beq.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d003      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800defe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df02:	d007      	beq.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800df04:	e00f      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df06:	4b34      	ldr	r3, [pc, #208]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	4a33      	ldr	r2, [pc, #204]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800df0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800df12:	e00b      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3304      	adds	r3, #4
 800df18:	2102      	movs	r1, #2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f001 f8f2 	bl	800f104 <RCCEx_PLL2_Config>
 800df20:	4603      	mov	r3, r0
 800df22:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800df24:	e002      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	75fb      	strb	r3, [r7, #23]
      break;
 800df2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d109      	bne.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800df32:	4b29      	ldr	r3, [pc, #164]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800df34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df3e:	4926      	ldr	r1, [pc, #152]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800df40:	4313      	orrs	r3, r2
 800df42:	64cb      	str	r3, [r1, #76]	; 0x4c
 800df44:	e001      	b.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00a      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	3324      	adds	r3, #36	; 0x24
 800df5a:	2102      	movs	r1, #2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f001 f983 	bl	800f268 <RCCEx_PLL3_Config>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800df68:	2301      	movs	r3, #1
 800df6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df74:	2b00      	cmp	r3, #0
 800df76:	d033      	beq.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df80:	d017      	beq.n	800dfb2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800df82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df86:	d811      	bhi.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800df88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df8c:	d013      	beq.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800df8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df92:	d80b      	bhi.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800df94:	2b00      	cmp	r3, #0
 800df96:	d010      	beq.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800df98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df9c:	d106      	bne.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df9e:	4b0e      	ldr	r3, [pc, #56]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa2:	4a0d      	ldr	r2, [pc, #52]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dfa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800dfaa:	e007      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dfac:	2301      	movs	r3, #1
 800dfae:	75fb      	strb	r3, [r7, #23]
      break;
 800dfb0:	e004      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800dfb2:	bf00      	nop
 800dfb4:	e002      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800dfb6:	bf00      	nop
 800dfb8:	e000      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800dfba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10c      	bne.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dfc2:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfce:	4902      	ldr	r1, [pc, #8]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	654b      	str	r3, [r1, #84]	; 0x54
 800dfd4:	e004      	b.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800dfd6:	bf00      	nop
 800dfd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d008      	beq.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dfec:	4b29      	ldr	r3, [pc, #164]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff8:	4926      	ldr	r1, [pc, #152]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dffa:	4313      	orrs	r3, r2
 800dffc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e006:	2b00      	cmp	r3, #0
 800e008:	d008      	beq.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e00a:	4b22      	ldr	r3, [pc, #136]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e00e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e016:	491f      	ldr	r1, [pc, #124]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e018:	4313      	orrs	r3, r2
 800e01a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00d      	beq.n	800e044 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e028:	4b1a      	ldr	r3, [pc, #104]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	4a19      	ldr	r2, [pc, #100]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e02e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e032:	6113      	str	r3, [r2, #16]
 800e034:	4b17      	ldr	r3, [pc, #92]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e036:	691a      	ldr	r2, [r3, #16]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e03e:	4915      	ldr	r1, [pc, #84]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e040:	4313      	orrs	r3, r2
 800e042:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	da08      	bge.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e04c:	4b11      	ldr	r3, [pc, #68]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e058:	490e      	ldr	r1, [pc, #56]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e066:	2b00      	cmp	r3, #0
 800e068:	d009      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e06a:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e06e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e078:	4906      	ldr	r1, [pc, #24]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800e07e:	7dbb      	ldrb	r3, [r7, #22]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	e000      	b.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800e088:	2301      	movs	r3, #1
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3718      	adds	r7, #24
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	58024400 	.word	0x58024400

0800e098 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b090      	sub	sp, #64	; 0x40
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0a6:	f040 8089 	bne.w	800e1bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800e0aa:	4b95      	ldr	r3, [pc, #596]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ae:	f003 0307 	and.w	r3, r3, #7
 800e0b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d87d      	bhi.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e0d5 	.word	0x0800e0d5
 800e0c4:	0800e0f9 	.word	0x0800e0f9
 800e0c8:	0800e11d 	.word	0x0800e11d
 800e0cc:	0800e1b1 	.word	0x0800e1b1
 800e0d0:	0800e141 	.word	0x0800e141
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e0d4:	4b8a      	ldr	r3, [pc, #552]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0e0:	d107      	bne.n	800e0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 feba 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e0f0:	e3ef      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e0f6:	e3ec      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0f8:	4b81      	ldr	r3, [pc, #516]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e104:	d107      	bne.n	800e116 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e106:	f107 0318 	add.w	r3, r7, #24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fc00 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e114:	e3dd      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e11a:	e3da      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e11c:	4b78      	ldr	r3, [pc, #480]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e128:	d107      	bne.n	800e13a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e12a:	f107 030c 	add.w	r3, r7, #12
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 fd42 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e138:	e3cb      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e13a:	2300      	movs	r3, #0
 800e13c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e13e:	e3c8      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e140:	4b6f      	ldr	r3, [pc, #444]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e144:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e148:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e14a:	4b6d      	ldr	r3, [pc, #436]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b04      	cmp	r3, #4
 800e154:	d10c      	bne.n	800e170 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800e156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d109      	bne.n	800e170 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e15c:	4b68      	ldr	r3, [pc, #416]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	08db      	lsrs	r3, r3, #3
 800e162:	f003 0303 	and.w	r3, r3, #3
 800e166:	4a67      	ldr	r2, [pc, #412]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e168:	fa22 f303 	lsr.w	r3, r2, r3
 800e16c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e16e:	e01e      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e170:	4b63      	ldr	r3, [pc, #396]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e17c:	d106      	bne.n	800e18c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800e17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e184:	d102      	bne.n	800e18c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e186:	4b60      	ldr	r3, [pc, #384]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e18a:	e010      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e18c:	4b5c      	ldr	r3, [pc, #368]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e198:	d106      	bne.n	800e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1a0:	d102      	bne.n	800e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e1a2:	4b5a      	ldr	r3, [pc, #360]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1a6:	e002      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e1ac:	e391      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e1ae:	e390      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e1b0:	4b57      	ldr	r3, [pc, #348]	; (800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e1b4:	e38d      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e1ba:	e38a      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1c2:	f040 80a7 	bne.w	800e314 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800e1c6:	4b4e      	ldr	r3, [pc, #312]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e1ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1d6:	d054      	beq.n	800e282 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1de:	f200 808b 	bhi.w	800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e1e8:	f000 8083 	beq.w	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e1f2:	f200 8081 	bhi.w	800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1fc:	d02f      	beq.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800e1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e204:	d878      	bhi.n	800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800e20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e212:	d012      	beq.n	800e23a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800e214:	e070      	b.n	800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e216:	4b3a      	ldr	r3, [pc, #232]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e222:	d107      	bne.n	800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e228:	4618      	mov	r0, r3
 800e22a:	f000 fe19 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e232:	e34e      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e238:	e34b      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e23a:	4b31      	ldr	r3, [pc, #196]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e246:	d107      	bne.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e248:	f107 0318 	add.w	r3, r7, #24
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 fb5f 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e256:	e33c      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e25c:	e339      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e25e:	4b28      	ldr	r3, [pc, #160]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e26a:	d107      	bne.n	800e27c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e26c:	f107 030c 	add.w	r3, r7, #12
 800e270:	4618      	mov	r0, r3
 800e272:	f000 fca1 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e27a:	e32a      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e280:	e327      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e282:	4b1f      	ldr	r3, [pc, #124]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e28a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e28c:	4b1c      	ldr	r3, [pc, #112]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 0304 	and.w	r3, r3, #4
 800e294:	2b04      	cmp	r3, #4
 800e296:	d10c      	bne.n	800e2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800e298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d109      	bne.n	800e2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e29e:	4b18      	ldr	r3, [pc, #96]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	08db      	lsrs	r3, r3, #3
 800e2a4:	f003 0303 	and.w	r3, r3, #3
 800e2a8:	4a16      	ldr	r2, [pc, #88]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b0:	e01e      	b.n	800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e2b2:	4b13      	ldr	r3, [pc, #76]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2be:	d106      	bne.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800e2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2c6:	d102      	bne.n	800e2ce <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2cc:	e010      	b.n	800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e2ce:	4b0c      	ldr	r3, [pc, #48]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2da:	d106      	bne.n	800e2ea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2e2:	d102      	bne.n	800e2ea <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e2e4:	4b09      	ldr	r3, [pc, #36]	; (800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2e8:	e002      	b.n	800e2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e2ee:	e2f0      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e2f0:	e2ef      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e2f2:	4b07      	ldr	r3, [pc, #28]	; (800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e2f6:	e2ec      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e2fc:	e2e9      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e2fe:	bf00      	nop
 800e300:	58024400 	.word	0x58024400
 800e304:	03d09000 	.word	0x03d09000
 800e308:	003d0900 	.word	0x003d0900
 800e30c:	017d7840 	.word	0x017d7840
 800e310:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e31a:	f040 809c 	bne.w	800e456 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800e31e:	4b9d      	ldr	r3, [pc, #628]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e322:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e326:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e32e:	d054      	beq.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e336:	f200 808b 	bhi.w	800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e340:	f000 8083 	beq.w	800e44a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800e344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e346:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e34a:	f200 8081 	bhi.w	800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e354:	d02f      	beq.n	800e3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e35c:	d878      	bhi.n	800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e36a:	d012      	beq.n	800e392 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800e36c:	e070      	b.n	800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e36e:	4b89      	ldr	r3, [pc, #548]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e37a:	d107      	bne.n	800e38c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e37c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fd6d 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e38a:	e2a2      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e390:	e29f      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e392:	4b80      	ldr	r3, [pc, #512]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e39a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e39e:	d107      	bne.n	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3a0:	f107 0318 	add.w	r3, r7, #24
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 fab3 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800e3ae:	e290      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e3b4:	e28d      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e3b6:	4b77      	ldr	r3, [pc, #476]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3c2:	d107      	bne.n	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3c4:	f107 030c 	add.w	r3, r7, #12
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f000 fbf5 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e3d2:	e27e      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e3d8:	e27b      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e3da:	4b6e      	ldr	r3, [pc, #440]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e3e4:	4b6b      	ldr	r3, [pc, #428]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	d10c      	bne.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e3f6:	4b67      	ldr	r3, [pc, #412]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	08db      	lsrs	r3, r3, #3
 800e3fc:	f003 0303 	and.w	r3, r3, #3
 800e400:	4a65      	ldr	r2, [pc, #404]	; (800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800e402:	fa22 f303 	lsr.w	r3, r2, r3
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e408:	e01e      	b.n	800e448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e40a:	4b62      	ldr	r3, [pc, #392]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e416:	d106      	bne.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800e418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e41e:	d102      	bne.n	800e426 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e420:	4b5e      	ldr	r3, [pc, #376]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800e422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e424:	e010      	b.n	800e448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e426:	4b5b      	ldr	r3, [pc, #364]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e432:	d106      	bne.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e43a:	d102      	bne.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e43c:	4b58      	ldr	r3, [pc, #352]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800e43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e440:	e002      	b.n	800e448 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e446:	e244      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e448:	e243      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e44a:	4b56      	ldr	r3, [pc, #344]	; (800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800e44c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e44e:	e240      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e454:	e23d      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e45c:	f040 80a7 	bne.w	800e5ae <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800e460:	4b4c      	ldr	r3, [pc, #304]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e464:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e468:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e470:	d055      	beq.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800e472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e478:	f200 8096 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e482:	f000 8084 	beq.w	800e58e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e48c:	f200 808c 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e496:	d030      	beq.n	800e4fa <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e49e:	f200 8083 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4ae:	d012      	beq.n	800e4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800e4b0:	e07a      	b.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e4b2:	4b38      	ldr	r3, [pc, #224]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fccb 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e4ce:	e200      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e4d4:	e1fd      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4d6:	4b2f      	ldr	r3, [pc, #188]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4e2:	d107      	bne.n	800e4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4e4:	f107 0318 	add.w	r3, r7, #24
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 fa11 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e4f2:	e1ee      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e4f8:	e1eb      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4fa:	4b26      	ldr	r3, [pc, #152]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e506:	d107      	bne.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e508:	f107 030c 	add.w	r3, r7, #12
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fb53 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e516:	e1dc      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e51c:	e1d9      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e51e:	4b1d      	ldr	r3, [pc, #116]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e526:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e528:	4b1a      	ldr	r3, [pc, #104]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b04      	cmp	r3, #4
 800e532:	d10c      	bne.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800e534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e536:	2b00      	cmp	r3, #0
 800e538:	d109      	bne.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e53a:	4b16      	ldr	r3, [pc, #88]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	08db      	lsrs	r3, r3, #3
 800e540:	f003 0303 	and.w	r3, r3, #3
 800e544:	4a14      	ldr	r2, [pc, #80]	; (800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800e546:	fa22 f303 	lsr.w	r3, r2, r3
 800e54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e54c:	e01e      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e54e:	4b11      	ldr	r3, [pc, #68]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e55a:	d106      	bne.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800e55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e562:	d102      	bne.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e564:	4b0d      	ldr	r3, [pc, #52]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e568:	e010      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e56a:	4b0a      	ldr	r3, [pc, #40]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e576:	d106      	bne.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800e578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e57e:	d102      	bne.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e584:	e002      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e58a:	e1a2      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e58c:	e1a1      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e58e:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e592:	e19e      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e594:	58024400 	.word	0x58024400
 800e598:	03d09000 	.word	0x03d09000
 800e59c:	003d0900 	.word	0x003d0900
 800e5a0:	017d7840 	.word	0x017d7840
 800e5a4:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e5ac:	e191      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e5b4:	d173      	bne.n	800e69e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800e5b6:	4b9b      	ldr	r3, [pc, #620]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e5be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5c6:	d02f      	beq.n	800e628 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800e5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5ce:	d863      	bhi.n	800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d004      	beq.n	800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5dc:	d012      	beq.n	800e604 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800e5de:	e05b      	b.n	800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5e0:	4b90      	ldr	r3, [pc, #576]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5ec:	d107      	bne.n	800e5fe <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5ee:	f107 0318 	add.w	r3, r7, #24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 f98c 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e5fc:	e169      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e602:	e166      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e604:	4b87      	ldr	r3, [pc, #540]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e610:	d107      	bne.n	800e622 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e612:	f107 030c 	add.w	r3, r7, #12
 800e616:	4618      	mov	r0, r3
 800e618:	f000 face 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e620:	e157      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e626:	e154      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e628:	4b7e      	ldr	r3, [pc, #504]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e62a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e62c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e630:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e632:	4b7c      	ldr	r3, [pc, #496]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 0304 	and.w	r3, r3, #4
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d10c      	bne.n	800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800e63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e640:	2b00      	cmp	r3, #0
 800e642:	d109      	bne.n	800e658 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e644:	4b77      	ldr	r3, [pc, #476]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	08db      	lsrs	r3, r3, #3
 800e64a:	f003 0303 	and.w	r3, r3, #3
 800e64e:	4a76      	ldr	r2, [pc, #472]	; (800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800e650:	fa22 f303 	lsr.w	r3, r2, r3
 800e654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e656:	e01e      	b.n	800e696 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e658:	4b72      	ldr	r3, [pc, #456]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e664:	d106      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800e666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e66c:	d102      	bne.n	800e674 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e66e:	4b6f      	ldr	r3, [pc, #444]	; (800e82c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800e670:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e672:	e010      	b.n	800e696 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e674:	4b6b      	ldr	r3, [pc, #428]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e67c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e680:	d106      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800e682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e688:	d102      	bne.n	800e690 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e68a:	4b69      	ldr	r3, [pc, #420]	; (800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800e68c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e68e:	e002      	b.n	800e696 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e690:	2300      	movs	r3, #0
 800e692:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e694:	e11d      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e696:	e11c      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e69c:	e119      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6a4:	d133      	bne.n	800e70e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800e6a6:	4b5f      	ldr	r3, [pc, #380]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6bc:	d012      	beq.n	800e6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800e6be:	e023      	b.n	800e708 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e6c0:	4b58      	ldr	r3, [pc, #352]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6cc:	d107      	bne.n	800e6de <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 fbc4 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e6dc:	e0f9      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e6e2:	e0f6      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e6e4:	4b4f      	ldr	r3, [pc, #316]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6f0:	d107      	bne.n	800e702 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6f2:	f107 0318 	add.w	r3, r7, #24
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f90a 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e6fc:	6a3b      	ldr	r3, [r7, #32]
 800e6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e700:	e0e7      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e706:	e0e4      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e70c:	e0e1      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e714:	f040 808e 	bne.w	800e834 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800e718:	4b42      	ldr	r3, [pc, #264]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e71c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e720:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e728:	d06b      	beq.n	800e802 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800e72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e730:	d874      	bhi.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e738:	d056      	beq.n	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e740:	d86c      	bhi.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e748:	d03b      	beq.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800e74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e750:	d864      	bhi.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e758:	d021      	beq.n	800e79e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e760:	d85c      	bhi.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e764:	2b00      	cmp	r3, #0
 800e766:	d004      	beq.n	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e76e:	d004      	beq.n	800e77a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800e770:	e054      	b.n	800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e772:	f000 f8b7 	bl	800e8e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e776:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800e778:	e0ab      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e77a:	4b2a      	ldr	r3, [pc, #168]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e786:	d107      	bne.n	800e798 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e788:	f107 0318 	add.w	r3, r7, #24
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f8bf 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e796:	e09c      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e79c:	e099      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e79e:	4b21      	ldr	r3, [pc, #132]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7aa:	d107      	bne.n	800e7bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7ac:	f107 030c 	add.w	r3, r7, #12
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f000 fa01 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e7ba:	e08a      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e7c0:	e087      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e7c2:	4b18      	ldr	r3, [pc, #96]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f003 0304 	and.w	r3, r3, #4
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	d109      	bne.n	800e7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e7ce:	4b15      	ldr	r3, [pc, #84]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	08db      	lsrs	r3, r3, #3
 800e7d4:	f003 0303 	and.w	r3, r3, #3
 800e7d8:	4a13      	ldr	r2, [pc, #76]	; (800e828 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800e7da:	fa22 f303 	lsr.w	r3, r2, r3
 800e7de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e7e0:	e077      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e7e6:	e074      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e7e8:	4b0e      	ldr	r3, [pc, #56]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7f4:	d102      	bne.n	800e7fc <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800e7f6:	4b0d      	ldr	r3, [pc, #52]	; (800e82c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800e7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e7fa:	e06a      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e800:	e067      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e802:	4b08      	ldr	r3, [pc, #32]	; (800e824 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e80a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e80e:	d102      	bne.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e814:	e05d      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e81a:	e05a      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e820:	e057      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e822:	bf00      	nop
 800e824:	58024400 	.word	0x58024400
 800e828:	03d09000 	.word	0x03d09000
 800e82c:	003d0900 	.word	0x003d0900
 800e830:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e83a:	d148      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800e83c:	4b27      	ldr	r3, [pc, #156]	; (800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e844:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e84c:	d02a      	beq.n	800e8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e854:	d838      	bhi.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800e856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d004      	beq.n	800e866 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e862:	d00d      	beq.n	800e880 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800e864:	e030      	b.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e866:	4b1d      	ldr	r3, [pc, #116]	; (800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e86e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e872:	d102      	bne.n	800e87a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800e874:	4b1a      	ldr	r3, [pc, #104]	; (800e8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800e876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e878:	e02b      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e87e:	e028      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e880:	4b16      	ldr	r3, [pc, #88]	; (800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e88c:	d107      	bne.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e892:	4618      	mov	r0, r3
 800e894:	f000 fae4 	bl	800ee60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e89c:	e019      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e8a2:	e016      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8a4:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8b0:	d107      	bne.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8b2:	f107 0318 	add.w	r3, r7, #24
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f000 f82a 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e8c0:	e007      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e8c6:	e004      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e8cc:	e001      	b.n	800e8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800e8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3740      	adds	r7, #64	; 0x40
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	58024400 	.word	0x58024400
 800e8e0:	017d7840 	.word	0x017d7840

0800e8e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e8e8:	f7fe fc80 	bl	800d1ec <HAL_RCC_GetHCLKFreq>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	4b06      	ldr	r3, [pc, #24]	; (800e908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	091b      	lsrs	r3, r3, #4
 800e8f4:	f003 0307 	and.w	r3, r3, #7
 800e8f8:	4904      	ldr	r1, [pc, #16]	; (800e90c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e8fa:	5ccb      	ldrb	r3, [r1, r3]
 800e8fc:	f003 031f 	and.w	r3, r3, #31
 800e900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e904:	4618      	mov	r0, r3
 800e906:	bd80      	pop	{r7, pc}
 800e908:	58024400 	.word	0x58024400
 800e90c:	08015608 	.word	0x08015608

0800e910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800e910:	b480      	push	{r7}
 800e912:	b089      	sub	sp, #36	; 0x24
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e918:	4ba1      	ldr	r3, [pc, #644]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91c:	f003 0303 	and.w	r3, r3, #3
 800e920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800e922:	4b9f      	ldr	r3, [pc, #636]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e926:	0b1b      	lsrs	r3, r3, #12
 800e928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e92c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e92e:	4b9c      	ldr	r3, [pc, #624]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e932:	091b      	lsrs	r3, r3, #4
 800e934:	f003 0301 	and.w	r3, r3, #1
 800e938:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e93a:	4b99      	ldr	r3, [pc, #612]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e93e:	08db      	lsrs	r3, r3, #3
 800e940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	fb02 f303 	mul.w	r3, r2, r3
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 8111 	beq.w	800eb80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	2b02      	cmp	r3, #2
 800e962:	f000 8083 	beq.w	800ea6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2b02      	cmp	r3, #2
 800e96a:	f200 80a1 	bhi.w	800eab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d003      	beq.n	800e97c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d056      	beq.n	800ea28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e97a:	e099      	b.n	800eab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e97c:	4b88      	ldr	r3, [pc, #544]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 0320 	and.w	r3, r3, #32
 800e984:	2b00      	cmp	r3, #0
 800e986:	d02d      	beq.n	800e9e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e988:	4b85      	ldr	r3, [pc, #532]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	08db      	lsrs	r3, r3, #3
 800e98e:	f003 0303 	and.w	r3, r3, #3
 800e992:	4a84      	ldr	r2, [pc, #528]	; (800eba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e994:	fa22 f303 	lsr.w	r3, r2, r3
 800e998:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	ee07 3a90 	vmov	s15, r3
 800e9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9b2:	4b7b      	ldr	r3, [pc, #492]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800eba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e9e2:	e087      	b.n	800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	ee07 3a90 	vmov	s15, r3
 800e9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ebac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9f6:	4b6a      	ldr	r3, [pc, #424]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9fe:	ee07 3a90 	vmov	s15, r3
 800ea02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800eba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ea26:	e065      	b.n	800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	ee07 3a90 	vmov	s15, r3
 800ea2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ebb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ea36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea3a:	4b59      	ldr	r3, [pc, #356]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea42:	ee07 3a90 	vmov	s15, r3
 800ea46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800eba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ea6a:	e043      	b.n	800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	ee07 3a90 	vmov	s15, r3
 800ea72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ea7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea7e:	4b48      	ldr	r3, [pc, #288]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ea80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea86:	ee07 3a90 	vmov	s15, r3
 800ea8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800eba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ea96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800eaae:	e021      	b.n	800eaf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	ee07 3a90 	vmov	s15, r3
 800eab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ebb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800eabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eac2:	4b37      	ldr	r3, [pc, #220]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaca:	ee07 3a90 	vmov	s15, r3
 800eace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ead2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ead6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800eba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800eada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800eaf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800eaf4:	4b2a      	ldr	r3, [pc, #168]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf8:	0a5b      	lsrs	r3, r3, #9
 800eafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eafe:	ee07 3a90 	vmov	s15, r3
 800eb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb1a:	ee17 2a90 	vmov	r2, s15
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800eb22:	4b1f      	ldr	r3, [pc, #124]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb26:	0c1b      	lsrs	r3, r3, #16
 800eb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb2c:	ee07 3a90 	vmov	s15, r3
 800eb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb48:	ee17 2a90 	vmov	r2, s15
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800eb50:	4b13      	ldr	r3, [pc, #76]	; (800eba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb54:	0e1b      	lsrs	r3, r3, #24
 800eb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb5a:	ee07 3a90 	vmov	s15, r3
 800eb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb76:	ee17 2a90 	vmov	r2, s15
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800eb7e:	e008      	b.n	800eb92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	609a      	str	r2, [r3, #8]
}
 800eb92:	bf00      	nop
 800eb94:	3724      	adds	r7, #36	; 0x24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	58024400 	.word	0x58024400
 800eba4:	03d09000 	.word	0x03d09000
 800eba8:	46000000 	.word	0x46000000
 800ebac:	4c742400 	.word	0x4c742400
 800ebb0:	4a742400 	.word	0x4a742400
 800ebb4:	4bbebc20 	.word	0x4bbebc20

0800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b089      	sub	sp, #36	; 0x24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ebc0:	4ba1      	ldr	r3, [pc, #644]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc4:	f003 0303 	and.w	r3, r3, #3
 800ebc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ebca:	4b9f      	ldr	r3, [pc, #636]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebce:	0d1b      	lsrs	r3, r3, #20
 800ebd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ebd6:	4b9c      	ldr	r3, [pc, #624]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebda:	0a1b      	lsrs	r3, r3, #8
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ebe2:	4b99      	ldr	r3, [pc, #612]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ebe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe6:	08db      	lsrs	r3, r3, #3
 800ebe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	fb02 f303 	mul.w	r3, r2, r3
 800ebf2:	ee07 3a90 	vmov	s15, r3
 800ebf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f000 8111 	beq.w	800ee28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	f000 8083 	beq.w	800ed14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	f200 80a1 	bhi.w	800ed58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d003      	beq.n	800ec24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d056      	beq.n	800ecd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ec22:	e099      	b.n	800ed58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec24:	4b88      	ldr	r3, [pc, #544]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f003 0320 	and.w	r3, r3, #32
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d02d      	beq.n	800ec8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ec30:	4b85      	ldr	r3, [pc, #532]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	08db      	lsrs	r3, r3, #3
 800ec36:	f003 0303 	and.w	r3, r3, #3
 800ec3a:	4a84      	ldr	r2, [pc, #528]	; (800ee4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ec3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	ee07 3a90 	vmov	s15, r3
 800ec48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	ee07 3a90 	vmov	s15, r3
 800ec52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec5a:	4b7b      	ldr	r3, [pc, #492]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec62:	ee07 3a90 	vmov	s15, r3
 800ec66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ee50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ec72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ec8a:	e087      	b.n	800ed9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	ee07 3a90 	vmov	s15, r3
 800ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ee54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ec9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec9e:	4b6a      	ldr	r3, [pc, #424]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca6:	ee07 3a90 	vmov	s15, r3
 800ecaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecae:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ee50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ecce:	e065      	b.n	800ed9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	ee07 3a90 	vmov	s15, r3
 800ecd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ee58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ecde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ece2:	4b59      	ldr	r3, [pc, #356]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ece4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecea:	ee07 3a90 	vmov	s15, r3
 800ecee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ee50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ecfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed12:	e043      	b.n	800ed9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	ee07 3a90 	vmov	s15, r3
 800ed1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ee5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ed22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed26:	4b48      	ldr	r3, [pc, #288]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed2e:	ee07 3a90 	vmov	s15, r3
 800ed32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ee50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed56:	e021      	b.n	800ed9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	ee07 3a90 	vmov	s15, r3
 800ed5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ee58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ed66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed6a:	4b37      	ldr	r3, [pc, #220]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed72:	ee07 3a90 	vmov	s15, r3
 800ed76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ee50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ed82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ed9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ed9c:	4b2a      	ldr	r3, [pc, #168]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ed9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda0:	0a5b      	lsrs	r3, r3, #9
 800eda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eda6:	ee07 3a90 	vmov	s15, r3
 800edaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edc2:	ee17 2a90 	vmov	r2, s15
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800edca:	4b1f      	ldr	r3, [pc, #124]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edce:	0c1b      	lsrs	r3, r3, #16
 800edd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edd4:	ee07 3a90 	vmov	s15, r3
 800edd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ede0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ede4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ede8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edf0:	ee17 2a90 	vmov	r2, s15
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800edf8:	4b13      	ldr	r3, [pc, #76]	; (800ee48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfc:	0e1b      	lsrs	r3, r3, #24
 800edfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee02:	ee07 3a90 	vmov	s15, r3
 800ee06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ee0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ee12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee1e:	ee17 2a90 	vmov	r2, s15
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ee26:	e008      	b.n	800ee3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	609a      	str	r2, [r3, #8]
}
 800ee3a:	bf00      	nop
 800ee3c:	3724      	adds	r7, #36	; 0x24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	58024400 	.word	0x58024400
 800ee4c:	03d09000 	.word	0x03d09000
 800ee50:	46000000 	.word	0x46000000
 800ee54:	4c742400 	.word	0x4c742400
 800ee58:	4a742400 	.word	0x4a742400
 800ee5c:	4bbebc20 	.word	0x4bbebc20

0800ee60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b089      	sub	sp, #36	; 0x24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee68:	4ba0      	ldr	r3, [pc, #640]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6c:	f003 0303 	and.w	r3, r3, #3
 800ee70:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ee72:	4b9e      	ldr	r3, [pc, #632]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	091b      	lsrs	r3, r3, #4
 800ee78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee7c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ee7e:	4b9b      	ldr	r3, [pc, #620]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee82:	f003 0301 	and.w	r3, r3, #1
 800ee86:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ee88:	4b98      	ldr	r3, [pc, #608]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ee8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee8c:	08db      	lsrs	r3, r3, #3
 800ee8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee92:	693a      	ldr	r2, [r7, #16]
 800ee94:	fb02 f303 	mul.w	r3, r2, r3
 800ee98:	ee07 3a90 	vmov	s15, r3
 800ee9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eea0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 8111 	beq.w	800f0ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	2b02      	cmp	r3, #2
 800eeb0:	f000 8083 	beq.w	800efba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	f200 80a1 	bhi.w	800effe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d056      	beq.n	800ef76 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800eec8:	e099      	b.n	800effe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eeca:	4b88      	ldr	r3, [pc, #544]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0320 	and.w	r3, r3, #32
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d02d      	beq.n	800ef32 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eed6:	4b85      	ldr	r3, [pc, #532]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	08db      	lsrs	r3, r3, #3
 800eedc:	f003 0303 	and.w	r3, r3, #3
 800eee0:	4a83      	ldr	r2, [pc, #524]	; (800f0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800eee2:	fa22 f303 	lsr.w	r3, r2, r3
 800eee6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	ee07 3a90 	vmov	s15, r3
 800eeee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	ee07 3a90 	vmov	s15, r3
 800eef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eefc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef00:	4b7a      	ldr	r3, [pc, #488]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef08:	ee07 3a90 	vmov	s15, r3
 800ef0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef14:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ef30:	e087      	b.n	800f042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	ee07 3a90 	vmov	s15, r3
 800ef38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ef40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef44:	4b69      	ldr	r3, [pc, #420]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef4c:	ee07 3a90 	vmov	s15, r3
 800ef50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef58:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ef5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ef74:	e065      	b.n	800f042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	ee07 3a90 	vmov	s15, r3
 800ef7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f0fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ef84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef88:	4b58      	ldr	r3, [pc, #352]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ef8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef90:	ee07 3a90 	vmov	s15, r3
 800ef94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800efa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800efb8:	e043      	b.n	800f042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	ee07 3a90 	vmov	s15, r3
 800efc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efc4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f100 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800efc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efcc:	4b47      	ldr	r3, [pc, #284]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800efce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd4:	ee07 3a90 	vmov	s15, r3
 800efd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800efe0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800efe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eff8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800effc:	e021      	b.n	800f042 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	ee07 3a90 	vmov	s15, r3
 800f004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f008:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f00c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f010:	4b36      	ldr	r3, [pc, #216]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f018:	ee07 3a90 	vmov	s15, r3
 800f01c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f020:	ed97 6a03 	vldr	s12, [r7, #12]
 800f024:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f02c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f03c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f040:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800f042:	4b2a      	ldr	r3, [pc, #168]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f046:	0a5b      	lsrs	r3, r3, #9
 800f048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f04c:	ee07 3a90 	vmov	s15, r3
 800f050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f05c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f068:	ee17 2a90 	vmov	r2, s15
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800f070:	4b1e      	ldr	r3, [pc, #120]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f074:	0c1b      	lsrs	r3, r3, #16
 800f076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f07a:	ee07 3a90 	vmov	s15, r3
 800f07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f096:	ee17 2a90 	vmov	r2, s15
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800f09e:	4b13      	ldr	r3, [pc, #76]	; (800f0ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a2:	0e1b      	lsrs	r3, r3, #24
 800f0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0a8:	ee07 3a90 	vmov	s15, r3
 800f0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0c4:	ee17 2a90 	vmov	r2, s15
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f0cc:	e008      	b.n	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	609a      	str	r2, [r3, #8]
}
 800f0e0:	bf00      	nop
 800f0e2:	3724      	adds	r7, #36	; 0x24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	58024400 	.word	0x58024400
 800f0f0:	03d09000 	.word	0x03d09000
 800f0f4:	46000000 	.word	0x46000000
 800f0f8:	4c742400 	.word	0x4c742400
 800f0fc:	4a742400 	.word	0x4a742400
 800f100:	4bbebc20 	.word	0x4bbebc20

0800f104 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f10e:	2300      	movs	r3, #0
 800f110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f112:	4b53      	ldr	r3, [pc, #332]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f116:	f003 0303 	and.w	r3, r3, #3
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d101      	bne.n	800f122 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	e099      	b.n	800f256 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f122:	4b4f      	ldr	r3, [pc, #316]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a4e      	ldr	r2, [pc, #312]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f128:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f12c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f12e:	f7f6 f8fd 	bl	800532c <HAL_GetTick>
 800f132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f134:	e008      	b.n	800f148 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f136:	f7f6 f8f9 	bl	800532c <HAL_GetTick>
 800f13a:	4602      	mov	r2, r0
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	2b02      	cmp	r3, #2
 800f142:	d901      	bls.n	800f148 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f144:	2303      	movs	r3, #3
 800f146:	e086      	b.n	800f256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f148:	4b45      	ldr	r3, [pc, #276]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1f0      	bne.n	800f136 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f154:	4b42      	ldr	r3, [pc, #264]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f158:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	031b      	lsls	r3, r3, #12
 800f162:	493f      	ldr	r1, [pc, #252]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f164:	4313      	orrs	r3, r2
 800f166:	628b      	str	r3, [r1, #40]	; 0x28
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	3b01      	subs	r3, #1
 800f178:	025b      	lsls	r3, r3, #9
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	431a      	orrs	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	3b01      	subs	r3, #1
 800f184:	041b      	lsls	r3, r3, #16
 800f186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f18a:	431a      	orrs	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	3b01      	subs	r3, #1
 800f192:	061b      	lsls	r3, r3, #24
 800f194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f198:	4931      	ldr	r1, [pc, #196]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f19a:	4313      	orrs	r3, r2
 800f19c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f19e:	4b30      	ldr	r3, [pc, #192]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	492d      	ldr	r1, [pc, #180]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f1b0:	4b2b      	ldr	r3, [pc, #172]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b4:	f023 0220 	bic.w	r2, r3, #32
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	4928      	ldr	r1, [pc, #160]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f1c2:	4b27      	ldr	r3, [pc, #156]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c6:	4a26      	ldr	r2, [pc, #152]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1c8:	f023 0310 	bic.w	r3, r3, #16
 800f1cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f1ce:	4b24      	ldr	r3, [pc, #144]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1d2:	4b24      	ldr	r3, [pc, #144]	; (800f264 <RCCEx_PLL2_Config+0x160>)
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	69d2      	ldr	r2, [r2, #28]
 800f1da:	00d2      	lsls	r2, r2, #3
 800f1dc:	4920      	ldr	r1, [pc, #128]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f1e2:	4b1f      	ldr	r3, [pc, #124]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e6:	4a1e      	ldr	r2, [pc, #120]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1e8:	f043 0310 	orr.w	r3, r3, #16
 800f1ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d106      	bne.n	800f202 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f1f4:	4b1a      	ldr	r3, [pc, #104]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	4a19      	ldr	r2, [pc, #100]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f1fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f200:	e00f      	b.n	800f222 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d106      	bne.n	800f216 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f208:	4b15      	ldr	r3, [pc, #84]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20c:	4a14      	ldr	r2, [pc, #80]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f20e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f212:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f214:	e005      	b.n	800f222 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f216:	4b12      	ldr	r3, [pc, #72]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21a:	4a11      	ldr	r2, [pc, #68]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f21c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f220:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f222:	4b0f      	ldr	r3, [pc, #60]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a0e      	ldr	r2, [pc, #56]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f22c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f22e:	f7f6 f87d 	bl	800532c <HAL_GetTick>
 800f232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f234:	e008      	b.n	800f248 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f236:	f7f6 f879 	bl	800532c <HAL_GetTick>
 800f23a:	4602      	mov	r2, r0
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	2b02      	cmp	r3, #2
 800f242:	d901      	bls.n	800f248 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f244:	2303      	movs	r3, #3
 800f246:	e006      	b.n	800f256 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f248:	4b05      	ldr	r3, [pc, #20]	; (800f260 <RCCEx_PLL2_Config+0x15c>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d0f0      	beq.n	800f236 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f254:	7bfb      	ldrb	r3, [r7, #15]
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	58024400 	.word	0x58024400
 800f264:	ffff0007 	.word	0xffff0007

0800f268 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f272:	2300      	movs	r3, #0
 800f274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f276:	4b53      	ldr	r3, [pc, #332]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27a:	f003 0303 	and.w	r3, r3, #3
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d101      	bne.n	800f286 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	e099      	b.n	800f3ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f286:	4b4f      	ldr	r3, [pc, #316]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a4e      	ldr	r2, [pc, #312]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f28c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f292:	f7f6 f84b 	bl	800532c <HAL_GetTick>
 800f296:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f298:	e008      	b.n	800f2ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f29a:	f7f6 f847 	bl	800532c <HAL_GetTick>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d901      	bls.n	800f2ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e086      	b.n	800f3ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f2ac:	4b45      	ldr	r3, [pc, #276]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d1f0      	bne.n	800f29a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f2b8:	4b42      	ldr	r3, [pc, #264]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	051b      	lsls	r3, r3, #20
 800f2c6:	493f      	ldr	r1, [pc, #252]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	628b      	str	r3, [r1, #40]	; 0x28
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	025b      	lsls	r3, r3, #9
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	431a      	orrs	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	041b      	lsls	r3, r3, #16
 800f2ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f2ee:	431a      	orrs	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	061b      	lsls	r3, r3, #24
 800f2f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f2fc:	4931      	ldr	r1, [pc, #196]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f2fe:	4313      	orrs	r3, r2
 800f300:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f302:	4b30      	ldr	r3, [pc, #192]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	695b      	ldr	r3, [r3, #20]
 800f30e:	492d      	ldr	r1, [pc, #180]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f310:	4313      	orrs	r3, r2
 800f312:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f314:	4b2b      	ldr	r3, [pc, #172]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	699b      	ldr	r3, [r3, #24]
 800f320:	4928      	ldr	r1, [pc, #160]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f322:	4313      	orrs	r3, r2
 800f324:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f326:	4b27      	ldr	r3, [pc, #156]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32a:	4a26      	ldr	r2, [pc, #152]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f32c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f332:	4b24      	ldr	r3, [pc, #144]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f336:	4b24      	ldr	r3, [pc, #144]	; (800f3c8 <RCCEx_PLL3_Config+0x160>)
 800f338:	4013      	ands	r3, r2
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	69d2      	ldr	r2, [r2, #28]
 800f33e:	00d2      	lsls	r2, r2, #3
 800f340:	4920      	ldr	r1, [pc, #128]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f342:	4313      	orrs	r3, r2
 800f344:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f346:	4b1f      	ldr	r3, [pc, #124]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34a:	4a1e      	ldr	r2, [pc, #120]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f34c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f358:	4b1a      	ldr	r3, [pc, #104]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35c:	4a19      	ldr	r2, [pc, #100]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f35e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f362:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f364:	e00f      	b.n	800f386 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d106      	bne.n	800f37a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f36c:	4b15      	ldr	r3, [pc, #84]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f370:	4a14      	ldr	r2, [pc, #80]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f372:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f376:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f378:	e005      	b.n	800f386 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f37a:	4b12      	ldr	r3, [pc, #72]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f37e:	4a11      	ldr	r2, [pc, #68]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f384:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a0e      	ldr	r2, [pc, #56]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f38c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f392:	f7f5 ffcb 	bl	800532c <HAL_GetTick>
 800f396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f398:	e008      	b.n	800f3ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f39a:	f7f5 ffc7 	bl	800532c <HAL_GetTick>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	2b02      	cmp	r3, #2
 800f3a6:	d901      	bls.n	800f3ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f3a8:	2303      	movs	r3, #3
 800f3aa:	e006      	b.n	800f3ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <RCCEx_PLL3_Config+0x15c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0f0      	beq.n	800f39a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	58024400 	.word	0x58024400
 800f3c8:	ffff0007 	.word	0xffff0007

0800f3cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d101      	bne.n	800f3de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e0f1      	b.n	800f5c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a78      	ldr	r2, [pc, #480]	; (800f5cc <HAL_SPI_Init+0x200>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d00f      	beq.n	800f40e <HAL_SPI_Init+0x42>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4a77      	ldr	r2, [pc, #476]	; (800f5d0 <HAL_SPI_Init+0x204>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d00a      	beq.n	800f40e <HAL_SPI_Init+0x42>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a75      	ldr	r2, [pc, #468]	; (800f5d4 <HAL_SPI_Init+0x208>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d005      	beq.n	800f40e <HAL_SPI_Init+0x42>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	2b0f      	cmp	r3, #15
 800f408:	d901      	bls.n	800f40e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f40a:	2301      	movs	r3, #1
 800f40c:	e0d9      	b.n	800f5c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 ff66 	bl	80102e0 <SPI_GetPacketSize>
 800f414:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a6c      	ldr	r2, [pc, #432]	; (800f5cc <HAL_SPI_Init+0x200>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d00c      	beq.n	800f43a <HAL_SPI_Init+0x6e>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a6a      	ldr	r2, [pc, #424]	; (800f5d0 <HAL_SPI_Init+0x204>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d007      	beq.n	800f43a <HAL_SPI_Init+0x6e>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a69      	ldr	r2, [pc, #420]	; (800f5d4 <HAL_SPI_Init+0x208>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d002      	beq.n	800f43a <HAL_SPI_Init+0x6e>
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b08      	cmp	r3, #8
 800f438:	d811      	bhi.n	800f45e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f43e:	4a63      	ldr	r2, [pc, #396]	; (800f5cc <HAL_SPI_Init+0x200>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d009      	beq.n	800f458 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a61      	ldr	r2, [pc, #388]	; (800f5d0 <HAL_SPI_Init+0x204>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d004      	beq.n	800f458 <HAL_SPI_Init+0x8c>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4a60      	ldr	r2, [pc, #384]	; (800f5d4 <HAL_SPI_Init+0x208>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d104      	bne.n	800f462 <HAL_SPI_Init+0x96>
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b10      	cmp	r3, #16
 800f45c:	d901      	bls.n	800f462 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	e0af      	b.n	800f5c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d106      	bne.n	800f47c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7f4 fa20 	bl	80038bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2202      	movs	r2, #2
 800f480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f022 0201 	bic.w	r2, r2, #1
 800f492:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	689b      	ldr	r3, [r3, #8]
 800f49a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f49e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	699b      	ldr	r3, [r3, #24]
 800f4a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4a8:	d119      	bne.n	800f4de <HAL_SPI_Init+0x112>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f4b2:	d103      	bne.n	800f4bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d008      	beq.n	800f4ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d10c      	bne.n	800f4de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f4c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4cc:	d107      	bne.n	800f4de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f4dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	69da      	ldr	r2, [r3, #28]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4f0:	ea42 0103 	orr.w	r1, r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	68da      	ldr	r2, [r3, #12]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	430a      	orrs	r2, r1
 800f4fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f508:	431a      	orrs	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f50e:	431a      	orrs	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	699b      	ldr	r3, [r3, #24]
 800f514:	431a      	orrs	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	431a      	orrs	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	695b      	ldr	r3, [r3, #20]
 800f520:	431a      	orrs	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	431a      	orrs	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	431a      	orrs	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f532:	431a      	orrs	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	431a      	orrs	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f53e:	ea42 0103 	orr.w	r1, r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	430a      	orrs	r2, r1
 800f54c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d113      	bne.n	800f57e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f568:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f57c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f022 0201 	bic.w	r2, r2, #1
 800f58c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	430a      	orrs	r2, r1
 800f5ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f5c0:	2300      	movs	r3, #0
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	40013000 	.word	0x40013000
 800f5d0:	40003800 	.word	0x40003800
 800f5d4:	40003c00 	.word	0x40003c00

0800f5d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08a      	sub	sp, #40	; 0x28
 800f5dc:	af02      	add	r7, sp, #8
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	603b      	str	r3, [r7, #0]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	3320      	adds	r3, #32
 800f5ee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d101      	bne.n	800f602 <HAL_SPI_Transmit+0x2a>
 800f5fe:	2302      	movs	r3, #2
 800f600:	e1d7      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f60a:	f7f5 fe8f 	bl	800532c <HAL_GetTick>
 800f60e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d007      	beq.n	800f62c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f61c:	2302      	movs	r3, #2
 800f61e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f628:	7efb      	ldrb	r3, [r7, #27]
 800f62a:	e1c2      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d002      	beq.n	800f638 <HAL_SPI_Transmit+0x60>
 800f632:	88fb      	ldrh	r3, [r7, #6]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d107      	bne.n	800f648 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f638:	2301      	movs	r3, #1
 800f63a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f644:	7efb      	ldrb	r3, [r7, #27]
 800f646:	e1b4      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2203      	movs	r2, #3
 800f64c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	88fa      	ldrh	r2, [r7, #6]
 800f662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	88fa      	ldrh	r2, [r7, #6]
 800f66a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f698:	d107      	bne.n	800f6aa <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	685a      	ldr	r2, [r3, #4]
 800f6b0:	4b96      	ldr	r3, [pc, #600]	; (800f90c <HAL_SPI_Transmit+0x334>)
 800f6b2:	4013      	ands	r3, r2
 800f6b4:	88f9      	ldrh	r1, [r7, #6]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	6812      	ldr	r2, [r2, #0]
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f042 0201 	orr.w	r2, r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6d6:	d107      	bne.n	800f6e8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2b0f      	cmp	r3, #15
 800f6ee:	d947      	bls.n	800f780 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f6f0:	e03f      	b.n	800f772 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	695b      	ldr	r3, [r3, #20]
 800f6f8:	f003 0302 	and.w	r3, r3, #2
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d114      	bne.n	800f72a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6812      	ldr	r2, [r2, #0]
 800f70a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f710:	1d1a      	adds	r2, r3, #4
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	3b01      	subs	r3, #1
 800f720:	b29a      	uxth	r2, r3
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f728:	e023      	b.n	800f772 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f72a:	f7f5 fdff 	bl	800532c <HAL_GetTick>
 800f72e:	4602      	mov	r2, r0
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	1ad3      	subs	r3, r2, r3
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	429a      	cmp	r2, r3
 800f738:	d803      	bhi.n	800f742 <HAL_SPI_Transmit+0x16a>
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f740:	d102      	bne.n	800f748 <HAL_SPI_Transmit+0x170>
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d114      	bne.n	800f772 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f000 fcfb 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2200      	movs	r2, #0
 800f752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f75c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2201      	movs	r2, #1
 800f76a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f76e:	2303      	movs	r3, #3
 800f770:	e11f      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f778:	b29b      	uxth	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d1b9      	bne.n	800f6f2 <HAL_SPI_Transmit+0x11a>
 800f77e:	e0f2      	b.n	800f966 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	2b07      	cmp	r3, #7
 800f786:	f240 80e7 	bls.w	800f958 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f78a:	e05d      	b.n	800f848 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	f003 0302 	and.w	r3, r3, #2
 800f796:	2b02      	cmp	r3, #2
 800f798:	d132      	bne.n	800f800 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d918      	bls.n	800f7d8 <HAL_SPI_Transmit+0x200>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d014      	beq.n	800f7d8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6812      	ldr	r2, [r2, #0]
 800f7b8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7be:	1d1a      	adds	r2, r3, #4
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	3b02      	subs	r3, #2
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f7d6:	e037      	b.n	800f848 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7dc:	881a      	ldrh	r2, [r3, #0]
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7e6:	1c9a      	adds	r2, r3, #2
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f7fe:	e023      	b.n	800f848 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f800:	f7f5 fd94 	bl	800532c <HAL_GetTick>
 800f804:	4602      	mov	r2, r0
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d803      	bhi.n	800f818 <HAL_SPI_Transmit+0x240>
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f816:	d102      	bne.n	800f81e <HAL_SPI_Transmit+0x246>
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d114      	bne.n	800f848 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f000 fc90 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2200      	movs	r2, #0
 800f828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f844:	2303      	movs	r3, #3
 800f846:	e0b4      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f84e:	b29b      	uxth	r3, r3
 800f850:	2b00      	cmp	r3, #0
 800f852:	d19b      	bne.n	800f78c <HAL_SPI_Transmit+0x1b4>
 800f854:	e087      	b.n	800f966 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	f003 0302 	and.w	r3, r3, #2
 800f860:	2b02      	cmp	r3, #2
 800f862:	d155      	bne.n	800f910 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d918      	bls.n	800f8a2 <HAL_SPI_Transmit+0x2ca>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f874:	2b40      	cmp	r3, #64	; 0x40
 800f876:	d914      	bls.n	800f8a2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6812      	ldr	r2, [r2, #0]
 800f882:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f888:	1d1a      	adds	r2, r3, #4
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f894:	b29b      	uxth	r3, r3
 800f896:	3b04      	subs	r3, #4
 800f898:	b29a      	uxth	r2, r3
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f8a0:	e05a      	b.n	800f958 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d917      	bls.n	800f8de <HAL_SPI_Transmit+0x306>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d013      	beq.n	800f8de <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8ba:	881a      	ldrh	r2, [r3, #0]
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8c4:	1c9a      	adds	r2, r3, #2
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	3b02      	subs	r3, #2
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f8dc:	e03c      	b.n	800f958 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	3320      	adds	r3, #32
 800f8e8:	7812      	ldrb	r2, [r2, #0]
 800f8ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	3b01      	subs	r3, #1
 800f900:	b29a      	uxth	r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f908:	e026      	b.n	800f958 <HAL_SPI_Transmit+0x380>
 800f90a:	bf00      	nop
 800f90c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f910:	f7f5 fd0c 	bl	800532c <HAL_GetTick>
 800f914:	4602      	mov	r2, r0
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d803      	bhi.n	800f928 <HAL_SPI_Transmit+0x350>
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f926:	d102      	bne.n	800f92e <HAL_SPI_Transmit+0x356>
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d114      	bne.n	800f958 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f92e:	68f8      	ldr	r0, [r7, #12]
 800f930:	f000 fc08 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f942:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f954:	2303      	movs	r3, #3
 800f956:	e02c      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f95e:	b29b      	uxth	r3, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	f47f af78 	bne.w	800f856 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2200      	movs	r2, #0
 800f96e:	2108      	movs	r1, #8
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 fc87 	bl	8010284 <SPI_WaitOnFlagUntilTimeout>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f982:	f043 0220 	orr.w	r2, r3, #32
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f000 fbd9 	bl	8010144 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2200      	movs	r2, #0
 800f996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d001      	beq.n	800f9b0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e000      	b.n	800f9b2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f9b0:	7efb      	ldrb	r3, [r7, #27]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3720      	adds	r7, #32
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop

0800f9bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08a      	sub	sp, #40	; 0x28
 800f9c0:	af02      	add	r7, sp, #8
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	603b      	str	r3, [r7, #0]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3330      	adds	r3, #48	; 0x30
 800f9d6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f9e0:	d112      	bne.n	800fa08 <HAL_SPI_Receive+0x4c>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d10e      	bne.n	800fa08 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2204      	movs	r2, #4
 800f9ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f9f2:	88fa      	ldrh	r2, [r7, #6]
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	68b9      	ldr	r1, [r7, #8]
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f000 f978 	bl	800fcf4 <HAL_SPI_TransmitReceive>
 800fa04:	4603      	mov	r3, r0
 800fa06:	e16f      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d101      	bne.n	800fa16 <HAL_SPI_Receive+0x5a>
 800fa12:	2302      	movs	r3, #2
 800fa14:	e168      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2201      	movs	r2, #1
 800fa1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fa1e:	f7f5 fc85 	bl	800532c <HAL_GetTick>
 800fa22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d007      	beq.n	800fa40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800fa30:	2302      	movs	r3, #2
 800fa32:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fa3c:	7ffb      	ldrb	r3, [r7, #31]
 800fa3e:	e153      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <HAL_SPI_Receive+0x90>
 800fa46:	88fb      	ldrh	r3, [r7, #6]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d107      	bne.n	800fa5c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fa58:	7ffb      	ldrb	r3, [r7, #31]
 800fa5a:	e145      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2204      	movs	r2, #4
 800fa60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	88fa      	ldrh	r2, [r7, #6]
 800fa76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	88fa      	ldrh	r2, [r7, #6]
 800fa7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2200      	movs	r2, #0
 800fa86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2200      	movs	r2, #0
 800faa2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800faac:	d107      	bne.n	800fabe <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fabc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	4b8a      	ldr	r3, [pc, #552]	; (800fcf0 <HAL_SPI_Receive+0x334>)
 800fac6:	4013      	ands	r3, r2
 800fac8:	88f9      	ldrh	r1, [r7, #6]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	6812      	ldr	r2, [r2, #0]
 800face:	430b      	orrs	r3, r1
 800fad0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f042 0201 	orr.w	r2, r2, #1
 800fae0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800faea:	d107      	bne.n	800fafc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fafa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	2b0f      	cmp	r3, #15
 800fb02:	d948      	bls.n	800fb96 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fb04:	e040      	b.n	800fb88 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	695a      	ldr	r2, [r3, #20]
 800fb0c:	f248 0308 	movw	r3, #32776	; 0x8008
 800fb10:	4013      	ands	r3, r2
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d014      	beq.n	800fb40 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fb20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	3b01      	subs	r3, #1
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fb3e:	e023      	b.n	800fb88 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb40:	f7f5 fbf4 	bl	800532c <HAL_GetTick>
 800fb44:	4602      	mov	r2, r0
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d803      	bhi.n	800fb58 <HAL_SPI_Receive+0x19c>
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb56:	d102      	bne.n	800fb5e <HAL_SPI_Receive+0x1a2>
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d114      	bne.n	800fb88 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f000 faf0 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb84:	2303      	movs	r3, #3
 800fb86:	e0af      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1b8      	bne.n	800fb06 <HAL_SPI_Receive+0x14a>
 800fb94:	e095      	b.n	800fcc2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	2b07      	cmp	r3, #7
 800fb9c:	f240 808b 	bls.w	800fcb6 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fba0:	e03f      	b.n	800fc22 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	695b      	ldr	r3, [r3, #20]
 800fba8:	f003 0301 	and.w	r3, r3, #1
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d114      	bne.n	800fbda <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbb4:	69ba      	ldr	r2, [r7, #24]
 800fbb6:	8812      	ldrh	r2, [r2, #0]
 800fbb8:	b292      	uxth	r2, r2
 800fbba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbc0:	1c9a      	adds	r2, r3, #2
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fbd8:	e023      	b.n	800fc22 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fbda:	f7f5 fba7 	bl	800532c <HAL_GetTick>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	683a      	ldr	r2, [r7, #0]
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d803      	bhi.n	800fbf2 <HAL_SPI_Receive+0x236>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbf0:	d102      	bne.n	800fbf8 <HAL_SPI_Receive+0x23c>
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d114      	bne.n	800fc22 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f000 faa3 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2201      	movs	r2, #1
 800fc1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fc1e:	2303      	movs	r3, #3
 800fc20:	e062      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1b9      	bne.n	800fba2 <HAL_SPI_Receive+0x1e6>
 800fc2e:	e048      	b.n	800fcc2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d117      	bne.n	800fc6e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc4a:	7812      	ldrb	r2, [r2, #0]
 800fc4c:	b2d2      	uxtb	r2, r2
 800fc4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	3b01      	subs	r3, #1
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc6c:	e023      	b.n	800fcb6 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc6e:	f7f5 fb5d 	bl	800532c <HAL_GetTick>
 800fc72:	4602      	mov	r2, r0
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	1ad3      	subs	r3, r2, r3
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d803      	bhi.n	800fc86 <HAL_SPI_Receive+0x2ca>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc84:	d102      	bne.n	800fc8c <HAL_SPI_Receive+0x2d0>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d114      	bne.n	800fcb6 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f000 fa59 	bl	8010144 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fca0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2201      	movs	r2, #1
 800fcae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fcb2:	2303      	movs	r3, #3
 800fcb4:	e018      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1b6      	bne.n	800fc30 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f000 fa3e 	bl	8010144 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d001      	beq.n	800fce6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e000      	b.n	800fce8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800fce6:	7ffb      	ldrb	r3, [r7, #31]
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3720      	adds	r7, #32
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	ffff0000 	.word	0xffff0000

0800fcf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08e      	sub	sp, #56	; 0x38
 800fcf8:	af02      	add	r7, sp, #8
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fd02:	2300      	movs	r3, #0
 800fd04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	3320      	adds	r3, #32
 800fd0e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3330      	adds	r3, #48	; 0x30
 800fd16:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d101      	bne.n	800fd26 <HAL_SPI_TransmitReceive+0x32>
 800fd22:	2302      	movs	r3, #2
 800fd24:	e209      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd2e:	f7f5 fafd 	bl	800532c <HAL_GetTick>
 800fd32:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800fd34:	887b      	ldrh	r3, [r7, #2]
 800fd36:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800fd38:	887b      	ldrh	r3, [r7, #2]
 800fd3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fd4a:	7efb      	ldrb	r3, [r7, #27]
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d014      	beq.n	800fd7a <HAL_SPI_TransmitReceive+0x86>
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd56:	d106      	bne.n	800fd66 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d102      	bne.n	800fd66 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800fd60:	7efb      	ldrb	r3, [r7, #27]
 800fd62:	2b04      	cmp	r3, #4
 800fd64:	d009      	beq.n	800fd7a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800fd66:	2302      	movs	r3, #2
 800fd68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fd74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd78:	e1df      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d005      	beq.n	800fd8c <HAL_SPI_TransmitReceive+0x98>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <HAL_SPI_TransmitReceive+0x98>
 800fd86:	887b      	ldrh	r3, [r7, #2]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d109      	bne.n	800fda0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fd9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fd9e:	e1cc      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b04      	cmp	r3, #4
 800fdaa:	d003      	beq.n	800fdb4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2205      	movs	r2, #5
 800fdb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	887a      	ldrh	r2, [r7, #2]
 800fdc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	887a      	ldrh	r2, [r7, #2]
 800fdce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	887a      	ldrh	r2, [r7, #2]
 800fddc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	887a      	ldrh	r2, [r7, #2]
 800fde4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	4b82      	ldr	r3, [pc, #520]	; (8010004 <HAL_SPI_TransmitReceive+0x310>)
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	8879      	ldrh	r1, [r7, #2]
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	6812      	ldr	r2, [r2, #0]
 800fe04:	430b      	orrs	r3, r1
 800fe06:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f042 0201 	orr.w	r2, r2, #1
 800fe16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe20:	d107      	bne.n	800fe32 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	2b0f      	cmp	r3, #15
 800fe38:	d970      	bls.n	800ff1c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fe3a:	e068      	b.n	800ff0e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	695b      	ldr	r3, [r3, #20]
 800fe42:	f003 0302 	and.w	r3, r3, #2
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d11a      	bne.n	800fe80 <HAL_SPI_TransmitReceive+0x18c>
 800fe4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d017      	beq.n	800fe80 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	6812      	ldr	r2, [r2, #0]
 800fe5a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe60:	1d1a      	adds	r2, r3, #4
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	695a      	ldr	r2, [r3, #20]
 800fe86:	f248 0308 	movw	r3, #32776	; 0x8008
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d01a      	beq.n	800fec6 <HAL_SPI_TransmitReceive+0x1d2>
 800fe90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d017      	beq.n	800fec6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fea0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	3b01      	subs	r3, #1
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fec4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fec6:	f7f5 fa31 	bl	800532c <HAL_GetTick>
 800feca:	4602      	mov	r2, r0
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d803      	bhi.n	800fede <HAL_SPI_TransmitReceive+0x1ea>
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fedc:	d102      	bne.n	800fee4 <HAL_SPI_TransmitReceive+0x1f0>
 800fede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d114      	bne.n	800ff0e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f92d 	bl	8010144 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e115      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ff0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d193      	bne.n	800fe3c <HAL_SPI_TransmitReceive+0x148>
 800ff14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d190      	bne.n	800fe3c <HAL_SPI_TransmitReceive+0x148>
 800ff1a:	e0e7      	b.n	80100ec <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	2b07      	cmp	r3, #7
 800ff22:	f240 80dd 	bls.w	80100e0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ff26:	e066      	b.n	800fff6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	f003 0302 	and.w	r3, r3, #2
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d119      	bne.n	800ff6a <HAL_SPI_TransmitReceive+0x276>
 800ff36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d016      	beq.n	800ff6a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff40:	881a      	ldrh	r2, [r3, #0]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff4a:	1c9a      	adds	r2, r3, #2
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	695b      	ldr	r3, [r3, #20]
 800ff70:	f003 0301 	and.w	r3, r3, #1
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d11a      	bne.n	800ffae <HAL_SPI_TransmitReceive+0x2ba>
 800ff78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d017      	beq.n	800ffae <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff82:	6a3a      	ldr	r2, [r7, #32]
 800ff84:	8812      	ldrh	r2, [r2, #0]
 800ff86:	b292      	uxth	r2, r2
 800ff88:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff8e:	1c9a      	adds	r2, r3, #2
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffae:	f7f5 f9bd 	bl	800532c <HAL_GetTick>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d803      	bhi.n	800ffc6 <HAL_SPI_TransmitReceive+0x2d2>
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc4:	d102      	bne.n	800ffcc <HAL_SPI_TransmitReceive+0x2d8>
 800ffc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d114      	bne.n	800fff6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f000 f8b9 	bl	8010144 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2201      	movs	r2, #1
 800ffee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e0a1      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d195      	bne.n	800ff28 <HAL_SPI_TransmitReceive+0x234>
 800fffc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d192      	bne.n	800ff28 <HAL_SPI_TransmitReceive+0x234>
 8010002:	e073      	b.n	80100ec <HAL_SPI_TransmitReceive+0x3f8>
 8010004:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	695b      	ldr	r3, [r3, #20]
 801000e:	f003 0302 	and.w	r3, r3, #2
 8010012:	2b02      	cmp	r3, #2
 8010014:	d11b      	bne.n	801004e <HAL_SPI_TransmitReceive+0x35a>
 8010016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010018:	2b00      	cmp	r3, #0
 801001a:	d018      	beq.n	801004e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	3320      	adds	r3, #32
 8010026:	7812      	ldrb	r2, [r2, #0]
 8010028:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801002e:	1c5a      	adds	r2, r3, #1
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801003a:	b29b      	uxth	r3, r3
 801003c:	3b01      	subs	r3, #1
 801003e:	b29a      	uxth	r2, r3
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801004c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b01      	cmp	r3, #1
 801005a:	d11d      	bne.n	8010098 <HAL_SPI_TransmitReceive+0x3a4>
 801005c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801005e:	2b00      	cmp	r3, #0
 8010060:	d01a      	beq.n	8010098 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801006e:	7812      	ldrb	r2, [r2, #0]
 8010070:	b2d2      	uxtb	r2, r2
 8010072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010078:	1c5a      	adds	r2, r3, #1
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010084:	b29b      	uxth	r3, r3
 8010086:	3b01      	subs	r3, #1
 8010088:	b29a      	uxth	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010096:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010098:	f7f5 f948 	bl	800532c <HAL_GetTick>
 801009c:	4602      	mov	r2, r0
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d803      	bhi.n	80100b0 <HAL_SPI_TransmitReceive+0x3bc>
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ae:	d102      	bne.n	80100b6 <HAL_SPI_TransmitReceive+0x3c2>
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d114      	bne.n	80100e0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f000 f844 	bl	8010144 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80100dc:	2303      	movs	r3, #3
 80100de:	e02c      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80100e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d190      	bne.n	8010008 <HAL_SPI_TransmitReceive+0x314>
 80100e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d18d      	bne.n	8010008 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	2200      	movs	r2, #0
 80100f4:	2108      	movs	r1, #8
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	f000 f8c4 	bl	8010284 <SPI_WaitOnFlagUntilTimeout>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d007      	beq.n	8010112 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010108:	f043 0220 	orr.w	r2, r3, #32
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f000 f816 	bl	8010144 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801012e:	2b00      	cmp	r3, #0
 8010130:	d001      	beq.n	8010136 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	e001      	b.n	801013a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8010136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801013a:	4618      	mov	r0, r3
 801013c:	3730      	adds	r7, #48	; 0x30
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop

08010144 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010144:	b480      	push	{r7}
 8010146:	b085      	sub	sp, #20
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	699a      	ldr	r2, [r3, #24]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f042 0208 	orr.w	r2, r2, #8
 8010162:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	699a      	ldr	r2, [r3, #24]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f042 0210 	orr.w	r2, r2, #16
 8010172:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f022 0201 	bic.w	r2, r2, #1
 8010182:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	6919      	ldr	r1, [r3, #16]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	4b3c      	ldr	r3, [pc, #240]	; (8010280 <SPI_CloseTransfer+0x13c>)
 8010190:	400b      	ands	r3, r1
 8010192:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	689a      	ldr	r2, [r3, #8]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80101a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	2b04      	cmp	r3, #4
 80101ae:	d014      	beq.n	80101da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00f      	beq.n	80101da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	699a      	ldr	r2, [r3, #24]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f042 0220 	orr.w	r2, r2, #32
 80101d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	2b03      	cmp	r3, #3
 80101e4:	d014      	beq.n	8010210 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00f      	beq.n	8010210 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101f6:	f043 0204 	orr.w	r2, r3, #4
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	699a      	ldr	r2, [r3, #24]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801020e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00f      	beq.n	801023a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010220:	f043 0201 	orr.w	r2, r3, #1
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	699a      	ldr	r2, [r3, #24]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010238:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00f      	beq.n	8010264 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801024a:	f043 0208 	orr.w	r2, r3, #8
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	699a      	ldr	r2, [r3, #24]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010262:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010274:	bf00      	nop
 8010276:	3714      	adds	r7, #20
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	fffffc90 	.word	0xfffffc90

08010284 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	60b9      	str	r1, [r7, #8]
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	4613      	mov	r3, r2
 8010292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010294:	e010      	b.n	80102b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010296:	f7f5 f849 	bl	800532c <HAL_GetTick>
 801029a:	4602      	mov	r2, r0
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	69ba      	ldr	r2, [r7, #24]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d803      	bhi.n	80102ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ac:	d102      	bne.n	80102b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d101      	bne.n	80102b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80102b4:	2303      	movs	r3, #3
 80102b6:	e00f      	b.n	80102d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	695a      	ldr	r2, [r3, #20]
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	4013      	ands	r3, r2
 80102c2:	68ba      	ldr	r2, [r7, #8]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	bf0c      	ite	eq
 80102c8:	2301      	moveq	r3, #1
 80102ca:	2300      	movne	r3, #0
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	461a      	mov	r2, r3
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d0df      	beq.n	8010296 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ec:	095b      	lsrs	r3, r3, #5
 80102ee:	3301      	adds	r3, #1
 80102f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	3301      	adds	r3, #1
 80102f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	3307      	adds	r3, #7
 80102fe:	08db      	lsrs	r3, r3, #3
 8010300:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	fb02 f303 	mul.w	r3, r2, r3
}
 801030a:	4618      	mov	r0, r3
 801030c:	3714      	adds	r7, #20
 801030e:	46bd      	mov	sp, r7
 8010310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010314:	4770      	bx	lr

08010316 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b082      	sub	sp, #8
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d101      	bne.n	8010328 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010324:	2301      	movs	r3, #1
 8010326:	e049      	b.n	80103bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d106      	bne.n	8010342 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7f4 fa4b 	bl	80047d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2202      	movs	r2, #2
 8010346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3304      	adds	r3, #4
 8010352:	4619      	mov	r1, r3
 8010354:	4610      	mov	r0, r2
 8010356:	f000 ff17 	bl	8011188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2201      	movs	r2, #1
 801035e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2201      	movs	r2, #1
 8010366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2201      	movs	r2, #1
 801036e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2201      	movs	r2, #1
 801037e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2201      	movs	r2, #1
 8010386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2201      	movs	r2, #1
 801038e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2201      	movs	r2, #1
 8010396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2201      	movs	r2, #1
 801039e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2201      	movs	r2, #1
 80103ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d001      	beq.n	80103dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80103d8:	2301      	movs	r3, #1
 80103da:	e05e      	b.n	801049a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2202      	movs	r2, #2
 80103e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68da      	ldr	r2, [r3, #12]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f042 0201 	orr.w	r2, r2, #1
 80103f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a2b      	ldr	r2, [pc, #172]	; (80104a8 <HAL_TIM_Base_Start_IT+0xe4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d02c      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010406:	d027      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a27      	ldr	r2, [pc, #156]	; (80104ac <HAL_TIM_Base_Start_IT+0xe8>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d022      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	4a26      	ldr	r2, [pc, #152]	; (80104b0 <HAL_TIM_Base_Start_IT+0xec>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d01d      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	4a24      	ldr	r2, [pc, #144]	; (80104b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d018      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a23      	ldr	r2, [pc, #140]	; (80104b8 <HAL_TIM_Base_Start_IT+0xf4>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d013      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a21      	ldr	r2, [pc, #132]	; (80104bc <HAL_TIM_Base_Start_IT+0xf8>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d00e      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a20      	ldr	r2, [pc, #128]	; (80104c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d009      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a1e      	ldr	r2, [pc, #120]	; (80104c4 <HAL_TIM_Base_Start_IT+0x100>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d004      	beq.n	8010458 <HAL_TIM_Base_Start_IT+0x94>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4a1d      	ldr	r2, [pc, #116]	; (80104c8 <HAL_TIM_Base_Start_IT+0x104>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d115      	bne.n	8010484 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	689a      	ldr	r2, [r3, #8]
 801045e:	4b1b      	ldr	r3, [pc, #108]	; (80104cc <HAL_TIM_Base_Start_IT+0x108>)
 8010460:	4013      	ands	r3, r2
 8010462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2b06      	cmp	r3, #6
 8010468:	d015      	beq.n	8010496 <HAL_TIM_Base_Start_IT+0xd2>
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010470:	d011      	beq.n	8010496 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f042 0201 	orr.w	r2, r2, #1
 8010480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010482:	e008      	b.n	8010496 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f042 0201 	orr.w	r2, r2, #1
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	e000      	b.n	8010498 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop
 80104a8:	40010000 	.word	0x40010000
 80104ac:	40000400 	.word	0x40000400
 80104b0:	40000800 	.word	0x40000800
 80104b4:	40000c00 	.word	0x40000c00
 80104b8:	40010400 	.word	0x40010400
 80104bc:	40001800 	.word	0x40001800
 80104c0:	40014000 	.word	0x40014000
 80104c4:	4000e000 	.word	0x4000e000
 80104c8:	4000e400 	.word	0x4000e400
 80104cc:	00010007 	.word	0x00010007

080104d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	e049      	b.n	8010576 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7f4 f8da 	bl	80046b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2202      	movs	r2, #2
 8010500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3304      	adds	r3, #4
 801050c:	4619      	mov	r1, r3
 801050e:	4610      	mov	r0, r2
 8010510:	f000 fe3a 	bl	8011188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2201      	movs	r2, #1
 8010550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d109      	bne.n	80105a4 <HAL_TIM_PWM_Start+0x24>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010596:	b2db      	uxtb	r3, r3
 8010598:	2b01      	cmp	r3, #1
 801059a:	bf14      	ite	ne
 801059c:	2301      	movne	r3, #1
 801059e:	2300      	moveq	r3, #0
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	e03c      	b.n	801061e <HAL_TIM_PWM_Start+0x9e>
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	d109      	bne.n	80105be <HAL_TIM_PWM_Start+0x3e>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	bf14      	ite	ne
 80105b6:	2301      	movne	r3, #1
 80105b8:	2300      	moveq	r3, #0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	e02f      	b.n	801061e <HAL_TIM_PWM_Start+0x9e>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	d109      	bne.n	80105d8 <HAL_TIM_PWM_Start+0x58>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	bf14      	ite	ne
 80105d0:	2301      	movne	r3, #1
 80105d2:	2300      	moveq	r3, #0
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	e022      	b.n	801061e <HAL_TIM_PWM_Start+0x9e>
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b0c      	cmp	r3, #12
 80105dc:	d109      	bne.n	80105f2 <HAL_TIM_PWM_Start+0x72>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	bf14      	ite	ne
 80105ea:	2301      	movne	r3, #1
 80105ec:	2300      	moveq	r3, #0
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	e015      	b.n	801061e <HAL_TIM_PWM_Start+0x9e>
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b10      	cmp	r3, #16
 80105f6:	d109      	bne.n	801060c <HAL_TIM_PWM_Start+0x8c>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b01      	cmp	r3, #1
 8010602:	bf14      	ite	ne
 8010604:	2301      	movne	r3, #1
 8010606:	2300      	moveq	r3, #0
 8010608:	b2db      	uxtb	r3, r3
 801060a:	e008      	b.n	801061e <HAL_TIM_PWM_Start+0x9e>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b01      	cmp	r3, #1
 8010616:	bf14      	ite	ne
 8010618:	2301      	movne	r3, #1
 801061a:	2300      	moveq	r3, #0
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	d001      	beq.n	8010626 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	e0ab      	b.n	801077e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d104      	bne.n	8010636 <HAL_TIM_PWM_Start+0xb6>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2202      	movs	r2, #2
 8010630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010634:	e023      	b.n	801067e <HAL_TIM_PWM_Start+0xfe>
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b04      	cmp	r3, #4
 801063a:	d104      	bne.n	8010646 <HAL_TIM_PWM_Start+0xc6>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2202      	movs	r2, #2
 8010640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010644:	e01b      	b.n	801067e <HAL_TIM_PWM_Start+0xfe>
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b08      	cmp	r3, #8
 801064a:	d104      	bne.n	8010656 <HAL_TIM_PWM_Start+0xd6>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2202      	movs	r2, #2
 8010650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010654:	e013      	b.n	801067e <HAL_TIM_PWM_Start+0xfe>
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b0c      	cmp	r3, #12
 801065a:	d104      	bne.n	8010666 <HAL_TIM_PWM_Start+0xe6>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2202      	movs	r2, #2
 8010660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010664:	e00b      	b.n	801067e <HAL_TIM_PWM_Start+0xfe>
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b10      	cmp	r3, #16
 801066a:	d104      	bne.n	8010676 <HAL_TIM_PWM_Start+0xf6>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2202      	movs	r2, #2
 8010670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010674:	e003      	b.n	801067e <HAL_TIM_PWM_Start+0xfe>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2202      	movs	r2, #2
 801067a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2201      	movs	r2, #1
 8010684:	6839      	ldr	r1, [r7, #0]
 8010686:	4618      	mov	r0, r3
 8010688:	f001 f998 	bl	80119bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a3d      	ldr	r2, [pc, #244]	; (8010788 <HAL_TIM_PWM_Start+0x208>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d013      	beq.n	80106be <HAL_TIM_PWM_Start+0x13e>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	4a3c      	ldr	r2, [pc, #240]	; (801078c <HAL_TIM_PWM_Start+0x20c>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d00e      	beq.n	80106be <HAL_TIM_PWM_Start+0x13e>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a3a      	ldr	r2, [pc, #232]	; (8010790 <HAL_TIM_PWM_Start+0x210>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d009      	beq.n	80106be <HAL_TIM_PWM_Start+0x13e>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4a39      	ldr	r2, [pc, #228]	; (8010794 <HAL_TIM_PWM_Start+0x214>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d004      	beq.n	80106be <HAL_TIM_PWM_Start+0x13e>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a37      	ldr	r2, [pc, #220]	; (8010798 <HAL_TIM_PWM_Start+0x218>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d101      	bne.n	80106c2 <HAL_TIM_PWM_Start+0x142>
 80106be:	2301      	movs	r3, #1
 80106c0:	e000      	b.n	80106c4 <HAL_TIM_PWM_Start+0x144>
 80106c2:	2300      	movs	r3, #0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d007      	beq.n	80106d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80106d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4a2a      	ldr	r2, [pc, #168]	; (8010788 <HAL_TIM_PWM_Start+0x208>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d02c      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106ea:	d027      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a2a      	ldr	r2, [pc, #168]	; (801079c <HAL_TIM_PWM_Start+0x21c>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d022      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a29      	ldr	r2, [pc, #164]	; (80107a0 <HAL_TIM_PWM_Start+0x220>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d01d      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a27      	ldr	r2, [pc, #156]	; (80107a4 <HAL_TIM_PWM_Start+0x224>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d018      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4a1f      	ldr	r2, [pc, #124]	; (801078c <HAL_TIM_PWM_Start+0x20c>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d013      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a23      	ldr	r2, [pc, #140]	; (80107a8 <HAL_TIM_PWM_Start+0x228>)
 801071a:	4293      	cmp	r3, r2
 801071c:	d00e      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4a1b      	ldr	r2, [pc, #108]	; (8010790 <HAL_TIM_PWM_Start+0x210>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d009      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a1f      	ldr	r2, [pc, #124]	; (80107ac <HAL_TIM_PWM_Start+0x22c>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d004      	beq.n	801073c <HAL_TIM_PWM_Start+0x1bc>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a1e      	ldr	r2, [pc, #120]	; (80107b0 <HAL_TIM_PWM_Start+0x230>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d115      	bne.n	8010768 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	689a      	ldr	r2, [r3, #8]
 8010742:	4b1c      	ldr	r3, [pc, #112]	; (80107b4 <HAL_TIM_PWM_Start+0x234>)
 8010744:	4013      	ands	r3, r2
 8010746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b06      	cmp	r3, #6
 801074c:	d015      	beq.n	801077a <HAL_TIM_PWM_Start+0x1fa>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010754:	d011      	beq.n	801077a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	f042 0201 	orr.w	r2, r2, #1
 8010764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010766:	e008      	b.n	801077a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f042 0201 	orr.w	r2, r2, #1
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	e000      	b.n	801077c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801077a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3710      	adds	r7, #16
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	40010000 	.word	0x40010000
 801078c:	40010400 	.word	0x40010400
 8010790:	40014000 	.word	0x40014000
 8010794:	40014400 	.word	0x40014400
 8010798:	40014800 	.word	0x40014800
 801079c:	40000400 	.word	0x40000400
 80107a0:	40000800 	.word	0x40000800
 80107a4:	40000c00 	.word	0x40000c00
 80107a8:	40001800 	.word	0x40001800
 80107ac:	4000e000 	.word	0x4000e000
 80107b0:	4000e400 	.word	0x4000e400
 80107b4:	00010007 	.word	0x00010007

080107b8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b084      	sub	sp, #16
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80107c2:	2300      	movs	r3, #0
 80107c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	2b0c      	cmp	r3, #12
 80107ca:	d855      	bhi.n	8010878 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80107cc:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80107ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d2:	bf00      	nop
 80107d4:	08010809 	.word	0x08010809
 80107d8:	08010879 	.word	0x08010879
 80107dc:	08010879 	.word	0x08010879
 80107e0:	08010879 	.word	0x08010879
 80107e4:	08010825 	.word	0x08010825
 80107e8:	08010879 	.word	0x08010879
 80107ec:	08010879 	.word	0x08010879
 80107f0:	08010879 	.word	0x08010879
 80107f4:	08010841 	.word	0x08010841
 80107f8:	08010879 	.word	0x08010879
 80107fc:	08010879 	.word	0x08010879
 8010800:	08010879 	.word	0x08010879
 8010804:	0801085d 	.word	0x0801085d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	68da      	ldr	r2, [r3, #12]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010816:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801081c:	4618      	mov	r0, r3
 801081e:	f7f8 f889 	bl	8008934 <HAL_DMA_Abort_IT>
      break;
 8010822:	e02c      	b.n	801087e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68da      	ldr	r2, [r3, #12]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010832:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010838:	4618      	mov	r0, r3
 801083a:	f7f8 f87b 	bl	8008934 <HAL_DMA_Abort_IT>
      break;
 801083e:	e01e      	b.n	801087e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68da      	ldr	r2, [r3, #12]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801084e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010854:	4618      	mov	r0, r3
 8010856:	f7f8 f86d 	bl	8008934 <HAL_DMA_Abort_IT>
      break;
 801085a:	e010      	b.n	801087e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68da      	ldr	r2, [r3, #12]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801086a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010870:	4618      	mov	r0, r3
 8010872:	f7f8 f85f 	bl	8008934 <HAL_DMA_Abort_IT>
      break;
 8010876:	e002      	b.n	801087e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8010878:	2301      	movs	r3, #1
 801087a:	73fb      	strb	r3, [r7, #15]
      break;
 801087c:	bf00      	nop
  }

  if (status == HAL_OK)
 801087e:	7bfb      	ldrb	r3, [r7, #15]
 8010880:	2b00      	cmp	r3, #0
 8010882:	f040 8081 	bne.w	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	4618      	mov	r0, r3
 8010890:	f001 f894 	bl	80119bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a3e      	ldr	r2, [pc, #248]	; (8010994 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d013      	beq.n	80108c6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a3d      	ldr	r2, [pc, #244]	; (8010998 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d00e      	beq.n	80108c6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a3b      	ldr	r2, [pc, #236]	; (801099c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d009      	beq.n	80108c6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4a3a      	ldr	r2, [pc, #232]	; (80109a0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d004      	beq.n	80108c6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4a38      	ldr	r2, [pc, #224]	; (80109a4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d101      	bne.n	80108ca <HAL_TIM_PWM_Stop_DMA+0x112>
 80108c6:	2301      	movs	r3, #1
 80108c8:	e000      	b.n	80108cc <HAL_TIM_PWM_Stop_DMA+0x114>
 80108ca:	2300      	movs	r3, #0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d017      	beq.n	8010900 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	6a1a      	ldr	r2, [r3, #32]
 80108d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80108da:	4013      	ands	r3, r2
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10f      	bne.n	8010900 <HAL_TIM_PWM_Stop_DMA+0x148>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	6a1a      	ldr	r2, [r3, #32]
 80108e6:	f240 4344 	movw	r3, #1092	; 0x444
 80108ea:	4013      	ands	r3, r2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d107      	bne.n	8010900 <HAL_TIM_PWM_Stop_DMA+0x148>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80108fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	6a1a      	ldr	r2, [r3, #32]
 8010906:	f241 1311 	movw	r3, #4369	; 0x1111
 801090a:	4013      	ands	r3, r2
 801090c:	2b00      	cmp	r3, #0
 801090e:	d10f      	bne.n	8010930 <HAL_TIM_PWM_Stop_DMA+0x178>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6a1a      	ldr	r2, [r3, #32]
 8010916:	f240 4344 	movw	r3, #1092	; 0x444
 801091a:	4013      	ands	r3, r2
 801091c:	2b00      	cmp	r3, #0
 801091e:	d107      	bne.n	8010930 <HAL_TIM_PWM_Stop_DMA+0x178>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f022 0201 	bic.w	r2, r2, #1
 801092e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d104      	bne.n	8010940 <HAL_TIM_PWM_Stop_DMA+0x188>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801093e:	e023      	b.n	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2b04      	cmp	r3, #4
 8010944:	d104      	bne.n	8010950 <HAL_TIM_PWM_Stop_DMA+0x198>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801094e:	e01b      	b.n	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b08      	cmp	r3, #8
 8010954:	d104      	bne.n	8010960 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801095e:	e013      	b.n	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	2b0c      	cmp	r3, #12
 8010964:	d104      	bne.n	8010970 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2201      	movs	r2, #1
 801096a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801096e:	e00b      	b.n	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	2b10      	cmp	r3, #16
 8010974:	d104      	bne.n	8010980 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2201      	movs	r2, #1
 801097a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801097e:	e003      	b.n	8010988 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2201      	movs	r2, #1
 8010984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8010988:	7bfb      	ldrb	r3, [r7, #15]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	40010000 	.word	0x40010000
 8010998:	40010400 	.word	0x40010400
 801099c:	40014000 	.word	0x40014000
 80109a0:	40014400 	.word	0x40014400
 80109a4:	40014800 	.word	0x40014800

080109a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b086      	sub	sp, #24
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d101      	bne.n	80109bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80109b8:	2301      	movs	r3, #1
 80109ba:	e08f      	b.n	8010adc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7f4 f80b 	bl	80049ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	2202      	movs	r2, #2
 80109da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	6899      	ldr	r1, [r3, #8]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	4b3e      	ldr	r3, [pc, #248]	; (8010ae4 <HAL_TIM_Encoder_Init+0x13c>)
 80109ea:	400b      	ands	r3, r1
 80109ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3304      	adds	r3, #4
 80109f6:	4619      	mov	r1, r3
 80109f8:	4610      	mov	r0, r2
 80109fa:	f000 fbc5 	bl	8011188 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	6a1b      	ldr	r3, [r3, #32]
 8010a14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	4b31      	ldr	r3, [pc, #196]	; (8010ae8 <HAL_TIM_Encoder_Init+0x140>)
 8010a24:	4013      	ands	r3, r2
 8010a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	689a      	ldr	r2, [r3, #8]
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	699b      	ldr	r3, [r3, #24]
 8010a30:	021b      	lsls	r3, r3, #8
 8010a32:	4313      	orrs	r3, r2
 8010a34:	693a      	ldr	r2, [r7, #16]
 8010a36:	4313      	orrs	r3, r2
 8010a38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010a3a:	693a      	ldr	r2, [r7, #16]
 8010a3c:	4b2b      	ldr	r3, [pc, #172]	; (8010aec <HAL_TIM_Encoder_Init+0x144>)
 8010a3e:	4013      	ands	r3, r2
 8010a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	4b2a      	ldr	r3, [pc, #168]	; (8010af0 <HAL_TIM_Encoder_Init+0x148>)
 8010a46:	4013      	ands	r3, r2
 8010a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	68da      	ldr	r2, [r3, #12]
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	69db      	ldr	r3, [r3, #28]
 8010a52:	021b      	lsls	r3, r3, #8
 8010a54:	4313      	orrs	r3, r2
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	691b      	ldr	r3, [r3, #16]
 8010a60:	011a      	lsls	r2, r3, #4
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	6a1b      	ldr	r3, [r3, #32]
 8010a66:	031b      	lsls	r3, r3, #12
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010a76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010a7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	685a      	ldr	r2, [r3, #4]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	011b      	lsls	r3, r3, #4
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	697a      	ldr	r2, [r7, #20]
 8010a98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	693a      	ldr	r2, [r7, #16]
 8010aa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2201      	movs	r2, #1
 8010aae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2201      	movs	r2, #1
 8010abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2201      	movs	r2, #1
 8010ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	fffebff8 	.word	0xfffebff8
 8010ae8:	fffffcfc 	.word	0xfffffcfc
 8010aec:	fffff3f3 	.word	0xfffff3f3
 8010af0:	ffff0f0f 	.word	0xffff0f0f

08010af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	691b      	ldr	r3, [r3, #16]
 8010b02:	f003 0302 	and.w	r3, r3, #2
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d122      	bne.n	8010b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	f003 0302 	and.w	r3, r3, #2
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d11b      	bne.n	8010b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f06f 0202 	mvn.w	r2, #2
 8010b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	699b      	ldr	r3, [r3, #24]
 8010b2e:	f003 0303 	and.w	r3, r3, #3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d003      	beq.n	8010b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fb12 	bl	8011160 <HAL_TIM_IC_CaptureCallback>
 8010b3c:	e005      	b.n	8010b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fb04 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7f1 fee1 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	691b      	ldr	r3, [r3, #16]
 8010b56:	f003 0304 	and.w	r3, r3, #4
 8010b5a:	2b04      	cmp	r3, #4
 8010b5c:	d122      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	f003 0304 	and.w	r3, r3, #4
 8010b68:	2b04      	cmp	r3, #4
 8010b6a:	d11b      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f06f 0204 	mvn.w	r2, #4
 8010b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2202      	movs	r2, #2
 8010b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 fae8 	bl	8011160 <HAL_TIM_IC_CaptureCallback>
 8010b90:	e005      	b.n	8010b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 fada 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7f1 feb7 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	f003 0308 	and.w	r3, r3, #8
 8010bae:	2b08      	cmp	r3, #8
 8010bb0:	d122      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f003 0308 	and.w	r3, r3, #8
 8010bbc:	2b08      	cmp	r3, #8
 8010bbe:	d11b      	bne.n	8010bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f06f 0208 	mvn.w	r2, #8
 8010bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2204      	movs	r2, #4
 8010bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	69db      	ldr	r3, [r3, #28]
 8010bd6:	f003 0303 	and.w	r3, r3, #3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d003      	beq.n	8010be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fabe 	bl	8011160 <HAL_TIM_IC_CaptureCallback>
 8010be4:	e005      	b.n	8010bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 fab0 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7f1 fe8d 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	f003 0310 	and.w	r3, r3, #16
 8010c02:	2b10      	cmp	r3, #16
 8010c04:	d122      	bne.n	8010c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	f003 0310 	and.w	r3, r3, #16
 8010c10:	2b10      	cmp	r3, #16
 8010c12:	d11b      	bne.n	8010c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	f06f 0210 	mvn.w	r2, #16
 8010c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2208      	movs	r2, #8
 8010c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d003      	beq.n	8010c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 fa94 	bl	8011160 <HAL_TIM_IC_CaptureCallback>
 8010c38:	e005      	b.n	8010c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f000 fa86 	bl	801114c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f7f1 fe63 	bl	800290c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d10e      	bne.n	8010c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	f003 0301 	and.w	r3, r3, #1
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d107      	bne.n	8010c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f06f 0201 	mvn.w	r2, #1
 8010c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7f1 fe9a 	bl	80029ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	691b      	ldr	r3, [r3, #16]
 8010c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c82:	2b80      	cmp	r3, #128	; 0x80
 8010c84:	d10e      	bne.n	8010ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c90:	2b80      	cmp	r3, #128	; 0x80
 8010c92:	d107      	bne.n	8010ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 fff8 	bl	8011c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cb2:	d10e      	bne.n	8010cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cbe:	2b80      	cmp	r3, #128	; 0x80
 8010cc0:	d107      	bne.n	8010cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f000 ffeb 	bl	8011ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	691b      	ldr	r3, [r3, #16]
 8010cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cdc:	2b40      	cmp	r3, #64	; 0x40
 8010cde:	d10e      	bne.n	8010cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cea:	2b40      	cmp	r3, #64	; 0x40
 8010cec:	d107      	bne.n	8010cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 fa3b 	bl	8011174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	f003 0320 	and.w	r3, r3, #32
 8010d08:	2b20      	cmp	r3, #32
 8010d0a:	d10e      	bne.n	8010d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	f003 0320 	and.w	r3, r3, #32
 8010d16:	2b20      	cmp	r3, #32
 8010d18:	d107      	bne.n	8010d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f06f 0220 	mvn.w	r2, #32
 8010d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 ffab 	bl	8011c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010d2a:	bf00      	nop
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d101      	bne.n	8010d52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010d4e:	2302      	movs	r3, #2
 8010d50:	e0ff      	b.n	8010f52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2201      	movs	r2, #1
 8010d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b14      	cmp	r3, #20
 8010d5e:	f200 80f0 	bhi.w	8010f42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010d62:	a201      	add	r2, pc, #4	; (adr r2, 8010d68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d68:	08010dbd 	.word	0x08010dbd
 8010d6c:	08010f43 	.word	0x08010f43
 8010d70:	08010f43 	.word	0x08010f43
 8010d74:	08010f43 	.word	0x08010f43
 8010d78:	08010dfd 	.word	0x08010dfd
 8010d7c:	08010f43 	.word	0x08010f43
 8010d80:	08010f43 	.word	0x08010f43
 8010d84:	08010f43 	.word	0x08010f43
 8010d88:	08010e3f 	.word	0x08010e3f
 8010d8c:	08010f43 	.word	0x08010f43
 8010d90:	08010f43 	.word	0x08010f43
 8010d94:	08010f43 	.word	0x08010f43
 8010d98:	08010e7f 	.word	0x08010e7f
 8010d9c:	08010f43 	.word	0x08010f43
 8010da0:	08010f43 	.word	0x08010f43
 8010da4:	08010f43 	.word	0x08010f43
 8010da8:	08010ec1 	.word	0x08010ec1
 8010dac:	08010f43 	.word	0x08010f43
 8010db0:	08010f43 	.word	0x08010f43
 8010db4:	08010f43 	.word	0x08010f43
 8010db8:	08010f01 	.word	0x08010f01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68b9      	ldr	r1, [r7, #8]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 fa86 	bl	80112d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	699a      	ldr	r2, [r3, #24]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f042 0208 	orr.w	r2, r2, #8
 8010dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	699a      	ldr	r2, [r3, #24]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f022 0204 	bic.w	r2, r2, #4
 8010de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	6999      	ldr	r1, [r3, #24]
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	691a      	ldr	r2, [r3, #16]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	430a      	orrs	r2, r1
 8010df8:	619a      	str	r2, [r3, #24]
      break;
 8010dfa:	e0a5      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	68b9      	ldr	r1, [r7, #8]
 8010e02:	4618      	mov	r0, r3
 8010e04:	f000 faf6 	bl	80113f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	699a      	ldr	r2, [r3, #24]
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	699a      	ldr	r2, [r3, #24]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	6999      	ldr	r1, [r3, #24]
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	021a      	lsls	r2, r3, #8
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	430a      	orrs	r2, r1
 8010e3a:	619a      	str	r2, [r3, #24]
      break;
 8010e3c:	e084      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68b9      	ldr	r1, [r7, #8]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 fb5f 	bl	8011508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	69da      	ldr	r2, [r3, #28]
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f042 0208 	orr.w	r2, r2, #8
 8010e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	69da      	ldr	r2, [r3, #28]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f022 0204 	bic.w	r2, r2, #4
 8010e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	69d9      	ldr	r1, [r3, #28]
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	691a      	ldr	r2, [r3, #16]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	430a      	orrs	r2, r1
 8010e7a:	61da      	str	r2, [r3, #28]
      break;
 8010e7c:	e064      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68b9      	ldr	r1, [r7, #8]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 fbc7 	bl	8011618 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	69da      	ldr	r2, [r3, #28]
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	69da      	ldr	r2, [r3, #28]
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	69d9      	ldr	r1, [r3, #28]
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	691b      	ldr	r3, [r3, #16]
 8010eb4:	021a      	lsls	r2, r3, #8
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	430a      	orrs	r2, r1
 8010ebc:	61da      	str	r2, [r3, #28]
      break;
 8010ebe:	e043      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	68b9      	ldr	r1, [r7, #8]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 fc10 	bl	80116ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f042 0208 	orr.w	r2, r2, #8
 8010eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f022 0204 	bic.w	r2, r2, #4
 8010eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	691a      	ldr	r2, [r3, #16]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	430a      	orrs	r2, r1
 8010efc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010efe:	e023      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68b9      	ldr	r1, [r7, #8]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 fc54 	bl	80117b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	021a      	lsls	r2, r3, #8
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	430a      	orrs	r2, r1
 8010f3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f40:	e002      	b.n	8010f48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010f42:	2301      	movs	r3, #1
 8010f44:	75fb      	strb	r3, [r7, #23]
      break;
 8010f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3718      	adds	r7, #24
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop

08010f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d101      	bne.n	8010f78 <HAL_TIM_ConfigClockSource+0x1c>
 8010f74:	2302      	movs	r3, #2
 8010f76:	e0dc      	b.n	8011132 <HAL_TIM_ConfigClockSource+0x1d6>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2202      	movs	r2, #2
 8010f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	689b      	ldr	r3, [r3, #8]
 8010f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	4b6a      	ldr	r3, [pc, #424]	; (801113c <HAL_TIM_ConfigClockSource+0x1e0>)
 8010f94:	4013      	ands	r3, r2
 8010f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	68ba      	ldr	r2, [r7, #8]
 8010fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4a64      	ldr	r2, [pc, #400]	; (8011140 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	f000 80a9 	beq.w	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fb4:	4a62      	ldr	r2, [pc, #392]	; (8011140 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	f200 80ae 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fbc:	4a61      	ldr	r2, [pc, #388]	; (8011144 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	f000 80a1 	beq.w	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fc4:	4a5f      	ldr	r2, [pc, #380]	; (8011144 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	f200 80a6 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fcc:	4a5e      	ldr	r2, [pc, #376]	; (8011148 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	f000 8099 	beq.w	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fd4:	4a5c      	ldr	r2, [pc, #368]	; (8011148 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	f200 809e 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010fe0:	f000 8091 	beq.w	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fe4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010fe8:	f200 8096 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ff0:	f000 8089 	beq.w	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8010ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ff8:	f200 808e 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011000:	d03e      	beq.n	8011080 <HAL_TIM_ConfigClockSource+0x124>
 8011002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011006:	f200 8087 	bhi.w	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 801100a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801100e:	f000 8086 	beq.w	801111e <HAL_TIM_ConfigClockSource+0x1c2>
 8011012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011016:	d87f      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011018:	2b70      	cmp	r3, #112	; 0x70
 801101a:	d01a      	beq.n	8011052 <HAL_TIM_ConfigClockSource+0xf6>
 801101c:	2b70      	cmp	r3, #112	; 0x70
 801101e:	d87b      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011020:	2b60      	cmp	r3, #96	; 0x60
 8011022:	d050      	beq.n	80110c6 <HAL_TIM_ConfigClockSource+0x16a>
 8011024:	2b60      	cmp	r3, #96	; 0x60
 8011026:	d877      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011028:	2b50      	cmp	r3, #80	; 0x50
 801102a:	d03c      	beq.n	80110a6 <HAL_TIM_ConfigClockSource+0x14a>
 801102c:	2b50      	cmp	r3, #80	; 0x50
 801102e:	d873      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011030:	2b40      	cmp	r3, #64	; 0x40
 8011032:	d058      	beq.n	80110e6 <HAL_TIM_ConfigClockSource+0x18a>
 8011034:	2b40      	cmp	r3, #64	; 0x40
 8011036:	d86f      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011038:	2b30      	cmp	r3, #48	; 0x30
 801103a:	d064      	beq.n	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 801103c:	2b30      	cmp	r3, #48	; 0x30
 801103e:	d86b      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011040:	2b20      	cmp	r3, #32
 8011042:	d060      	beq.n	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8011044:	2b20      	cmp	r3, #32
 8011046:	d867      	bhi.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
 8011048:	2b00      	cmp	r3, #0
 801104a:	d05c      	beq.n	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 801104c:	2b10      	cmp	r3, #16
 801104e:	d05a      	beq.n	8011106 <HAL_TIM_ConfigClockSource+0x1aa>
 8011050:	e062      	b.n	8011118 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6818      	ldr	r0, [r3, #0]
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	6899      	ldr	r1, [r3, #8]
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	685a      	ldr	r2, [r3, #4]
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	f000 fc8b 	bl	801197c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	609a      	str	r2, [r3, #8]
      break;
 801107e:	e04f      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6818      	ldr	r0, [r3, #0]
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	6899      	ldr	r1, [r3, #8]
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	685a      	ldr	r2, [r3, #4]
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	f000 fc74 	bl	801197c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	689a      	ldr	r2, [r3, #8]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80110a2:	609a      	str	r2, [r3, #8]
      break;
 80110a4:	e03c      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6818      	ldr	r0, [r3, #0]
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	6859      	ldr	r1, [r3, #4]
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	461a      	mov	r2, r3
 80110b4:	f000 fbe4 	bl	8011880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2150      	movs	r1, #80	; 0x50
 80110be:	4618      	mov	r0, r3
 80110c0:	f000 fc3e 	bl	8011940 <TIM_ITRx_SetConfig>
      break;
 80110c4:	e02c      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6818      	ldr	r0, [r3, #0]
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	6859      	ldr	r1, [r3, #4]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	68db      	ldr	r3, [r3, #12]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f000 fc03 	bl	80118de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2160      	movs	r1, #96	; 0x60
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 fc2e 	bl	8011940 <TIM_ITRx_SetConfig>
      break;
 80110e4:	e01c      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6818      	ldr	r0, [r3, #0]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	6859      	ldr	r1, [r3, #4]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	461a      	mov	r2, r3
 80110f4:	f000 fbc4 	bl	8011880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2140      	movs	r1, #64	; 0x40
 80110fe:	4618      	mov	r0, r3
 8011100:	f000 fc1e 	bl	8011940 <TIM_ITRx_SetConfig>
      break;
 8011104:	e00c      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4619      	mov	r1, r3
 8011110:	4610      	mov	r0, r2
 8011112:	f000 fc15 	bl	8011940 <TIM_ITRx_SetConfig>
      break;
 8011116:	e003      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011118:	2301      	movs	r3, #1
 801111a:	73fb      	strb	r3, [r7, #15]
      break;
 801111c:	e000      	b.n	8011120 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801111e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2201      	movs	r2, #1
 8011124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011130:	7bfb      	ldrb	r3, [r7, #15]
}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	ffceff88 	.word	0xffceff88
 8011140:	00100040 	.word	0x00100040
 8011144:	00100030 	.word	0x00100030
 8011148:	00100020 	.word	0x00100020

0801114c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801114c:	b480      	push	{r7}
 801114e:	b083      	sub	sp, #12
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011154:	bf00      	nop
 8011156:	370c      	adds	r7, #12
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011160:	b480      	push	{r7}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011168:	bf00      	nop
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801117c:	bf00      	nop
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr

08011188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011188:	b480      	push	{r7}
 801118a:	b085      	sub	sp, #20
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a44      	ldr	r2, [pc, #272]	; (80112ac <TIM_Base_SetConfig+0x124>)
 801119c:	4293      	cmp	r3, r2
 801119e:	d013      	beq.n	80111c8 <TIM_Base_SetConfig+0x40>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111a6:	d00f      	beq.n	80111c8 <TIM_Base_SetConfig+0x40>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4a41      	ldr	r2, [pc, #260]	; (80112b0 <TIM_Base_SetConfig+0x128>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d00b      	beq.n	80111c8 <TIM_Base_SetConfig+0x40>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a40      	ldr	r2, [pc, #256]	; (80112b4 <TIM_Base_SetConfig+0x12c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d007      	beq.n	80111c8 <TIM_Base_SetConfig+0x40>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a3f      	ldr	r2, [pc, #252]	; (80112b8 <TIM_Base_SetConfig+0x130>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d003      	beq.n	80111c8 <TIM_Base_SetConfig+0x40>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4a3e      	ldr	r2, [pc, #248]	; (80112bc <TIM_Base_SetConfig+0x134>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d108      	bne.n	80111da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	4313      	orrs	r3, r2
 80111d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4a33      	ldr	r2, [pc, #204]	; (80112ac <TIM_Base_SetConfig+0x124>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d027      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111e8:	d023      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4a30      	ldr	r2, [pc, #192]	; (80112b0 <TIM_Base_SetConfig+0x128>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d01f      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a2f      	ldr	r2, [pc, #188]	; (80112b4 <TIM_Base_SetConfig+0x12c>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d01b      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4a2e      	ldr	r2, [pc, #184]	; (80112b8 <TIM_Base_SetConfig+0x130>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d017      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4a2d      	ldr	r2, [pc, #180]	; (80112bc <TIM_Base_SetConfig+0x134>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d013      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4a2c      	ldr	r2, [pc, #176]	; (80112c0 <TIM_Base_SetConfig+0x138>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d00f      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a2b      	ldr	r2, [pc, #172]	; (80112c4 <TIM_Base_SetConfig+0x13c>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d00b      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4a2a      	ldr	r2, [pc, #168]	; (80112c8 <TIM_Base_SetConfig+0x140>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d007      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4a29      	ldr	r2, [pc, #164]	; (80112cc <TIM_Base_SetConfig+0x144>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d003      	beq.n	8011232 <TIM_Base_SetConfig+0xaa>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4a28      	ldr	r2, [pc, #160]	; (80112d0 <TIM_Base_SetConfig+0x148>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d108      	bne.n	8011244 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	695b      	ldr	r3, [r3, #20]
 801124e:	4313      	orrs	r3, r2
 8011250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	689a      	ldr	r2, [r3, #8]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4a10      	ldr	r2, [pc, #64]	; (80112ac <TIM_Base_SetConfig+0x124>)
 801126c:	4293      	cmp	r3, r2
 801126e:	d00f      	beq.n	8011290 <TIM_Base_SetConfig+0x108>
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	4a12      	ldr	r2, [pc, #72]	; (80112bc <TIM_Base_SetConfig+0x134>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d00b      	beq.n	8011290 <TIM_Base_SetConfig+0x108>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	4a11      	ldr	r2, [pc, #68]	; (80112c0 <TIM_Base_SetConfig+0x138>)
 801127c:	4293      	cmp	r3, r2
 801127e:	d007      	beq.n	8011290 <TIM_Base_SetConfig+0x108>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4a10      	ldr	r2, [pc, #64]	; (80112c4 <TIM_Base_SetConfig+0x13c>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d003      	beq.n	8011290 <TIM_Base_SetConfig+0x108>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4a0f      	ldr	r2, [pc, #60]	; (80112c8 <TIM_Base_SetConfig+0x140>)
 801128c:	4293      	cmp	r3, r2
 801128e:	d103      	bne.n	8011298 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	691a      	ldr	r2, [r3, #16]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	615a      	str	r2, [r3, #20]
}
 801129e:	bf00      	nop
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a8:	4770      	bx	lr
 80112aa:	bf00      	nop
 80112ac:	40010000 	.word	0x40010000
 80112b0:	40000400 	.word	0x40000400
 80112b4:	40000800 	.word	0x40000800
 80112b8:	40000c00 	.word	0x40000c00
 80112bc:	40010400 	.word	0x40010400
 80112c0:	40014000 	.word	0x40014000
 80112c4:	40014400 	.word	0x40014400
 80112c8:	40014800 	.word	0x40014800
 80112cc:	4000e000 	.word	0x4000e000
 80112d0:	4000e400 	.word	0x4000e400

080112d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b087      	sub	sp, #28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6a1b      	ldr	r3, [r3, #32]
 80112e2:	f023 0201 	bic.w	r2, r3, #1
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a1b      	ldr	r3, [r3, #32]
 80112ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	4b37      	ldr	r3, [pc, #220]	; (80113dc <TIM_OC1_SetConfig+0x108>)
 8011300:	4013      	ands	r3, r2
 8011302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f023 0303 	bic.w	r3, r3, #3
 801130a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	4313      	orrs	r3, r2
 8011314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f023 0302 	bic.w	r3, r3, #2
 801131c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	697a      	ldr	r2, [r7, #20]
 8011324:	4313      	orrs	r3, r2
 8011326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	4a2d      	ldr	r2, [pc, #180]	; (80113e0 <TIM_OC1_SetConfig+0x10c>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d00f      	beq.n	8011350 <TIM_OC1_SetConfig+0x7c>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4a2c      	ldr	r2, [pc, #176]	; (80113e4 <TIM_OC1_SetConfig+0x110>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d00b      	beq.n	8011350 <TIM_OC1_SetConfig+0x7c>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a2b      	ldr	r2, [pc, #172]	; (80113e8 <TIM_OC1_SetConfig+0x114>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d007      	beq.n	8011350 <TIM_OC1_SetConfig+0x7c>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	4a2a      	ldr	r2, [pc, #168]	; (80113ec <TIM_OC1_SetConfig+0x118>)
 8011344:	4293      	cmp	r3, r2
 8011346:	d003      	beq.n	8011350 <TIM_OC1_SetConfig+0x7c>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4a29      	ldr	r2, [pc, #164]	; (80113f0 <TIM_OC1_SetConfig+0x11c>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d10c      	bne.n	801136a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	f023 0308 	bic.w	r3, r3, #8
 8011356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	697a      	ldr	r2, [r7, #20]
 801135e:	4313      	orrs	r3, r2
 8011360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	f023 0304 	bic.w	r3, r3, #4
 8011368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	4a1c      	ldr	r2, [pc, #112]	; (80113e0 <TIM_OC1_SetConfig+0x10c>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d00f      	beq.n	8011392 <TIM_OC1_SetConfig+0xbe>
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4a1b      	ldr	r2, [pc, #108]	; (80113e4 <TIM_OC1_SetConfig+0x110>)
 8011376:	4293      	cmp	r3, r2
 8011378:	d00b      	beq.n	8011392 <TIM_OC1_SetConfig+0xbe>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4a1a      	ldr	r2, [pc, #104]	; (80113e8 <TIM_OC1_SetConfig+0x114>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d007      	beq.n	8011392 <TIM_OC1_SetConfig+0xbe>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4a19      	ldr	r2, [pc, #100]	; (80113ec <TIM_OC1_SetConfig+0x118>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d003      	beq.n	8011392 <TIM_OC1_SetConfig+0xbe>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4a18      	ldr	r2, [pc, #96]	; (80113f0 <TIM_OC1_SetConfig+0x11c>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d111      	bne.n	80113b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80113a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	693a      	ldr	r2, [r7, #16]
 80113a8:	4313      	orrs	r3, r2
 80113aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	699b      	ldr	r3, [r3, #24]
 80113b0:	693a      	ldr	r2, [r7, #16]
 80113b2:	4313      	orrs	r3, r2
 80113b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	693a      	ldr	r2, [r7, #16]
 80113ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	685a      	ldr	r2, [r3, #4]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	697a      	ldr	r2, [r7, #20]
 80113ce:	621a      	str	r2, [r3, #32]
}
 80113d0:	bf00      	nop
 80113d2:	371c      	adds	r7, #28
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	fffeff8f 	.word	0xfffeff8f
 80113e0:	40010000 	.word	0x40010000
 80113e4:	40010400 	.word	0x40010400
 80113e8:	40014000 	.word	0x40014000
 80113ec:	40014400 	.word	0x40014400
 80113f0:	40014800 	.word	0x40014800

080113f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a1b      	ldr	r3, [r3, #32]
 8011402:	f023 0210 	bic.w	r2, r3, #16
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	699b      	ldr	r3, [r3, #24]
 801141a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	4b34      	ldr	r3, [pc, #208]	; (80114f0 <TIM_OC2_SetConfig+0xfc>)
 8011420:	4013      	ands	r3, r2
 8011422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801142a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	021b      	lsls	r3, r3, #8
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	4313      	orrs	r3, r2
 8011436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	f023 0320 	bic.w	r3, r3, #32
 801143e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	689b      	ldr	r3, [r3, #8]
 8011444:	011b      	lsls	r3, r3, #4
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	4313      	orrs	r3, r2
 801144a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4a29      	ldr	r2, [pc, #164]	; (80114f4 <TIM_OC2_SetConfig+0x100>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d003      	beq.n	801145c <TIM_OC2_SetConfig+0x68>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	4a28      	ldr	r2, [pc, #160]	; (80114f8 <TIM_OC2_SetConfig+0x104>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d10d      	bne.n	8011478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	011b      	lsls	r3, r3, #4
 801146a:	697a      	ldr	r2, [r7, #20]
 801146c:	4313      	orrs	r3, r2
 801146e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	4a1e      	ldr	r2, [pc, #120]	; (80114f4 <TIM_OC2_SetConfig+0x100>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d00f      	beq.n	80114a0 <TIM_OC2_SetConfig+0xac>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a1d      	ldr	r2, [pc, #116]	; (80114f8 <TIM_OC2_SetConfig+0x104>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d00b      	beq.n	80114a0 <TIM_OC2_SetConfig+0xac>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4a1c      	ldr	r2, [pc, #112]	; (80114fc <TIM_OC2_SetConfig+0x108>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d007      	beq.n	80114a0 <TIM_OC2_SetConfig+0xac>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	4a1b      	ldr	r2, [pc, #108]	; (8011500 <TIM_OC2_SetConfig+0x10c>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d003      	beq.n	80114a0 <TIM_OC2_SetConfig+0xac>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	4a1a      	ldr	r2, [pc, #104]	; (8011504 <TIM_OC2_SetConfig+0x110>)
 801149c:	4293      	cmp	r3, r2
 801149e:	d113      	bne.n	80114c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	695b      	ldr	r3, [r3, #20]
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	693a      	ldr	r2, [r7, #16]
 80114b8:	4313      	orrs	r3, r2
 80114ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	693a      	ldr	r2, [r7, #16]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	693a      	ldr	r2, [r7, #16]
 80114cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	685a      	ldr	r2, [r3, #4]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	697a      	ldr	r2, [r7, #20]
 80114e0:	621a      	str	r2, [r3, #32]
}
 80114e2:	bf00      	nop
 80114e4:	371c      	adds	r7, #28
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	feff8fff 	.word	0xfeff8fff
 80114f4:	40010000 	.word	0x40010000
 80114f8:	40010400 	.word	0x40010400
 80114fc:	40014000 	.word	0x40014000
 8011500:	40014400 	.word	0x40014400
 8011504:	40014800 	.word	0x40014800

08011508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011508:	b480      	push	{r7}
 801150a:	b087      	sub	sp, #28
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a1b      	ldr	r3, [r3, #32]
 8011522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	69db      	ldr	r3, [r3, #28]
 801152e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	4b33      	ldr	r3, [pc, #204]	; (8011600 <TIM_OC3_SetConfig+0xf8>)
 8011534:	4013      	ands	r3, r2
 8011536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f023 0303 	bic.w	r3, r3, #3
 801153e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68fa      	ldr	r2, [r7, #12]
 8011546:	4313      	orrs	r3, r2
 8011548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	021b      	lsls	r3, r3, #8
 8011558:	697a      	ldr	r2, [r7, #20]
 801155a:	4313      	orrs	r3, r2
 801155c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a28      	ldr	r2, [pc, #160]	; (8011604 <TIM_OC3_SetConfig+0xfc>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d003      	beq.n	801156e <TIM_OC3_SetConfig+0x66>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a27      	ldr	r2, [pc, #156]	; (8011608 <TIM_OC3_SetConfig+0x100>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d10d      	bne.n	801158a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	021b      	lsls	r3, r3, #8
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	4313      	orrs	r3, r2
 8011580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4a1d      	ldr	r2, [pc, #116]	; (8011604 <TIM_OC3_SetConfig+0xfc>)
 801158e:	4293      	cmp	r3, r2
 8011590:	d00f      	beq.n	80115b2 <TIM_OC3_SetConfig+0xaa>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4a1c      	ldr	r2, [pc, #112]	; (8011608 <TIM_OC3_SetConfig+0x100>)
 8011596:	4293      	cmp	r3, r2
 8011598:	d00b      	beq.n	80115b2 <TIM_OC3_SetConfig+0xaa>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4a1b      	ldr	r2, [pc, #108]	; (801160c <TIM_OC3_SetConfig+0x104>)
 801159e:	4293      	cmp	r3, r2
 80115a0:	d007      	beq.n	80115b2 <TIM_OC3_SetConfig+0xaa>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4a1a      	ldr	r2, [pc, #104]	; (8011610 <TIM_OC3_SetConfig+0x108>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d003      	beq.n	80115b2 <TIM_OC3_SetConfig+0xaa>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4a19      	ldr	r2, [pc, #100]	; (8011614 <TIM_OC3_SetConfig+0x10c>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d113      	bne.n	80115da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	695b      	ldr	r3, [r3, #20]
 80115c6:	011b      	lsls	r3, r3, #4
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	4313      	orrs	r3, r2
 80115cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	699b      	ldr	r3, [r3, #24]
 80115d2:	011b      	lsls	r3, r3, #4
 80115d4:	693a      	ldr	r2, [r7, #16]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	693a      	ldr	r2, [r7, #16]
 80115de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	685a      	ldr	r2, [r3, #4]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	697a      	ldr	r2, [r7, #20]
 80115f2:	621a      	str	r2, [r3, #32]
}
 80115f4:	bf00      	nop
 80115f6:	371c      	adds	r7, #28
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	fffeff8f 	.word	0xfffeff8f
 8011604:	40010000 	.word	0x40010000
 8011608:	40010400 	.word	0x40010400
 801160c:	40014000 	.word	0x40014000
 8011610:	40014400 	.word	0x40014400
 8011614:	40014800 	.word	0x40014800

08011618 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011618:	b480      	push	{r7}
 801161a:	b087      	sub	sp, #28
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a1b      	ldr	r3, [r3, #32]
 8011632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	69db      	ldr	r3, [r3, #28]
 801163e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	4b24      	ldr	r3, [pc, #144]	; (80116d4 <TIM_OC4_SetConfig+0xbc>)
 8011644:	4013      	ands	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801164e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	021b      	lsls	r3, r3, #8
 8011656:	68fa      	ldr	r2, [r7, #12]
 8011658:	4313      	orrs	r3, r2
 801165a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	031b      	lsls	r3, r3, #12
 801166a:	693a      	ldr	r2, [r7, #16]
 801166c:	4313      	orrs	r3, r2
 801166e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	4a19      	ldr	r2, [pc, #100]	; (80116d8 <TIM_OC4_SetConfig+0xc0>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d00f      	beq.n	8011698 <TIM_OC4_SetConfig+0x80>
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4a18      	ldr	r2, [pc, #96]	; (80116dc <TIM_OC4_SetConfig+0xc4>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d00b      	beq.n	8011698 <TIM_OC4_SetConfig+0x80>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4a17      	ldr	r2, [pc, #92]	; (80116e0 <TIM_OC4_SetConfig+0xc8>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d007      	beq.n	8011698 <TIM_OC4_SetConfig+0x80>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4a16      	ldr	r2, [pc, #88]	; (80116e4 <TIM_OC4_SetConfig+0xcc>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d003      	beq.n	8011698 <TIM_OC4_SetConfig+0x80>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4a15      	ldr	r2, [pc, #84]	; (80116e8 <TIM_OC4_SetConfig+0xd0>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d109      	bne.n	80116ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801169e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	695b      	ldr	r3, [r3, #20]
 80116a4:	019b      	lsls	r3, r3, #6
 80116a6:	697a      	ldr	r2, [r7, #20]
 80116a8:	4313      	orrs	r3, r2
 80116aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	697a      	ldr	r2, [r7, #20]
 80116b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	68fa      	ldr	r2, [r7, #12]
 80116b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	693a      	ldr	r2, [r7, #16]
 80116c4:	621a      	str	r2, [r3, #32]
}
 80116c6:	bf00      	nop
 80116c8:	371c      	adds	r7, #28
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	feff8fff 	.word	0xfeff8fff
 80116d8:	40010000 	.word	0x40010000
 80116dc:	40010400 	.word	0x40010400
 80116e0:	40014000 	.word	0x40014000
 80116e4:	40014400 	.word	0x40014400
 80116e8:	40014800 	.word	0x40014800

080116ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b087      	sub	sp, #28
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6a1b      	ldr	r3, [r3, #32]
 8011706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	4b21      	ldr	r3, [pc, #132]	; (801179c <TIM_OC5_SetConfig+0xb0>)
 8011718:	4013      	ands	r3, r2
 801171a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	4313      	orrs	r3, r2
 8011724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801172c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	041b      	lsls	r3, r3, #16
 8011734:	693a      	ldr	r2, [r7, #16]
 8011736:	4313      	orrs	r3, r2
 8011738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4a18      	ldr	r2, [pc, #96]	; (80117a0 <TIM_OC5_SetConfig+0xb4>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d00f      	beq.n	8011762 <TIM_OC5_SetConfig+0x76>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	4a17      	ldr	r2, [pc, #92]	; (80117a4 <TIM_OC5_SetConfig+0xb8>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d00b      	beq.n	8011762 <TIM_OC5_SetConfig+0x76>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4a16      	ldr	r2, [pc, #88]	; (80117a8 <TIM_OC5_SetConfig+0xbc>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d007      	beq.n	8011762 <TIM_OC5_SetConfig+0x76>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4a15      	ldr	r2, [pc, #84]	; (80117ac <TIM_OC5_SetConfig+0xc0>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d003      	beq.n	8011762 <TIM_OC5_SetConfig+0x76>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4a14      	ldr	r2, [pc, #80]	; (80117b0 <TIM_OC5_SetConfig+0xc4>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d109      	bne.n	8011776 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	695b      	ldr	r3, [r3, #20]
 801176e:	021b      	lsls	r3, r3, #8
 8011770:	697a      	ldr	r2, [r7, #20]
 8011772:	4313      	orrs	r3, r2
 8011774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	697a      	ldr	r2, [r7, #20]
 801177a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	685a      	ldr	r2, [r3, #4]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	693a      	ldr	r2, [r7, #16]
 801178e:	621a      	str	r2, [r3, #32]
}
 8011790:	bf00      	nop
 8011792:	371c      	adds	r7, #28
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	fffeff8f 	.word	0xfffeff8f
 80117a0:	40010000 	.word	0x40010000
 80117a4:	40010400 	.word	0x40010400
 80117a8:	40014000 	.word	0x40014000
 80117ac:	40014400 	.word	0x40014400
 80117b0:	40014800 	.word	0x40014800

080117b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b087      	sub	sp, #28
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6a1b      	ldr	r3, [r3, #32]
 80117c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a1b      	ldr	r3, [r3, #32]
 80117ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	4b22      	ldr	r3, [pc, #136]	; (8011868 <TIM_OC6_SetConfig+0xb4>)
 80117e0:	4013      	ands	r3, r2
 80117e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	021b      	lsls	r3, r3, #8
 80117ea:	68fa      	ldr	r2, [r7, #12]
 80117ec:	4313      	orrs	r3, r2
 80117ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80117f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	689b      	ldr	r3, [r3, #8]
 80117fc:	051b      	lsls	r3, r3, #20
 80117fe:	693a      	ldr	r2, [r7, #16]
 8011800:	4313      	orrs	r3, r2
 8011802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a19      	ldr	r2, [pc, #100]	; (801186c <TIM_OC6_SetConfig+0xb8>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d00f      	beq.n	801182c <TIM_OC6_SetConfig+0x78>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4a18      	ldr	r2, [pc, #96]	; (8011870 <TIM_OC6_SetConfig+0xbc>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d00b      	beq.n	801182c <TIM_OC6_SetConfig+0x78>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4a17      	ldr	r2, [pc, #92]	; (8011874 <TIM_OC6_SetConfig+0xc0>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d007      	beq.n	801182c <TIM_OC6_SetConfig+0x78>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a16      	ldr	r2, [pc, #88]	; (8011878 <TIM_OC6_SetConfig+0xc4>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d003      	beq.n	801182c <TIM_OC6_SetConfig+0x78>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4a15      	ldr	r2, [pc, #84]	; (801187c <TIM_OC6_SetConfig+0xc8>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d109      	bne.n	8011840 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	695b      	ldr	r3, [r3, #20]
 8011838:	029b      	lsls	r3, r3, #10
 801183a:	697a      	ldr	r2, [r7, #20]
 801183c:	4313      	orrs	r3, r2
 801183e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	693a      	ldr	r2, [r7, #16]
 8011858:	621a      	str	r2, [r3, #32]
}
 801185a:	bf00      	nop
 801185c:	371c      	adds	r7, #28
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	feff8fff 	.word	0xfeff8fff
 801186c:	40010000 	.word	0x40010000
 8011870:	40010400 	.word	0x40010400
 8011874:	40014000 	.word	0x40014000
 8011878:	40014400 	.word	0x40014400
 801187c:	40014800 	.word	0x40014800

08011880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011880:	b480      	push	{r7}
 8011882:	b087      	sub	sp, #28
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	6a1b      	ldr	r3, [r3, #32]
 8011890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	f023 0201 	bic.w	r2, r3, #1
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	699b      	ldr	r3, [r3, #24]
 80118a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80118aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	011b      	lsls	r3, r3, #4
 80118b0:	693a      	ldr	r2, [r7, #16]
 80118b2:	4313      	orrs	r3, r2
 80118b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f023 030a 	bic.w	r3, r3, #10
 80118bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80118be:	697a      	ldr	r2, [r7, #20]
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	4313      	orrs	r3, r2
 80118c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	621a      	str	r2, [r3, #32]
}
 80118d2:	bf00      	nop
 80118d4:	371c      	adds	r7, #28
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80118de:	b480      	push	{r7}
 80118e0:	b087      	sub	sp, #28
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	60f8      	str	r0, [r7, #12]
 80118e6:	60b9      	str	r1, [r7, #8]
 80118e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	6a1b      	ldr	r3, [r3, #32]
 80118ee:	f023 0210 	bic.w	r2, r3, #16
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	699b      	ldr	r3, [r3, #24]
 80118fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6a1b      	ldr	r3, [r3, #32]
 8011900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	031b      	lsls	r3, r3, #12
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	4313      	orrs	r3, r2
 8011912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801191a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	011b      	lsls	r3, r3, #4
 8011920:	693a      	ldr	r2, [r7, #16]
 8011922:	4313      	orrs	r3, r2
 8011924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	697a      	ldr	r2, [r7, #20]
 801192a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	693a      	ldr	r2, [r7, #16]
 8011930:	621a      	str	r2, [r3, #32]
}
 8011932:	bf00      	nop
 8011934:	371c      	adds	r7, #28
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
	...

08011940 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	689b      	ldr	r3, [r3, #8]
 801194e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	4b09      	ldr	r3, [pc, #36]	; (8011978 <TIM_ITRx_SetConfig+0x38>)
 8011954:	4013      	ands	r3, r2
 8011956:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4313      	orrs	r3, r2
 801195e:	f043 0307 	orr.w	r3, r3, #7
 8011962:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	609a      	str	r2, [r3, #8]
}
 801196a:	bf00      	nop
 801196c:	3714      	adds	r7, #20
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	ffcfff8f 	.word	0xffcfff8f

0801197c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801197c:	b480      	push	{r7}
 801197e:	b087      	sub	sp, #28
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	607a      	str	r2, [r7, #4]
 8011988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	021a      	lsls	r2, r3, #8
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	431a      	orrs	r2, r3
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	4313      	orrs	r3, r2
 80119a4:	697a      	ldr	r2, [r7, #20]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	697a      	ldr	r2, [r7, #20]
 80119ae:	609a      	str	r2, [r3, #8]
}
 80119b0:	bf00      	nop
 80119b2:	371c      	adds	r7, #28
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80119bc:	b480      	push	{r7}
 80119be:	b087      	sub	sp, #28
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	f003 031f 	and.w	r3, r3, #31
 80119ce:	2201      	movs	r2, #1
 80119d0:	fa02 f303 	lsl.w	r3, r2, r3
 80119d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6a1a      	ldr	r2, [r3, #32]
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	43db      	mvns	r3, r3
 80119de:	401a      	ands	r2, r3
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	6a1a      	ldr	r2, [r3, #32]
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	f003 031f 	and.w	r3, r3, #31
 80119ee:	6879      	ldr	r1, [r7, #4]
 80119f0:	fa01 f303 	lsl.w	r3, r1, r3
 80119f4:	431a      	orrs	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	621a      	str	r2, [r3, #32]
}
 80119fa:	bf00      	nop
 80119fc:	371c      	adds	r7, #28
 80119fe:	46bd      	mov	sp, r7
 8011a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a04:	4770      	bx	lr
	...

08011a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d101      	bne.n	8011a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011a1c:	2302      	movs	r3, #2
 8011a1e:	e077      	b.n	8011b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2201      	movs	r2, #1
 8011a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2202      	movs	r2, #2
 8011a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	689b      	ldr	r3, [r3, #8]
 8011a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4a35      	ldr	r2, [pc, #212]	; (8011b1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d004      	beq.n	8011a54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a34      	ldr	r2, [pc, #208]	; (8011b20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d108      	bne.n	8011a66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011a5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	4313      	orrs	r3, r2
 8011a64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	68fa      	ldr	r2, [r7, #12]
 8011a74:	4313      	orrs	r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	4a25      	ldr	r2, [pc, #148]	; (8011b1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d02c      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a92:	d027      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4a22      	ldr	r2, [pc, #136]	; (8011b24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d022      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4a21      	ldr	r2, [pc, #132]	; (8011b28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d01d      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4a1f      	ldr	r2, [pc, #124]	; (8011b2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011aae:	4293      	cmp	r3, r2
 8011ab0:	d018      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	4a1a      	ldr	r2, [pc, #104]	; (8011b20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d013      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4a1b      	ldr	r2, [pc, #108]	; (8011b30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d00e      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4a1a      	ldr	r2, [pc, #104]	; (8011b34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d009      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a18      	ldr	r2, [pc, #96]	; (8011b38 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d004      	beq.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	4a17      	ldr	r2, [pc, #92]	; (8011b3c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d10c      	bne.n	8011afe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011aea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	689b      	ldr	r3, [r3, #8]
 8011af0:	68ba      	ldr	r2, [r7, #8]
 8011af2:	4313      	orrs	r3, r2
 8011af4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2201      	movs	r2, #1
 8011b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3714      	adds	r7, #20
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr
 8011b1c:	40010000 	.word	0x40010000
 8011b20:	40010400 	.word	0x40010400
 8011b24:	40000400 	.word	0x40000400
 8011b28:	40000800 	.word	0x40000800
 8011b2c:	40000c00 	.word	0x40000c00
 8011b30:	40001800 	.word	0x40001800
 8011b34:	40014000 	.word	0x40014000
 8011b38:	4000e000 	.word	0x4000e000
 8011b3c:	4000e400 	.word	0x4000e400

08011b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d101      	bne.n	8011b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011b58:	2302      	movs	r3, #2
 8011b5a:	e087      	b.n	8011c6c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	68db      	ldr	r3, [r3, #12]
 8011b6e:	4313      	orrs	r3, r2
 8011b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4313      	orrs	r3, r2
 8011b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	691b      	ldr	r3, [r3, #16]
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	695b      	ldr	r3, [r3, #20]
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	699b      	ldr	r3, [r3, #24]
 8011bd0:	041b      	lsls	r3, r3, #16
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4a27      	ldr	r2, [pc, #156]	; (8011c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d004      	beq.n	8011bea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a25      	ldr	r2, [pc, #148]	; (8011c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011be6:	4293      	cmp	r3, r2
 8011be8:	d106      	bne.n	8011bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	69db      	ldr	r3, [r3, #28]
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a1e      	ldr	r2, [pc, #120]	; (8011c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	d004      	beq.n	8011c0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	4a1d      	ldr	r2, [pc, #116]	; (8011c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d126      	bne.n	8011c5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c16:	051b      	lsls	r3, r3, #20
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	6a1b      	ldr	r3, [r3, #32]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c34:	4313      	orrs	r3, r2
 8011c36:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a0e      	ldr	r2, [pc, #56]	; (8011c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d004      	beq.n	8011c4c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a0d      	ldr	r2, [pc, #52]	; (8011c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d106      	bne.n	8011c5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c56:	4313      	orrs	r3, r2
 8011c58:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3714      	adds	r7, #20
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr
 8011c78:	40010000 	.word	0x40010000
 8011c7c:	40010400 	.word	0x40010400

08011c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d101      	bne.n	8011cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e042      	b.n	8011d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7f3 f943 	bl	8004f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2224      	movs	r2, #36	; 0x24
 8011cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f022 0201 	bic.w	r2, r2, #1
 8011cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f000 fce8 	bl	80126d4 <UART_SetConfig>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d101      	bne.n	8011d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e022      	b.n	8011d54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f001 fb48 	bl	80133ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	685a      	ldr	r2, [r3, #4]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	689a      	ldr	r2, [r3, #8]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f042 0201 	orr.w	r2, r2, #1
 8011d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f001 fbcf 	bl	80134f0 <UART_CheckIdleState>
 8011d52:	4603      	mov	r3, r0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b091      	sub	sp, #68	; 0x44
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	4613      	mov	r3, r2
 8011d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d70:	2b20      	cmp	r3, #32
 8011d72:	f040 808c 	bne.w	8011e8e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d002      	beq.n	8011d82 <HAL_UART_Transmit_IT+0x26>
 8011d7c:	88fb      	ldrh	r3, [r7, #6]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8011d82:	2301      	movs	r3, #1
 8011d84:	e084      	b.n	8011e90 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d101      	bne.n	8011d94 <HAL_UART_Transmit_IT+0x38>
 8011d90:	2302      	movs	r3, #2
 8011d92:	e07d      	b.n	8011e90 <HAL_UART_Transmit_IT+0x134>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	68ba      	ldr	r2, [r7, #8]
 8011da0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	88fa      	ldrh	r2, [r7, #6]
 8011da6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	88fa      	ldrh	r2, [r7, #6]
 8011dae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2221      	movs	r2, #33	; 0x21
 8011dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dd0:	d12e      	bne.n	8011e30 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011dda:	d107      	bne.n	8011dec <HAL_UART_Transmit_IT+0x90>
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	691b      	ldr	r3, [r3, #16]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d103      	bne.n	8011dec <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	4a2d      	ldr	r2, [pc, #180]	; (8011e9c <HAL_UART_Transmit_IT+0x140>)
 8011de8:	675a      	str	r2, [r3, #116]	; 0x74
 8011dea:	e002      	b.n	8011df2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	4a2c      	ldr	r2, [pc, #176]	; (8011ea0 <HAL_UART_Transmit_IT+0x144>)
 8011df0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2200      	movs	r2, #0
 8011df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3308      	adds	r3, #8
 8011e00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e04:	e853 3f00 	ldrex	r3, [r3]
 8011e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	3308      	adds	r3, #8
 8011e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8011e1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e22:	e841 2300 	strex	r3, r2, [r1]
 8011e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1e5      	bne.n	8011dfa <HAL_UART_Transmit_IT+0x9e>
 8011e2e:	e02c      	b.n	8011e8a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e38:	d107      	bne.n	8011e4a <HAL_UART_Transmit_IT+0xee>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d103      	bne.n	8011e4a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	4a17      	ldr	r2, [pc, #92]	; (8011ea4 <HAL_UART_Transmit_IT+0x148>)
 8011e46:	675a      	str	r2, [r3, #116]	; 0x74
 8011e48:	e002      	b.n	8011e50 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	4a16      	ldr	r2, [pc, #88]	; (8011ea8 <HAL_UART_Transmit_IT+0x14c>)
 8011e4e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	e853 3f00 	ldrex	r3, [r3]
 8011e64:	613b      	str	r3, [r7, #16]
   return(result);
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	461a      	mov	r2, r3
 8011e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e76:	623b      	str	r3, [r7, #32]
 8011e78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7a:	69f9      	ldr	r1, [r7, #28]
 8011e7c:	6a3a      	ldr	r2, [r7, #32]
 8011e7e:	e841 2300 	strex	r3, r2, [r1]
 8011e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1e6      	bne.n	8011e58 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e000      	b.n	8011e90 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011e8e:	2302      	movs	r3, #2
  }
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3744      	adds	r7, #68	; 0x44
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr
 8011e9c:	08013cbf 	.word	0x08013cbf
 8011ea0:	08013bdf 	.word	0x08013bdf
 8011ea4:	08013b1d 	.word	0x08013b1d
 8011ea8:	08013a65 	.word	0x08013a65

08011eac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b08a      	sub	sp, #40	; 0x28
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	4613      	mov	r3, r2
 8011eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ec0:	2b20      	cmp	r3, #32
 8011ec2:	d142      	bne.n	8011f4a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d002      	beq.n	8011ed0 <HAL_UART_Receive_IT+0x24>
 8011eca:	88fb      	ldrh	r3, [r7, #6]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e03b      	b.n	8011f4c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d101      	bne.n	8011ee2 <HAL_UART_Receive_IT+0x36>
 8011ede:	2302      	movs	r3, #2
 8011ee0:	e034      	b.n	8011f4c <HAL_UART_Receive_IT+0xa0>
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2200      	movs	r2, #0
 8011eee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	4a17      	ldr	r2, [pc, #92]	; (8011f54 <HAL_UART_Receive_IT+0xa8>)
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d01f      	beq.n	8011f3a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d018      	beq.n	8011f3a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	e853 3f00 	ldrex	r3, [r3]
 8011f14:	613b      	str	r3, [r7, #16]
   return(result);
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	461a      	mov	r2, r3
 8011f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f26:	623b      	str	r3, [r7, #32]
 8011f28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2a:	69f9      	ldr	r1, [r7, #28]
 8011f2c:	6a3a      	ldr	r2, [r7, #32]
 8011f2e:	e841 2300 	strex	r3, r2, [r1]
 8011f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1e6      	bne.n	8011f08 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011f3a:	88fb      	ldrh	r3, [r7, #6]
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	68b9      	ldr	r1, [r7, #8]
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f001 fbe9 	bl	8013718 <UART_Start_Receive_IT>
 8011f46:	4603      	mov	r3, r0
 8011f48:	e000      	b.n	8011f4c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011f4a:	2302      	movs	r3, #2
  }
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3728      	adds	r7, #40	; 0x28
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	58000c00 	.word	0x58000c00

08011f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b0ba      	sub	sp, #232	; 0xe8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	69db      	ldr	r3, [r3, #28]
 8011f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	689b      	ldr	r3, [r3, #8]
 8011f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8011f86:	4013      	ands	r3, r2
 8011f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d11b      	bne.n	8011fcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f98:	f003 0320 	and.w	r3, r3, #32
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d015      	beq.n	8011fcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011fa4:	f003 0320 	and.w	r3, r3, #32
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d105      	bne.n	8011fb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d009      	beq.n	8011fcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 835a 	beq.w	8012676 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	4798      	blx	r3
      }
      return;
 8011fca:	e354      	b.n	8012676 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f000 811f 	beq.w	8012214 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011fd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011fda:	4b8b      	ldr	r3, [pc, #556]	; (8012208 <HAL_UART_IRQHandler+0x2b0>)
 8011fdc:	4013      	ands	r3, r2
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011fe6:	4b89      	ldr	r3, [pc, #548]	; (801220c <HAL_UART_IRQHandler+0x2b4>)
 8011fe8:	4013      	ands	r3, r2
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f000 8112 	beq.w	8012214 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ff4:	f003 0301 	and.w	r3, r3, #1
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d011      	beq.n	8012020 <HAL_UART_IRQHandler+0xc8>
 8011ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00b      	beq.n	8012020 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2201      	movs	r2, #1
 801200e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012016:	f043 0201 	orr.w	r2, r3, #1
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012024:	f003 0302 	and.w	r3, r3, #2
 8012028:	2b00      	cmp	r3, #0
 801202a:	d011      	beq.n	8012050 <HAL_UART_IRQHandler+0xf8>
 801202c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012030:	f003 0301 	and.w	r3, r3, #1
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00b      	beq.n	8012050 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2202      	movs	r2, #2
 801203e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012046:	f043 0204 	orr.w	r2, r3, #4
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012054:	f003 0304 	and.w	r3, r3, #4
 8012058:	2b00      	cmp	r3, #0
 801205a:	d011      	beq.n	8012080 <HAL_UART_IRQHandler+0x128>
 801205c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012060:	f003 0301 	and.w	r3, r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00b      	beq.n	8012080 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2204      	movs	r2, #4
 801206e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012076:	f043 0202 	orr.w	r2, r3, #2
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012084:	f003 0308 	and.w	r3, r3, #8
 8012088:	2b00      	cmp	r3, #0
 801208a:	d017      	beq.n	80120bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801208c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012090:	f003 0320 	and.w	r3, r3, #32
 8012094:	2b00      	cmp	r3, #0
 8012096:	d105      	bne.n	80120a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801209c:	4b5a      	ldr	r3, [pc, #360]	; (8012208 <HAL_UART_IRQHandler+0x2b0>)
 801209e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00b      	beq.n	80120bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2208      	movs	r2, #8
 80120aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120b2:	f043 0208 	orr.w	r2, r3, #8
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80120bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80120c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d012      	beq.n	80120ee <HAL_UART_IRQHandler+0x196>
 80120c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80120cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d00c      	beq.n	80120ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120e4:	f043 0220 	orr.w	r2, r3, #32
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f000 82c0 	beq.w	801267a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80120fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80120fe:	f003 0320 	and.w	r3, r3, #32
 8012102:	2b00      	cmp	r3, #0
 8012104:	d013      	beq.n	801212e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801210a:	f003 0320 	and.w	r3, r3, #32
 801210e:	2b00      	cmp	r3, #0
 8012110:	d105      	bne.n	801211e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801211a:	2b00      	cmp	r3, #0
 801211c:	d007      	beq.n	801212e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012142:	2b40      	cmp	r3, #64	; 0x40
 8012144:	d005      	beq.n	8012152 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801214a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801214e:	2b00      	cmp	r3, #0
 8012150:	d04f      	beq.n	80121f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f001 fc0a 	bl	801396c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	689b      	ldr	r3, [r3, #8]
 801215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012162:	2b40      	cmp	r3, #64	; 0x40
 8012164:	d141      	bne.n	80121ea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	3308      	adds	r3, #8
 801216c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012174:	e853 3f00 	ldrex	r3, [r3]
 8012178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801217c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	3308      	adds	r3, #8
 801218e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801219a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801219e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80121a2:	e841 2300 	strex	r3, r2, [r1]
 80121a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80121aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d1d9      	bne.n	8012166 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d013      	beq.n	80121e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121be:	4a14      	ldr	r2, [pc, #80]	; (8012210 <HAL_UART_IRQHandler+0x2b8>)
 80121c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7f6 fbb4 	bl	8008934 <HAL_DMA_Abort_IT>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d017      	beq.n	8012202 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80121dc:	4610      	mov	r0, r2
 80121de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121e0:	e00f      	b.n	8012202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 fa60 	bl	80126a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121e8:	e00b      	b.n	8012202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 fa5c 	bl	80126a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121f0:	e007      	b.n	8012202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fa58 	bl	80126a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8012200:	e23b      	b.n	801267a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012202:	bf00      	nop
    return;
 8012204:	e239      	b.n	801267a <HAL_UART_IRQHandler+0x722>
 8012206:	bf00      	nop
 8012208:	10000001 	.word	0x10000001
 801220c:	04000120 	.word	0x04000120
 8012210:	08013a39 	.word	0x08013a39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012218:	2b01      	cmp	r3, #1
 801221a:	f040 81ce 	bne.w	80125ba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801221e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012222:	f003 0310 	and.w	r3, r3, #16
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 81c7 	beq.w	80125ba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801222c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012230:	f003 0310 	and.w	r3, r3, #16
 8012234:	2b00      	cmp	r3, #0
 8012236:	f000 81c0 	beq.w	80125ba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2210      	movs	r2, #16
 8012240:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801224c:	2b40      	cmp	r3, #64	; 0x40
 801224e:	f040 813b 	bne.w	80124c8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4a8b      	ldr	r2, [pc, #556]	; (8012488 <HAL_UART_IRQHandler+0x530>)
 801225a:	4293      	cmp	r3, r2
 801225c:	d059      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	4a89      	ldr	r2, [pc, #548]	; (801248c <HAL_UART_IRQHandler+0x534>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d053      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4a87      	ldr	r2, [pc, #540]	; (8012490 <HAL_UART_IRQHandler+0x538>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d04d      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4a85      	ldr	r2, [pc, #532]	; (8012494 <HAL_UART_IRQHandler+0x53c>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d047      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4a83      	ldr	r2, [pc, #524]	; (8012498 <HAL_UART_IRQHandler+0x540>)
 801228a:	4293      	cmp	r3, r2
 801228c:	d041      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4a81      	ldr	r2, [pc, #516]	; (801249c <HAL_UART_IRQHandler+0x544>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d03b      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4a7f      	ldr	r2, [pc, #508]	; (80124a0 <HAL_UART_IRQHandler+0x548>)
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d035      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4a7d      	ldr	r2, [pc, #500]	; (80124a4 <HAL_UART_IRQHandler+0x54c>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d02f      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	4a7b      	ldr	r2, [pc, #492]	; (80124a8 <HAL_UART_IRQHandler+0x550>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d029      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a79      	ldr	r2, [pc, #484]	; (80124ac <HAL_UART_IRQHandler+0x554>)
 80122c6:	4293      	cmp	r3, r2
 80122c8:	d023      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a77      	ldr	r2, [pc, #476]	; (80124b0 <HAL_UART_IRQHandler+0x558>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d01d      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4a75      	ldr	r2, [pc, #468]	; (80124b4 <HAL_UART_IRQHandler+0x55c>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d017      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	4a73      	ldr	r2, [pc, #460]	; (80124b8 <HAL_UART_IRQHandler+0x560>)
 80122ea:	4293      	cmp	r3, r2
 80122ec:	d011      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a71      	ldr	r2, [pc, #452]	; (80124bc <HAL_UART_IRQHandler+0x564>)
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d00b      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a6f      	ldr	r2, [pc, #444]	; (80124c0 <HAL_UART_IRQHandler+0x568>)
 8012302:	4293      	cmp	r3, r2
 8012304:	d005      	beq.n	8012312 <HAL_UART_IRQHandler+0x3ba>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	4a6d      	ldr	r2, [pc, #436]	; (80124c4 <HAL_UART_IRQHandler+0x56c>)
 801230e:	4293      	cmp	r3, r2
 8012310:	d105      	bne.n	801231e <HAL_UART_IRQHandler+0x3c6>
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	b29b      	uxth	r3, r3
 801231c:	e004      	b.n	8012328 <HAL_UART_IRQHandler+0x3d0>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	b29b      	uxth	r3, r3
 8012328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801232c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012330:	2b00      	cmp	r3, #0
 8012332:	f000 81a4 	beq.w	801267e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801233c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012340:	429a      	cmp	r2, r3
 8012342:	f080 819c 	bcs.w	801267e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801234c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012354:	69db      	ldr	r3, [r3, #28]
 8012356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801235a:	f000 8086 	beq.w	801246a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012366:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801236a:	e853 3f00 	ldrex	r3, [r3]
 801236e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801237a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	461a      	mov	r2, r3
 8012384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801238c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012390:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012394:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012398:	e841 2300 	strex	r3, r2, [r1]
 801239c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80123a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1da      	bne.n	801235e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	3308      	adds	r3, #8
 80123ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123b2:	e853 3f00 	ldrex	r3, [r3]
 80123b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80123b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123ba:	f023 0301 	bic.w	r3, r3, #1
 80123be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3308      	adds	r3, #8
 80123c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80123cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80123d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80123d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80123d8:	e841 2300 	strex	r3, r2, [r1]
 80123dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80123de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d1e1      	bne.n	80123a8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	3308      	adds	r3, #8
 80123ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123ee:	e853 3f00 	ldrex	r3, [r3]
 80123f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80123f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3308      	adds	r3, #8
 8012404:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012408:	66fa      	str	r2, [r7, #108]	; 0x6c
 801240a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801240c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801240e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012410:	e841 2300 	strex	r3, r2, [r1]
 8012414:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1e3      	bne.n	80123e4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2220      	movs	r2, #32
 8012420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012432:	e853 3f00 	ldrex	r3, [r3]
 8012436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801243a:	f023 0310 	bic.w	r3, r3, #16
 801243e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	461a      	mov	r2, r3
 8012448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801244c:	65bb      	str	r3, [r7, #88]	; 0x58
 801244e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012454:	e841 2300 	strex	r3, r2, [r1]
 8012458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801245a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801245c:	2b00      	cmp	r3, #0
 801245e:	d1e4      	bne.n	801242a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012464:	4618      	mov	r0, r3
 8012466:	f7f5 ff47 	bl	80082f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012476:	b29b      	uxth	r3, r3
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	b29b      	uxth	r3, r3
 801247c:	4619      	mov	r1, r3
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f000 f91c 	bl	80126bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012484:	e0fb      	b.n	801267e <HAL_UART_IRQHandler+0x726>
 8012486:	bf00      	nop
 8012488:	40020010 	.word	0x40020010
 801248c:	40020028 	.word	0x40020028
 8012490:	40020040 	.word	0x40020040
 8012494:	40020058 	.word	0x40020058
 8012498:	40020070 	.word	0x40020070
 801249c:	40020088 	.word	0x40020088
 80124a0:	400200a0 	.word	0x400200a0
 80124a4:	400200b8 	.word	0x400200b8
 80124a8:	40020410 	.word	0x40020410
 80124ac:	40020428 	.word	0x40020428
 80124b0:	40020440 	.word	0x40020440
 80124b4:	40020458 	.word	0x40020458
 80124b8:	40020470 	.word	0x40020470
 80124bc:	40020488 	.word	0x40020488
 80124c0:	400204a0 	.word	0x400204a0
 80124c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	1ad3      	subs	r3, r2, r3
 80124d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f000 80cc 	beq.w	8012682 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80124ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f000 80c7 	beq.w	8012682 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fc:	e853 3f00 	ldrex	r3, [r3]
 8012500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	461a      	mov	r2, r3
 8012512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012516:	647b      	str	r3, [r7, #68]	; 0x44
 8012518:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801251c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801251e:	e841 2300 	strex	r3, r2, [r1]
 8012522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1e4      	bne.n	80124f4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	3308      	adds	r3, #8
 8012530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012534:	e853 3f00 	ldrex	r3, [r3]
 8012538:	623b      	str	r3, [r7, #32]
   return(result);
 801253a:	6a3a      	ldr	r2, [r7, #32]
 801253c:	4b54      	ldr	r3, [pc, #336]	; (8012690 <HAL_UART_IRQHandler+0x738>)
 801253e:	4013      	ands	r3, r2
 8012540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	3308      	adds	r3, #8
 801254a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801254e:	633a      	str	r2, [r7, #48]	; 0x30
 8012550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012556:	e841 2300 	strex	r3, r2, [r1]
 801255a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255e:	2b00      	cmp	r3, #0
 8012560:	d1e3      	bne.n	801252a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2220      	movs	r2, #32
 8012566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2200      	movs	r2, #0
 801256e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2200      	movs	r2, #0
 8012574:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	e853 3f00 	ldrex	r3, [r3]
 8012582:	60fb      	str	r3, [r7, #12]
   return(result);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f023 0310 	bic.w	r3, r3, #16
 801258a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012598:	61fb      	str	r3, [r7, #28]
 801259a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259c:	69b9      	ldr	r1, [r7, #24]
 801259e:	69fa      	ldr	r2, [r7, #28]
 80125a0:	e841 2300 	strex	r3, r2, [r1]
 80125a4:	617b      	str	r3, [r7, #20]
   return(result);
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1e4      	bne.n	8012576 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80125ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80125b0:	4619      	mov	r1, r3
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 f882 	bl	80126bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80125b8:	e063      	b.n	8012682 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80125ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00e      	beq.n	80125e4 <HAL_UART_IRQHandler+0x68c>
 80125c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d008      	beq.n	80125e4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80125da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f002 f86b 	bl	80146b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80125e2:	e051      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80125e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d014      	beq.n	801261a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80125f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d105      	bne.n	8012608 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80125fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012604:	2b00      	cmp	r3, #0
 8012606:	d008      	beq.n	801261a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801260c:	2b00      	cmp	r3, #0
 801260e:	d03a      	beq.n	8012686 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	4798      	blx	r3
    }
    return;
 8012618:	e035      	b.n	8012686 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012622:	2b00      	cmp	r3, #0
 8012624:	d009      	beq.n	801263a <HAL_UART_IRQHandler+0x6e2>
 8012626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801262e:	2b00      	cmp	r3, #0
 8012630:	d003      	beq.n	801263a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f001 fbb8 	bl	8013da8 <UART_EndTransmit_IT>
    return;
 8012638:	e026      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801263e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012642:	2b00      	cmp	r3, #0
 8012644:	d009      	beq.n	801265a <HAL_UART_IRQHandler+0x702>
 8012646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801264a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801264e:	2b00      	cmp	r3, #0
 8012650:	d003      	beq.n	801265a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f002 f844 	bl	80146e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012658:	e016      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801265e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012662:	2b00      	cmp	r3, #0
 8012664:	d010      	beq.n	8012688 <HAL_UART_IRQHandler+0x730>
 8012666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801266a:	2b00      	cmp	r3, #0
 801266c:	da0c      	bge.n	8012688 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f002 f82c 	bl	80146cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012674:	e008      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
      return;
 8012676:	bf00      	nop
 8012678:	e006      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
    return;
 801267a:	bf00      	nop
 801267c:	e004      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
      return;
 801267e:	bf00      	nop
 8012680:	e002      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
      return;
 8012682:	bf00      	nop
 8012684:	e000      	b.n	8012688 <HAL_UART_IRQHandler+0x730>
    return;
 8012686:	bf00      	nop
  }
}
 8012688:	37e8      	adds	r7, #232	; 0xe8
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	effffffe 	.word	0xeffffffe

08012694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80126b0:	bf00      	nop
 80126b2:	370c      	adds	r7, #12
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr

080126bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80126bc:	b480      	push	{r7}
 80126be:	b083      	sub	sp, #12
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	460b      	mov	r3, r1
 80126c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80126c8:	bf00      	nop
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80126d8:	b092      	sub	sp, #72	; 0x48
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	689a      	ldr	r2, [r3, #8]
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	691b      	ldr	r3, [r3, #16]
 80126ec:	431a      	orrs	r2, r3
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	431a      	orrs	r2, r3
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	69db      	ldr	r3, [r3, #28]
 80126f8:	4313      	orrs	r3, r2
 80126fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	4bbe      	ldr	r3, [pc, #760]	; (80129fc <UART_SetConfig+0x328>)
 8012704:	4013      	ands	r3, r2
 8012706:	697a      	ldr	r2, [r7, #20]
 8012708:	6812      	ldr	r2, [r2, #0]
 801270a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801270c:	430b      	orrs	r3, r1
 801270e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	68da      	ldr	r2, [r3, #12]
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	430a      	orrs	r2, r1
 8012724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	699b      	ldr	r3, [r3, #24]
 801272a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4ab3      	ldr	r2, [pc, #716]	; (8012a00 <UART_SetConfig+0x32c>)
 8012732:	4293      	cmp	r3, r2
 8012734:	d004      	beq.n	8012740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	6a1b      	ldr	r3, [r3, #32]
 801273a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801273c:	4313      	orrs	r3, r2
 801273e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	689a      	ldr	r2, [r3, #8]
 8012746:	4baf      	ldr	r3, [pc, #700]	; (8012a04 <UART_SetConfig+0x330>)
 8012748:	4013      	ands	r3, r2
 801274a:	697a      	ldr	r2, [r7, #20]
 801274c:	6812      	ldr	r2, [r2, #0]
 801274e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012750:	430b      	orrs	r3, r1
 8012752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275a:	f023 010f 	bic.w	r1, r3, #15
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	430a      	orrs	r2, r1
 8012768:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	4aa6      	ldr	r2, [pc, #664]	; (8012a08 <UART_SetConfig+0x334>)
 8012770:	4293      	cmp	r3, r2
 8012772:	d177      	bne.n	8012864 <UART_SetConfig+0x190>
 8012774:	4ba5      	ldr	r3, [pc, #660]	; (8012a0c <UART_SetConfig+0x338>)
 8012776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801277c:	2b28      	cmp	r3, #40	; 0x28
 801277e:	d86d      	bhi.n	801285c <UART_SetConfig+0x188>
 8012780:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <UART_SetConfig+0xb4>)
 8012782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012786:	bf00      	nop
 8012788:	0801282d 	.word	0x0801282d
 801278c:	0801285d 	.word	0x0801285d
 8012790:	0801285d 	.word	0x0801285d
 8012794:	0801285d 	.word	0x0801285d
 8012798:	0801285d 	.word	0x0801285d
 801279c:	0801285d 	.word	0x0801285d
 80127a0:	0801285d 	.word	0x0801285d
 80127a4:	0801285d 	.word	0x0801285d
 80127a8:	08012835 	.word	0x08012835
 80127ac:	0801285d 	.word	0x0801285d
 80127b0:	0801285d 	.word	0x0801285d
 80127b4:	0801285d 	.word	0x0801285d
 80127b8:	0801285d 	.word	0x0801285d
 80127bc:	0801285d 	.word	0x0801285d
 80127c0:	0801285d 	.word	0x0801285d
 80127c4:	0801285d 	.word	0x0801285d
 80127c8:	0801283d 	.word	0x0801283d
 80127cc:	0801285d 	.word	0x0801285d
 80127d0:	0801285d 	.word	0x0801285d
 80127d4:	0801285d 	.word	0x0801285d
 80127d8:	0801285d 	.word	0x0801285d
 80127dc:	0801285d 	.word	0x0801285d
 80127e0:	0801285d 	.word	0x0801285d
 80127e4:	0801285d 	.word	0x0801285d
 80127e8:	08012845 	.word	0x08012845
 80127ec:	0801285d 	.word	0x0801285d
 80127f0:	0801285d 	.word	0x0801285d
 80127f4:	0801285d 	.word	0x0801285d
 80127f8:	0801285d 	.word	0x0801285d
 80127fc:	0801285d 	.word	0x0801285d
 8012800:	0801285d 	.word	0x0801285d
 8012804:	0801285d 	.word	0x0801285d
 8012808:	0801284d 	.word	0x0801284d
 801280c:	0801285d 	.word	0x0801285d
 8012810:	0801285d 	.word	0x0801285d
 8012814:	0801285d 	.word	0x0801285d
 8012818:	0801285d 	.word	0x0801285d
 801281c:	0801285d 	.word	0x0801285d
 8012820:	0801285d 	.word	0x0801285d
 8012824:	0801285d 	.word	0x0801285d
 8012828:	08012855 	.word	0x08012855
 801282c:	2301      	movs	r3, #1
 801282e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012832:	e326      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012834:	2304      	movs	r3, #4
 8012836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801283a:	e322      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801283c:	2308      	movs	r3, #8
 801283e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012842:	e31e      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012844:	2310      	movs	r3, #16
 8012846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801284a:	e31a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801284c:	2320      	movs	r3, #32
 801284e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012852:	e316      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012854:	2340      	movs	r3, #64	; 0x40
 8012856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801285a:	e312      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801285c:	2380      	movs	r3, #128	; 0x80
 801285e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012862:	e30e      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4a69      	ldr	r2, [pc, #420]	; (8012a10 <UART_SetConfig+0x33c>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d130      	bne.n	80128d0 <UART_SetConfig+0x1fc>
 801286e:	4b67      	ldr	r3, [pc, #412]	; (8012a0c <UART_SetConfig+0x338>)
 8012870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012872:	f003 0307 	and.w	r3, r3, #7
 8012876:	2b05      	cmp	r3, #5
 8012878:	d826      	bhi.n	80128c8 <UART_SetConfig+0x1f4>
 801287a:	a201      	add	r2, pc, #4	; (adr r2, 8012880 <UART_SetConfig+0x1ac>)
 801287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012880:	08012899 	.word	0x08012899
 8012884:	080128a1 	.word	0x080128a1
 8012888:	080128a9 	.word	0x080128a9
 801288c:	080128b1 	.word	0x080128b1
 8012890:	080128b9 	.word	0x080128b9
 8012894:	080128c1 	.word	0x080128c1
 8012898:	2300      	movs	r3, #0
 801289a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801289e:	e2f0      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128a0:	2304      	movs	r3, #4
 80128a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128a6:	e2ec      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128a8:	2308      	movs	r3, #8
 80128aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128ae:	e2e8      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128b0:	2310      	movs	r3, #16
 80128b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128b6:	e2e4      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128b8:	2320      	movs	r3, #32
 80128ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128be:	e2e0      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128c0:	2340      	movs	r3, #64	; 0x40
 80128c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128c6:	e2dc      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128c8:	2380      	movs	r3, #128	; 0x80
 80128ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80128ce:	e2d8      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a4f      	ldr	r2, [pc, #316]	; (8012a14 <UART_SetConfig+0x340>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d130      	bne.n	801293c <UART_SetConfig+0x268>
 80128da:	4b4c      	ldr	r3, [pc, #304]	; (8012a0c <UART_SetConfig+0x338>)
 80128dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128de:	f003 0307 	and.w	r3, r3, #7
 80128e2:	2b05      	cmp	r3, #5
 80128e4:	d826      	bhi.n	8012934 <UART_SetConfig+0x260>
 80128e6:	a201      	add	r2, pc, #4	; (adr r2, 80128ec <UART_SetConfig+0x218>)
 80128e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128ec:	08012905 	.word	0x08012905
 80128f0:	0801290d 	.word	0x0801290d
 80128f4:	08012915 	.word	0x08012915
 80128f8:	0801291d 	.word	0x0801291d
 80128fc:	08012925 	.word	0x08012925
 8012900:	0801292d 	.word	0x0801292d
 8012904:	2300      	movs	r3, #0
 8012906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801290a:	e2ba      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801290c:	2304      	movs	r3, #4
 801290e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012912:	e2b6      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012914:	2308      	movs	r3, #8
 8012916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801291a:	e2b2      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801291c:	2310      	movs	r3, #16
 801291e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012922:	e2ae      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012924:	2320      	movs	r3, #32
 8012926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801292a:	e2aa      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801292c:	2340      	movs	r3, #64	; 0x40
 801292e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012932:	e2a6      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012934:	2380      	movs	r3, #128	; 0x80
 8012936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801293a:	e2a2      	b.n	8012e82 <UART_SetConfig+0x7ae>
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a35      	ldr	r2, [pc, #212]	; (8012a18 <UART_SetConfig+0x344>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d130      	bne.n	80129a8 <UART_SetConfig+0x2d4>
 8012946:	4b31      	ldr	r3, [pc, #196]	; (8012a0c <UART_SetConfig+0x338>)
 8012948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801294a:	f003 0307 	and.w	r3, r3, #7
 801294e:	2b05      	cmp	r3, #5
 8012950:	d826      	bhi.n	80129a0 <UART_SetConfig+0x2cc>
 8012952:	a201      	add	r2, pc, #4	; (adr r2, 8012958 <UART_SetConfig+0x284>)
 8012954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012958:	08012971 	.word	0x08012971
 801295c:	08012979 	.word	0x08012979
 8012960:	08012981 	.word	0x08012981
 8012964:	08012989 	.word	0x08012989
 8012968:	08012991 	.word	0x08012991
 801296c:	08012999 	.word	0x08012999
 8012970:	2300      	movs	r3, #0
 8012972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012976:	e284      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012978:	2304      	movs	r3, #4
 801297a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801297e:	e280      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012980:	2308      	movs	r3, #8
 8012982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012986:	e27c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012988:	2310      	movs	r3, #16
 801298a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801298e:	e278      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012990:	2320      	movs	r3, #32
 8012992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012996:	e274      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012998:	2340      	movs	r3, #64	; 0x40
 801299a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801299e:	e270      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129a0:	2380      	movs	r3, #128	; 0x80
 80129a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129a6:	e26c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4a1b      	ldr	r2, [pc, #108]	; (8012a1c <UART_SetConfig+0x348>)
 80129ae:	4293      	cmp	r3, r2
 80129b0:	d142      	bne.n	8012a38 <UART_SetConfig+0x364>
 80129b2:	4b16      	ldr	r3, [pc, #88]	; (8012a0c <UART_SetConfig+0x338>)
 80129b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129b6:	f003 0307 	and.w	r3, r3, #7
 80129ba:	2b05      	cmp	r3, #5
 80129bc:	d838      	bhi.n	8012a30 <UART_SetConfig+0x35c>
 80129be:	a201      	add	r2, pc, #4	; (adr r2, 80129c4 <UART_SetConfig+0x2f0>)
 80129c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c4:	080129dd 	.word	0x080129dd
 80129c8:	080129e5 	.word	0x080129e5
 80129cc:	080129ed 	.word	0x080129ed
 80129d0:	080129f5 	.word	0x080129f5
 80129d4:	08012a21 	.word	0x08012a21
 80129d8:	08012a29 	.word	0x08012a29
 80129dc:	2300      	movs	r3, #0
 80129de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129e2:	e24e      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129e4:	2304      	movs	r3, #4
 80129e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129ea:	e24a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129ec:	2308      	movs	r3, #8
 80129ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129f2:	e246      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129f4:	2310      	movs	r3, #16
 80129f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80129fa:	e242      	b.n	8012e82 <UART_SetConfig+0x7ae>
 80129fc:	cfff69f3 	.word	0xcfff69f3
 8012a00:	58000c00 	.word	0x58000c00
 8012a04:	11fff4ff 	.word	0x11fff4ff
 8012a08:	40011000 	.word	0x40011000
 8012a0c:	58024400 	.word	0x58024400
 8012a10:	40004400 	.word	0x40004400
 8012a14:	40004800 	.word	0x40004800
 8012a18:	40004c00 	.word	0x40004c00
 8012a1c:	40005000 	.word	0x40005000
 8012a20:	2320      	movs	r3, #32
 8012a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a26:	e22c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012a28:	2340      	movs	r3, #64	; 0x40
 8012a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a2e:	e228      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012a30:	2380      	movs	r3, #128	; 0x80
 8012a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012a36:	e224      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4ab1      	ldr	r2, [pc, #708]	; (8012d04 <UART_SetConfig+0x630>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d176      	bne.n	8012b30 <UART_SetConfig+0x45c>
 8012a42:	4bb1      	ldr	r3, [pc, #708]	; (8012d08 <UART_SetConfig+0x634>)
 8012a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a4a:	2b28      	cmp	r3, #40	; 0x28
 8012a4c:	d86c      	bhi.n	8012b28 <UART_SetConfig+0x454>
 8012a4e:	a201      	add	r2, pc, #4	; (adr r2, 8012a54 <UART_SetConfig+0x380>)
 8012a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a54:	08012af9 	.word	0x08012af9
 8012a58:	08012b29 	.word	0x08012b29
 8012a5c:	08012b29 	.word	0x08012b29
 8012a60:	08012b29 	.word	0x08012b29
 8012a64:	08012b29 	.word	0x08012b29
 8012a68:	08012b29 	.word	0x08012b29
 8012a6c:	08012b29 	.word	0x08012b29
 8012a70:	08012b29 	.word	0x08012b29
 8012a74:	08012b01 	.word	0x08012b01
 8012a78:	08012b29 	.word	0x08012b29
 8012a7c:	08012b29 	.word	0x08012b29
 8012a80:	08012b29 	.word	0x08012b29
 8012a84:	08012b29 	.word	0x08012b29
 8012a88:	08012b29 	.word	0x08012b29
 8012a8c:	08012b29 	.word	0x08012b29
 8012a90:	08012b29 	.word	0x08012b29
 8012a94:	08012b09 	.word	0x08012b09
 8012a98:	08012b29 	.word	0x08012b29
 8012a9c:	08012b29 	.word	0x08012b29
 8012aa0:	08012b29 	.word	0x08012b29
 8012aa4:	08012b29 	.word	0x08012b29
 8012aa8:	08012b29 	.word	0x08012b29
 8012aac:	08012b29 	.word	0x08012b29
 8012ab0:	08012b29 	.word	0x08012b29
 8012ab4:	08012b11 	.word	0x08012b11
 8012ab8:	08012b29 	.word	0x08012b29
 8012abc:	08012b29 	.word	0x08012b29
 8012ac0:	08012b29 	.word	0x08012b29
 8012ac4:	08012b29 	.word	0x08012b29
 8012ac8:	08012b29 	.word	0x08012b29
 8012acc:	08012b29 	.word	0x08012b29
 8012ad0:	08012b29 	.word	0x08012b29
 8012ad4:	08012b19 	.word	0x08012b19
 8012ad8:	08012b29 	.word	0x08012b29
 8012adc:	08012b29 	.word	0x08012b29
 8012ae0:	08012b29 	.word	0x08012b29
 8012ae4:	08012b29 	.word	0x08012b29
 8012ae8:	08012b29 	.word	0x08012b29
 8012aec:	08012b29 	.word	0x08012b29
 8012af0:	08012b29 	.word	0x08012b29
 8012af4:	08012b21 	.word	0x08012b21
 8012af8:	2301      	movs	r3, #1
 8012afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012afe:	e1c0      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b00:	2304      	movs	r3, #4
 8012b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b06:	e1bc      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b08:	2308      	movs	r3, #8
 8012b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b0e:	e1b8      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b10:	2310      	movs	r3, #16
 8012b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b16:	e1b4      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b18:	2320      	movs	r3, #32
 8012b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b1e:	e1b0      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b20:	2340      	movs	r3, #64	; 0x40
 8012b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b26:	e1ac      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b28:	2380      	movs	r3, #128	; 0x80
 8012b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b2e:	e1a8      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4a75      	ldr	r2, [pc, #468]	; (8012d0c <UART_SetConfig+0x638>)
 8012b36:	4293      	cmp	r3, r2
 8012b38:	d130      	bne.n	8012b9c <UART_SetConfig+0x4c8>
 8012b3a:	4b73      	ldr	r3, [pc, #460]	; (8012d08 <UART_SetConfig+0x634>)
 8012b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b3e:	f003 0307 	and.w	r3, r3, #7
 8012b42:	2b05      	cmp	r3, #5
 8012b44:	d826      	bhi.n	8012b94 <UART_SetConfig+0x4c0>
 8012b46:	a201      	add	r2, pc, #4	; (adr r2, 8012b4c <UART_SetConfig+0x478>)
 8012b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b4c:	08012b65 	.word	0x08012b65
 8012b50:	08012b6d 	.word	0x08012b6d
 8012b54:	08012b75 	.word	0x08012b75
 8012b58:	08012b7d 	.word	0x08012b7d
 8012b5c:	08012b85 	.word	0x08012b85
 8012b60:	08012b8d 	.word	0x08012b8d
 8012b64:	2300      	movs	r3, #0
 8012b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b6a:	e18a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b6c:	2304      	movs	r3, #4
 8012b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b72:	e186      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b74:	2308      	movs	r3, #8
 8012b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b7a:	e182      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b7c:	2310      	movs	r3, #16
 8012b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b82:	e17e      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b84:	2320      	movs	r3, #32
 8012b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b8a:	e17a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b8c:	2340      	movs	r3, #64	; 0x40
 8012b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b92:	e176      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b94:	2380      	movs	r3, #128	; 0x80
 8012b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012b9a:	e172      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a5b      	ldr	r2, [pc, #364]	; (8012d10 <UART_SetConfig+0x63c>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d130      	bne.n	8012c08 <UART_SetConfig+0x534>
 8012ba6:	4b58      	ldr	r3, [pc, #352]	; (8012d08 <UART_SetConfig+0x634>)
 8012ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012baa:	f003 0307 	and.w	r3, r3, #7
 8012bae:	2b05      	cmp	r3, #5
 8012bb0:	d826      	bhi.n	8012c00 <UART_SetConfig+0x52c>
 8012bb2:	a201      	add	r2, pc, #4	; (adr r2, 8012bb8 <UART_SetConfig+0x4e4>)
 8012bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb8:	08012bd1 	.word	0x08012bd1
 8012bbc:	08012bd9 	.word	0x08012bd9
 8012bc0:	08012be1 	.word	0x08012be1
 8012bc4:	08012be9 	.word	0x08012be9
 8012bc8:	08012bf1 	.word	0x08012bf1
 8012bcc:	08012bf9 	.word	0x08012bf9
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bd6:	e154      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012bd8:	2304      	movs	r3, #4
 8012bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bde:	e150      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012be0:	2308      	movs	r3, #8
 8012be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012be6:	e14c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012be8:	2310      	movs	r3, #16
 8012bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bee:	e148      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012bf0:	2320      	movs	r3, #32
 8012bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bf6:	e144      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012bf8:	2340      	movs	r3, #64	; 0x40
 8012bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012bfe:	e140      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012c00:	2380      	movs	r3, #128	; 0x80
 8012c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012c06:	e13c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a41      	ldr	r2, [pc, #260]	; (8012d14 <UART_SetConfig+0x640>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	f040 8082 	bne.w	8012d18 <UART_SetConfig+0x644>
 8012c14:	4b3c      	ldr	r3, [pc, #240]	; (8012d08 <UART_SetConfig+0x634>)
 8012c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c1c:	2b28      	cmp	r3, #40	; 0x28
 8012c1e:	d86d      	bhi.n	8012cfc <UART_SetConfig+0x628>
 8012c20:	a201      	add	r2, pc, #4	; (adr r2, 8012c28 <UART_SetConfig+0x554>)
 8012c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c26:	bf00      	nop
 8012c28:	08012ccd 	.word	0x08012ccd
 8012c2c:	08012cfd 	.word	0x08012cfd
 8012c30:	08012cfd 	.word	0x08012cfd
 8012c34:	08012cfd 	.word	0x08012cfd
 8012c38:	08012cfd 	.word	0x08012cfd
 8012c3c:	08012cfd 	.word	0x08012cfd
 8012c40:	08012cfd 	.word	0x08012cfd
 8012c44:	08012cfd 	.word	0x08012cfd
 8012c48:	08012cd5 	.word	0x08012cd5
 8012c4c:	08012cfd 	.word	0x08012cfd
 8012c50:	08012cfd 	.word	0x08012cfd
 8012c54:	08012cfd 	.word	0x08012cfd
 8012c58:	08012cfd 	.word	0x08012cfd
 8012c5c:	08012cfd 	.word	0x08012cfd
 8012c60:	08012cfd 	.word	0x08012cfd
 8012c64:	08012cfd 	.word	0x08012cfd
 8012c68:	08012cdd 	.word	0x08012cdd
 8012c6c:	08012cfd 	.word	0x08012cfd
 8012c70:	08012cfd 	.word	0x08012cfd
 8012c74:	08012cfd 	.word	0x08012cfd
 8012c78:	08012cfd 	.word	0x08012cfd
 8012c7c:	08012cfd 	.word	0x08012cfd
 8012c80:	08012cfd 	.word	0x08012cfd
 8012c84:	08012cfd 	.word	0x08012cfd
 8012c88:	08012ce5 	.word	0x08012ce5
 8012c8c:	08012cfd 	.word	0x08012cfd
 8012c90:	08012cfd 	.word	0x08012cfd
 8012c94:	08012cfd 	.word	0x08012cfd
 8012c98:	08012cfd 	.word	0x08012cfd
 8012c9c:	08012cfd 	.word	0x08012cfd
 8012ca0:	08012cfd 	.word	0x08012cfd
 8012ca4:	08012cfd 	.word	0x08012cfd
 8012ca8:	08012ced 	.word	0x08012ced
 8012cac:	08012cfd 	.word	0x08012cfd
 8012cb0:	08012cfd 	.word	0x08012cfd
 8012cb4:	08012cfd 	.word	0x08012cfd
 8012cb8:	08012cfd 	.word	0x08012cfd
 8012cbc:	08012cfd 	.word	0x08012cfd
 8012cc0:	08012cfd 	.word	0x08012cfd
 8012cc4:	08012cfd 	.word	0x08012cfd
 8012cc8:	08012cf5 	.word	0x08012cf5
 8012ccc:	2301      	movs	r3, #1
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cd2:	e0d6      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012cd4:	2304      	movs	r3, #4
 8012cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cda:	e0d2      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012cdc:	2308      	movs	r3, #8
 8012cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ce2:	e0ce      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012ce4:	2310      	movs	r3, #16
 8012ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cea:	e0ca      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012cec:	2320      	movs	r3, #32
 8012cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cf2:	e0c6      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012cf4:	2340      	movs	r3, #64	; 0x40
 8012cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012cfa:	e0c2      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012cfc:	2380      	movs	r3, #128	; 0x80
 8012cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d02:	e0be      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012d04:	40011400 	.word	0x40011400
 8012d08:	58024400 	.word	0x58024400
 8012d0c:	40007800 	.word	0x40007800
 8012d10:	40007c00 	.word	0x40007c00
 8012d14:	40011800 	.word	0x40011800
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4aad      	ldr	r2, [pc, #692]	; (8012fd4 <UART_SetConfig+0x900>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d176      	bne.n	8012e10 <UART_SetConfig+0x73c>
 8012d22:	4bad      	ldr	r3, [pc, #692]	; (8012fd8 <UART_SetConfig+0x904>)
 8012d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d2a:	2b28      	cmp	r3, #40	; 0x28
 8012d2c:	d86c      	bhi.n	8012e08 <UART_SetConfig+0x734>
 8012d2e:	a201      	add	r2, pc, #4	; (adr r2, 8012d34 <UART_SetConfig+0x660>)
 8012d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d34:	08012dd9 	.word	0x08012dd9
 8012d38:	08012e09 	.word	0x08012e09
 8012d3c:	08012e09 	.word	0x08012e09
 8012d40:	08012e09 	.word	0x08012e09
 8012d44:	08012e09 	.word	0x08012e09
 8012d48:	08012e09 	.word	0x08012e09
 8012d4c:	08012e09 	.word	0x08012e09
 8012d50:	08012e09 	.word	0x08012e09
 8012d54:	08012de1 	.word	0x08012de1
 8012d58:	08012e09 	.word	0x08012e09
 8012d5c:	08012e09 	.word	0x08012e09
 8012d60:	08012e09 	.word	0x08012e09
 8012d64:	08012e09 	.word	0x08012e09
 8012d68:	08012e09 	.word	0x08012e09
 8012d6c:	08012e09 	.word	0x08012e09
 8012d70:	08012e09 	.word	0x08012e09
 8012d74:	08012de9 	.word	0x08012de9
 8012d78:	08012e09 	.word	0x08012e09
 8012d7c:	08012e09 	.word	0x08012e09
 8012d80:	08012e09 	.word	0x08012e09
 8012d84:	08012e09 	.word	0x08012e09
 8012d88:	08012e09 	.word	0x08012e09
 8012d8c:	08012e09 	.word	0x08012e09
 8012d90:	08012e09 	.word	0x08012e09
 8012d94:	08012df1 	.word	0x08012df1
 8012d98:	08012e09 	.word	0x08012e09
 8012d9c:	08012e09 	.word	0x08012e09
 8012da0:	08012e09 	.word	0x08012e09
 8012da4:	08012e09 	.word	0x08012e09
 8012da8:	08012e09 	.word	0x08012e09
 8012dac:	08012e09 	.word	0x08012e09
 8012db0:	08012e09 	.word	0x08012e09
 8012db4:	08012df9 	.word	0x08012df9
 8012db8:	08012e09 	.word	0x08012e09
 8012dbc:	08012e09 	.word	0x08012e09
 8012dc0:	08012e09 	.word	0x08012e09
 8012dc4:	08012e09 	.word	0x08012e09
 8012dc8:	08012e09 	.word	0x08012e09
 8012dcc:	08012e09 	.word	0x08012e09
 8012dd0:	08012e09 	.word	0x08012e09
 8012dd4:	08012e01 	.word	0x08012e01
 8012dd8:	2301      	movs	r3, #1
 8012dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dde:	e050      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012de0:	2304      	movs	r3, #4
 8012de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012de6:	e04c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012de8:	2308      	movs	r3, #8
 8012dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dee:	e048      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012df0:	2310      	movs	r3, #16
 8012df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012df6:	e044      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012df8:	2320      	movs	r3, #32
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dfe:	e040      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e00:	2340      	movs	r3, #64	; 0x40
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e06:	e03c      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e08:	2380      	movs	r3, #128	; 0x80
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0e:	e038      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a71      	ldr	r2, [pc, #452]	; (8012fdc <UART_SetConfig+0x908>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d130      	bne.n	8012e7c <UART_SetConfig+0x7a8>
 8012e1a:	4b6f      	ldr	r3, [pc, #444]	; (8012fd8 <UART_SetConfig+0x904>)
 8012e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e1e:	f003 0307 	and.w	r3, r3, #7
 8012e22:	2b05      	cmp	r3, #5
 8012e24:	d826      	bhi.n	8012e74 <UART_SetConfig+0x7a0>
 8012e26:	a201      	add	r2, pc, #4	; (adr r2, 8012e2c <UART_SetConfig+0x758>)
 8012e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e2c:	08012e45 	.word	0x08012e45
 8012e30:	08012e4d 	.word	0x08012e4d
 8012e34:	08012e55 	.word	0x08012e55
 8012e38:	08012e5d 	.word	0x08012e5d
 8012e3c:	08012e65 	.word	0x08012e65
 8012e40:	08012e6d 	.word	0x08012e6d
 8012e44:	2302      	movs	r3, #2
 8012e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4a:	e01a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e4c:	2304      	movs	r3, #4
 8012e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e52:	e016      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e54:	2308      	movs	r3, #8
 8012e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e5a:	e012      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e5c:	2310      	movs	r3, #16
 8012e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e62:	e00e      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e64:	2320      	movs	r3, #32
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6a:	e00a      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e6c:	2340      	movs	r3, #64	; 0x40
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e72:	e006      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e74:	2380      	movs	r3, #128	; 0x80
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e7a:	e002      	b.n	8012e82 <UART_SetConfig+0x7ae>
 8012e7c:	2380      	movs	r3, #128	; 0x80
 8012e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4a55      	ldr	r2, [pc, #340]	; (8012fdc <UART_SetConfig+0x908>)
 8012e88:	4293      	cmp	r3, r2
 8012e8a:	f040 80f8 	bne.w	801307e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012e8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012e92:	2b20      	cmp	r3, #32
 8012e94:	dc46      	bgt.n	8012f24 <UART_SetConfig+0x850>
 8012e96:	2b02      	cmp	r3, #2
 8012e98:	db75      	blt.n	8012f86 <UART_SetConfig+0x8b2>
 8012e9a:	3b02      	subs	r3, #2
 8012e9c:	2b1e      	cmp	r3, #30
 8012e9e:	d872      	bhi.n	8012f86 <UART_SetConfig+0x8b2>
 8012ea0:	a201      	add	r2, pc, #4	; (adr r2, 8012ea8 <UART_SetConfig+0x7d4>)
 8012ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea6:	bf00      	nop
 8012ea8:	08012f2b 	.word	0x08012f2b
 8012eac:	08012f87 	.word	0x08012f87
 8012eb0:	08012f33 	.word	0x08012f33
 8012eb4:	08012f87 	.word	0x08012f87
 8012eb8:	08012f87 	.word	0x08012f87
 8012ebc:	08012f87 	.word	0x08012f87
 8012ec0:	08012f43 	.word	0x08012f43
 8012ec4:	08012f87 	.word	0x08012f87
 8012ec8:	08012f87 	.word	0x08012f87
 8012ecc:	08012f87 	.word	0x08012f87
 8012ed0:	08012f87 	.word	0x08012f87
 8012ed4:	08012f87 	.word	0x08012f87
 8012ed8:	08012f87 	.word	0x08012f87
 8012edc:	08012f87 	.word	0x08012f87
 8012ee0:	08012f53 	.word	0x08012f53
 8012ee4:	08012f87 	.word	0x08012f87
 8012ee8:	08012f87 	.word	0x08012f87
 8012eec:	08012f87 	.word	0x08012f87
 8012ef0:	08012f87 	.word	0x08012f87
 8012ef4:	08012f87 	.word	0x08012f87
 8012ef8:	08012f87 	.word	0x08012f87
 8012efc:	08012f87 	.word	0x08012f87
 8012f00:	08012f87 	.word	0x08012f87
 8012f04:	08012f87 	.word	0x08012f87
 8012f08:	08012f87 	.word	0x08012f87
 8012f0c:	08012f87 	.word	0x08012f87
 8012f10:	08012f87 	.word	0x08012f87
 8012f14:	08012f87 	.word	0x08012f87
 8012f18:	08012f87 	.word	0x08012f87
 8012f1c:	08012f87 	.word	0x08012f87
 8012f20:	08012f79 	.word	0x08012f79
 8012f24:	2b40      	cmp	r3, #64	; 0x40
 8012f26:	d02a      	beq.n	8012f7e <UART_SetConfig+0x8aa>
 8012f28:	e02d      	b.n	8012f86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012f2a:	f7fb fcdb 	bl	800e8e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8012f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012f30:	e02f      	b.n	8012f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fb fcea 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f40:	e027      	b.n	8012f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f42:	f107 0318 	add.w	r3, r7, #24
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7fb fe36 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f50:	e01f      	b.n	8012f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012f52:	4b21      	ldr	r3, [pc, #132]	; (8012fd8 <UART_SetConfig+0x904>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	f003 0320 	and.w	r3, r3, #32
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d009      	beq.n	8012f72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012f5e:	4b1e      	ldr	r3, [pc, #120]	; (8012fd8 <UART_SetConfig+0x904>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	08db      	lsrs	r3, r3, #3
 8012f64:	f003 0303 	and.w	r3, r3, #3
 8012f68:	4a1d      	ldr	r2, [pc, #116]	; (8012fe0 <UART_SetConfig+0x90c>)
 8012f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8012f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012f70:	e00f      	b.n	8012f92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012f72:	4b1b      	ldr	r3, [pc, #108]	; (8012fe0 <UART_SetConfig+0x90c>)
 8012f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f76:	e00c      	b.n	8012f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012f78:	4b1a      	ldr	r3, [pc, #104]	; (8012fe4 <UART_SetConfig+0x910>)
 8012f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f7c:	e009      	b.n	8012f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012f84:	e005      	b.n	8012f92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012f86:	2300      	movs	r3, #0
 8012f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f000 81ee 	beq.w	8013376 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f9e:	4a12      	ldr	r2, [pc, #72]	; (8012fe8 <UART_SetConfig+0x914>)
 8012fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	685a      	ldr	r2, [r3, #4]
 8012fb2:	4613      	mov	r3, r2
 8012fb4:	005b      	lsls	r3, r3, #1
 8012fb6:	4413      	add	r3, r2
 8012fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d305      	bcc.n	8012fca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d910      	bls.n	8012fec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012fd0:	e1d1      	b.n	8013376 <UART_SetConfig+0xca2>
 8012fd2:	bf00      	nop
 8012fd4:	40011c00 	.word	0x40011c00
 8012fd8:	58024400 	.word	0x58024400
 8012fdc:	58000c00 	.word	0x58000c00
 8012fe0:	03d09000 	.word	0x03d09000
 8012fe4:	003d0900 	.word	0x003d0900
 8012fe8:	08015620 	.word	0x08015620
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fee:	2200      	movs	r2, #0
 8012ff0:	60bb      	str	r3, [r7, #8]
 8012ff2:	60fa      	str	r2, [r7, #12]
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff8:	4ac0      	ldr	r2, [pc, #768]	; (80132fc <UART_SetConfig+0xc28>)
 8012ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	2200      	movs	r2, #0
 8013002:	603b      	str	r3, [r7, #0]
 8013004:	607a      	str	r2, [r7, #4]
 8013006:	e9d7 2300 	ldrd	r2, r3, [r7]
 801300a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801300e:	f7ed f97f 	bl	8000310 <__aeabi_uldivmod>
 8013012:	4602      	mov	r2, r0
 8013014:	460b      	mov	r3, r1
 8013016:	4610      	mov	r0, r2
 8013018:	4619      	mov	r1, r3
 801301a:	f04f 0200 	mov.w	r2, #0
 801301e:	f04f 0300 	mov.w	r3, #0
 8013022:	020b      	lsls	r3, r1, #8
 8013024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013028:	0202      	lsls	r2, r0, #8
 801302a:	6979      	ldr	r1, [r7, #20]
 801302c:	6849      	ldr	r1, [r1, #4]
 801302e:	0849      	lsrs	r1, r1, #1
 8013030:	2000      	movs	r0, #0
 8013032:	460c      	mov	r4, r1
 8013034:	4605      	mov	r5, r0
 8013036:	eb12 0804 	adds.w	r8, r2, r4
 801303a:	eb43 0905 	adc.w	r9, r3, r5
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	469a      	mov	sl, r3
 8013046:	4693      	mov	fp, r2
 8013048:	4652      	mov	r2, sl
 801304a:	465b      	mov	r3, fp
 801304c:	4640      	mov	r0, r8
 801304e:	4649      	mov	r1, r9
 8013050:	f7ed f95e 	bl	8000310 <__aeabi_uldivmod>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	4613      	mov	r3, r2
 801305a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013062:	d308      	bcc.n	8013076 <UART_SetConfig+0x9a2>
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801306a:	d204      	bcs.n	8013076 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013072:	60da      	str	r2, [r3, #12]
 8013074:	e17f      	b.n	8013376 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013076:	2301      	movs	r3, #1
 8013078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801307c:	e17b      	b.n	8013376 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	69db      	ldr	r3, [r3, #28]
 8013082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013086:	f040 80bd 	bne.w	8013204 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801308a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801308e:	2b20      	cmp	r3, #32
 8013090:	dc48      	bgt.n	8013124 <UART_SetConfig+0xa50>
 8013092:	2b00      	cmp	r3, #0
 8013094:	db7b      	blt.n	801318e <UART_SetConfig+0xaba>
 8013096:	2b20      	cmp	r3, #32
 8013098:	d879      	bhi.n	801318e <UART_SetConfig+0xaba>
 801309a:	a201      	add	r2, pc, #4	; (adr r2, 80130a0 <UART_SetConfig+0x9cc>)
 801309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a0:	0801312b 	.word	0x0801312b
 80130a4:	08013133 	.word	0x08013133
 80130a8:	0801318f 	.word	0x0801318f
 80130ac:	0801318f 	.word	0x0801318f
 80130b0:	0801313b 	.word	0x0801313b
 80130b4:	0801318f 	.word	0x0801318f
 80130b8:	0801318f 	.word	0x0801318f
 80130bc:	0801318f 	.word	0x0801318f
 80130c0:	0801314b 	.word	0x0801314b
 80130c4:	0801318f 	.word	0x0801318f
 80130c8:	0801318f 	.word	0x0801318f
 80130cc:	0801318f 	.word	0x0801318f
 80130d0:	0801318f 	.word	0x0801318f
 80130d4:	0801318f 	.word	0x0801318f
 80130d8:	0801318f 	.word	0x0801318f
 80130dc:	0801318f 	.word	0x0801318f
 80130e0:	0801315b 	.word	0x0801315b
 80130e4:	0801318f 	.word	0x0801318f
 80130e8:	0801318f 	.word	0x0801318f
 80130ec:	0801318f 	.word	0x0801318f
 80130f0:	0801318f 	.word	0x0801318f
 80130f4:	0801318f 	.word	0x0801318f
 80130f8:	0801318f 	.word	0x0801318f
 80130fc:	0801318f 	.word	0x0801318f
 8013100:	0801318f 	.word	0x0801318f
 8013104:	0801318f 	.word	0x0801318f
 8013108:	0801318f 	.word	0x0801318f
 801310c:	0801318f 	.word	0x0801318f
 8013110:	0801318f 	.word	0x0801318f
 8013114:	0801318f 	.word	0x0801318f
 8013118:	0801318f 	.word	0x0801318f
 801311c:	0801318f 	.word	0x0801318f
 8013120:	08013181 	.word	0x08013181
 8013124:	2b40      	cmp	r3, #64	; 0x40
 8013126:	d02e      	beq.n	8013186 <UART_SetConfig+0xab2>
 8013128:	e031      	b.n	801318e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801312a:	f7fa f88f 	bl	800d24c <HAL_RCC_GetPCLK1Freq>
 801312e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013130:	e033      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013132:	f7fa f8a1 	bl	800d278 <HAL_RCC_GetPCLK2Freq>
 8013136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013138:	e02f      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801313a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801313e:	4618      	mov	r0, r3
 8013140:	f7fb fbe6 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013148:	e027      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801314a:	f107 0318 	add.w	r3, r7, #24
 801314e:	4618      	mov	r0, r3
 8013150:	f7fb fd32 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013158:	e01f      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801315a:	4b69      	ldr	r3, [pc, #420]	; (8013300 <UART_SetConfig+0xc2c>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f003 0320 	and.w	r3, r3, #32
 8013162:	2b00      	cmp	r3, #0
 8013164:	d009      	beq.n	801317a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013166:	4b66      	ldr	r3, [pc, #408]	; (8013300 <UART_SetConfig+0xc2c>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	08db      	lsrs	r3, r3, #3
 801316c:	f003 0303 	and.w	r3, r3, #3
 8013170:	4a64      	ldr	r2, [pc, #400]	; (8013304 <UART_SetConfig+0xc30>)
 8013172:	fa22 f303 	lsr.w	r3, r2, r3
 8013176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013178:	e00f      	b.n	801319a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801317a:	4b62      	ldr	r3, [pc, #392]	; (8013304 <UART_SetConfig+0xc30>)
 801317c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801317e:	e00c      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013180:	4b61      	ldr	r3, [pc, #388]	; (8013308 <UART_SetConfig+0xc34>)
 8013182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013184:	e009      	b.n	801319a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801318a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801318c:	e005      	b.n	801319a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801318e:	2300      	movs	r3, #0
 8013190:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013192:	2301      	movs	r3, #1
 8013194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013198:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801319a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801319c:	2b00      	cmp	r3, #0
 801319e:	f000 80ea 	beq.w	8013376 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a6:	4a55      	ldr	r2, [pc, #340]	; (80132fc <UART_SetConfig+0xc28>)
 80131a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131ac:	461a      	mov	r2, r3
 80131ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80131b4:	005a      	lsls	r2, r3, #1
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	685b      	ldr	r3, [r3, #4]
 80131ba:	085b      	lsrs	r3, r3, #1
 80131bc:	441a      	add	r2, r3
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80131c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	2b0f      	cmp	r3, #15
 80131cc:	d916      	bls.n	80131fc <UART_SetConfig+0xb28>
 80131ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131d4:	d212      	bcs.n	80131fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80131d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d8:	b29b      	uxth	r3, r3
 80131da:	f023 030f 	bic.w	r3, r3, #15
 80131de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80131e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e2:	085b      	lsrs	r3, r3, #1
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	f003 0307 	and.w	r3, r3, #7
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80131ee:	4313      	orrs	r3, r2
 80131f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80131f8:	60da      	str	r2, [r3, #12]
 80131fa:	e0bc      	b.n	8013376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80131fc:	2301      	movs	r3, #1
 80131fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013202:	e0b8      	b.n	8013376 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013204:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013208:	2b20      	cmp	r3, #32
 801320a:	dc4b      	bgt.n	80132a4 <UART_SetConfig+0xbd0>
 801320c:	2b00      	cmp	r3, #0
 801320e:	f2c0 8087 	blt.w	8013320 <UART_SetConfig+0xc4c>
 8013212:	2b20      	cmp	r3, #32
 8013214:	f200 8084 	bhi.w	8013320 <UART_SetConfig+0xc4c>
 8013218:	a201      	add	r2, pc, #4	; (adr r2, 8013220 <UART_SetConfig+0xb4c>)
 801321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801321e:	bf00      	nop
 8013220:	080132ab 	.word	0x080132ab
 8013224:	080132b3 	.word	0x080132b3
 8013228:	08013321 	.word	0x08013321
 801322c:	08013321 	.word	0x08013321
 8013230:	080132bb 	.word	0x080132bb
 8013234:	08013321 	.word	0x08013321
 8013238:	08013321 	.word	0x08013321
 801323c:	08013321 	.word	0x08013321
 8013240:	080132cb 	.word	0x080132cb
 8013244:	08013321 	.word	0x08013321
 8013248:	08013321 	.word	0x08013321
 801324c:	08013321 	.word	0x08013321
 8013250:	08013321 	.word	0x08013321
 8013254:	08013321 	.word	0x08013321
 8013258:	08013321 	.word	0x08013321
 801325c:	08013321 	.word	0x08013321
 8013260:	080132db 	.word	0x080132db
 8013264:	08013321 	.word	0x08013321
 8013268:	08013321 	.word	0x08013321
 801326c:	08013321 	.word	0x08013321
 8013270:	08013321 	.word	0x08013321
 8013274:	08013321 	.word	0x08013321
 8013278:	08013321 	.word	0x08013321
 801327c:	08013321 	.word	0x08013321
 8013280:	08013321 	.word	0x08013321
 8013284:	08013321 	.word	0x08013321
 8013288:	08013321 	.word	0x08013321
 801328c:	08013321 	.word	0x08013321
 8013290:	08013321 	.word	0x08013321
 8013294:	08013321 	.word	0x08013321
 8013298:	08013321 	.word	0x08013321
 801329c:	08013321 	.word	0x08013321
 80132a0:	08013313 	.word	0x08013313
 80132a4:	2b40      	cmp	r3, #64	; 0x40
 80132a6:	d037      	beq.n	8013318 <UART_SetConfig+0xc44>
 80132a8:	e03a      	b.n	8013320 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80132aa:	f7f9 ffcf 	bl	800d24c <HAL_RCC_GetPCLK1Freq>
 80132ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80132b0:	e03c      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80132b2:	f7f9 ffe1 	bl	800d278 <HAL_RCC_GetPCLK2Freq>
 80132b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80132b8:	e038      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80132ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132be:	4618      	mov	r0, r3
 80132c0:	f7fb fb26 	bl	800e910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80132c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132c8:	e030      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80132ca:	f107 0318 	add.w	r3, r7, #24
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fb fc72 	bl	800ebb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132d8:	e028      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132da:	4b09      	ldr	r3, [pc, #36]	; (8013300 <UART_SetConfig+0xc2c>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	f003 0320 	and.w	r3, r3, #32
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d012      	beq.n	801330c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80132e6:	4b06      	ldr	r3, [pc, #24]	; (8013300 <UART_SetConfig+0xc2c>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	08db      	lsrs	r3, r3, #3
 80132ec:	f003 0303 	and.w	r3, r3, #3
 80132f0:	4a04      	ldr	r2, [pc, #16]	; (8013304 <UART_SetConfig+0xc30>)
 80132f2:	fa22 f303 	lsr.w	r3, r2, r3
 80132f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80132f8:	e018      	b.n	801332c <UART_SetConfig+0xc58>
 80132fa:	bf00      	nop
 80132fc:	08015620 	.word	0x08015620
 8013300:	58024400 	.word	0x58024400
 8013304:	03d09000 	.word	0x03d09000
 8013308:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801330c:	4b24      	ldr	r3, [pc, #144]	; (80133a0 <UART_SetConfig+0xccc>)
 801330e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013310:	e00c      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013312:	4b24      	ldr	r3, [pc, #144]	; (80133a4 <UART_SetConfig+0xcd0>)
 8013314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013316:	e009      	b.n	801332c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801331c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801331e:	e005      	b.n	801332c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013320:	2300      	movs	r3, #0
 8013322:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013324:	2301      	movs	r3, #1
 8013326:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801332a:	bf00      	nop
    }

    if (pclk != 0U)
 801332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801332e:	2b00      	cmp	r3, #0
 8013330:	d021      	beq.n	8013376 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013336:	4a1c      	ldr	r2, [pc, #112]	; (80133a8 <UART_SetConfig+0xcd4>)
 8013338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801333c:	461a      	mov	r2, r3
 801333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013340:	fbb3 f2f2 	udiv	r2, r3, r2
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	085b      	lsrs	r3, r3, #1
 801334a:	441a      	add	r2, r3
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	fbb2 f3f3 	udiv	r3, r2, r3
 8013354:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013358:	2b0f      	cmp	r3, #15
 801335a:	d909      	bls.n	8013370 <UART_SetConfig+0xc9c>
 801335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013362:	d205      	bcs.n	8013370 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013366:	b29a      	uxth	r2, r3
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	60da      	str	r2, [r3, #12]
 801336e:	e002      	b.n	8013376 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013370:	2301      	movs	r3, #1
 8013372:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2201      	movs	r2, #1
 801337a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801337e:	697b      	ldr	r3, [r7, #20]
 8013380:	2201      	movs	r2, #1
 8013382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2200      	movs	r2, #0
 801338a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	2200      	movs	r2, #0
 8013390:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8013392:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013396:	4618      	mov	r0, r3
 8013398:	3748      	adds	r7, #72	; 0x48
 801339a:	46bd      	mov	sp, r7
 801339c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133a0:	03d09000 	.word	0x03d09000
 80133a4:	003d0900 	.word	0x003d0900
 80133a8:	08015620 	.word	0x08015620

080133ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b083      	sub	sp, #12
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133b8:	f003 0301 	and.w	r3, r3, #1
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00a      	beq.n	80133d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	430a      	orrs	r2, r1
 80133d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133da:	f003 0302 	and.w	r3, r3, #2
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00a      	beq.n	80133f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	430a      	orrs	r2, r1
 80133f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133fc:	f003 0304 	and.w	r3, r3, #4
 8013400:	2b00      	cmp	r3, #0
 8013402:	d00a      	beq.n	801341a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	430a      	orrs	r2, r1
 8013418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801341e:	f003 0308 	and.w	r3, r3, #8
 8013422:	2b00      	cmp	r3, #0
 8013424:	d00a      	beq.n	801343c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	430a      	orrs	r2, r1
 801343a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013440:	f003 0310 	and.w	r3, r3, #16
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00a      	beq.n	801345e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	430a      	orrs	r2, r1
 801345c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013462:	f003 0320 	and.w	r3, r3, #32
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00a      	beq.n	8013480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	430a      	orrs	r2, r1
 801347e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013488:	2b00      	cmp	r3, #0
 801348a:	d01a      	beq.n	80134c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	430a      	orrs	r2, r1
 80134a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80134aa:	d10a      	bne.n	80134c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	430a      	orrs	r2, r1
 80134c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d00a      	beq.n	80134e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	430a      	orrs	r2, r1
 80134e2:	605a      	str	r2, [r3, #4]
  }
}
 80134e4:	bf00      	nop
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af02      	add	r7, sp, #8
 80134f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2200      	movs	r2, #0
 80134fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013500:	f7f1 ff14 	bl	800532c <HAL_GetTick>
 8013504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f003 0308 	and.w	r3, r3, #8
 8013510:	2b08      	cmp	r3, #8
 8013512:	d10e      	bne.n	8013532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2200      	movs	r2, #0
 801351e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 f82f 	bl	8013586 <UART_WaitOnFlagUntilTimeout>
 8013528:	4603      	mov	r3, r0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d001      	beq.n	8013532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801352e:	2303      	movs	r3, #3
 8013530:	e025      	b.n	801357e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f003 0304 	and.w	r3, r3, #4
 801353c:	2b04      	cmp	r3, #4
 801353e:	d10e      	bne.n	801355e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013544:	9300      	str	r3, [sp, #0]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2200      	movs	r2, #0
 801354a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f819 	bl	8013586 <UART_WaitOnFlagUntilTimeout>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801355a:	2303      	movs	r3, #3
 801355c:	e00f      	b.n	801357e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2220      	movs	r2, #32
 8013562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2220      	movs	r2, #32
 801356a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2200      	movs	r2, #0
 8013572:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2200      	movs	r2, #0
 8013578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013586:	b580      	push	{r7, lr}
 8013588:	b09c      	sub	sp, #112	; 0x70
 801358a:	af00      	add	r7, sp, #0
 801358c:	60f8      	str	r0, [r7, #12]
 801358e:	60b9      	str	r1, [r7, #8]
 8013590:	603b      	str	r3, [r7, #0]
 8013592:	4613      	mov	r3, r2
 8013594:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013596:	e0a9      	b.n	80136ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801359a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801359e:	f000 80a5 	beq.w	80136ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80135a2:	f7f1 fec3 	bl	800532c <HAL_GetTick>
 80135a6:	4602      	mov	r2, r0
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d302      	bcc.n	80135b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80135b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d140      	bne.n	801363a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c0:	e853 3f00 	ldrex	r3, [r3]
 80135c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80135c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80135cc:	667b      	str	r3, [r7, #100]	; 0x64
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	461a      	mov	r2, r3
 80135d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80135d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80135dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80135de:	e841 2300 	strex	r3, r2, [r1]
 80135e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80135e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d1e6      	bne.n	80135b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	3308      	adds	r3, #8
 80135f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135f4:	e853 3f00 	ldrex	r3, [r3]
 80135f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80135fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fc:	f023 0301 	bic.w	r3, r3, #1
 8013600:	663b      	str	r3, [r7, #96]	; 0x60
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	3308      	adds	r3, #8
 8013608:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801360a:	64ba      	str	r2, [r7, #72]	; 0x48
 801360c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801360e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013612:	e841 2300 	strex	r3, r2, [r1]
 8013616:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1e5      	bne.n	80135ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	2220      	movs	r2, #32
 8013622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2220      	movs	r2, #32
 801362a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8013636:	2303      	movs	r3, #3
 8013638:	e069      	b.n	801370e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f003 0304 	and.w	r3, r3, #4
 8013644:	2b00      	cmp	r3, #0
 8013646:	d051      	beq.n	80136ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	69db      	ldr	r3, [r3, #28]
 801364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013656:	d149      	bne.n	80136ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013660:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	e853 3f00 	ldrex	r3, [r3]
 801366e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	461a      	mov	r2, r3
 801367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013680:	637b      	str	r3, [r7, #52]	; 0x34
 8013682:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013688:	e841 2300 	strex	r3, r2, [r1]
 801368c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013690:	2b00      	cmp	r3, #0
 8013692:	d1e6      	bne.n	8013662 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	3308      	adds	r3, #8
 801369a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	e853 3f00 	ldrex	r3, [r3]
 80136a2:	613b      	str	r3, [r7, #16]
   return(result);
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	f023 0301 	bic.w	r3, r3, #1
 80136aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	3308      	adds	r3, #8
 80136b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80136b4:	623a      	str	r2, [r7, #32]
 80136b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136b8:	69f9      	ldr	r1, [r7, #28]
 80136ba:	6a3a      	ldr	r2, [r7, #32]
 80136bc:	e841 2300 	strex	r3, r2, [r1]
 80136c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80136c2:	69bb      	ldr	r3, [r7, #24]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1e5      	bne.n	8013694 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2220      	movs	r2, #32
 80136cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2220      	movs	r2, #32
 80136d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2220      	movs	r2, #32
 80136dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80136e8:	2303      	movs	r3, #3
 80136ea:	e010      	b.n	801370e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	69da      	ldr	r2, [r3, #28]
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	4013      	ands	r3, r2
 80136f6:	68ba      	ldr	r2, [r7, #8]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	bf0c      	ite	eq
 80136fc:	2301      	moveq	r3, #1
 80136fe:	2300      	movne	r3, #0
 8013700:	b2db      	uxtb	r3, r3
 8013702:	461a      	mov	r2, r3
 8013704:	79fb      	ldrb	r3, [r7, #7]
 8013706:	429a      	cmp	r2, r3
 8013708:	f43f af46 	beq.w	8013598 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	3770      	adds	r7, #112	; 0x70
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
	...

08013718 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013718:	b480      	push	{r7}
 801371a:	b0a3      	sub	sp, #140	; 0x8c
 801371c:	af00      	add	r7, sp, #0
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	4613      	mov	r3, r2
 8013724:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	68ba      	ldr	r2, [r7, #8]
 801372a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	88fa      	ldrh	r2, [r7, #6]
 8013730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	88fa      	ldrh	r2, [r7, #6]
 8013738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2200      	movs	r2, #0
 8013740:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801374a:	d10e      	bne.n	801376a <UART_Start_Receive_IT+0x52>
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	691b      	ldr	r3, [r3, #16]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d105      	bne.n	8013760 <UART_Start_Receive_IT+0x48>
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f240 12ff 	movw	r2, #511	; 0x1ff
 801375a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801375e:	e02d      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	22ff      	movs	r2, #255	; 0xff
 8013764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013768:	e028      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	689b      	ldr	r3, [r3, #8]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10d      	bne.n	801378e <UART_Start_Receive_IT+0x76>
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	691b      	ldr	r3, [r3, #16]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d104      	bne.n	8013784 <UART_Start_Receive_IT+0x6c>
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	22ff      	movs	r2, #255	; 0xff
 801377e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013782:	e01b      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	227f      	movs	r2, #127	; 0x7f
 8013788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801378c:	e016      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	689b      	ldr	r3, [r3, #8]
 8013792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013796:	d10d      	bne.n	80137b4 <UART_Start_Receive_IT+0x9c>
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	691b      	ldr	r3, [r3, #16]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d104      	bne.n	80137aa <UART_Start_Receive_IT+0x92>
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	227f      	movs	r2, #127	; 0x7f
 80137a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80137a8:	e008      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	223f      	movs	r2, #63	; 0x3f
 80137ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80137b2:	e003      	b.n	80137bc <UART_Start_Receive_IT+0xa4>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2200      	movs	r2, #0
 80137b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2222      	movs	r2, #34	; 0x22
 80137c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	3308      	adds	r3, #8
 80137d2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137d6:	e853 3f00 	ldrex	r3, [r3]
 80137da:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80137dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80137de:	f043 0301 	orr.w	r3, r3, #1
 80137e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	3308      	adds	r3, #8
 80137ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80137f0:	673a      	str	r2, [r7, #112]	; 0x70
 80137f2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80137f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80137f8:	e841 2300 	strex	r3, r2, [r1]
 80137fc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80137fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013800:	2b00      	cmp	r3, #0
 8013802:	d1e3      	bne.n	80137cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801380c:	d153      	bne.n	80138b6 <UART_Start_Receive_IT+0x19e>
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013814:	88fa      	ldrh	r2, [r7, #6]
 8013816:	429a      	cmp	r2, r3
 8013818:	d34d      	bcc.n	80138b6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013822:	d107      	bne.n	8013834 <UART_Start_Receive_IT+0x11c>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	691b      	ldr	r3, [r3, #16]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d103      	bne.n	8013834 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	4a4b      	ldr	r2, [pc, #300]	; (801395c <UART_Start_Receive_IT+0x244>)
 8013830:	671a      	str	r2, [r3, #112]	; 0x70
 8013832:	e002      	b.n	801383a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	4a4a      	ldr	r2, [pc, #296]	; (8013960 <UART_Start_Receive_IT+0x248>)
 8013838:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	691b      	ldr	r3, [r3, #16]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d01a      	beq.n	8013880 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013852:	e853 3f00 	ldrex	r3, [r3]
 8013856:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801385a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801385e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	461a      	mov	r2, r3
 8013868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801386c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801386e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013870:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013872:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013874:	e841 2300 	strex	r3, r2, [r1]
 8013878:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801387a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1e4      	bne.n	801384a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	3308      	adds	r3, #8
 8013886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801388a:	e853 3f00 	ldrex	r3, [r3]
 801388e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	3308      	adds	r3, #8
 801389e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80138a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80138a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80138a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80138a8:	e841 2300 	strex	r3, r2, [r1]
 80138ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80138ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1e5      	bne.n	8013880 <UART_Start_Receive_IT+0x168>
 80138b4:	e04a      	b.n	801394c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	689b      	ldr	r3, [r3, #8]
 80138ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138be:	d107      	bne.n	80138d0 <UART_Start_Receive_IT+0x1b8>
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	691b      	ldr	r3, [r3, #16]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d103      	bne.n	80138d0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	4a26      	ldr	r2, [pc, #152]	; (8013964 <UART_Start_Receive_IT+0x24c>)
 80138cc:	671a      	str	r2, [r3, #112]	; 0x70
 80138ce:	e002      	b.n	80138d6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4a25      	ldr	r2, [pc, #148]	; (8013968 <UART_Start_Receive_IT+0x250>)
 80138d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	691b      	ldr	r3, [r3, #16]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d019      	beq.n	801391a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	e853 3f00 	ldrex	r3, [r3]
 80138f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80138fa:	677b      	str	r3, [r7, #116]	; 0x74
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	461a      	mov	r2, r3
 8013902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013904:	637b      	str	r3, [r7, #52]	; 0x34
 8013906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801390a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801390c:	e841 2300 	strex	r3, r2, [r1]
 8013910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013914:	2b00      	cmp	r3, #0
 8013916:	d1e6      	bne.n	80138e6 <UART_Start_Receive_IT+0x1ce>
 8013918:	e018      	b.n	801394c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	e853 3f00 	ldrex	r3, [r3]
 8013926:	613b      	str	r3, [r7, #16]
   return(result);
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	f043 0320 	orr.w	r3, r3, #32
 801392e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	461a      	mov	r2, r3
 8013936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013938:	623b      	str	r3, [r7, #32]
 801393a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801393c:	69f9      	ldr	r1, [r7, #28]
 801393e:	6a3a      	ldr	r2, [r7, #32]
 8013940:	e841 2300 	strex	r3, r2, [r1]
 8013944:	61bb      	str	r3, [r7, #24]
   return(result);
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1e6      	bne.n	801391a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 801394c:	2300      	movs	r3, #0
}
 801394e:	4618      	mov	r0, r3
 8013950:	378c      	adds	r7, #140	; 0x8c
 8013952:	46bd      	mov	sp, r7
 8013954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013958:	4770      	bx	lr
 801395a:	bf00      	nop
 801395c:	080143b9 	.word	0x080143b9
 8013960:	080140c1 	.word	0x080140c1
 8013964:	08013f5f 	.word	0x08013f5f
 8013968:	08013dff 	.word	0x08013dff

0801396c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801396c:	b480      	push	{r7}
 801396e:	b095      	sub	sp, #84	; 0x54
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801397a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397c:	e853 3f00 	ldrex	r3, [r3]
 8013980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013988:	64fb      	str	r3, [r7, #76]	; 0x4c
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	461a      	mov	r2, r3
 8013990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013992:	643b      	str	r3, [r7, #64]	; 0x40
 8013994:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801399a:	e841 2300 	strex	r3, r2, [r1]
 801399e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1e6      	bne.n	8013974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3308      	adds	r3, #8
 80139ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	e853 3f00 	ldrex	r3, [r3]
 80139b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80139b6:	69fa      	ldr	r2, [r7, #28]
 80139b8:	4b1e      	ldr	r3, [pc, #120]	; (8013a34 <UART_EndRxTransfer+0xc8>)
 80139ba:	4013      	ands	r3, r2
 80139bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3308      	adds	r3, #8
 80139c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80139c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139ce:	e841 2300 	strex	r3, r2, [r1]
 80139d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80139d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d1e5      	bne.n	80139a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d118      	bne.n	8013a14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	e853 3f00 	ldrex	r3, [r3]
 80139ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	f023 0310 	bic.w	r3, r3, #16
 80139f6:	647b      	str	r3, [r7, #68]	; 0x44
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	461a      	mov	r2, r3
 80139fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a00:	61bb      	str	r3, [r7, #24]
 8013a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a04:	6979      	ldr	r1, [r7, #20]
 8013a06:	69ba      	ldr	r2, [r7, #24]
 8013a08:	e841 2300 	strex	r3, r2, [r1]
 8013a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1e6      	bne.n	80139e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2220      	movs	r2, #32
 8013a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	671a      	str	r2, [r3, #112]	; 0x70
}
 8013a28:	bf00      	nop
 8013a2a:	3754      	adds	r7, #84	; 0x54
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr
 8013a34:	effffffe 	.word	0xeffffffe

08013a38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b084      	sub	sp, #16
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f7fe fe26 	bl	80126a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a5c:	bf00      	nop
 8013a5e:	3710      	adds	r7, #16
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}

08013a64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013a64:	b480      	push	{r7}
 8013a66:	b08f      	sub	sp, #60	; 0x3c
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a72:	2b21      	cmp	r3, #33	; 0x21
 8013a74:	d14c      	bne.n	8013b10 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d132      	bne.n	8013ae8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a88:	6a3b      	ldr	r3, [r7, #32]
 8013a8a:	e853 3f00 	ldrex	r3, [r3]
 8013a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a96:	637b      	str	r3, [r7, #52]	; 0x34
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aa2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aa8:	e841 2300 	strex	r3, r2, [r1]
 8013aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d1e6      	bne.n	8013a82 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	e853 3f00 	ldrex	r3, [r3]
 8013ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	461a      	mov	r2, r3
 8013ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad2:	61bb      	str	r3, [r7, #24]
 8013ad4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ad6:	6979      	ldr	r1, [r7, #20]
 8013ad8:	69ba      	ldr	r2, [r7, #24]
 8013ada:	e841 2300 	strex	r3, r2, [r1]
 8013ade:	613b      	str	r3, [r7, #16]
   return(result);
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d1e6      	bne.n	8013ab4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8013ae6:	e013      	b.n	8013b10 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013aec:	781a      	ldrb	r2, [r3, #0]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af8:	1c5a      	adds	r2, r3, #1
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	3b01      	subs	r3, #1
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8013b10:	bf00      	nop
 8013b12:	373c      	adds	r7, #60	; 0x3c
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b091      	sub	sp, #68	; 0x44
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b2a:	2b21      	cmp	r3, #33	; 0x21
 8013b2c:	d151      	bne.n	8013bd2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d132      	bne.n	8013ba0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b42:	e853 3f00 	ldrex	r3, [r3]
 8013b46:	623b      	str	r3, [r7, #32]
   return(result);
 8013b48:	6a3b      	ldr	r3, [r7, #32]
 8013b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	461a      	mov	r2, r3
 8013b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b58:	633b      	str	r3, [r7, #48]	; 0x30
 8013b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b60:	e841 2300 	strex	r3, r2, [r1]
 8013b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1e6      	bne.n	8013b3a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	e853 3f00 	ldrex	r3, [r3]
 8013b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b80:	637b      	str	r3, [r7, #52]	; 0x34
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	461a      	mov	r2, r3
 8013b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8a:	61fb      	str	r3, [r7, #28]
 8013b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8e:	69b9      	ldr	r1, [r7, #24]
 8013b90:	69fa      	ldr	r2, [r7, #28]
 8013b92:	e841 2300 	strex	r3, r2, [r1]
 8013b96:	617b      	str	r3, [r7, #20]
   return(result);
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1e6      	bne.n	8013b6c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013b9e:	e018      	b.n	8013bd2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013bb4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bba:	1c9a      	adds	r2, r3, #2
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	b29a      	uxth	r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8013bd2:	bf00      	nop
 8013bd4:	3744      	adds	r7, #68	; 0x44
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr

08013bde <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013bde:	b480      	push	{r7}
 8013be0:	b091      	sub	sp, #68	; 0x44
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bec:	2b21      	cmp	r3, #33	; 0x21
 8013bee:	d160      	bne.n	8013cb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013bf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013bf8:	e057      	b.n	8013caa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d133      	bne.n	8013c6e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	3308      	adds	r3, #8
 8013c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c10:	e853 3f00 	ldrex	r3, [r3]
 8013c14:	623b      	str	r3, [r7, #32]
   return(result);
 8013c16:	6a3b      	ldr	r3, [r7, #32]
 8013c18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	3308      	adds	r3, #8
 8013c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c26:	633a      	str	r2, [r7, #48]	; 0x30
 8013c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c2e:	e841 2300 	strex	r3, r2, [r1]
 8013c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d1e5      	bne.n	8013c06 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	e853 3f00 	ldrex	r3, [r3]
 8013c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	461a      	mov	r2, r3
 8013c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c58:	61fb      	str	r3, [r7, #28]
 8013c5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c5c:	69b9      	ldr	r1, [r7, #24]
 8013c5e:	69fa      	ldr	r2, [r7, #28]
 8013c60:	e841 2300 	strex	r3, r2, [r1]
 8013c64:	617b      	str	r3, [r7, #20]
   return(result);
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d1e6      	bne.n	8013c3a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013c6c:	e021      	b.n	8013cb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	69db      	ldr	r3, [r3, #28]
 8013c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d013      	beq.n	8013ca4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c80:	781a      	ldrb	r2, [r3, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	b29a      	uxth	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013ca4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013caa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d1a4      	bne.n	8013bfa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013cb0:	e7ff      	b.n	8013cb2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8013cb2:	bf00      	nop
 8013cb4:	3744      	adds	r7, #68	; 0x44
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr

08013cbe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013cbe:	b480      	push	{r7}
 8013cc0:	b091      	sub	sp, #68	; 0x44
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ccc:	2b21      	cmp	r3, #33	; 0x21
 8013cce:	d165      	bne.n	8013d9c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013cd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013cd8:	e05c      	b.n	8013d94 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d133      	bne.n	8013d4e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	3308      	adds	r3, #8
 8013cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	e853 3f00 	ldrex	r3, [r3]
 8013cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	3308      	adds	r3, #8
 8013d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d0e:	e841 2300 	strex	r3, r2, [r1]
 8013d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d1e5      	bne.n	8013ce6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	e853 3f00 	ldrex	r3, [r3]
 8013d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	461a      	mov	r2, r3
 8013d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d38:	61bb      	str	r3, [r7, #24]
 8013d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d3c:	6979      	ldr	r1, [r7, #20]
 8013d3e:	69ba      	ldr	r2, [r7, #24]
 8013d40:	e841 2300 	strex	r3, r2, [r1]
 8013d44:	613b      	str	r3, [r7, #16]
   return(result);
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d1e6      	bne.n	8013d1a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013d4c:	e026      	b.n	8013d9c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	69db      	ldr	r3, [r3, #28]
 8013d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d018      	beq.n	8013d8e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d60:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	461a      	mov	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013d70:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d76:	1c9a      	adds	r2, r3, #2
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	3b01      	subs	r3, #1
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013d8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d90:	3b01      	subs	r3, #1
 8013d92:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013d94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d19f      	bne.n	8013cda <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013d9a:	e7ff      	b.n	8013d9c <UART_TxISR_16BIT_FIFOEN+0xde>
 8013d9c:	bf00      	nop
 8013d9e:	3744      	adds	r7, #68	; 0x44
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr

08013da8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b088      	sub	sp, #32
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	e853 3f00 	ldrex	r3, [r3]
 8013dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dc4:	61fb      	str	r3, [r7, #28]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	461a      	mov	r2, r3
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	61bb      	str	r3, [r7, #24]
 8013dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dd2:	6979      	ldr	r1, [r7, #20]
 8013dd4:	69ba      	ldr	r2, [r7, #24]
 8013dd6:	e841 2300 	strex	r3, r2, [r1]
 8013dda:	613b      	str	r3, [r7, #16]
   return(result);
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1e6      	bne.n	8013db0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2220      	movs	r2, #32
 8013de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2200      	movs	r2, #0
 8013dee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7fe fc4f 	bl	8012694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013df6:	bf00      	nop
 8013df8:	3720      	adds	r7, #32
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b096      	sub	sp, #88	; 0x58
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e16:	2b22      	cmp	r3, #34	; 0x22
 8013e18:	f040 8095 	bne.w	8013f46 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013e26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013e2a:	b2d9      	uxtb	r1, r3
 8013e2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013e30:	b2da      	uxtb	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e36:	400a      	ands	r2, r1
 8013e38:	b2d2      	uxtb	r2, r2
 8013e3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e40:	1c5a      	adds	r2, r3, #1
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	3b01      	subs	r3, #1
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d178      	bne.n	8013f56 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6c:	e853 3f00 	ldrex	r3, [r3]
 8013e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013e78:	653b      	str	r3, [r7, #80]	; 0x50
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e82:	647b      	str	r3, [r7, #68]	; 0x44
 8013e84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e8a:	e841 2300 	strex	r3, r2, [r1]
 8013e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d1e6      	bne.n	8013e64 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	3308      	adds	r3, #8
 8013e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	e853 3f00 	ldrex	r3, [r3]
 8013ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8013ea6:	6a3b      	ldr	r3, [r7, #32]
 8013ea8:	f023 0301 	bic.w	r3, r3, #1
 8013eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8013eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ebe:	e841 2300 	strex	r3, r2, [r1]
 8013ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d1e5      	bne.n	8013e96 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2220      	movs	r2, #32
 8013ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d12e      	bne.n	8013f3e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	e853 3f00 	ldrex	r3, [r3]
 8013ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f023 0310 	bic.w	r3, r3, #16
 8013efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	461a      	mov	r2, r3
 8013f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f04:	61fb      	str	r3, [r7, #28]
 8013f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f08:	69b9      	ldr	r1, [r7, #24]
 8013f0a:	69fa      	ldr	r2, [r7, #28]
 8013f0c:	e841 2300 	strex	r3, r2, [r1]
 8013f10:	617b      	str	r3, [r7, #20]
   return(result);
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d1e6      	bne.n	8013ee6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	69db      	ldr	r3, [r3, #28]
 8013f1e:	f003 0310 	and.w	r3, r3, #16
 8013f22:	2b10      	cmp	r3, #16
 8013f24:	d103      	bne.n	8013f2e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2210      	movs	r2, #16
 8013f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013f34:	4619      	mov	r1, r3
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7fe fbc0 	bl	80126bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013f3c:	e00b      	b.n	8013f56 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ee fcce 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 8013f44:	e007      	b.n	8013f56 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	699a      	ldr	r2, [r3, #24]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f042 0208 	orr.w	r2, r2, #8
 8013f54:	619a      	str	r2, [r3, #24]
}
 8013f56:	bf00      	nop
 8013f58:	3758      	adds	r7, #88	; 0x58
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}

08013f5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b096      	sub	sp, #88	; 0x58
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f76:	2b22      	cmp	r3, #34	; 0x22
 8013f78:	f040 8095 	bne.w	80140a6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013f8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013f90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013f94:	4013      	ands	r3, r2
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fa0:	1c9a      	adds	r2, r3, #2
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d178      	bne.n	80140b6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fcc:	e853 3f00 	ldrex	r3, [r3]
 8013fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	461a      	mov	r2, r3
 8013fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8013fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013fea:	e841 2300 	strex	r3, r2, [r1]
 8013fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d1e6      	bne.n	8013fc4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	3308      	adds	r3, #8
 8013ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ffe:	6a3b      	ldr	r3, [r7, #32]
 8014000:	e853 3f00 	ldrex	r3, [r3]
 8014004:	61fb      	str	r3, [r7, #28]
   return(result);
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	f023 0301 	bic.w	r3, r3, #1
 801400c:	64bb      	str	r3, [r7, #72]	; 0x48
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	3308      	adds	r3, #8
 8014014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801401a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801401c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801401e:	e841 2300 	strex	r3, r2, [r1]
 8014022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014026:	2b00      	cmp	r3, #0
 8014028:	d1e5      	bne.n	8013ff6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2220      	movs	r2, #32
 801402e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801403c:	2b01      	cmp	r3, #1
 801403e:	d12e      	bne.n	801409e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2200      	movs	r2, #0
 8014044:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	e853 3f00 	ldrex	r3, [r3]
 8014052:	60bb      	str	r3, [r7, #8]
   return(result);
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	f023 0310 	bic.w	r3, r3, #16
 801405a:	647b      	str	r3, [r7, #68]	; 0x44
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	461a      	mov	r2, r3
 8014062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014064:	61bb      	str	r3, [r7, #24]
 8014066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014068:	6979      	ldr	r1, [r7, #20]
 801406a:	69ba      	ldr	r2, [r7, #24]
 801406c:	e841 2300 	strex	r3, r2, [r1]
 8014070:	613b      	str	r3, [r7, #16]
   return(result);
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1e6      	bne.n	8014046 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	69db      	ldr	r3, [r3, #28]
 801407e:	f003 0310 	and.w	r3, r3, #16
 8014082:	2b10      	cmp	r3, #16
 8014084:	d103      	bne.n	801408e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2210      	movs	r2, #16
 801408c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014094:	4619      	mov	r1, r3
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f7fe fb10 	bl	80126bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801409c:	e00b      	b.n	80140b6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ee fc1e 	bl	80028e0 <HAL_UART_RxCpltCallback>
}
 80140a4:	e007      	b.n	80140b6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	699a      	ldr	r2, [r3, #24]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f042 0208 	orr.w	r2, r2, #8
 80140b4:	619a      	str	r2, [r3, #24]
}
 80140b6:	bf00      	nop
 80140b8:	3758      	adds	r7, #88	; 0x58
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
	...

080140c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b0a6      	sub	sp, #152	; 0x98
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	69db      	ldr	r3, [r3, #28]
 80140d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	689b      	ldr	r3, [r3, #8]
 80140ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140f6:	2b22      	cmp	r3, #34	; 0x22
 80140f8:	f040 814d 	bne.w	8014396 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014102:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014106:	e0f4      	b.n	80142f2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014112:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014116:	b2d9      	uxtb	r1, r3
 8014118:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801411c:	b2da      	uxtb	r2, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014122:	400a      	ands	r2, r1
 8014124:	b2d2      	uxtb	r2, r2
 8014126:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801412c:	1c5a      	adds	r2, r3, #1
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014138:	b29b      	uxth	r3, r3
 801413a:	3b01      	subs	r3, #1
 801413c:	b29a      	uxth	r2, r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	69db      	ldr	r3, [r3, #28]
 801414a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801414e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014152:	f003 0307 	and.w	r3, r3, #7
 8014156:	2b00      	cmp	r3, #0
 8014158:	d053      	beq.n	8014202 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801415a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801415e:	f003 0301 	and.w	r3, r3, #1
 8014162:	2b00      	cmp	r3, #0
 8014164:	d011      	beq.n	801418a <UART_RxISR_8BIT_FIFOEN+0xca>
 8014166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00b      	beq.n	801418a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2201      	movs	r2, #1
 8014178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014180:	f043 0201 	orr.w	r2, r3, #1
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801418a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801418e:	f003 0302 	and.w	r3, r3, #2
 8014192:	2b00      	cmp	r3, #0
 8014194:	d011      	beq.n	80141ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801419a:	f003 0301 	and.w	r3, r3, #1
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00b      	beq.n	80141ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2202      	movs	r2, #2
 80141a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141b0:	f043 0204 	orr.w	r2, r3, #4
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80141ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80141be:	f003 0304 	and.w	r3, r3, #4
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d011      	beq.n	80141ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80141c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d00b      	beq.n	80141ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2204      	movs	r2, #4
 80141d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141e0:	f043 0202 	orr.w	r2, r3, #2
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d006      	beq.n	8014202 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7fe fa57 	bl	80126a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2200      	movs	r2, #0
 80141fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014208:	b29b      	uxth	r3, r3
 801420a:	2b00      	cmp	r3, #0
 801420c:	d171      	bne.n	80142f2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014216:	e853 3f00 	ldrex	r3, [r3]
 801421a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801421c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801421e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	461a      	mov	r2, r3
 801422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014230:	66bb      	str	r3, [r7, #104]	; 0x68
 8014232:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014234:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014238:	e841 2300 	strex	r3, r2, [r1]
 801423c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801423e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014240:	2b00      	cmp	r3, #0
 8014242:	d1e4      	bne.n	801420e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	3308      	adds	r3, #8
 801424a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801424c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801424e:	e853 3f00 	ldrex	r3, [r3]
 8014252:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014256:	4b56      	ldr	r3, [pc, #344]	; (80143b0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8014258:	4013      	ands	r3, r2
 801425a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	3308      	adds	r3, #8
 8014262:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014264:	657a      	str	r2, [r7, #84]	; 0x54
 8014266:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014268:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801426a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801426c:	e841 2300 	strex	r3, r2, [r1]
 8014270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014274:	2b00      	cmp	r3, #0
 8014276:	d1e5      	bne.n	8014244 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2220      	movs	r2, #32
 801427c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2200      	movs	r2, #0
 8014284:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801428a:	2b01      	cmp	r3, #1
 801428c:	d12e      	bne.n	80142ec <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	2200      	movs	r2, #0
 8014292:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801429c:	e853 3f00 	ldrex	r3, [r3]
 80142a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80142a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a4:	f023 0310 	bic.w	r3, r3, #16
 80142a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	461a      	mov	r2, r3
 80142b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142b2:	643b      	str	r3, [r7, #64]	; 0x40
 80142b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142ba:	e841 2300 	strex	r3, r2, [r1]
 80142be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80142c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d1e6      	bne.n	8014294 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	69db      	ldr	r3, [r3, #28]
 80142cc:	f003 0310 	and.w	r3, r3, #16
 80142d0:	2b10      	cmp	r3, #16
 80142d2:	d103      	bne.n	80142dc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2210      	movs	r2, #16
 80142da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142e2:	4619      	mov	r1, r3
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7fe f9e9 	bl	80126bc <HAL_UARTEx_RxEventCallback>
 80142ea:	e002      	b.n	80142f2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7ee faf7 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80142f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d006      	beq.n	8014308 <UART_RxISR_8BIT_FIFOEN+0x248>
 80142fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80142fe:	f003 0320 	and.w	r3, r3, #32
 8014302:	2b00      	cmp	r3, #0
 8014304:	f47f af00 	bne.w	8014108 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801430e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014312:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8014316:	2b00      	cmp	r3, #0
 8014318:	d045      	beq.n	80143a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014320:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014324:	429a      	cmp	r2, r3
 8014326:	d23e      	bcs.n	80143a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	3308      	adds	r3, #8
 801432e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014330:	6a3b      	ldr	r3, [r7, #32]
 8014332:	e853 3f00 	ldrex	r3, [r3]
 8014336:	61fb      	str	r3, [r7, #28]
   return(result);
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801433e:	673b      	str	r3, [r7, #112]	; 0x70
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	3308      	adds	r3, #8
 8014346:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014348:	62fa      	str	r2, [r7, #44]	; 0x2c
 801434a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801434e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014350:	e841 2300 	strex	r3, r2, [r1]
 8014354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014358:	2b00      	cmp	r3, #0
 801435a:	d1e5      	bne.n	8014328 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	4a15      	ldr	r2, [pc, #84]	; (80143b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8014360:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	e853 3f00 	ldrex	r3, [r3]
 801436e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	f043 0320 	orr.w	r3, r3, #32
 8014376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	461a      	mov	r2, r3
 801437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014380:	61bb      	str	r3, [r7, #24]
 8014382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014384:	6979      	ldr	r1, [r7, #20]
 8014386:	69ba      	ldr	r2, [r7, #24]
 8014388:	e841 2300 	strex	r3, r2, [r1]
 801438c:	613b      	str	r3, [r7, #16]
   return(result);
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d1e6      	bne.n	8014362 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014394:	e007      	b.n	80143a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	699a      	ldr	r2, [r3, #24]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f042 0208 	orr.w	r2, r2, #8
 80143a4:	619a      	str	r2, [r3, #24]
}
 80143a6:	bf00      	nop
 80143a8:	3798      	adds	r7, #152	; 0x98
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	effffffe 	.word	0xeffffffe
 80143b4:	08013dff 	.word	0x08013dff

080143b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b0a8      	sub	sp, #160	; 0xa0
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	69db      	ldr	r3, [r3, #28]
 80143d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	689b      	ldr	r3, [r3, #8]
 80143e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143ee:	2b22      	cmp	r3, #34	; 0x22
 80143f0:	f040 8151 	bne.w	8014696 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80143fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80143fe:	e0f8      	b.n	80145f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014406:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801440e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8014412:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8014416:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801441a:	4013      	ands	r3, r2
 801441c:	b29a      	uxth	r2, r3
 801441e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014428:	1c9a      	adds	r2, r3, #2
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014434:	b29b      	uxth	r3, r3
 8014436:	3b01      	subs	r3, #1
 8014438:	b29a      	uxth	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	69db      	ldr	r3, [r3, #28]
 8014446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801444a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801444e:	f003 0307 	and.w	r3, r3, #7
 8014452:	2b00      	cmp	r3, #0
 8014454:	d053      	beq.n	80144fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801445a:	f003 0301 	and.w	r3, r3, #1
 801445e:	2b00      	cmp	r3, #0
 8014460:	d011      	beq.n	8014486 <UART_RxISR_16BIT_FIFOEN+0xce>
 8014462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00b      	beq.n	8014486 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2201      	movs	r2, #1
 8014474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801447c:	f043 0201 	orr.w	r2, r3, #1
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801448a:	f003 0302 	and.w	r3, r3, #2
 801448e:	2b00      	cmp	r3, #0
 8014490:	d011      	beq.n	80144b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014492:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014496:	f003 0301 	and.w	r3, r3, #1
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00b      	beq.n	80144b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2202      	movs	r2, #2
 80144a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144ac:	f043 0204 	orr.w	r2, r3, #4
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80144b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80144ba:	f003 0304 	and.w	r3, r3, #4
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d011      	beq.n	80144e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80144c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80144c6:	f003 0301 	and.w	r3, r3, #1
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00b      	beq.n	80144e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2204      	movs	r2, #4
 80144d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144dc:	f043 0202 	orr.w	r2, r3, #2
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d006      	beq.n	80144fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7fe f8d9 	bl	80126a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2200      	movs	r2, #0
 80144fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014504:	b29b      	uxth	r3, r3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d173      	bne.n	80145f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014512:	e853 3f00 	ldrex	r3, [r3]
 8014516:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801451a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801451e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	461a      	mov	r2, r3
 8014528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801452c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801452e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014530:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014534:	e841 2300 	strex	r3, r2, [r1]
 8014538:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801453a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801453c:	2b00      	cmp	r3, #0
 801453e:	d1e4      	bne.n	801450a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	3308      	adds	r3, #8
 8014546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801454a:	e853 3f00 	ldrex	r3, [r3]
 801454e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014552:	4b57      	ldr	r3, [pc, #348]	; (80146b0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8014554:	4013      	ands	r3, r2
 8014556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3308      	adds	r3, #8
 8014560:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014564:	65ba      	str	r2, [r7, #88]	; 0x58
 8014566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801456a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801456c:	e841 2300 	strex	r3, r2, [r1]
 8014570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014574:	2b00      	cmp	r3, #0
 8014576:	d1e3      	bne.n	8014540 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2220      	movs	r2, #32
 801457c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2200      	movs	r2, #0
 8014584:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801458a:	2b01      	cmp	r3, #1
 801458c:	d12e      	bne.n	80145ec <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2200      	movs	r2, #0
 8014592:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459c:	e853 3f00 	ldrex	r3, [r3]
 80145a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80145a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a4:	f023 0310 	bic.w	r3, r3, #16
 80145a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80145b2:	647b      	str	r3, [r7, #68]	; 0x44
 80145b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145ba:	e841 2300 	strex	r3, r2, [r1]
 80145be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80145c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e6      	bne.n	8014594 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	69db      	ldr	r3, [r3, #28]
 80145cc:	f003 0310 	and.w	r3, r3, #16
 80145d0:	2b10      	cmp	r3, #16
 80145d2:	d103      	bne.n	80145dc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2210      	movs	r2, #16
 80145da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80145e2:	4619      	mov	r1, r3
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7fe f869 	bl	80126bc <HAL_UARTEx_RxEventCallback>
 80145ea:	e002      	b.n	80145f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f7ee f977 	bl	80028e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80145f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d006      	beq.n	8014608 <UART_RxISR_16BIT_FIFOEN+0x250>
 80145fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80145fe:	f003 0320 	and.w	r3, r3, #32
 8014602:	2b00      	cmp	r3, #0
 8014604:	f47f aefc 	bne.w	8014400 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801460e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014612:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8014616:	2b00      	cmp	r3, #0
 8014618:	d045      	beq.n	80146a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014620:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8014624:	429a      	cmp	r2, r3
 8014626:	d23e      	bcs.n	80146a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3308      	adds	r3, #8
 801462e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014632:	e853 3f00 	ldrex	r3, [r3]
 8014636:	623b      	str	r3, [r7, #32]
   return(result);
 8014638:	6a3b      	ldr	r3, [r7, #32]
 801463a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801463e:	677b      	str	r3, [r7, #116]	; 0x74
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	3308      	adds	r3, #8
 8014646:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014648:	633a      	str	r2, [r7, #48]	; 0x30
 801464a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801464c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801464e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014650:	e841 2300 	strex	r3, r2, [r1]
 8014654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014658:	2b00      	cmp	r3, #0
 801465a:	d1e5      	bne.n	8014628 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	4a15      	ldr	r2, [pc, #84]	; (80146b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8014660:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	e853 3f00 	ldrex	r3, [r3]
 801466e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	f043 0320 	orr.w	r3, r3, #32
 8014676:	673b      	str	r3, [r7, #112]	; 0x70
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	461a      	mov	r2, r3
 801467e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014680:	61fb      	str	r3, [r7, #28]
 8014682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014684:	69b9      	ldr	r1, [r7, #24]
 8014686:	69fa      	ldr	r2, [r7, #28]
 8014688:	e841 2300 	strex	r3, r2, [r1]
 801468c:	617b      	str	r3, [r7, #20]
   return(result);
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d1e6      	bne.n	8014662 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014694:	e007      	b.n	80146a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	699a      	ldr	r2, [r3, #24]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f042 0208 	orr.w	r2, r2, #8
 80146a4:	619a      	str	r2, [r3, #24]
}
 80146a6:	bf00      	nop
 80146a8:	37a0      	adds	r7, #160	; 0xa0
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	effffffe 	.word	0xeffffffe
 80146b4:	08013f5f 	.word	0x08013f5f

080146b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b083      	sub	sp, #12
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80146d4:	bf00      	nop
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b083      	sub	sp, #12
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80146e8:	bf00      	nop
 80146ea:	370c      	adds	r7, #12
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr

080146f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014702:	2b01      	cmp	r3, #1
 8014704:	d101      	bne.n	801470a <HAL_UARTEx_DisableFifoMode+0x16>
 8014706:	2302      	movs	r3, #2
 8014708:	e027      	b.n	801475a <HAL_UARTEx_DisableFifoMode+0x66>
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2201      	movs	r2, #1
 801470e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2224      	movs	r2, #36	; 0x24
 8014716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	f022 0201 	bic.w	r2, r2, #1
 8014730:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2200      	movs	r2, #0
 801473e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2220      	movs	r2, #32
 801474c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2200      	movs	r2, #0
 8014754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014758:	2300      	movs	r3, #0
}
 801475a:	4618      	mov	r0, r3
 801475c:	3714      	adds	r7, #20
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr

08014766 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b084      	sub	sp, #16
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
 801476e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014776:	2b01      	cmp	r3, #1
 8014778:	d101      	bne.n	801477e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801477a:	2302      	movs	r3, #2
 801477c:	e02d      	b.n	80147da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2201      	movs	r2, #1
 8014782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2224      	movs	r2, #36	; 0x24
 801478a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f022 0201 	bic.w	r2, r2, #1
 80147a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	689b      	ldr	r3, [r3, #8]
 80147ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	683a      	ldr	r2, [r7, #0]
 80147b6:	430a      	orrs	r2, r1
 80147b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f000 f850 	bl	8014860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2220      	movs	r2, #32
 80147cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80147d8:	2300      	movs	r3, #0
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3710      	adds	r7, #16
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80147e2:	b580      	push	{r7, lr}
 80147e4:	b084      	sub	sp, #16
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80147f2:	2b01      	cmp	r3, #1
 80147f4:	d101      	bne.n	80147fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80147f6:	2302      	movs	r3, #2
 80147f8:	e02d      	b.n	8014856 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2201      	movs	r2, #1
 80147fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2224      	movs	r2, #36	; 0x24
 8014806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	681a      	ldr	r2, [r3, #0]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f022 0201 	bic.w	r2, r2, #1
 8014820:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	689b      	ldr	r3, [r3, #8]
 8014828:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	430a      	orrs	r2, r1
 8014834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 f812 	bl	8014860 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2220      	movs	r2, #32
 8014848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2200      	movs	r2, #0
 8014850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014854:	2300      	movs	r3, #0
}
 8014856:	4618      	mov	r0, r3
 8014858:	3710      	adds	r7, #16
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
	...

08014860 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014860:	b480      	push	{r7}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801486c:	2b00      	cmp	r3, #0
 801486e:	d108      	bne.n	8014882 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2201      	movs	r2, #1
 8014874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2201      	movs	r2, #1
 801487c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014880:	e031      	b.n	80148e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014882:	2310      	movs	r3, #16
 8014884:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014886:	2310      	movs	r3, #16
 8014888:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	689b      	ldr	r3, [r3, #8]
 8014890:	0e5b      	lsrs	r3, r3, #25
 8014892:	b2db      	uxtb	r3, r3
 8014894:	f003 0307 	and.w	r3, r3, #7
 8014898:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	689b      	ldr	r3, [r3, #8]
 80148a0:	0f5b      	lsrs	r3, r3, #29
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	f003 0307 	and.w	r3, r3, #7
 80148a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80148aa:	7bbb      	ldrb	r3, [r7, #14]
 80148ac:	7b3a      	ldrb	r2, [r7, #12]
 80148ae:	4911      	ldr	r1, [pc, #68]	; (80148f4 <UARTEx_SetNbDataToProcess+0x94>)
 80148b0:	5c8a      	ldrb	r2, [r1, r2]
 80148b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80148b6:	7b3a      	ldrb	r2, [r7, #12]
 80148b8:	490f      	ldr	r1, [pc, #60]	; (80148f8 <UARTEx_SetNbDataToProcess+0x98>)
 80148ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80148bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
 80148ca:	7b7a      	ldrb	r2, [r7, #13]
 80148cc:	4909      	ldr	r1, [pc, #36]	; (80148f4 <UARTEx_SetNbDataToProcess+0x94>)
 80148ce:	5c8a      	ldrb	r2, [r1, r2]
 80148d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80148d4:	7b7a      	ldrb	r2, [r7, #13]
 80148d6:	4908      	ldr	r1, [pc, #32]	; (80148f8 <UARTEx_SetNbDataToProcess+0x98>)
 80148d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80148da:	fb93 f3f2 	sdiv	r3, r3, r2
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80148e6:	bf00      	nop
 80148e8:	3714      	adds	r7, #20
 80148ea:	46bd      	mov	sp, r7
 80148ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	08015638 	.word	0x08015638
 80148f8:	08015640 	.word	0x08015640

080148fc <__libc_init_array>:
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	4d0d      	ldr	r5, [pc, #52]	; (8014934 <__libc_init_array+0x38>)
 8014900:	4c0d      	ldr	r4, [pc, #52]	; (8014938 <__libc_init_array+0x3c>)
 8014902:	1b64      	subs	r4, r4, r5
 8014904:	10a4      	asrs	r4, r4, #2
 8014906:	2600      	movs	r6, #0
 8014908:	42a6      	cmp	r6, r4
 801490a:	d109      	bne.n	8014920 <__libc_init_array+0x24>
 801490c:	4d0b      	ldr	r5, [pc, #44]	; (801493c <__libc_init_array+0x40>)
 801490e:	4c0c      	ldr	r4, [pc, #48]	; (8014940 <__libc_init_array+0x44>)
 8014910:	f000 fe64 	bl	80155dc <_init>
 8014914:	1b64      	subs	r4, r4, r5
 8014916:	10a4      	asrs	r4, r4, #2
 8014918:	2600      	movs	r6, #0
 801491a:	42a6      	cmp	r6, r4
 801491c:	d105      	bne.n	801492a <__libc_init_array+0x2e>
 801491e:	bd70      	pop	{r4, r5, r6, pc}
 8014920:	f855 3b04 	ldr.w	r3, [r5], #4
 8014924:	4798      	blx	r3
 8014926:	3601      	adds	r6, #1
 8014928:	e7ee      	b.n	8014908 <__libc_init_array+0xc>
 801492a:	f855 3b04 	ldr.w	r3, [r5], #4
 801492e:	4798      	blx	r3
 8014930:	3601      	adds	r6, #1
 8014932:	e7f2      	b.n	801491a <__libc_init_array+0x1e>
 8014934:	08015828 	.word	0x08015828
 8014938:	08015828 	.word	0x08015828
 801493c:	08015828 	.word	0x08015828
 8014940:	0801582c 	.word	0x0801582c

08014944 <memset>:
 8014944:	4402      	add	r2, r0
 8014946:	4603      	mov	r3, r0
 8014948:	4293      	cmp	r3, r2
 801494a:	d100      	bne.n	801494e <memset+0xa>
 801494c:	4770      	bx	lr
 801494e:	f803 1b01 	strb.w	r1, [r3], #1
 8014952:	e7f9      	b.n	8014948 <memset+0x4>
 8014954:	0000      	movs	r0, r0
	...

08014958 <cos>:
 8014958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801495a:	eeb0 7b40 	vmov.f64	d7, d0
 801495e:	ee17 3a90 	vmov	r3, s15
 8014962:	4a21      	ldr	r2, [pc, #132]	; (80149e8 <cos+0x90>)
 8014964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014968:	4293      	cmp	r3, r2
 801496a:	dc06      	bgt.n	801497a <cos+0x22>
 801496c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80149e0 <cos+0x88>
 8014970:	b005      	add	sp, #20
 8014972:	f85d eb04 	ldr.w	lr, [sp], #4
 8014976:	f000 b9cb 	b.w	8014d10 <__kernel_cos>
 801497a:	4a1c      	ldr	r2, [pc, #112]	; (80149ec <cos+0x94>)
 801497c:	4293      	cmp	r3, r2
 801497e:	dd04      	ble.n	801498a <cos+0x32>
 8014980:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014984:	b005      	add	sp, #20
 8014986:	f85d fb04 	ldr.w	pc, [sp], #4
 801498a:	4668      	mov	r0, sp
 801498c:	f000 f87c 	bl	8014a88 <__ieee754_rem_pio2>
 8014990:	f000 0003 	and.w	r0, r0, #3
 8014994:	2801      	cmp	r0, #1
 8014996:	d009      	beq.n	80149ac <cos+0x54>
 8014998:	2802      	cmp	r0, #2
 801499a:	d010      	beq.n	80149be <cos+0x66>
 801499c:	b9b0      	cbnz	r0, 80149cc <cos+0x74>
 801499e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149a2:	ed9d 0b00 	vldr	d0, [sp]
 80149a6:	f000 f9b3 	bl	8014d10 <__kernel_cos>
 80149aa:	e7eb      	b.n	8014984 <cos+0x2c>
 80149ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149b0:	ed9d 0b00 	vldr	d0, [sp]
 80149b4:	f000 fcb0 	bl	8015318 <__kernel_sin>
 80149b8:	eeb1 0b40 	vneg.f64	d0, d0
 80149bc:	e7e2      	b.n	8014984 <cos+0x2c>
 80149be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149c2:	ed9d 0b00 	vldr	d0, [sp]
 80149c6:	f000 f9a3 	bl	8014d10 <__kernel_cos>
 80149ca:	e7f5      	b.n	80149b8 <cos+0x60>
 80149cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149d0:	ed9d 0b00 	vldr	d0, [sp]
 80149d4:	2001      	movs	r0, #1
 80149d6:	f000 fc9f 	bl	8015318 <__kernel_sin>
 80149da:	e7d3      	b.n	8014984 <cos+0x2c>
 80149dc:	f3af 8000 	nop.w
	...
 80149e8:	3fe921fb 	.word	0x3fe921fb
 80149ec:	7fefffff 	.word	0x7fefffff

080149f0 <sin>:
 80149f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149f2:	eeb0 7b40 	vmov.f64	d7, d0
 80149f6:	ee17 3a90 	vmov	r3, s15
 80149fa:	4a21      	ldr	r2, [pc, #132]	; (8014a80 <sin+0x90>)
 80149fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a00:	4293      	cmp	r3, r2
 8014a02:	dc07      	bgt.n	8014a14 <sin+0x24>
 8014a04:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8014a78 <sin+0x88>
 8014a08:	2000      	movs	r0, #0
 8014a0a:	b005      	add	sp, #20
 8014a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a10:	f000 bc82 	b.w	8015318 <__kernel_sin>
 8014a14:	4a1b      	ldr	r2, [pc, #108]	; (8014a84 <sin+0x94>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	dd04      	ble.n	8014a24 <sin+0x34>
 8014a1a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014a1e:	b005      	add	sp, #20
 8014a20:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a24:	4668      	mov	r0, sp
 8014a26:	f000 f82f 	bl	8014a88 <__ieee754_rem_pio2>
 8014a2a:	f000 0003 	and.w	r0, r0, #3
 8014a2e:	2801      	cmp	r0, #1
 8014a30:	d00a      	beq.n	8014a48 <sin+0x58>
 8014a32:	2802      	cmp	r0, #2
 8014a34:	d00f      	beq.n	8014a56 <sin+0x66>
 8014a36:	b9c0      	cbnz	r0, 8014a6a <sin+0x7a>
 8014a38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014a3c:	ed9d 0b00 	vldr	d0, [sp]
 8014a40:	2001      	movs	r0, #1
 8014a42:	f000 fc69 	bl	8015318 <__kernel_sin>
 8014a46:	e7ea      	b.n	8014a1e <sin+0x2e>
 8014a48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014a4c:	ed9d 0b00 	vldr	d0, [sp]
 8014a50:	f000 f95e 	bl	8014d10 <__kernel_cos>
 8014a54:	e7e3      	b.n	8014a1e <sin+0x2e>
 8014a56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014a5a:	ed9d 0b00 	vldr	d0, [sp]
 8014a5e:	2001      	movs	r0, #1
 8014a60:	f000 fc5a 	bl	8015318 <__kernel_sin>
 8014a64:	eeb1 0b40 	vneg.f64	d0, d0
 8014a68:	e7d9      	b.n	8014a1e <sin+0x2e>
 8014a6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014a6e:	ed9d 0b00 	vldr	d0, [sp]
 8014a72:	f000 f94d 	bl	8014d10 <__kernel_cos>
 8014a76:	e7f5      	b.n	8014a64 <sin+0x74>
	...
 8014a80:	3fe921fb 	.word	0x3fe921fb
 8014a84:	7fefffff 	.word	0x7fefffff

08014a88 <__ieee754_rem_pio2>:
 8014a88:	b570      	push	{r4, r5, r6, lr}
 8014a8a:	eeb0 7b40 	vmov.f64	d7, d0
 8014a8e:	ee17 5a90 	vmov	r5, s15
 8014a92:	4b99      	ldr	r3, [pc, #612]	; (8014cf8 <__ieee754_rem_pio2+0x270>)
 8014a94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014a98:	429e      	cmp	r6, r3
 8014a9a:	b088      	sub	sp, #32
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	dc07      	bgt.n	8014ab0 <__ieee754_rem_pio2+0x28>
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	ed84 0b00 	vstr	d0, [r4]
 8014aa8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014aac:	2000      	movs	r0, #0
 8014aae:	e01b      	b.n	8014ae8 <__ieee754_rem_pio2+0x60>
 8014ab0:	4b92      	ldr	r3, [pc, #584]	; (8014cfc <__ieee754_rem_pio2+0x274>)
 8014ab2:	429e      	cmp	r6, r3
 8014ab4:	dc3b      	bgt.n	8014b2e <__ieee754_rem_pio2+0xa6>
 8014ab6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8014aba:	2d00      	cmp	r5, #0
 8014abc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8014cb8 <__ieee754_rem_pio2+0x230>
 8014ac0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8014ac4:	dd19      	ble.n	8014afa <__ieee754_rem_pio2+0x72>
 8014ac6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014aca:	429e      	cmp	r6, r3
 8014acc:	d00e      	beq.n	8014aec <__ieee754_rem_pio2+0x64>
 8014ace:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014cc0 <__ieee754_rem_pio2+0x238>
 8014ad2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8014ad6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014ada:	ed84 5b00 	vstr	d5, [r4]
 8014ade:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014ae2:	ed84 7b02 	vstr	d7, [r4, #8]
 8014ae6:	2001      	movs	r0, #1
 8014ae8:	b008      	add	sp, #32
 8014aea:	bd70      	pop	{r4, r5, r6, pc}
 8014aec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014cc8 <__ieee754_rem_pio2+0x240>
 8014af0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014af4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8014cd0 <__ieee754_rem_pio2+0x248>
 8014af8:	e7eb      	b.n	8014ad2 <__ieee754_rem_pio2+0x4a>
 8014afa:	429e      	cmp	r6, r3
 8014afc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014b00:	d00e      	beq.n	8014b20 <__ieee754_rem_pio2+0x98>
 8014b02:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8014cc0 <__ieee754_rem_pio2+0x238>
 8014b06:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014b0a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014b0e:	ed84 5b00 	vstr	d5, [r4]
 8014b12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014b16:	f04f 30ff 	mov.w	r0, #4294967295
 8014b1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8014b1e:	e7e3      	b.n	8014ae8 <__ieee754_rem_pio2+0x60>
 8014b20:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014cc8 <__ieee754_rem_pio2+0x240>
 8014b24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014b28:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014cd0 <__ieee754_rem_pio2+0x248>
 8014b2c:	e7eb      	b.n	8014b06 <__ieee754_rem_pio2+0x7e>
 8014b2e:	4b74      	ldr	r3, [pc, #464]	; (8014d00 <__ieee754_rem_pio2+0x278>)
 8014b30:	429e      	cmp	r6, r3
 8014b32:	dc70      	bgt.n	8014c16 <__ieee754_rem_pio2+0x18e>
 8014b34:	f000 fc48 	bl	80153c8 <fabs>
 8014b38:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014b3c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014cd8 <__ieee754_rem_pio2+0x250>
 8014b40:	eea0 7b06 	vfma.f64	d7, d0, d6
 8014b44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8014b4c:	ee17 0a90 	vmov	r0, s15
 8014b50:	eeb1 4b45 	vneg.f64	d4, d5
 8014b54:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014cb8 <__ieee754_rem_pio2+0x230>
 8014b58:	eea5 0b47 	vfms.f64	d0, d5, d7
 8014b5c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8014cc0 <__ieee754_rem_pio2+0x238>
 8014b60:	281f      	cmp	r0, #31
 8014b62:	ee25 7b07 	vmul.f64	d7, d5, d7
 8014b66:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014b6a:	dc08      	bgt.n	8014b7e <__ieee754_rem_pio2+0xf6>
 8014b6c:	4b65      	ldr	r3, [pc, #404]	; (8014d04 <__ieee754_rem_pio2+0x27c>)
 8014b6e:	1e42      	subs	r2, r0, #1
 8014b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b74:	42b3      	cmp	r3, r6
 8014b76:	d002      	beq.n	8014b7e <__ieee754_rem_pio2+0xf6>
 8014b78:	ed84 6b00 	vstr	d6, [r4]
 8014b7c:	e026      	b.n	8014bcc <__ieee754_rem_pio2+0x144>
 8014b7e:	ee16 3a90 	vmov	r3, s13
 8014b82:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014b86:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014b8a:	2b10      	cmp	r3, #16
 8014b8c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014b90:	ddf2      	ble.n	8014b78 <__ieee754_rem_pio2+0xf0>
 8014b92:	eeb0 6b40 	vmov.f64	d6, d0
 8014b96:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8014cc8 <__ieee754_rem_pio2+0x240>
 8014b9a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8014cd0 <__ieee754_rem_pio2+0x248>
 8014b9e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8014ba2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014ba6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8014baa:	eeb0 7b40 	vmov.f64	d7, d0
 8014bae:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014bb2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8014bb6:	ee13 3a90 	vmov	r3, s7
 8014bba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	2b31      	cmp	r3, #49	; 0x31
 8014bc2:	dc17      	bgt.n	8014bf4 <__ieee754_rem_pio2+0x16c>
 8014bc4:	eeb0 0b46 	vmov.f64	d0, d6
 8014bc8:	ed84 3b00 	vstr	d3, [r4]
 8014bcc:	ed94 6b00 	vldr	d6, [r4]
 8014bd0:	2d00      	cmp	r5, #0
 8014bd2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014bd6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014bda:	ed84 0b02 	vstr	d0, [r4, #8]
 8014bde:	da83      	bge.n	8014ae8 <__ieee754_rem_pio2+0x60>
 8014be0:	eeb1 6b46 	vneg.f64	d6, d6
 8014be4:	eeb1 0b40 	vneg.f64	d0, d0
 8014be8:	ed84 6b00 	vstr	d6, [r4]
 8014bec:	ed84 0b02 	vstr	d0, [r4, #8]
 8014bf0:	4240      	negs	r0, r0
 8014bf2:	e779      	b.n	8014ae8 <__ieee754_rem_pio2+0x60>
 8014bf4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8014ce0 <__ieee754_rem_pio2+0x258>
 8014bf8:	eeb0 0b46 	vmov.f64	d0, d6
 8014bfc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8014c00:	ee36 7b40 	vsub.f64	d7, d6, d0
 8014c04:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8014ce8 <__ieee754_rem_pio2+0x260>
 8014c08:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014c0c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014c10:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014c14:	e7b0      	b.n	8014b78 <__ieee754_rem_pio2+0xf0>
 8014c16:	4b3c      	ldr	r3, [pc, #240]	; (8014d08 <__ieee754_rem_pio2+0x280>)
 8014c18:	429e      	cmp	r6, r3
 8014c1a:	dd06      	ble.n	8014c2a <__ieee754_rem_pio2+0x1a2>
 8014c1c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014c20:	ed80 7b02 	vstr	d7, [r0, #8]
 8014c24:	ed80 7b00 	vstr	d7, [r0]
 8014c28:	e740      	b.n	8014aac <__ieee754_rem_pio2+0x24>
 8014c2a:	1532      	asrs	r2, r6, #20
 8014c2c:	ee10 0a10 	vmov	r0, s0
 8014c30:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8014c34:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8014c38:	ec41 0b17 	vmov	d7, r0, r1
 8014c3c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014c40:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8014cf0 <__ieee754_rem_pio2+0x268>
 8014c44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014c48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014c4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014c50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014c54:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8014c58:	a902      	add	r1, sp, #8
 8014c5a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8014c5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014c62:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014c66:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014c6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014c6e:	2603      	movs	r6, #3
 8014c70:	4608      	mov	r0, r1
 8014c72:	ed91 7b04 	vldr	d7, [r1, #16]
 8014c76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c7e:	4633      	mov	r3, r6
 8014c80:	f1a1 0108 	sub.w	r1, r1, #8
 8014c84:	f106 36ff 	add.w	r6, r6, #4294967295
 8014c88:	d0f3      	beq.n	8014c72 <__ieee754_rem_pio2+0x1ea>
 8014c8a:	4920      	ldr	r1, [pc, #128]	; (8014d0c <__ieee754_rem_pio2+0x284>)
 8014c8c:	9101      	str	r1, [sp, #4]
 8014c8e:	2102      	movs	r1, #2
 8014c90:	9100      	str	r1, [sp, #0]
 8014c92:	4621      	mov	r1, r4
 8014c94:	f000 f8a8 	bl	8014de8 <__kernel_rem_pio2>
 8014c98:	2d00      	cmp	r5, #0
 8014c9a:	f6bf af25 	bge.w	8014ae8 <__ieee754_rem_pio2+0x60>
 8014c9e:	ed94 7b00 	vldr	d7, [r4]
 8014ca2:	eeb1 7b47 	vneg.f64	d7, d7
 8014ca6:	ed84 7b00 	vstr	d7, [r4]
 8014caa:	ed94 7b02 	vldr	d7, [r4, #8]
 8014cae:	eeb1 7b47 	vneg.f64	d7, d7
 8014cb2:	ed84 7b02 	vstr	d7, [r4, #8]
 8014cb6:	e79b      	b.n	8014bf0 <__ieee754_rem_pio2+0x168>
 8014cb8:	54400000 	.word	0x54400000
 8014cbc:	3ff921fb 	.word	0x3ff921fb
 8014cc0:	1a626331 	.word	0x1a626331
 8014cc4:	3dd0b461 	.word	0x3dd0b461
 8014cc8:	1a600000 	.word	0x1a600000
 8014ccc:	3dd0b461 	.word	0x3dd0b461
 8014cd0:	2e037073 	.word	0x2e037073
 8014cd4:	3ba3198a 	.word	0x3ba3198a
 8014cd8:	6dc9c883 	.word	0x6dc9c883
 8014cdc:	3fe45f30 	.word	0x3fe45f30
 8014ce0:	2e000000 	.word	0x2e000000
 8014ce4:	3ba3198a 	.word	0x3ba3198a
 8014ce8:	252049c1 	.word	0x252049c1
 8014cec:	397b839a 	.word	0x397b839a
 8014cf0:	00000000 	.word	0x00000000
 8014cf4:	41700000 	.word	0x41700000
 8014cf8:	3fe921fb 	.word	0x3fe921fb
 8014cfc:	4002d97b 	.word	0x4002d97b
 8014d00:	413921fb 	.word	0x413921fb
 8014d04:	08015648 	.word	0x08015648
 8014d08:	7fefffff 	.word	0x7fefffff
 8014d0c:	080156c8 	.word	0x080156c8

08014d10 <__kernel_cos>:
 8014d10:	ee10 1a90 	vmov	r1, s1
 8014d14:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014d1c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8014d20:	da05      	bge.n	8014d2e <__kernel_cos+0x1e>
 8014d22:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014d26:	ee17 3a90 	vmov	r3, s15
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d03d      	beq.n	8014daa <__kernel_cos+0x9a>
 8014d2e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8014d32:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014db0 <__kernel_cos+0xa0>
 8014d36:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014db8 <__kernel_cos+0xa8>
 8014d3a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8014d3e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014dc0 <__kernel_cos+0xb0>
 8014d42:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014d46:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014dc8 <__kernel_cos+0xb8>
 8014d4a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014d4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014dd0 <__kernel_cos+0xc0>
 8014d52:	4b23      	ldr	r3, [pc, #140]	; (8014de0 <__kernel_cos+0xd0>)
 8014d54:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014d58:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014dd8 <__kernel_cos+0xc8>
 8014d5c:	4299      	cmp	r1, r3
 8014d5e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8014d62:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014d66:	ee26 5b03 	vmul.f64	d5, d6, d3
 8014d6a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8014d6e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8014d72:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014d76:	dc04      	bgt.n	8014d82 <__kernel_cos+0x72>
 8014d78:	ee37 6b46 	vsub.f64	d6, d7, d6
 8014d7c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8014d80:	4770      	bx	lr
 8014d82:	4b18      	ldr	r3, [pc, #96]	; (8014de4 <__kernel_cos+0xd4>)
 8014d84:	4299      	cmp	r1, r3
 8014d86:	dc0d      	bgt.n	8014da4 <__kernel_cos+0x94>
 8014d88:	2200      	movs	r2, #0
 8014d8a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8014d8e:	ec43 2b15 	vmov	d5, r2, r3
 8014d92:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014d96:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014d9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014da2:	4770      	bx	lr
 8014da4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014da8:	e7f3      	b.n	8014d92 <__kernel_cos+0x82>
 8014daa:	eeb0 0b44 	vmov.f64	d0, d4
 8014dae:	4770      	bx	lr
 8014db0:	be8838d4 	.word	0xbe8838d4
 8014db4:	bda8fae9 	.word	0xbda8fae9
 8014db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8014dbc:	3e21ee9e 	.word	0x3e21ee9e
 8014dc0:	809c52ad 	.word	0x809c52ad
 8014dc4:	be927e4f 	.word	0xbe927e4f
 8014dc8:	19cb1590 	.word	0x19cb1590
 8014dcc:	3efa01a0 	.word	0x3efa01a0
 8014dd0:	16c15177 	.word	0x16c15177
 8014dd4:	bf56c16c 	.word	0xbf56c16c
 8014dd8:	5555554c 	.word	0x5555554c
 8014ddc:	3fa55555 	.word	0x3fa55555
 8014de0:	3fd33332 	.word	0x3fd33332
 8014de4:	3fe90000 	.word	0x3fe90000

08014de8 <__kernel_rem_pio2>:
 8014de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dec:	ed2d 8b06 	vpush	{d8-d10}
 8014df0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8014df4:	460f      	mov	r7, r1
 8014df6:	9002      	str	r0, [sp, #8]
 8014df8:	49c5      	ldr	r1, [pc, #788]	; (8015110 <__kernel_rem_pio2+0x328>)
 8014dfa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8014dfc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8014e00:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	f112 0f14 	cmn.w	r2, #20
 8014e0a:	bfa8      	it	ge
 8014e0c:	2018      	movge	r0, #24
 8014e0e:	f103 31ff 	add.w	r1, r3, #4294967295
 8014e12:	bfb8      	it	lt
 8014e14:	2000      	movlt	r0, #0
 8014e16:	f06f 0417 	mvn.w	r4, #23
 8014e1a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80150f8 <__kernel_rem_pio2+0x310>
 8014e1e:	bfa4      	itt	ge
 8014e20:	f1a2 0a03 	subge.w	sl, r2, #3
 8014e24:	fb9a f0f0 	sdivge	r0, sl, r0
 8014e28:	fb00 4404 	mla	r4, r0, r4, r4
 8014e2c:	1a46      	subs	r6, r0, r1
 8014e2e:	4414      	add	r4, r2
 8014e30:	eb09 0c01 	add.w	ip, r9, r1
 8014e34:	ad1a      	add	r5, sp, #104	; 0x68
 8014e36:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	4562      	cmp	r2, ip
 8014e3e:	dd10      	ble.n	8014e62 <__kernel_rem_pio2+0x7a>
 8014e40:	9a01      	ldr	r2, [sp, #4]
 8014e42:	ab1a      	add	r3, sp, #104	; 0x68
 8014e44:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014e48:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8014e4c:	f04f 0c00 	mov.w	ip, #0
 8014e50:	45cc      	cmp	ip, r9
 8014e52:	dc26      	bgt.n	8014ea2 <__kernel_rem_pio2+0xba>
 8014e54:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80150f8 <__kernel_rem_pio2+0x310>
 8014e58:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014e5c:	4616      	mov	r6, r2
 8014e5e:	2500      	movs	r5, #0
 8014e60:	e015      	b.n	8014e8e <__kernel_rem_pio2+0xa6>
 8014e62:	42d6      	cmn	r6, r2
 8014e64:	d409      	bmi.n	8014e7a <__kernel_rem_pio2+0x92>
 8014e66:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8014e6a:	ee07 3a90 	vmov	s15, r3
 8014e6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014e72:	eca5 7b02 	vstmia	r5!, {d7}
 8014e76:	3201      	adds	r2, #1
 8014e78:	e7e0      	b.n	8014e3c <__kernel_rem_pio2+0x54>
 8014e7a:	eeb0 7b46 	vmov.f64	d7, d6
 8014e7e:	e7f8      	b.n	8014e72 <__kernel_rem_pio2+0x8a>
 8014e80:	ecb8 5b02 	vldmia	r8!, {d5}
 8014e84:	ed96 6b00 	vldr	d6, [r6]
 8014e88:	3501      	adds	r5, #1
 8014e8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014e8e:	428d      	cmp	r5, r1
 8014e90:	f1a6 0608 	sub.w	r6, r6, #8
 8014e94:	ddf4      	ble.n	8014e80 <__kernel_rem_pio2+0x98>
 8014e96:	ecaa 7b02 	vstmia	sl!, {d7}
 8014e9a:	f10c 0c01 	add.w	ip, ip, #1
 8014e9e:	3208      	adds	r2, #8
 8014ea0:	e7d6      	b.n	8014e50 <__kernel_rem_pio2+0x68>
 8014ea2:	ab06      	add	r3, sp, #24
 8014ea4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8015100 <__kernel_rem_pio2+0x318>
 8014ea8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8015108 <__kernel_rem_pio2+0x320>
 8014eac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8014eb0:	9303      	str	r3, [sp, #12]
 8014eb2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8014eb6:	464d      	mov	r5, r9
 8014eb8:	00eb      	lsls	r3, r5, #3
 8014eba:	9304      	str	r3, [sp, #16]
 8014ebc:	ab92      	add	r3, sp, #584	; 0x248
 8014ebe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014ec2:	f10d 0b18 	add.w	fp, sp, #24
 8014ec6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8014ec8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8014ecc:	465e      	mov	r6, fp
 8014ece:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	f1a2 0208 	sub.w	r2, r2, #8
 8014eda:	dc4c      	bgt.n	8014f76 <__kernel_rem_pio2+0x18e>
 8014edc:	4620      	mov	r0, r4
 8014ede:	9105      	str	r1, [sp, #20]
 8014ee0:	f000 faf2 	bl	80154c8 <scalbn>
 8014ee4:	eeb0 8b40 	vmov.f64	d8, d0
 8014ee8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8014eec:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014ef0:	f000 fa76 	bl	80153e0 <floor>
 8014ef4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014ef8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014efc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014f00:	2c00      	cmp	r4, #0
 8014f02:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8014f06:	ee17 8a90 	vmov	r8, s15
 8014f0a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014f0e:	9905      	ldr	r1, [sp, #20]
 8014f10:	dd43      	ble.n	8014f9a <__kernel_rem_pio2+0x1b2>
 8014f12:	1e68      	subs	r0, r5, #1
 8014f14:	ab06      	add	r3, sp, #24
 8014f16:	f1c4 0c18 	rsb	ip, r4, #24
 8014f1a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014f1e:	fa46 f20c 	asr.w	r2, r6, ip
 8014f22:	4490      	add	r8, r2
 8014f24:	fa02 f20c 	lsl.w	r2, r2, ip
 8014f28:	1ab6      	subs	r6, r6, r2
 8014f2a:	f1c4 0217 	rsb	r2, r4, #23
 8014f2e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8014f32:	4116      	asrs	r6, r2
 8014f34:	2e00      	cmp	r6, #0
 8014f36:	dd3f      	ble.n	8014fb8 <__kernel_rem_pio2+0x1d0>
 8014f38:	f04f 0c00 	mov.w	ip, #0
 8014f3c:	f108 0801 	add.w	r8, r8, #1
 8014f40:	4660      	mov	r0, ip
 8014f42:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014f46:	4565      	cmp	r5, ip
 8014f48:	dc6e      	bgt.n	8015028 <__kernel_rem_pio2+0x240>
 8014f4a:	2c00      	cmp	r4, #0
 8014f4c:	dd04      	ble.n	8014f58 <__kernel_rem_pio2+0x170>
 8014f4e:	2c01      	cmp	r4, #1
 8014f50:	d07f      	beq.n	8015052 <__kernel_rem_pio2+0x26a>
 8014f52:	2c02      	cmp	r4, #2
 8014f54:	f000 8087 	beq.w	8015066 <__kernel_rem_pio2+0x27e>
 8014f58:	2e02      	cmp	r6, #2
 8014f5a:	d12d      	bne.n	8014fb8 <__kernel_rem_pio2+0x1d0>
 8014f5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014f60:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014f64:	b340      	cbz	r0, 8014fb8 <__kernel_rem_pio2+0x1d0>
 8014f66:	4620      	mov	r0, r4
 8014f68:	9105      	str	r1, [sp, #20]
 8014f6a:	f000 faad 	bl	80154c8 <scalbn>
 8014f6e:	9905      	ldr	r1, [sp, #20]
 8014f70:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014f74:	e020      	b.n	8014fb8 <__kernel_rem_pio2+0x1d0>
 8014f76:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014f7a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014f7e:	3801      	subs	r0, #1
 8014f80:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014f84:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014f88:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014f8c:	eca6 0a01 	vstmia	r6!, {s0}
 8014f90:	ed92 0b00 	vldr	d0, [r2]
 8014f94:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014f98:	e79c      	b.n	8014ed4 <__kernel_rem_pio2+0xec>
 8014f9a:	d105      	bne.n	8014fa8 <__kernel_rem_pio2+0x1c0>
 8014f9c:	1e6a      	subs	r2, r5, #1
 8014f9e:	ab06      	add	r3, sp, #24
 8014fa0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014fa4:	15f6      	asrs	r6, r6, #23
 8014fa6:	e7c5      	b.n	8014f34 <__kernel_rem_pio2+0x14c>
 8014fa8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014fac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb4:	da36      	bge.n	8015024 <__kernel_rem_pio2+0x23c>
 8014fb6:	2600      	movs	r6, #0
 8014fb8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc0:	f040 80aa 	bne.w	8015118 <__kernel_rem_pio2+0x330>
 8014fc4:	f105 3bff 	add.w	fp, r5, #4294967295
 8014fc8:	4658      	mov	r0, fp
 8014fca:	2200      	movs	r2, #0
 8014fcc:	4548      	cmp	r0, r9
 8014fce:	da52      	bge.n	8015076 <__kernel_rem_pio2+0x28e>
 8014fd0:	2a00      	cmp	r2, #0
 8014fd2:	f000 8081 	beq.w	80150d8 <__kernel_rem_pio2+0x2f0>
 8014fd6:	ab06      	add	r3, sp, #24
 8014fd8:	3c18      	subs	r4, #24
 8014fda:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f000 8087 	beq.w	80150f2 <__kernel_rem_pio2+0x30a>
 8014fe4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f000 fa6d 	bl	80154c8 <scalbn>
 8014fee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014ff2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8015100 <__kernel_rem_pio2+0x318>
 8014ff6:	a96a      	add	r1, sp, #424	; 0x1a8
 8014ff8:	f103 0208 	add.w	r2, r3, #8
 8014ffc:	1888      	adds	r0, r1, r2
 8014ffe:	4659      	mov	r1, fp
 8015000:	2900      	cmp	r1, #0
 8015002:	f280 80b7 	bge.w	8015174 <__kernel_rem_pio2+0x38c>
 8015006:	4659      	mov	r1, fp
 8015008:	2900      	cmp	r1, #0
 801500a:	f2c0 80d5 	blt.w	80151b8 <__kernel_rem_pio2+0x3d0>
 801500e:	a86a      	add	r0, sp, #424	; 0x1a8
 8015010:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8015014:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80150f8 <__kernel_rem_pio2+0x310>
 8015018:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8015114 <__kernel_rem_pio2+0x32c>
 801501c:	2400      	movs	r4, #0
 801501e:	ebab 0001 	sub.w	r0, fp, r1
 8015022:	e0be      	b.n	80151a2 <__kernel_rem_pio2+0x3ba>
 8015024:	2602      	movs	r6, #2
 8015026:	e787      	b.n	8014f38 <__kernel_rem_pio2+0x150>
 8015028:	f8db 2000 	ldr.w	r2, [fp]
 801502c:	b958      	cbnz	r0, 8015046 <__kernel_rem_pio2+0x25e>
 801502e:	b122      	cbz	r2, 801503a <__kernel_rem_pio2+0x252>
 8015030:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8015034:	f8cb 2000 	str.w	r2, [fp]
 8015038:	2201      	movs	r2, #1
 801503a:	f10c 0c01 	add.w	ip, ip, #1
 801503e:	f10b 0b04 	add.w	fp, fp, #4
 8015042:	4610      	mov	r0, r2
 8015044:	e77f      	b.n	8014f46 <__kernel_rem_pio2+0x15e>
 8015046:	ebae 0202 	sub.w	r2, lr, r2
 801504a:	f8cb 2000 	str.w	r2, [fp]
 801504e:	4602      	mov	r2, r0
 8015050:	e7f3      	b.n	801503a <__kernel_rem_pio2+0x252>
 8015052:	f105 3cff 	add.w	ip, r5, #4294967295
 8015056:	ab06      	add	r3, sp, #24
 8015058:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801505c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015060:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8015064:	e778      	b.n	8014f58 <__kernel_rem_pio2+0x170>
 8015066:	f105 3cff 	add.w	ip, r5, #4294967295
 801506a:	ab06      	add	r3, sp, #24
 801506c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015070:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8015074:	e7f4      	b.n	8015060 <__kernel_rem_pio2+0x278>
 8015076:	ab06      	add	r3, sp, #24
 8015078:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801507c:	3801      	subs	r0, #1
 801507e:	431a      	orrs	r2, r3
 8015080:	e7a4      	b.n	8014fcc <__kernel_rem_pio2+0x1e4>
 8015082:	f10c 0c01 	add.w	ip, ip, #1
 8015086:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801508a:	2800      	cmp	r0, #0
 801508c:	d0f9      	beq.n	8015082 <__kernel_rem_pio2+0x29a>
 801508e:	9b04      	ldr	r3, [sp, #16]
 8015090:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8015094:	eb0d 0203 	add.w	r2, sp, r3
 8015098:	9b01      	ldr	r3, [sp, #4]
 801509a:	18e8      	adds	r0, r5, r3
 801509c:	ab1a      	add	r3, sp, #104	; 0x68
 801509e:	1c6e      	adds	r6, r5, #1
 80150a0:	3a98      	subs	r2, #152	; 0x98
 80150a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80150a6:	4465      	add	r5, ip
 80150a8:	42b5      	cmp	r5, r6
 80150aa:	f6ff af05 	blt.w	8014eb8 <__kernel_rem_pio2+0xd0>
 80150ae:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80150b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80150b6:	ee07 3a90 	vmov	s15, r3
 80150ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80150be:	f04f 0c00 	mov.w	ip, #0
 80150c2:	eca0 7b02 	vstmia	r0!, {d7}
 80150c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80150f8 <__kernel_rem_pio2+0x310>
 80150ca:	4680      	mov	r8, r0
 80150cc:	458c      	cmp	ip, r1
 80150ce:	dd07      	ble.n	80150e0 <__kernel_rem_pio2+0x2f8>
 80150d0:	eca2 7b02 	vstmia	r2!, {d7}
 80150d4:	3601      	adds	r6, #1
 80150d6:	e7e7      	b.n	80150a8 <__kernel_rem_pio2+0x2c0>
 80150d8:	9a03      	ldr	r2, [sp, #12]
 80150da:	f04f 0c01 	mov.w	ip, #1
 80150de:	e7d2      	b.n	8015086 <__kernel_rem_pio2+0x29e>
 80150e0:	ecbe 5b02 	vldmia	lr!, {d5}
 80150e4:	ed38 6b02 	vldmdb	r8!, {d6}
 80150e8:	f10c 0c01 	add.w	ip, ip, #1
 80150ec:	eea5 7b06 	vfma.f64	d7, d5, d6
 80150f0:	e7ec      	b.n	80150cc <__kernel_rem_pio2+0x2e4>
 80150f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150f6:	e76e      	b.n	8014fd6 <__kernel_rem_pio2+0x1ee>
	...
 8015104:	3e700000 	.word	0x3e700000
 8015108:	00000000 	.word	0x00000000
 801510c:	41700000 	.word	0x41700000
 8015110:	08015810 	.word	0x08015810
 8015114:	080157d0 	.word	0x080157d0
 8015118:	4260      	negs	r0, r4
 801511a:	eeb0 0b48 	vmov.f64	d0, d8
 801511e:	f000 f9d3 	bl	80154c8 <scalbn>
 8015122:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8015300 <__kernel_rem_pio2+0x518>
 8015126:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801512e:	db18      	blt.n	8015162 <__kernel_rem_pio2+0x37a>
 8015130:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8015308 <__kernel_rem_pio2+0x520>
 8015134:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015138:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801513c:	aa06      	add	r2, sp, #24
 801513e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8015142:	eea5 0b46 	vfms.f64	d0, d5, d6
 8015146:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801514a:	f105 0b01 	add.w	fp, r5, #1
 801514e:	ee10 3a10 	vmov	r3, s0
 8015152:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015156:	ee17 3a10 	vmov	r3, s14
 801515a:	3418      	adds	r4, #24
 801515c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8015160:	e740      	b.n	8014fe4 <__kernel_rem_pio2+0x1fc>
 8015162:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015166:	aa06      	add	r2, sp, #24
 8015168:	ee10 3a10 	vmov	r3, s0
 801516c:	46ab      	mov	fp, r5
 801516e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015172:	e737      	b.n	8014fe4 <__kernel_rem_pio2+0x1fc>
 8015174:	ac06      	add	r4, sp, #24
 8015176:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801517a:	9401      	str	r4, [sp, #4]
 801517c:	ee07 4a90 	vmov	s15, r4
 8015180:	3901      	subs	r1, #1
 8015182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015186:	ee27 7b00 	vmul.f64	d7, d7, d0
 801518a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801518e:	ed20 7b02 	vstmdb	r0!, {d7}
 8015192:	e735      	b.n	8015000 <__kernel_rem_pio2+0x218>
 8015194:	ecbc 5b02 	vldmia	ip!, {d5}
 8015198:	ecb5 6b02 	vldmia	r5!, {d6}
 801519c:	3401      	adds	r4, #1
 801519e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80151a2:	454c      	cmp	r4, r9
 80151a4:	dc01      	bgt.n	80151aa <__kernel_rem_pio2+0x3c2>
 80151a6:	4284      	cmp	r4, r0
 80151a8:	ddf4      	ble.n	8015194 <__kernel_rem_pio2+0x3ac>
 80151aa:	ac42      	add	r4, sp, #264	; 0x108
 80151ac:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80151b0:	ed80 7b00 	vstr	d7, [r0]
 80151b4:	3901      	subs	r1, #1
 80151b6:	e727      	b.n	8015008 <__kernel_rem_pio2+0x220>
 80151b8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80151ba:	2902      	cmp	r1, #2
 80151bc:	dc0a      	bgt.n	80151d4 <__kernel_rem_pio2+0x3ec>
 80151be:	2900      	cmp	r1, #0
 80151c0:	dc2c      	bgt.n	801521c <__kernel_rem_pio2+0x434>
 80151c2:	d045      	beq.n	8015250 <__kernel_rem_pio2+0x468>
 80151c4:	f008 0007 	and.w	r0, r8, #7
 80151c8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80151cc:	ecbd 8b06 	vpop	{d8-d10}
 80151d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80151d6:	2a03      	cmp	r2, #3
 80151d8:	d1f4      	bne.n	80151c4 <__kernel_rem_pio2+0x3dc>
 80151da:	aa42      	add	r2, sp, #264	; 0x108
 80151dc:	4413      	add	r3, r2
 80151de:	461a      	mov	r2, r3
 80151e0:	4619      	mov	r1, r3
 80151e2:	4658      	mov	r0, fp
 80151e4:	2800      	cmp	r0, #0
 80151e6:	f1a1 0108 	sub.w	r1, r1, #8
 80151ea:	dc54      	bgt.n	8015296 <__kernel_rem_pio2+0x4ae>
 80151ec:	4659      	mov	r1, fp
 80151ee:	2901      	cmp	r1, #1
 80151f0:	f1a2 0208 	sub.w	r2, r2, #8
 80151f4:	dc5f      	bgt.n	80152b6 <__kernel_rem_pio2+0x4ce>
 80151f6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8015310 <__kernel_rem_pio2+0x528>
 80151fa:	3308      	adds	r3, #8
 80151fc:	f1bb 0f01 	cmp.w	fp, #1
 8015200:	dc69      	bgt.n	80152d6 <__kernel_rem_pio2+0x4ee>
 8015202:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8015206:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801520a:	2e00      	cmp	r6, #0
 801520c:	d16a      	bne.n	80152e4 <__kernel_rem_pio2+0x4fc>
 801520e:	ed87 5b00 	vstr	d5, [r7]
 8015212:	ed87 6b02 	vstr	d6, [r7, #8]
 8015216:	ed87 7b04 	vstr	d7, [r7, #16]
 801521a:	e7d3      	b.n	80151c4 <__kernel_rem_pio2+0x3dc>
 801521c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8015310 <__kernel_rem_pio2+0x528>
 8015220:	ab42      	add	r3, sp, #264	; 0x108
 8015222:	441a      	add	r2, r3
 8015224:	465b      	mov	r3, fp
 8015226:	2b00      	cmp	r3, #0
 8015228:	da26      	bge.n	8015278 <__kernel_rem_pio2+0x490>
 801522a:	b35e      	cbz	r6, 8015284 <__kernel_rem_pio2+0x49c>
 801522c:	eeb1 7b46 	vneg.f64	d7, d6
 8015230:	ed87 7b00 	vstr	d7, [r7]
 8015234:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8015238:	aa44      	add	r2, sp, #272	; 0x110
 801523a:	2301      	movs	r3, #1
 801523c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015240:	459b      	cmp	fp, r3
 8015242:	da22      	bge.n	801528a <__kernel_rem_pio2+0x4a2>
 8015244:	b10e      	cbz	r6, 801524a <__kernel_rem_pio2+0x462>
 8015246:	eeb1 7b47 	vneg.f64	d7, d7
 801524a:	ed87 7b02 	vstr	d7, [r7, #8]
 801524e:	e7b9      	b.n	80151c4 <__kernel_rem_pio2+0x3dc>
 8015250:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015310 <__kernel_rem_pio2+0x528>
 8015254:	ab42      	add	r3, sp, #264	; 0x108
 8015256:	441a      	add	r2, r3
 8015258:	f1bb 0f00 	cmp.w	fp, #0
 801525c:	da05      	bge.n	801526a <__kernel_rem_pio2+0x482>
 801525e:	b10e      	cbz	r6, 8015264 <__kernel_rem_pio2+0x47c>
 8015260:	eeb1 7b47 	vneg.f64	d7, d7
 8015264:	ed87 7b00 	vstr	d7, [r7]
 8015268:	e7ac      	b.n	80151c4 <__kernel_rem_pio2+0x3dc>
 801526a:	ed32 6b02 	vldmdb	r2!, {d6}
 801526e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015272:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015276:	e7ef      	b.n	8015258 <__kernel_rem_pio2+0x470>
 8015278:	ed32 7b02 	vldmdb	r2!, {d7}
 801527c:	3b01      	subs	r3, #1
 801527e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015282:	e7d0      	b.n	8015226 <__kernel_rem_pio2+0x43e>
 8015284:	eeb0 7b46 	vmov.f64	d7, d6
 8015288:	e7d2      	b.n	8015230 <__kernel_rem_pio2+0x448>
 801528a:	ecb2 6b02 	vldmia	r2!, {d6}
 801528e:	3301      	adds	r3, #1
 8015290:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015294:	e7d4      	b.n	8015240 <__kernel_rem_pio2+0x458>
 8015296:	ed91 7b00 	vldr	d7, [r1]
 801529a:	ed91 5b02 	vldr	d5, [r1, #8]
 801529e:	3801      	subs	r0, #1
 80152a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80152a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152a8:	ed81 6b00 	vstr	d6, [r1]
 80152ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80152b0:	ed81 7b02 	vstr	d7, [r1, #8]
 80152b4:	e796      	b.n	80151e4 <__kernel_rem_pio2+0x3fc>
 80152b6:	ed92 7b00 	vldr	d7, [r2]
 80152ba:	ed92 5b02 	vldr	d5, [r2, #8]
 80152be:	3901      	subs	r1, #1
 80152c0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80152c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152c8:	ed82 6b00 	vstr	d6, [r2]
 80152cc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80152d0:	ed82 7b02 	vstr	d7, [r2, #8]
 80152d4:	e78b      	b.n	80151ee <__kernel_rem_pio2+0x406>
 80152d6:	ed33 6b02 	vldmdb	r3!, {d6}
 80152da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80152de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80152e2:	e78b      	b.n	80151fc <__kernel_rem_pio2+0x414>
 80152e4:	eeb1 5b45 	vneg.f64	d5, d5
 80152e8:	eeb1 6b46 	vneg.f64	d6, d6
 80152ec:	ed87 5b00 	vstr	d5, [r7]
 80152f0:	eeb1 7b47 	vneg.f64	d7, d7
 80152f4:	ed87 6b02 	vstr	d6, [r7, #8]
 80152f8:	e78d      	b.n	8015216 <__kernel_rem_pio2+0x42e>
 80152fa:	bf00      	nop
 80152fc:	f3af 8000 	nop.w
 8015300:	00000000 	.word	0x00000000
 8015304:	41700000 	.word	0x41700000
 8015308:	00000000 	.word	0x00000000
 801530c:	3e700000 	.word	0x3e700000
	...

08015318 <__kernel_sin>:
 8015318:	ee10 3a90 	vmov	r3, s1
 801531c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015320:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015324:	da04      	bge.n	8015330 <__kernel_sin+0x18>
 8015326:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801532a:	ee17 3a90 	vmov	r3, s15
 801532e:	b35b      	cbz	r3, 8015388 <__kernel_sin+0x70>
 8015330:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015334:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015338:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8015390 <__kernel_sin+0x78>
 801533c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015398 <__kernel_sin+0x80>
 8015340:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015344:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80153a0 <__kernel_sin+0x88>
 8015348:	eea4 7b06 	vfma.f64	d7, d4, d6
 801534c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80153a8 <__kernel_sin+0x90>
 8015350:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015354:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80153b0 <__kernel_sin+0x98>
 8015358:	eea4 7b06 	vfma.f64	d7, d4, d6
 801535c:	b930      	cbnz	r0, 801536c <__kernel_sin+0x54>
 801535e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80153b8 <__kernel_sin+0xa0>
 8015362:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015366:	eea4 0b05 	vfma.f64	d0, d4, d5
 801536a:	4770      	bx	lr
 801536c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015370:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8015374:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015378:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801537c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80153c0 <__kernel_sin+0xa8>
 8015380:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015384:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	f3af 8000 	nop.w
 8015390:	5acfd57c 	.word	0x5acfd57c
 8015394:	3de5d93a 	.word	0x3de5d93a
 8015398:	8a2b9ceb 	.word	0x8a2b9ceb
 801539c:	be5ae5e6 	.word	0xbe5ae5e6
 80153a0:	57b1fe7d 	.word	0x57b1fe7d
 80153a4:	3ec71de3 	.word	0x3ec71de3
 80153a8:	19c161d5 	.word	0x19c161d5
 80153ac:	bf2a01a0 	.word	0xbf2a01a0
 80153b0:	1110f8a6 	.word	0x1110f8a6
 80153b4:	3f811111 	.word	0x3f811111
 80153b8:	55555549 	.word	0x55555549
 80153bc:	bfc55555 	.word	0xbfc55555
 80153c0:	55555549 	.word	0x55555549
 80153c4:	3fc55555 	.word	0x3fc55555

080153c8 <fabs>:
 80153c8:	ec51 0b10 	vmov	r0, r1, d0
 80153cc:	ee10 2a10 	vmov	r2, s0
 80153d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80153d4:	ec43 2b10 	vmov	d0, r2, r3
 80153d8:	4770      	bx	lr
 80153da:	0000      	movs	r0, r0
 80153dc:	0000      	movs	r0, r0
	...

080153e0 <floor>:
 80153e0:	ee10 1a90 	vmov	r1, s1
 80153e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80153e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80153ec:	2b13      	cmp	r3, #19
 80153ee:	b530      	push	{r4, r5, lr}
 80153f0:	ee10 0a10 	vmov	r0, s0
 80153f4:	ee10 5a10 	vmov	r5, s0
 80153f8:	dc31      	bgt.n	801545e <floor+0x7e>
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	da15      	bge.n	801542a <floor+0x4a>
 80153fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80154b8 <floor+0xd8>
 8015402:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015406:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540e:	dd07      	ble.n	8015420 <floor+0x40>
 8015410:	2900      	cmp	r1, #0
 8015412:	da4e      	bge.n	80154b2 <floor+0xd2>
 8015414:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015418:	4318      	orrs	r0, r3
 801541a:	d001      	beq.n	8015420 <floor+0x40>
 801541c:	4928      	ldr	r1, [pc, #160]	; (80154c0 <floor+0xe0>)
 801541e:	2000      	movs	r0, #0
 8015420:	460b      	mov	r3, r1
 8015422:	4602      	mov	r2, r0
 8015424:	ec43 2b10 	vmov	d0, r2, r3
 8015428:	e020      	b.n	801546c <floor+0x8c>
 801542a:	4a26      	ldr	r2, [pc, #152]	; (80154c4 <floor+0xe4>)
 801542c:	411a      	asrs	r2, r3
 801542e:	ea01 0402 	and.w	r4, r1, r2
 8015432:	4304      	orrs	r4, r0
 8015434:	d01a      	beq.n	801546c <floor+0x8c>
 8015436:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80154b8 <floor+0xd8>
 801543a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801543e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015446:	ddeb      	ble.n	8015420 <floor+0x40>
 8015448:	2900      	cmp	r1, #0
 801544a:	bfbe      	ittt	lt
 801544c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8015450:	fa40 f303 	asrlt.w	r3, r0, r3
 8015454:	18c9      	addlt	r1, r1, r3
 8015456:	ea21 0102 	bic.w	r1, r1, r2
 801545a:	2000      	movs	r0, #0
 801545c:	e7e0      	b.n	8015420 <floor+0x40>
 801545e:	2b33      	cmp	r3, #51	; 0x33
 8015460:	dd05      	ble.n	801546e <floor+0x8e>
 8015462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015466:	d101      	bne.n	801546c <floor+0x8c>
 8015468:	ee30 0b00 	vadd.f64	d0, d0, d0
 801546c:	bd30      	pop	{r4, r5, pc}
 801546e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8015472:	f04f 32ff 	mov.w	r2, #4294967295
 8015476:	40e2      	lsrs	r2, r4
 8015478:	4202      	tst	r2, r0
 801547a:	d0f7      	beq.n	801546c <floor+0x8c>
 801547c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80154b8 <floor+0xd8>
 8015480:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015484:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548c:	ddc8      	ble.n	8015420 <floor+0x40>
 801548e:	2900      	cmp	r1, #0
 8015490:	da02      	bge.n	8015498 <floor+0xb8>
 8015492:	2b14      	cmp	r3, #20
 8015494:	d103      	bne.n	801549e <floor+0xbe>
 8015496:	3101      	adds	r1, #1
 8015498:	ea20 0002 	bic.w	r0, r0, r2
 801549c:	e7c0      	b.n	8015420 <floor+0x40>
 801549e:	2401      	movs	r4, #1
 80154a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80154a4:	fa04 f303 	lsl.w	r3, r4, r3
 80154a8:	4418      	add	r0, r3
 80154aa:	42a8      	cmp	r0, r5
 80154ac:	bf38      	it	cc
 80154ae:	1909      	addcc	r1, r1, r4
 80154b0:	e7f2      	b.n	8015498 <floor+0xb8>
 80154b2:	2000      	movs	r0, #0
 80154b4:	4601      	mov	r1, r0
 80154b6:	e7b3      	b.n	8015420 <floor+0x40>
 80154b8:	8800759c 	.word	0x8800759c
 80154bc:	7e37e43c 	.word	0x7e37e43c
 80154c0:	bff00000 	.word	0xbff00000
 80154c4:	000fffff 	.word	0x000fffff

080154c8 <scalbn>:
 80154c8:	ee10 1a90 	vmov	r1, s1
 80154cc:	b510      	push	{r4, lr}
 80154ce:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80154d2:	b98c      	cbnz	r4, 80154f8 <scalbn+0x30>
 80154d4:	ee10 3a10 	vmov	r3, s0
 80154d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80154dc:	430b      	orrs	r3, r1
 80154de:	d011      	beq.n	8015504 <scalbn+0x3c>
 80154e0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80155a8 <scalbn+0xe0>
 80154e4:	4b3c      	ldr	r3, [pc, #240]	; (80155d8 <scalbn+0x110>)
 80154e6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80154ea:	4298      	cmp	r0, r3
 80154ec:	da0b      	bge.n	8015506 <scalbn+0x3e>
 80154ee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80155b0 <scalbn+0xe8>
 80154f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80154f6:	e005      	b.n	8015504 <scalbn+0x3c>
 80154f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80154fc:	429c      	cmp	r4, r3
 80154fe:	d107      	bne.n	8015510 <scalbn+0x48>
 8015500:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015504:	bd10      	pop	{r4, pc}
 8015506:	ee10 1a90 	vmov	r1, s1
 801550a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801550e:	3c36      	subs	r4, #54	; 0x36
 8015510:	4404      	add	r4, r0
 8015512:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8015516:	429c      	cmp	r4, r3
 8015518:	dd0d      	ble.n	8015536 <scalbn+0x6e>
 801551a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80155b8 <scalbn+0xf0>
 801551e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80155c0 <scalbn+0xf8>
 8015522:	eeb0 6b47 	vmov.f64	d6, d7
 8015526:	ee10 3a90 	vmov	r3, s1
 801552a:	2b00      	cmp	r3, #0
 801552c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8015530:	ee27 0b06 	vmul.f64	d0, d7, d6
 8015534:	e7e6      	b.n	8015504 <scalbn+0x3c>
 8015536:	2c00      	cmp	r4, #0
 8015538:	dd0a      	ble.n	8015550 <scalbn+0x88>
 801553a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801553e:	ec53 2b10 	vmov	r2, r3, d0
 8015542:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015546:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801554a:	ec43 2b10 	vmov	d0, r2, r3
 801554e:	e7d9      	b.n	8015504 <scalbn+0x3c>
 8015550:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8015554:	da19      	bge.n	801558a <scalbn+0xc2>
 8015556:	f24c 3350 	movw	r3, #50000	; 0xc350
 801555a:	4298      	cmp	r0, r3
 801555c:	ee10 3a90 	vmov	r3, s1
 8015560:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015564:	dd09      	ble.n	801557a <scalbn+0xb2>
 8015566:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80155b8 <scalbn+0xf0>
 801556a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80155c0 <scalbn+0xf8>
 801556e:	eeb0 7b40 	vmov.f64	d7, d0
 8015572:	2b00      	cmp	r3, #0
 8015574:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8015578:	e7bb      	b.n	80154f2 <scalbn+0x2a>
 801557a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80155b0 <scalbn+0xe8>
 801557e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80155c8 <scalbn+0x100>
 8015582:	eeb0 7b40 	vmov.f64	d7, d0
 8015586:	2b00      	cmp	r3, #0
 8015588:	e7f4      	b.n	8015574 <scalbn+0xac>
 801558a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801558e:	ec53 2b10 	vmov	r2, r3, d0
 8015592:	3436      	adds	r4, #54	; 0x36
 8015594:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015598:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801559c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80155d0 <scalbn+0x108>
 80155a0:	ec43 2b10 	vmov	d0, r2, r3
 80155a4:	e7a5      	b.n	80154f2 <scalbn+0x2a>
 80155a6:	bf00      	nop
 80155a8:	00000000 	.word	0x00000000
 80155ac:	43500000 	.word	0x43500000
 80155b0:	c2f8f359 	.word	0xc2f8f359
 80155b4:	01a56e1f 	.word	0x01a56e1f
 80155b8:	8800759c 	.word	0x8800759c
 80155bc:	7e37e43c 	.word	0x7e37e43c
 80155c0:	8800759c 	.word	0x8800759c
 80155c4:	fe37e43c 	.word	0xfe37e43c
 80155c8:	c2f8f359 	.word	0xc2f8f359
 80155cc:	81a56e1f 	.word	0x81a56e1f
 80155d0:	00000000 	.word	0x00000000
 80155d4:	3c900000 	.word	0x3c900000
 80155d8:	ffff3cb0 	.word	0xffff3cb0

080155dc <_init>:
 80155dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155de:	bf00      	nop
 80155e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155e2:	bc08      	pop	{r3}
 80155e4:	469e      	mov	lr, r3
 80155e6:	4770      	bx	lr

080155e8 <_fini>:
 80155e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ea:	bf00      	nop
 80155ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ee:	bc08      	pop	{r3}
 80155f0:	469e      	mov	lr, r3
 80155f2:	4770      	bx	lr
