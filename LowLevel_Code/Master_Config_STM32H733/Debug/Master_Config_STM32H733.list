
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800e670  0800e670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e6b0  0800e6b0  0001e6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e6b8  0800e6b8  0001e6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e6bc  0800e6bc  0001e6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800e6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000898  20000010  0800e6d0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200008a8  0800e6d0  000208a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031a6f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043e9  00000000  00000000  00051aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b18  00000000  00000000  00055e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019d0  00000000  00000000  000579b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037535  00000000  00000000  00059380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002483c  00000000  00000000  000908b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c747  00000000  00000000  000b50f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221838  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007630  00000000  00000000  0022188c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000010 	.word	0x20000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800e658 	.word	0x0800e658

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	20000014 	.word	0x20000014
 8000308:	0800e658 	.word	0x0800e658

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <AS5047U_init>:

#include "AS5047U.h"

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	603b      	str	r3, [r7, #0]

	dev->hspiHandle = hspiHandle;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	8b3a      	ldrh	r2, [r7, #24]
 8000628:	819a      	strh	r2, [r3, #12]
	dev->Error_Status.CORDIC_Overflow = 0;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2200      	movs	r2, #0
 800062e:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2200      	movs	r2, #0
 800063a:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2200      	movs	r2, #0
 8000640:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	2200      	movs	r2, #0
 8000646:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2200      	movs	r2, #0
 800064c:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2200      	movs	r2, #0
 8000652:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2200      	movs	r2, #0
 8000658:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2200      	movs	r2, #0
 8000664:	765a      	strb	r2, [r3, #25]

//	Encoder_command(dev,0x001A, 0x0080);
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev){
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = { 0x3F,0xFF };
 800067a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800067e:	81bb      	strh	r3, [r7, #12]
	uint8_t Buffer[2] = {};
 8000680:	2300      	movs	r3, #0
 8000682:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6898      	ldr	r0, [r3, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	f006 fd32 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 1);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	f107 010c 	add.w	r1, r7, #12
 800069c:	2301      	movs	r3, #1
 800069e:	2202      	movs	r2, #2
 80006a0:	f009 ff76 	bl	800a590 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6898      	ldr	r0, [r3, #8]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	899b      	ldrh	r3, [r3, #12]
 80006ac:	2201      	movs	r2, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	f006 fd22 	bl	80070f8 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550 ; i++);			//delay before sent data (#Base clock 550MHz)
 80006b4:	2300      	movs	r3, #0
 80006b6:	81fb      	strh	r3, [r7, #14]
 80006b8:	e002      	b.n	80006c0 <AS5047U_Position_Highspeed_Read+0x4e>
 80006ba:	89fb      	ldrh	r3, [r7, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	81fb      	strh	r3, [r7, #14]
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	f240 2226 	movw	r2, #550	; 0x226
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d9f7      	bls.n	80006ba <AS5047U_Position_Highspeed_Read+0x48>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6898      	ldr	r0, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	899b      	ldrh	r3, [r3, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	f006 fd0f 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 1);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	f107 0108 	add.w	r1, r7, #8
 80006e2:	2301      	movs	r3, #1
 80006e4:	2202      	movs	r2, #2
 80006e6:	f00a f945 	bl	800a974 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6898      	ldr	r0, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	899b      	ldrh	r3, [r3, #12]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	f006 fcff 	bl	80070f8 <HAL_GPIO_WritePin>
	dev->Position = (((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1];
 80006fa:	7a3b      	ldrb	r3, [r7, #8]
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	b21b      	sxth	r3, r3
 8000700:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000704:	b21a      	sxth	r2, r3
 8000706:	7a7b      	ldrb	r3, [r7, #9]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b21b      	sxth	r3, r3
 800070e:	b29a      	uxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	81da      	strh	r2, [r3, #14]

	return dev->Position;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	89db      	ldrh	r3, [r3, #14]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f002 f96b 	bl	8002a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f8ed 	bl	8000908 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800072e:	f000 f963 	bl	80009f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f001 f981 	bl	8001a38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000736:	f001 f95f 	bl	80019f8 <MX_DMA_Init>
  MX_ADC3_Init();
 800073a:	f000 f991 	bl	8000a60 <MX_ADC3_Init>
  MX_TIM1_Init();
 800073e:	f000 fb1b 	bl	8000d78 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000742:	f000 fbfd 	bl	8000f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000746:	f000 fc73 	bl	8001030 <MX_TIM4_Init>
  MX_TIM5_Init();
 800074a:	f000 fcc7 	bl	80010dc <MX_TIM5_Init>
  MX_TIM8_Init();
 800074e:	f000 fd53 	bl	80011f8 <MX_TIM8_Init>
  MX_TIM13_Init();
 8000752:	f000 fdab 	bl	80012ac <MX_TIM13_Init>
  MX_TIM14_Init();
 8000756:	f000 fdf9 	bl	800134c <MX_TIM14_Init>
  MX_TIM15_Init();
 800075a:	f000 fe47 	bl	80013ec <MX_TIM15_Init>
  MX_TIM16_Init();
 800075e:	f000 fecd 	bl	80014fc <MX_TIM16_Init>
  MX_TIM17_Init();
 8000762:	f000 ff47 	bl	80015f4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000766:	f001 f8ad 	bl	80018c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800076a:	f001 f8f9 	bl	8001960 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800076e:	f000 fa55 	bl	8000c1c <MX_SPI3_Init>
  MX_SPI4_Init();
 8000772:	f000 faab 	bl	8000ccc <MX_SPI4_Init>
  MX_TIM2_Init();
 8000776:	f000 fb8f 	bl	8000e98 <MX_TIM2_Init>
  MX_I2C2_Init();
 800077a:	f000 fa0f 	bl	8000b9c <MX_I2C2_Init>
  MX_CRC_Init();
 800077e:	f000 f9e1 	bl	8000b44 <MX_CRC_Init>
  MX_TIM24_Init();
 8000782:	f001 f803 	bl	800178c <MX_TIM24_Init>
  MX_TIM23_Init();
 8000786:	f000 ffb1 	bl	80016ec <MX_TIM23_Init>
  MX_TIM6_Init();
 800078a:	f000 fcfd 	bl	8001188 <MX_TIM6_Init>
  MX_UART5_Init();
 800078e:	f001 f84d 	bl	800182c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000792:	2201      	movs	r2, #1
 8000794:	2101      	movs	r1, #1
 8000796:	4845      	ldr	r0, [pc, #276]	; (80008ac <main+0x18c>)
 8000798:	f006 fcae 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	2102      	movs	r1, #2
 80007a0:	4842      	ldr	r0, [pc, #264]	; (80008ac <main+0x18c>)
 80007a2:	f006 fca9 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2104      	movs	r1, #4
 80007aa:	4840      	ldr	r0, [pc, #256]	; (80008ac <main+0x18c>)
 80007ac:	f006 fca4 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	483d      	ldr	r0, [pc, #244]	; (80008ac <main+0x18c>)
 80007b6:	f006 fc9f 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	483b      	ldr	r0, [pc, #236]	; (80008ac <main+0x18c>)
 80007c0:	f006 fc9a 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2120      	movs	r1, #32
 80007c8:	4838      	ldr	r0, [pc, #224]	; (80008ac <main+0x18c>)
 80007ca:	f006 fc95 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	4836      	ldr	r0, [pc, #216]	; (80008ac <main+0x18c>)
 80007d4:	f006 fc90 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	4834      	ldr	r0, [pc, #208]	; (80008b0 <main+0x190>)
 80007de:	f006 fc8b 	bl	80070f8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim24); 		// Ms delay timer
 80007e2:	4834      	ldr	r0, [pc, #208]	; (80008b4 <main+0x194>)
 80007e4:	f00a fee4 	bl	800b5b0 <HAL_TIM_Base_Start>

	HAL_Delay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f002 f99b 	bl	8002b24 <HAL_Delay>
//	Contorl_Flag |= 0x02; //Use QEI

//	Encoder_Setup(); // Change Resolution ABI to 14 bits

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80007f2:	2100      	movs	r1, #0
 80007f4:	4830      	ldr	r0, [pc, #192]	; (80008b8 <main+0x198>)
 80007f6:	f003 ff71 	bl	80046dc <HAL_ADCEx_Calibration_Start>

//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 14);
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 80007fa:	e003      	b.n	8000804 <main+0xe4>

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80007fc:	2100      	movs	r1, #0
 80007fe:	482f      	ldr	r0, [pc, #188]	; (80008bc <main+0x19c>)
 8000800:	f00b f888 	bl	800b914 <HAL_TIM_PWM_Start>
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 8000804:	220e      	movs	r2, #14
 8000806:	492e      	ldr	r1, [pc, #184]	; (80008c0 <main+0x1a0>)
 8000808:	482e      	ldr	r0, [pc, #184]	; (80008c4 <main+0x1a4>)
 800080a:	f00c fb25 	bl	800ce58 <HAL_UART_Receive_DMA>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f3      	bne.n	80007fc <main+0xdc>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000814:	2100      	movs	r1, #0
 8000816:	482c      	ldr	r0, [pc, #176]	; (80008c8 <main+0x1a8>)
 8000818:	f00b f87c 	bl	800b914 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800081c:	2100      	movs	r1, #0
 800081e:	482b      	ldr	r0, [pc, #172]	; (80008cc <main+0x1ac>)
 8000820:	f00b f878 	bl	800b914 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000824:	2104      	movs	r1, #4
 8000826:	4829      	ldr	r0, [pc, #164]	; (80008cc <main+0x1ac>)
 8000828:	f00b f874 	bl	800b914 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800082c:	2100      	movs	r1, #0
 800082e:	4828      	ldr	r0, [pc, #160]	; (80008d0 <main+0x1b0>)
 8000830:	f00b f870 	bl	800b914 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	4827      	ldr	r0, [pc, #156]	; (80008d4 <main+0x1b4>)
 8000838:	f00b f86c 	bl	800b914 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800083c:	213c      	movs	r1, #60	; 0x3c
 800083e:	4826      	ldr	r0, [pc, #152]	; (80008d8 <main+0x1b8>)
 8000840:	f00b fa2a 	bl	800bc98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000844:	213c      	movs	r1, #60	; 0x3c
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <main+0x1bc>)
 8000848:	f00b fa26 	bl	800bc98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800084c:	213c      	movs	r1, #60	; 0x3c
 800084e:	4824      	ldr	r0, [pc, #144]	; (80008e0 <main+0x1c0>)
 8000850:	f00b fa22 	bl	800bc98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000854:	213c      	movs	r1, #60	; 0x3c
 8000856:	4823      	ldr	r0, [pc, #140]	; (80008e4 <main+0x1c4>)
 8000858:	f00b fa1e 	bl	800bc98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800085c:	213c      	movs	r1, #60	; 0x3c
 800085e:	4822      	ldr	r0, [pc, #136]	; (80008e8 <main+0x1c8>)
 8000860:	f00b fa1a 	bl	800bc98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000864:	213c      	movs	r1, #60	; 0x3c
 8000866:	4821      	ldr	r0, [pc, #132]	; (80008ec <main+0x1cc>)
 8000868:	f00b fa16 	bl	800bc98 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim6);			// ตัวจับเวลา
 800086c:	4820      	ldr	r0, [pc, #128]	; (80008f0 <main+0x1d0>)
 800086e:	f00a fe9f 	bl	800b5b0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim23); 	// Interrupt Timer
 8000872:	4820      	ldr	r0, [pc, #128]	; (80008f4 <main+0x1d4>)
 8000874:	f00a ff1a 	bl	800b6ac <HAL_TIM_Base_Start_IT>
	AS5047U_init(&Encoder, &hspi3, GPIOD, &hcrc, GPIO_PIN_5);
 8000878:	2320      	movs	r3, #32
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <main+0x1d8>)
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <main+0x18c>)
 8000880:	491e      	ldr	r1, [pc, #120]	; (80008fc <main+0x1dc>)
 8000882:	481f      	ldr	r0, [pc, #124]	; (8000900 <main+0x1e0>)
 8000884:	f7ff febe 	bl	8000604 <AS5047U_init>
//		test_encoder_QEI[3] = TIM1->CNT;
//		test_encoder_QEI[4] = TIM3->CNT;
//		test_encoder_QEI[5] = TIM2->CNT;
//		output_spi_test2 = Encoder_Position_SPI(GPIOD,GPIO_PIN_5);
//
		int a = HAL_GetTick();
 8000888:	f002 f940 	bl	8002b0c <HAL_GetTick>
 800088c:	4603      	mov	r3, r0
 800088e:	607b      	str	r3, [r7, #4]
		if (a - Last_Update_Time_MS >= 100) {
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <main+0x1e4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b63      	cmp	r3, #99	; 0x63
 800089a:	d9f5      	bls.n	8000888 <main+0x168>
			Last_Update_Time_MS = a;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <main+0x1e4>)
 80008a0:	6013      	str	r3, [r2, #0]
			AS5047U_Position_Highspeed_Read(&Encoder);
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <main+0x1e0>)
 80008a4:	f7ff fee5 	bl	8000672 <AS5047U_Position_Highspeed_Read>
  {
 80008a8:	e7ee      	b.n	8000888 <main+0x168>
 80008aa:	bf00      	nop
 80008ac:	58020c00 	.word	0x58020c00
 80008b0:	58021000 	.word	0x58021000
 80008b4:	2000003c 	.word	0x2000003c
 80008b8:	20000470 	.word	0x20000470
 80008bc:	20000578 	.word	0x20000578
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	200005c4 	.word	0x200005c4
 80008c8:	2000080c 	.word	0x2000080c
 80008cc:	200001b0 	.word	0x200001b0
 80008d0:	20000858 	.word	0x20000858
 80008d4:	2000026c 	.word	0x2000026c
 80008d8:	20000728 	.word	0x20000728
 80008dc:	20000774 	.word	0x20000774
 80008e0:	2000030c 	.word	0x2000030c
 80008e4:	200000d4 	.word	0x200000d4
 80008e8:	200002c0 	.word	0x200002c0
 80008ec:	20000088 	.word	0x20000088
 80008f0:	200006dc 	.word	0x200006dc
 80008f4:	200007c0 	.word	0x200007c0
 80008f8:	200001fc 	.word	0x200001fc
 80008fc:	20000358 	.word	0x20000358
 8000900:	2000055c 	.word	0x2000055c
 8000904:	20000558 	.word	0x20000558

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	; 0x70
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	224c      	movs	r2, #76	; 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00d fe96 	bl	800e648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00d fe90 	bl	800e648 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000928:	2002      	movs	r0, #2
 800092a:	f006 fd27 	bl	800737c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <SystemClock_Config+0xe8>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <SystemClock_Config+0xe8>)
 8000938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <SystemClock_Config+0xe8>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094a:	bf00      	nop
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xe8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000958:	d1f8      	bne.n	800094c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <SystemClock_Config+0xec>)
 800095c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095e:	f023 0303 	bic.w	r3, r3, #3
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <SystemClock_Config+0xec>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000978:	2302      	movs	r3, #2
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000980:	232c      	movs	r3, #44	; 0x2c
 8000982:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000990:	230c      	movs	r3, #12
 8000992:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000994:	2300      	movs	r3, #0
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4618      	mov	r0, r3
 80009a2:	f006 fd25 	bl	80073f0 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009ac:	f001 f940 	bl	8001c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	233f      	movs	r3, #63	; 0x3f
 80009b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009bc:	2308      	movs	r3, #8
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c4:	2340      	movs	r3, #64	; 0x40
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2103      	movs	r1, #3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 f8b6 	bl	8007b48 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80009e2:	f001 f925 	bl	8001c30 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3770      	adds	r7, #112	; 0x70
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58024800 	.word	0x58024800
 80009f4:	58024400 	.word	0x58024400

080009f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ae      	sub	sp, #184	; 0xb8
 80009fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	22b4      	movs	r2, #180	; 0xb4
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00d fe1f 	bl	800e648 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <PeriphCommonClock_Config+0x64>)
 8000a0c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000a12:	2310      	movs	r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a22:	23c0      	movs	r3, #192	; 0xc0
 8000a24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a32:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000a34:	2301      	movs	r3, #1
 8000a36:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fc0b 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000a50:	f001 f8ee 	bl	8001c30 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	37b8      	adds	r7, #184	; 0xb8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	00082003 	.word	0x00082003

08000a60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2224      	movs	r2, #36	; 0x24
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00d fdeb 	bl	800e648 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a74:	4a31      	ldr	r2, [pc, #196]	; (8000b3c <MX_ADC3_Init+0xdc>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a7a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ae0:	4815      	ldr	r0, [pc, #84]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000ae2:	f002 faf1 	bl	80030c8 <HAL_ADC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000aec:	f001 f8a0 	bl	8001c30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_ADC3_Init+0xe0>)
 8000af2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af4:	2306      	movs	r3, #6
 8000af6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000af8:	2306      	movs	r3, #6
 8000afa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000afc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b02:	2304      	movs	r3, #4
 8000b04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_ADC3_Init+0xd8>)
 8000b20:	f002 ff32 	bl	8003988 <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000b2a:	f001 f881 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000470 	.word	0x20000470
 8000b3c:	58026000 	.word	0x58026000
 8000b40:	c7520000 	.word	0xc7520000

08000b44 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_CRC_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b5c:	221d      	movs	r2, #29
 8000b5e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b62:	2210      	movs	r2, #16
 8000b64:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b68:	22c4      	movs	r2, #196	; 0xc4
 8000b6a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_CRC_Init+0x50>)
 8000b80:	f003 ff52 	bl	8004a28 <HAL_CRC_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f001 f851 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001fc 	.word	0x200001fc
 8000b98:	58024c00 	.word	0x58024c00

08000b9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <MX_I2C2_Init+0x78>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MX_I2C2_Init+0x7c>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bd8:	f006 faa8 	bl	800712c <HAL_I2C_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000be2:	f001 f825 	bl	8001c30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4809      	ldr	r0, [pc, #36]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bea:	f006 fb2f 	bl	800724c <HAL_I2CEx_ConfigAnalogFilter>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bf4:	f001 f81c 	bl	8001c30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bfc:	f006 fb71 	bl	80072e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f001 f813 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000220 	.word	0x20000220
 8000c14:	40005800 	.word	0x40005800
 8000c18:	60404e72 	.word	0x60404e72

08000c1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c22:	4a29      	ldr	r2, [pc, #164]	; (8000cc8 <MX_SPI3_Init+0xac>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c52:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c6c:	221d      	movs	r2, #29
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_SPI3_Init+0xa8>)
 8000cb0:	f009 fb68 	bl	800a384 <HAL_SPI_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000cba:	f000 ffb9 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000358 	.word	0x20000358
 8000cc8:	40003c00 	.word	0x40003c00

08000ccc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <MX_SPI4_Init+0xa8>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000cd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cdc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000cf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cfc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d04:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_SPI4_Init+0xa4>)
 8000d5e:	f009 fb11 	bl	800a384 <HAL_SPI_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d68:	f000 ff62 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000654 	.word	0x20000654
 8000d74:	40013400 	.word	0x40013400

08000d78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b098      	sub	sp, #96	; 0x60
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2234      	movs	r2, #52	; 0x34
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f00d fc4f 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dac:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <MX_TIM1_Init+0x11c>)
 8000dae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dbc:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dca:	4b31      	ldr	r3, [pc, #196]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000dd6:	482e      	ldr	r0, [pc, #184]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dd8:	f00a fcee 	bl	800b7b8 <HAL_TIM_OC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 ff25 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000df6:	4619      	mov	r1, r3
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000dfa:	f00b fea1 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e04:	f000 ff14 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000e2e:	f00a ffc1 	bl	800bdb4 <HAL_TIM_OC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e38:	f000 fefa 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000e72:	f00b ff01 	bl	800cc78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000e7c:	f000 fed8 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM1_Init+0x118>)
 8000e82:	f001 fac1 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3760      	adds	r7, #96	; 0x60
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000728 	.word	0x20000728
 8000e94:	40010000 	.word	0x40010000

08000e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2224      	movs	r2, #36	; 0x24
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00d fbce 	bl	800e648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000eb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000ecc:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000ed0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000f0a:	f00a fe1f 	bl	800bb4c <HAL_TIM_Encoder_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f14:	f000 fe8c 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_TIM2_Init+0xa4>)
 8000f26:	f00b fe0b 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f30:	f000 fe7e 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000774 	.word	0x20000774

08000f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f72:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f74:	4a2d      	ldr	r2, [pc, #180]	; (800102c <MX_TIM3_Init+0xec>)
 8000f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f98:	4823      	ldr	r0, [pc, #140]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000f9a:	f00a fab2 	bl	800b502 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000fa4:	f000 fe44 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000fb6:	f00b f88b 	bl	800c0d0 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000fc0:	f000 fe36 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000fc6:	f00a fc4e 	bl	800b866 <HAL_TIM_PWM_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fd0:	f000 fe2e 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_TIM3_Init+0xe8>)
 8000fe4:	f00b fdac 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fee:	f000 fe1f 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff2:	2360      	movs	r3, #96	; 0x60
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM3_Init+0xe8>)
 800100a:	f00a ff4d 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001014:	f000 fe0c 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM3_Init+0xe8>)
 800101a:	f001 f9f5 	bl	8002408 <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3738      	adds	r7, #56	; 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000030c 	.word	0x2000030c
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f00d fb02 	bl	800e648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_TIM4_Init+0xa4>)
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_TIM4_Init+0xa8>)
 8001052:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM4_Init+0xa4>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM4_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM4_Init+0xa4>)
 8001062:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001066:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM4_Init+0xa4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM4_Init+0xa4>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001074:	2303      	movs	r3, #3
 8001076:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM4_Init+0xa4>)
 80010a0:	f00a fd54 	bl	800bb4c <HAL_TIM_Encoder_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010aa:	f000 fdc1 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM4_Init+0xa4>)
 80010bc:	f00b fd40 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010c6:	f000 fdb3 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	; 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000d4 	.word	0x200000d4
 80010d8:	40000800 	.word	0x40000800

080010dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00d faac 	bl	800e648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_TIM5_Init+0xa4>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <MX_TIM5_Init+0xa8>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_TIM5_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_TIM5_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM5_Init+0xa4>)
 800110e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001112:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM5_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM5_Init+0xa4>)
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001120:	2303      	movs	r3, #3
 8001122:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM5_Init+0xa4>)
 800114c:	f00a fcfe 	bl	800bb4c <HAL_TIM_Encoder_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001156:	f000 fd6b 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM5_Init+0xa4>)
 8001168:	f00b fcea 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001172:	f000 fd5d 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002c0 	.word	0x200002c0
 8001184:	40000c00 	.word	0x40000c00

08001188 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM6_Init+0x68>)
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <MX_TIM6_Init+0x6c>)
 800119c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011a0:	f44f 7289 	mov.w	r2, #274	; 0x112
 80011a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011bc:	f00a f9a1 	bl	800b502 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011c6:	f000 fd33 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011d8:	f00b fcb2 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011e2:	f000 fd25 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200006dc 	.word	0x200006dc
 80011f4:	40001000 	.word	0x40001000

080011f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f00d fa1e 	bl	800e648 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_TIM8_Init+0xac>)
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_TIM8_Init+0xb0>)
 800121a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_TIM8_Init+0xac>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_TIM8_Init+0xac>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM8_Init+0xac>)
 800122a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800122e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM8_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM8_Init+0xac>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM8_Init+0xac>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001242:	2303      	movs	r3, #3
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_TIM8_Init+0xac>)
 800126e:	f00a fc6d 	bl	800bb4c <HAL_TIM_Encoder_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001278:	f000 fcda 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_TIM8_Init+0xac>)
 800128e:	f00b fc57 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001298:	f000 fcca 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3730      	adds	r7, #48	; 0x30
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000088 	.word	0x20000088
 80012a8:	40010400 	.word	0x40010400

080012ac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM13_Init+0x98>)
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <MX_TIM13_Init+0x9c>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_TIM13_Init+0x98>)
 80012cc:	f44f 7289 	mov.w	r2, #274	; 0x112
 80012d0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM13_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM13_Init+0x98>)
 80012da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012de:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM13_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_TIM13_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_TIM13_Init+0x98>)
 80012ee:	f00a f908 	bl	800b502 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80012f8:	f000 fc9a 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_TIM13_Init+0x98>)
 80012fe:	f00a fab2 	bl	800b866 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001308:	f000 fc92 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001310:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM13_Init+0x98>)
 8001326:	f00a fdbf 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001330:	f000 fc7e 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM13_Init+0x98>)
 8001336:	f001 f867 	bl	8002408 <HAL_TIM_MspPostInit>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000578 	.word	0x20000578
 8001348:	40001c00 	.word	0x40001c00

0800134c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_TIM14_Init+0x98>)
 8001366:	4a20      	ldr	r2, [pc, #128]	; (80013e8 <MX_TIM14_Init+0x9c>)
 8001368:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_TIM14_Init+0x98>)
 800136c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001370:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_TIM14_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_TIM14_Init+0x98>)
 800137a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800137e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM14_Init+0x98>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_TIM14_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <MX_TIM14_Init+0x98>)
 800138e:	f00a f8b8 	bl	800b502 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8001398:	f000 fc4a 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_TIM14_Init+0x98>)
 800139e:	f00a fa62 	bl	800b866 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80013a8:	f000 fc42 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ac:	2360      	movs	r3, #96	; 0x60
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80013b0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM14_Init+0x98>)
 80013c6:	f00a fd6f 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80013d0:	f000 fc2e 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM14_Init+0x98>)
 80013d6:	f001 f817 	bl	8002408 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000080c 	.word	0x2000080c
 80013e8:	40002000 	.word	0x40002000

080013ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b098      	sub	sp, #96	; 0x60
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2234      	movs	r2, #52	; 0x34
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f00d f915 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <MX_TIM15_Init+0x108>)
 8001420:	4a35      	ldr	r2, [pc, #212]	; (80014f8 <MX_TIM15_Init+0x10c>)
 8001422:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <MX_TIM15_Init+0x108>)
 8001426:	f44f 7289 	mov.w	r2, #274	; 0x112
 800142a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <MX_TIM15_Init+0x108>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_TIM15_Init+0x108>)
 8001434:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001438:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <MX_TIM15_Init+0x108>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <MX_TIM15_Init+0x108>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <MX_TIM15_Init+0x108>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800144c:	4829      	ldr	r0, [pc, #164]	; (80014f4 <MX_TIM15_Init+0x108>)
 800144e:	f00a fa0a 	bl	800b866 <HAL_TIM_PWM_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001458:	f000 fbea 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001464:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001468:	4619      	mov	r1, r3
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <MX_TIM15_Init+0x108>)
 800146c:	f00b fb68 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001476:	f000 fbdb 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147a:	2360      	movs	r3, #96	; 0x60
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2000-1;
 800147e:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM15_Init+0x108>)
 80014a2:	f00a fd01 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80014ac:	f000 fbc0 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <MX_TIM15_Init+0x108>)
 80014d8:	f00b fbce 	bl	800cc78 <HAL_TIMEx_ConfigBreakDeadTime>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80014e2:	f000 fba5 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM15_Init+0x108>)
 80014e8:	f000 ff8e 	bl	8002408 <HAL_TIM_MspPostInit>

}
 80014ec:	bf00      	nop
 80014ee:	3760      	adds	r7, #96	; 0x60
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200001b0 	.word	0x200001b0
 80014f8:	40014000 	.word	0x40014000

080014fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2234      	movs	r2, #52	; 0x34
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f00d f893 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001524:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <MX_TIM16_Init+0xf4>)
 8001526:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_TIM16_Init+0xf0>)
 800152a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800152e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <MX_TIM16_Init+0xf0>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001550:	4826      	ldr	r0, [pc, #152]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001552:	f009 ffd6 	bl	800b502 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800155c:	f000 fb68 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001560:	4822      	ldr	r0, [pc, #136]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001562:	f00a f980 	bl	800b866 <HAL_TIM_PWM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800156c:	f000 fb60 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001574:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800157e:	2300      	movs	r3, #0
 8001580:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800158a:	2300      	movs	r3, #0
 800158c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <MX_TIM16_Init+0xf0>)
 8001598:	f00a fc86 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80015a2:	f000 fb45 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <MX_TIM16_Init+0xf0>)
 80015ce:	f00b fb53 	bl	800cc78 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80015d8:	f000 fb2a 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <MX_TIM16_Init+0xf0>)
 80015de:	f000 ff13 	bl	8002408 <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3750      	adds	r7, #80	; 0x50
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000858 	.word	0x20000858
 80015f0:	40014400 	.word	0x40014400

080015f4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	; 0x50
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2234      	movs	r2, #52	; 0x34
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00d f817 	bl	800e648 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <MX_TIM17_Init+0xf0>)
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <MX_TIM17_Init+0xf4>)
 800161e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <MX_TIM17_Init+0xf0>)
 8001622:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001626:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <MX_TIM17_Init+0xf0>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_TIM17_Init+0xf0>)
 8001630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001634:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <MX_TIM17_Init+0xf0>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_TIM17_Init+0xf0>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <MX_TIM17_Init+0xf0>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001648:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_TIM17_Init+0xf0>)
 800164a:	f009 ff5a 	bl	800b502 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001654:	f000 faec 	bl	8001c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001658:	4822      	ldr	r0, [pc, #136]	; (80016e4 <MX_TIM17_Init+0xf0>)
 800165a:	f00a f904 	bl	800b866 <HAL_TIM_PWM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001664:	f000 fae4 	bl	8001c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800166c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <MX_TIM17_Init+0xf0>)
 8001690:	f00a fc0a 	bl	800bea8 <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800169a:	f000 fac9 	bl	8001c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM17_Init+0xf0>)
 80016c6:	f00b fad7 	bl	800cc78 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80016d0:	f000 faae 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM17_Init+0xf0>)
 80016d6:	f000 fe97 	bl	8002408 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	; 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000026c 	.word	0x2000026c
 80016e8:	40014800 	.word	0x40014800

080016ec <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_TIM23_Init+0x98>)
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM23_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM23_Init+0x98>)
 8001712:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001716:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM23_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM23_Init+0x98>)
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM23_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM23_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM23_Init+0x98>)
 8001734:	f009 fee5 	bl	800b502 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800173e:	f000 fa77 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM23_Init+0x98>)
 8001750:	f00a fcbe 	bl	800c0d0 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800175a:	f000 fa69 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM23_Init+0x98>)
 800176c:	f00b f9e8 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8001776:	f000 fa5b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200007c0 	.word	0x200007c0
 8001788:	4000e000 	.word	0x4000e000

0800178c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_TIM24_Init+0x98>)
 80017ac:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <MX_TIM24_Init+0x9c>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_TIM24_Init+0x98>)
 80017b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80017b6:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM24_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_TIM24_Init+0x98>)
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_TIM24_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM24_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80017d2:	4814      	ldr	r0, [pc, #80]	; (8001824 <MX_TIM24_Init+0x98>)
 80017d4:	f009 fe95 	bl	800b502 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80017de:	f000 fa27 	bl	8001c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM24_Init+0x98>)
 80017f0:	f00a fc6e 	bl	800c0d0 <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80017fa:	f000 fa19 	bl	8001c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM24_Init+0x98>)
 800180c:	f00b f998 	bl	800cb40 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8001816:	f000 fa0b 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000003c 	.word	0x2000003c
 8001828:	4000e400 	.word	0x4000e400

0800182c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_UART5_Init+0x90>)
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <MX_UART5_Init+0x94>)
 8001834:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_UART5_Init+0x90>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_UART5_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_UART5_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_UART5_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_UART5_Init+0x90>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_UART5_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_UART5_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_UART5_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_UART5_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_UART5_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <MX_UART5_Init+0x90>)
 8001876:	f00b fa9f 	bl	800cdb8 <HAL_UART_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001880:	f000 f9d6 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001884:	2100      	movs	r1, #0
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_UART5_Init+0x90>)
 8001888:	f00c fdf0 	bl	800e46c <HAL_UARTEx_SetTxFifoThreshold>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001892:	f000 f9cd 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001896:	2100      	movs	r1, #0
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <MX_UART5_Init+0x90>)
 800189a:	f00c fe25 	bl	800e4e8 <HAL_UARTEx_SetRxFifoThreshold>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80018a4:	f000 f9c4 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_UART5_Init+0x90>)
 80018aa:	f00c fda6 	bl	800e3fa <HAL_UARTEx_DisableFifoMode>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80018b4:	f000 f9bc 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200003e0 	.word	0x200003e0
 80018c0:	40005000 	.word	0x40005000

080018c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <MX_USART1_UART_Init+0x94>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <MX_USART1_UART_Init+0x98>)
 80018d2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018e8:	220c      	movs	r2, #12
 80018ea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_USART1_UART_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_USART1_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_USART1_UART_Init+0x90>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190a:	4812      	ldr	r0, [pc, #72]	; (8001954 <MX_USART1_UART_Init+0x90>)
 800190c:	f00b fa54 	bl	800cdb8 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001916:	f000 f98b 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191a:	2100      	movs	r1, #0
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_USART1_UART_Init+0x90>)
 800191e:	f00c fda5 	bl	800e46c <HAL_UARTEx_SetTxFifoThreshold>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001928:	f000 f982 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192c:	2100      	movs	r1, #0
 800192e:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_USART1_UART_Init+0x90>)
 8001930:	f00c fdda 	bl	800e4e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800193a:	f000 f979 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_USART1_UART_Init+0x90>)
 8001940:	f00c fd5b 	bl	800e3fa <HAL_UARTEx_DisableFifoMode>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800194a:	f000 f971 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200005c4 	.word	0x200005c4
 8001958:	40011000 	.word	0x40011000
 800195c:	001e8480 	.word	0x001e8480

08001960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <MX_USART3_UART_Init+0x94>)
 8001968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019aa:	f00b fa05 	bl	800cdb8 <HAL_UART_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019b4:	f000 f93c 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b8:	2100      	movs	r1, #0
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019bc:	f00c fd56 	bl	800e46c <HAL_UARTEx_SetTxFifoThreshold>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f000 f933 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019ce:	f00c fd8b 	bl	800e4e8 <HAL_UARTEx_SetRxFifoThreshold>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f000 f92a 	bl	8001c30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_USART3_UART_Init+0x90>)
 80019de:	f00c fd0c 	bl	800e3fa <HAL_UARTEx_DisableFifoMode>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019e8:	f000 f922 	bl	8001c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000120 	.word	0x20000120
 80019f4:	40004800 	.word	0x40004800

080019f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_DMA_Init+0x3c>)
 8001a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	200b      	movs	r0, #11
 8001a22:	f002 ffcc 	bl	80049be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a26:	200b      	movs	r0, #11
 8001a28:	f002 ffe3 	bl	80049f2 <HAL_NVIC_EnableIRQ>

}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	58024400 	.word	0x58024400

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	4a70      	ldr	r2, [pc, #448]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	4a69      	ldr	r2, [pc, #420]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7c:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab8:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	4a4b      	ldr	r2, [pc, #300]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <MX_GPIO_Init+0x1e0>)
 8001af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b02:	2200      	movs	r2, #0
 8001b04:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001b08:	4844      	ldr	r0, [pc, #272]	; (8001c1c <MX_GPIO_Init+0x1e4>)
 8001b0a:	f005 faf5 	bl	80070f8 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001b14:	4842      	ldr	r0, [pc, #264]	; (8001c20 <MX_GPIO_Init+0x1e8>)
 8001b16:	f005 faef 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	21c4      	movs	r1, #196	; 0xc4
 8001b1e:	4841      	ldr	r0, [pc, #260]	; (8001c24 <MX_GPIO_Init+0x1ec>)
 8001b20:	f005 faea 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001b2a:	483f      	ldr	r0, [pc, #252]	; (8001c28 <MX_GPIO_Init+0x1f0>)
 8001b2c:	f005 fae4 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b36:	483a      	ldr	r0, [pc, #232]	; (8001c20 <MX_GPIO_Init+0x1e8>)
 8001b38:	f005 fade 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	213f      	movs	r1, #63	; 0x3f
 8001b40:	4839      	ldr	r0, [pc, #228]	; (8001c28 <MX_GPIO_Init+0x1f0>)
 8001b42:	f005 fad9 	bl	80070f8 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DIR3_Pin DIR4_Pin DIR5_Pin Output_EN_Pin
                           EMSW2_Pin EMSW3_Pin EMSW4_Pin EERAM_SS_Pin
                           EERAM_HOLD_Pin DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b46:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001b4a:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482f      	ldr	r0, [pc, #188]	; (8001c1c <MX_GPIO_Init+0x1e4>)
 8001b60:	f005 f922 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper0_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001b64:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4828      	ldr	r0, [pc, #160]	; (8001c20 <MX_GPIO_Init+0x1e8>)
 8001b7e:	f005 f913 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMSW0_Pin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4823      	ldr	r0, [pc, #140]	; (8001c24 <MX_GPIO_Init+0x1ec>)
 8001b98:	f005 f906 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMSW1_Pin EN45_Pin EN123_Pin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001b9c:	23c4      	movs	r3, #196	; 0xc4
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	481c      	ldr	r0, [pc, #112]	; (8001c24 <MX_GPIO_Init+0x1ec>)
 8001bb4:	f005 f8f8 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin SPI3_SS6_Pin SPI3_SS5_Pin
                           SPI3_SS4_Pin SPI3_SS3_Pin SPI3_SS2_Pin SPI3_SS1_Pin
                           SPI3_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001bb8:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001bbc:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <MX_GPIO_Init+0x1f0>)
 8001bd2:	f005 f8e9 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC6I_Pin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <MX_GPIO_Init+0x1f4>)
 8001bec:	f005 f8dc 	bl	8006da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bf0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <MX_GPIO_Init+0x1f4>)
 8001c0a:	f005 f8cd 	bl	8006da8 <HAL_GPIO_Init>

}
 8001c0e:	bf00      	nop
 8001c10:	3730      	adds	r7, #48	; 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58021000 	.word	0x58021000
 8001c20:	58020800 	.word	0x58020800
 8001c24:	58020400 	.word	0x58020400
 8001c28:	58020c00 	.word	0x58020c00
 8001c2c:	58020000 	.word	0x58020000

08001c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <Error_Handler+0x8>
	...

08001c3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_MspInit+0x30>)
 8001c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_MspInit+0x30>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_MspInit+0x30>)
 8001c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	58024400 	.word	0x58024400

08001c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_ADC_MspInit+0x48>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d116      	bne.n	8001cb0 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_ADC_MspInit+0x4c>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_ADC_MspInit+0x4c>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_ADC_MspInit+0x4c>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	207f      	movs	r0, #127	; 0x7f
 8001ca6:	f002 fe8a 	bl	80049be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001caa:	207f      	movs	r0, #127	; 0x7f
 8001cac:	f002 fea1 	bl	80049f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	58026000 	.word	0x58026000
 8001cbc:	58024400 	.word	0x58024400

08001cc0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_CRC_MspInit+0x3c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_CRC_MspInit+0x40>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_CRC_MspInit+0x40>)
 8001cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_CRC_MspInit+0x40>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	58024c00 	.word	0x58024c00
 8001d00:	58024400 	.word	0x58024400

08001d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0b6      	sub	sp, #216	; 0xd8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	22b4      	movs	r2, #180	; 0xb4
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00c fc8f 	bl	800e648 <memset>
  if(hi2c->Instance==I2C2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <HAL_I2C_MspInit+0xc0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d142      	bne.n	8001dba <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d34:	2308      	movs	r3, #8
 8001d36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 fa8c 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d4e:	f7ff ff6f 	bl	8001c30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d94:	4619      	mov	r1, r3
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <HAL_I2C_MspInit+0xc8>)
 8001d98:	f005 f806 	bl	8006da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_I2C_MspInit+0xc4>)
 8001dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	37d8      	adds	r7, #216	; 0xd8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40005800 	.word	0x40005800
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020400 	.word	0x58020400

08001dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0b8      	sub	sp, #224	; 0xe0
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	22b4      	movs	r2, #180	; 0xb4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00c fc29 	bl	800e648 <memset>
  if(hspi->Instance==SPI3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_SPI_MspInit+0x158>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d156      	bne.n	8001eae <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001e06:	2319      	movs	r3, #25
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e14:	2302      	movs	r3, #2
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e24:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fa13 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001e40:	f7ff fef6 	bl	8001c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4a:	4a38      	ldr	r2, [pc, #224]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	4a30      	ldr	r2, [pc, #192]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4822      	ldr	r0, [pc, #136]	; (8001f30 <HAL_SPI_MspInit+0x160>)
 8001ea8:	f004 ff7e 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001eac:	e038      	b.n	8001f20 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI4)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_SPI_MspInit+0x164>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d133      	bne.n	8001f20 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ebe:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001ec0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_SPI_MspInit+0x15c>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8001ef4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f0e:	2305      	movs	r3, #5
 8001f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <HAL_SPI_MspInit+0x168>)
 8001f1c:	f004 ff44 	bl	8006da8 <HAL_GPIO_Init>
}
 8001f20:	bf00      	nop
 8001f22:	37e0      	adds	r7, #224	; 0xe0
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40003c00 	.word	0x40003c00
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020800 	.word	0x58020800
 8001f34:	40013400 	.word	0x40013400
 8001f38:	58021000 	.word	0x58021000

08001f3c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_TIM_OC_MspInit+0x88>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12e      	bne.n	8001fbc <HAL_TIM_OC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_TIM_OC_MspInit+0x8c>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8001f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_TIM_OC_MspInit+0x90>)
 8001fb8:	f004 fef6 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58020000 	.word	0x58020000

08001fd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d14e      	bne.n	8002090 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff2:	4b77      	ldr	r3, [pc, #476]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff8:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002002:	4b73      	ldr	r3, [pc, #460]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a66      	ldr	r2, [pc, #408]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 800204c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205e:	2301      	movs	r3, #1
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002066:	4619      	mov	r1, r3
 8002068:	485a      	ldr	r0, [pc, #360]	; (80021d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800206a:	f004 fe9d 	bl	8006da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 800206e:	2308      	movs	r3, #8
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800207e:	2301      	movs	r3, #1
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	4853      	ldr	r0, [pc, #332]	; (80021d8 <HAL_TIM_Encoder_MspInit+0x208>)
 800208a:	f004 fe8d 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800208e:	e09b      	b.n	80021c8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_TIM_Encoder_MspInit+0x20c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12f      	bne.n	80020fa <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800209c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 80020ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b8:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	4a44      	ldr	r2, [pc, #272]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80020d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e8:	2302      	movs	r3, #2
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f0:	4619      	mov	r1, r3
 80020f2:	483b      	ldr	r0, [pc, #236]	; (80021e0 <HAL_TIM_Encoder_MspInit+0x210>)
 80020f4:	f004 fe58 	bl	8006da8 <HAL_GPIO_Init>
}
 80020f8:	e066      	b.n	80021c8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a39      	ldr	r2, [pc, #228]	; (80021e4 <HAL_TIM_Encoder_MspInit+0x214>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d12e      	bne.n	8002162 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210a:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002140:	2303      	movs	r3, #3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002150:	2302      	movs	r3, #2
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002158:	4619      	mov	r1, r3
 800215a:	481e      	ldr	r0, [pc, #120]	; (80021d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800215c:	f004 fe24 	bl	8006da8 <HAL_GPIO_Init>
}
 8002160:	e032      	b.n	80021c8 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM8)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_TIM_Encoder_MspInit+0x218>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d12d      	bne.n	80021c8 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800216e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800217e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021b8:	2303      	movs	r3, #3
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	480a      	ldr	r0, [pc, #40]	; (80021ec <HAL_TIM_Encoder_MspInit+0x21c>)
 80021c4:	f004 fdf0 	bl	8006da8 <HAL_GPIO_Init>
}
 80021c8:	bf00      	nop
 80021ca:	3740      	adds	r7, #64	; 0x40
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	58024400 	.word	0x58024400
 80021d4:	58020000 	.word	0x58020000
 80021d8:	58020400 	.word	0x58020400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	58020c00 	.word	0x58020c00
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40010400 	.word	0x40010400
 80021ec:	58020800 	.word	0x58020800

080021f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b090      	sub	sp, #64	; 0x40
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_TIM_Base_MspInit+0x1ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12e      	bne.n	8002270 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002218:	4a61      	ldr	r2, [pc, #388]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 800224e:	2320      	movs	r3, #32
 8002250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225e:	2302      	movs	r3, #2
 8002260:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8002262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002266:	4619      	mov	r1, r3
 8002268:	484e      	ldr	r0, [pc, #312]	; (80023a4 <HAL_TIM_Base_MspInit+0x1b4>)
 800226a:	f004 fd9d 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800226e:	e091      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM6)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_TIM_Base_MspInit+0x1b8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d10f      	bne.n	800229a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800227c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002280:	4a47      	ldr	r2, [pc, #284]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800228c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	6a3b      	ldr	r3, [r7, #32]
}
 8002298:	e07c      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM13)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_TIM_Base_MspInit+0x1bc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10f      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022aa:	4a3d      	ldr	r2, [pc, #244]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
}
 80022c2:	e067      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM14)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <HAL_TIM_Base_MspInit+0x1c0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10f      	bne.n	80022ee <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d4:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	69bb      	ldr	r3, [r7, #24]
}
 80022ec:	e052      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM16)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_TIM_Base_MspInit+0x1c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10f      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 80022fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800230a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697b      	ldr	r3, [r7, #20]
}
 8002316:	e03d      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM17)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <HAL_TIM_Base_MspInit+0x1c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10f      	bne.n	8002342 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800232a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
}
 8002340:	e028      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM23)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_TIM_Base_MspInit+0x1cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d10f      	bne.n	800236c <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800234e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002352:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002358:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800235e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	e013      	b.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM24)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10e      	bne.n	8002394 <HAL_TIM_Base_MspInit+0x1a4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002378:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 800237e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002382:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_TIM_Base_MspInit+0x1b0>)
 8002388:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
}
 8002394:	bf00      	nop
 8002396:	3740      	adds	r7, #64	; 0x40
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40000400 	.word	0x40000400
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58020400 	.word	0x58020400
 80023a8:	40001000 	.word	0x40001000
 80023ac:	40001c00 	.word	0x40001c00
 80023b0:	40002000 	.word	0x40002000
 80023b4:	40014400 	.word	0x40014400
 80023b8:	40014800 	.word	0x40014800
 80023bc:	4000e000 	.word	0x4000e000
 80023c0:	4000e400 	.word	0x4000e400

080023c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_TIM_PWM_MspInit+0x3c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_TIM_PWM_MspInit+0x40>)
 80023d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <HAL_TIM_PWM_MspInit+0x40>)
 80023de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_TIM_PWM_MspInit+0x40>)
 80023e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40014000 	.word	0x40014000
 8002404:	58024400 	.word	0x58024400

08002408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	; 0x38
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a83      	ldr	r2, [pc, #524]	; (8002634 <HAL_TIM_MspPostInit+0x22c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d120      	bne.n	800246c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	4b83      	ldr	r3, [pc, #524]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002430:	4a81      	ldr	r2, [pc, #516]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8002448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800245a:	2301      	movs	r3, #1
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	4619      	mov	r1, r3
 8002464:	4875      	ldr	r0, [pc, #468]	; (800263c <HAL_TIM_MspPostInit+0x234>)
 8002466:	f004 fc9f 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800246a:	e0de      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a73      	ldr	r2, [pc, #460]	; (8002640 <HAL_TIM_MspPostInit+0x238>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11f      	bne.n	80024b6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8002494:	2310      	movs	r3, #16
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024a4:	2302      	movs	r3, #2
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	4865      	ldr	r0, [pc, #404]	; (8002644 <HAL_TIM_MspPostInit+0x23c>)
 80024b0:	f004 fc7a 	bl	8006da8 <HAL_GPIO_Init>
}
 80024b4:	e0b9      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM13)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a63      	ldr	r2, [pc, #396]	; (8002648 <HAL_TIM_MspPostInit+0x240>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11f      	bne.n	8002500 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d0:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80024ee:	2309      	movs	r3, #9
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f6:	4619      	mov	r1, r3
 80024f8:	4850      	ldr	r0, [pc, #320]	; (800263c <HAL_TIM_MspPostInit+0x234>)
 80024fa:	f004 fc55 	bl	8006da8 <HAL_GPIO_Init>
}
 80024fe:	e094      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM14)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_TIM_MspPostInit+0x244>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11f      	bne.n	800254a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a49      	ldr	r2, [pc, #292]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002538:	2309      	movs	r3, #9
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002540:	4619      	mov	r1, r3
 8002542:	483e      	ldr	r0, [pc, #248]	; (800263c <HAL_TIM_MspPostInit+0x234>)
 8002544:	f004 fc30 	bl	8006da8 <HAL_GPIO_Init>
}
 8002548:	e06f      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM15)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a40      	ldr	r2, [pc, #256]	; (8002650 <HAL_TIM_MspPostInit+0x248>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d11f      	bne.n	8002594 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	4a37      	ldr	r2, [pc, #220]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 800255c:	f043 0310 	orr.w	r3, r3, #16
 8002560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP3_Pin;
 8002572:	2320      	movs	r3, #32
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002582:	2304      	movs	r3, #4
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	4831      	ldr	r0, [pc, #196]	; (8002654 <HAL_TIM_MspPostInit+0x24c>)
 800258e:	f004 fc0b 	bl	8006da8 <HAL_GPIO_Init>
}
 8002592:	e04a      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM16)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <HAL_TIM_MspPostInit+0x250>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d120      	bne.n	80025e0 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b26      	ldr	r3, [pc, #152]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80025bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80025ce:	2301      	movs	r3, #1
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d6:	4619      	mov	r1, r3
 80025d8:	481a      	ldr	r0, [pc, #104]	; (8002644 <HAL_TIM_MspPostInit+0x23c>)
 80025da:	f004 fbe5 	bl	8006da8 <HAL_GPIO_Init>
}
 80025de:	e024      	b.n	800262a <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM17)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_TIM_MspPostInit+0x254>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11f      	bne.n	800262a <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_TIM_MspPostInit+0x230>)
 80025fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8002608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800261a:	2301      	movs	r3, #1
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4807      	ldr	r0, [pc, #28]	; (8002644 <HAL_TIM_MspPostInit+0x23c>)
 8002626:	f004 fbbf 	bl	8006da8 <HAL_GPIO_Init>
}
 800262a:	bf00      	nop
 800262c:	3738      	adds	r7, #56	; 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	58024400 	.word	0x58024400
 800263c:	58020000 	.word	0x58020000
 8002640:	40000400 	.word	0x40000400
 8002644:	58020400 	.word	0x58020400
 8002648:	40001c00 	.word	0x40001c00
 800264c:	40002000 	.word	0x40002000
 8002650:	40014000 	.word	0x40014000
 8002654:	58021000 	.word	0x58021000
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08e      	sub	sp, #56	; 0x38
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_UART_MspInit+0x1b8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12f      	bne.n	80026e2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002682:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_UART_MspInit+0x1bc>)
 8002684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002688:	4a64      	ldr	r2, [pc, #400]	; (800281c <HAL_UART_MspInit+0x1bc>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002692:	4b62      	ldr	r3, [pc, #392]	; (800281c <HAL_UART_MspInit+0x1bc>)
 8002694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	4a5d      	ldr	r2, [pc, #372]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b0:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80026d0:	230e      	movs	r3, #14
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	4619      	mov	r1, r3
 80026da:	4851      	ldr	r0, [pc, #324]	; (8002820 <HAL_UART_MspInit+0x1c0>)
 80026dc:	f004 fb64 	bl	8006da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026e0:	e096      	b.n	8002810 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <HAL_UART_MspInit+0x1c4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d15d      	bne.n	80027a8 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f2:	4a4a      	ldr	r2, [pc, #296]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026f4:	f043 0310 	orr.w	r3, r3, #16
 80026f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026fc:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80026fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_UART_MspInit+0x1bc>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a42      	ldr	r2, [pc, #264]	; (800281c <HAL_UART_MspInit+0x1bc>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b40      	ldr	r3, [pc, #256]	; (800281c <HAL_UART_MspInit+0x1bc>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002728:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800273a:	2304      	movs	r3, #4
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4619      	mov	r1, r3
 8002744:	4836      	ldr	r0, [pc, #216]	; (8002820 <HAL_UART_MspInit+0x1c0>)
 8002746:	f004 fb2f 	bl	8006da8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 800274c:	4a37      	ldr	r2, [pc, #220]	; (800282c <HAL_UART_MspInit+0x1cc>)
 800274e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002750:	4b35      	ldr	r3, [pc, #212]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002752:	2229      	movs	r2, #41	; 0x29
 8002754:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002756:	4b34      	ldr	r3, [pc, #208]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002768:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276a:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800278a:	4827      	ldr	r0, [pc, #156]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 800278c:	f002 fa36 	bl	8004bfc <HAL_DMA_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8002796:	f7ff fa4b 	bl	8001c30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 800279e:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a0:	4a21      	ldr	r2, [pc, #132]	; (8002828 <HAL_UART_MspInit+0x1c8>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027a6:	e033      	b.n	8002810 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a20      	ldr	r2, [pc, #128]	; (8002830 <HAL_UART_MspInit+0x1d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12e      	bne.n	8002810 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_UART_MspInit+0x1bc>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002800:	2307      	movs	r3, #7
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	480a      	ldr	r0, [pc, #40]	; (8002834 <HAL_UART_MspInit+0x1d4>)
 800280c:	f004 facc 	bl	8006da8 <HAL_GPIO_Init>
}
 8002810:	bf00      	nop
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40005000 	.word	0x40005000
 800281c:	58024400 	.word	0x58024400
 8002820:	58020400 	.word	0x58020400
 8002824:	40011000 	.word	0x40011000
 8002828:	200004e0 	.word	0x200004e0
 800282c:	40020010 	.word	0x40020010
 8002830:	40004800 	.word	0x40004800
 8002834:	58020c00 	.word	0x58020c00

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f000 f92e 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <DMA1_Stream0_IRQHandler+0x10>)
 8002892:	f002 ff77 	bl	8005784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200004e0 	.word	0x200004e0

080028a0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <ADC3_IRQHandler+0x10>)
 80028a6:	f000 fe17 	bl	80034d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000470 	.word	0x20000470

080028b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <SystemInit+0xd8>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	4a33      	ldr	r2, [pc, #204]	; (800298c <SystemInit+0xd8>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <SystemInit+0xdc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d807      	bhi.n	80028e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <SystemInit+0xdc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 030f 	bic.w	r3, r3, #15
 80028dc:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <SystemInit+0xdc>)
 80028de:	f043 0307 	orr.w	r3, r3, #7
 80028e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <SystemInit+0xe0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <SystemInit+0xe0>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <SystemInit+0xe0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028f6:	4b27      	ldr	r3, [pc, #156]	; (8002994 <SystemInit+0xe0>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4926      	ldr	r1, [pc, #152]	; (8002994 <SystemInit+0xe0>)
 80028fc:	4b26      	ldr	r3, [pc, #152]	; (8002998 <SystemInit+0xe4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <SystemInit+0xdc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <SystemInit+0xdc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 030f 	bic.w	r3, r3, #15
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <SystemInit+0xdc>)
 8002918:	f043 0307 	orr.w	r3, r3, #7
 800291c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <SystemInit+0xe0>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <SystemInit+0xe0>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <SystemInit+0xe0>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <SystemInit+0xe0>)
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <SystemInit+0xe8>)
 8002934:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <SystemInit+0xe0>)
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <SystemInit+0xec>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <SystemInit+0xe0>)
 800293e:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <SystemInit+0xf0>)
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <SystemInit+0xe0>)
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <SystemInit+0xe0>)
 800294a:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <SystemInit+0xf0>)
 800294c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <SystemInit+0xe0>)
 8002950:	2200      	movs	r2, #0
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <SystemInit+0xe0>)
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <SystemInit+0xf0>)
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <SystemInit+0xe0>)
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <SystemInit+0xe0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <SystemInit+0xe0>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <SystemInit+0xe0>)
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <SystemInit+0xf4>)
 8002974:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002978:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SystemInit+0xd8>)
 800297c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002980:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00
 8002990:	52002000 	.word	0x52002000
 8002994:	58024400 	.word	0x58024400
 8002998:	eaf6ed7f 	.word	0xeaf6ed7f
 800299c:	02020200 	.word	0x02020200
 80029a0:	01ff0000 	.word	0x01ff0000
 80029a4:	01010280 	.word	0x01010280
 80029a8:	52004000 	.word	0x52004000

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b0:	f7ff ff80 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029b6:	490d      	ldr	r1, [pc, #52]	; (80029ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029da:	f00b fe11 	bl	800e600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7fd fe9f 	bl	8000720 <main>
  bx  lr
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029f0:	0800e6c0 	.word	0x0800e6c0
  ldr r2, =_sbss
 80029f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80029f8:	200008a8 	.word	0x200008a8

080029fc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC_IRQHandler>
	...

08002a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a06:	2003      	movs	r0, #3
 8002a08:	f001 ffce 	bl	80049a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a0c:	f005 fa52 	bl	8007eb4 <HAL_RCC_GetSysClockFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_Init+0x68>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	4913      	ldr	r1, [pc, #76]	; (8002a6c <HAL_Init+0x6c>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_Init+0x68>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <HAL_Init+0x6c>)
 8002a34:	5cd3      	ldrb	r3, [r2, r3]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_Init+0x70>)
 8002a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a44:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_Init+0x74>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 f814 	bl	8002a78 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e002      	b.n	8002a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5a:	f7ff f8ef 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	0800e670 	.word	0x0800e670
 8002a70:	20000004 	.word	0x20000004
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_InitTick+0x60>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e021      	b.n	8002ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_InitTick+0x64>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_InitTick+0x60>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 ffb3 	bl	8004a0e <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f001 ff7d 	bl	80049be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x68>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000008 	.word	0x20000008

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	200008a4 	.word	0x200008a4

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200008a4 	.word	0x200008a4

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3360      	adds	r3, #96	; 0x60
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <LL_ADC_SetOffset+0x60>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10b      	bne.n	8002c10 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c0e:	e00b      	b.n	8002c28 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	58026000 	.word	0x58026000

08002c38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	461a      	mov	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	611a      	str	r2, [r3, #16]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3360      	adds	r3, #96	; 0x60
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	58026000 	.word	0x58026000

08002cdc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <LL_ADC_SetOffsetSaturation+0x40>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10e      	bne.n	8002d0e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	58026000 	.word	0x58026000

08002d20 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <LL_ADC_SetOffsetSign+0x40>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10e      	bne.n	8002d52 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3360      	adds	r3, #96	; 0x60
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	58026000 	.word	0x58026000

08002d64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3360      	adds	r3, #96	; 0x60
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <LL_ADC_SetOffsetState+0x50>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d96:	e007      	b.n	8002da8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	58026000 	.word	0x58026000

08002db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3330      	adds	r3, #48	; 0x30
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	4413      	add	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	211f      	movs	r1, #31
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	401a      	ands	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	f003 011f 	and.w	r1, r3, #31
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0d1b      	lsrs	r3, r3, #20
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2107      	movs	r1, #7
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	401a      	ands	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0d1b      	lsrs	r3, r3, #20
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d115      	bne.n	8002ef4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0318 	and.w	r3, r3, #24
 8002ede:	4914      	ldr	r1, [pc, #80]	; (8002f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ee0:	40d9      	lsrs	r1, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002ef2:	e014      	b.n	8002f1e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0318 	and.w	r3, r3, #24
 8002f0a:	4909      	ldr	r1, [pc, #36]	; (8002f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f0c:	40d9      	lsrs	r1, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	400b      	ands	r3, r1
 8002f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	58026000 	.word	0x58026000
 8002f30:	000fffff 	.word	0x000fffff

08002f34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 031f 	and.w	r3, r3, #31
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	5fffffc0 	.word	0x5fffffc0

08002f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	6fffffc0 	.word	0x6fffffc0

08002fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <LL_ADC_Disable+0x24>)
 8003016:	4013      	ands	r3, r2
 8003018:	f043 0202 	orr.w	r2, r3, #2
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	7fffffc0 	.word	0x7fffffc0

08003030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d101      	bne.n	800306e <LL_ADC_IsDisableOngoing+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_IsDisableOngoing+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d101      	bne.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d101      	bne.n	80030ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1ee      	b.n	80034c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fe fdbd 	bl	8001c70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff41 	bl	8002f90 <LL_ADC_IsDeepPowerDownEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff27 	bl	8002f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff5c 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff40 	bl	8002fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003138:	4b8e      	ldr	r3, [pc, #568]	; (8003374 <HAL_ADC_Init+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	4a8e      	ldr	r2, [pc, #568]	; (8003378 <HAL_ADC_Init+0x2b0>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800314a:	e002      	b.n	8003152 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3b01      	subs	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff3f 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff77 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 800318e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8188 	bne.w	80034ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8184 	bne.w	80034ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff38 	bl	8003030 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d136      	bne.n	8003234 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_ADC_Init+0x2b4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADC_Init+0x112>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	; (8003380 <HAL_ADC_Init+0x2b8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10e      	bne.n	80031f8 <HAL_ADC_Init+0x130>
 80031da:	4868      	ldr	r0, [pc, #416]	; (800337c <HAL_ADC_Init+0x2b4>)
 80031dc:	f7ff ff28 	bl	8003030 <LL_ADC_IsEnabled>
 80031e0:	4604      	mov	r4, r0
 80031e2:	4867      	ldr	r0, [pc, #412]	; (8003380 <HAL_ADC_Init+0x2b8>)
 80031e4:	f7ff ff24 	bl	8003030 <LL_ADC_IsEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4323      	orrs	r3, r4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e008      	b.n	800320a <HAL_ADC_Init+0x142>
 80031f8:	4862      	ldr	r0, [pc, #392]	; (8003384 <HAL_ADC_Init+0x2bc>)
 80031fa:	f7ff ff19 	bl	8003030 <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5a      	ldr	r2, [pc, #360]	; (800337c <HAL_ADC_Init+0x2b4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_ADC_Init+0x15a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_ADC_Init+0x2b8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Init+0x15e>
 8003222:	4a59      	ldr	r2, [pc, #356]	; (8003388 <HAL_ADC_Init+0x2c0>)
 8003224:	e000      	b.n	8003228 <HAL_ADC_Init+0x160>
 8003226:	4a59      	ldr	r2, [pc, #356]	; (800338c <HAL_ADC_Init+0x2c4>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7ff fc9c 	bl	8002b6c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_ADC_Init+0x2bc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d129      	bne.n	8003292 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e5b      	ldrb	r3, [r3, #25]
 8003242:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003248:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800324e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d013      	beq.n	8003280 <HAL_ADC_Init+0x1b8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d00d      	beq.n	800327c <HAL_ADC_Init+0x1b4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	d007      	beq.n	8003278 <HAL_ADC_Init+0x1b0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b18      	cmp	r3, #24
 800326e:	d101      	bne.n	8003274 <HAL_ADC_Init+0x1ac>
 8003270:	2318      	movs	r3, #24
 8003272:	e006      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003274:	2300      	movs	r3, #0
 8003276:	e004      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003278:	2310      	movs	r3, #16
 800327a:	e002      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 800327c:	2308      	movs	r3, #8
 800327e:	e000      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003280:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003282:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e00e      	b.n	80032b0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7e5b      	ldrb	r3, [r3, #25]
 8003296:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800329c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	045b      	lsls	r3, r3, #17
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_ADC_Init+0x2bc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d115      	bne.n	800331a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_ADC_Init+0x2c8>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	430b      	orrs	r3, r1
 8003300:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	611a      	str	r2, [r3, #16]
 8003318:	e009      	b.n	800332e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_ADC_Init+0x2cc>)
 8003322:	4013      	ands	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fea2 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003338:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff feaf 	bl	80030a2 <LL_ADC_INJ_IsConversionOngoing>
 8003344:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 808e 	bne.w	800346a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 808a 	bne.w	800346a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_ADC_Init+0x2bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11b      	bne.n	8003398 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e1b      	ldrb	r3, [r3, #24]
 8003364:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800336c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e018      	b.n	80033a6 <HAL_ADC_Init+0x2de>
 8003374:	20000000 	.word	0x20000000
 8003378:	053e2d63 	.word	0x053e2d63
 800337c:	40022000 	.word	0x40022000
 8003380:	40022100 	.word	0x40022100
 8003384:	58026000 	.word	0x58026000
 8003388:	40022300 	.word	0x40022300
 800338c:	58026300 	.word	0x58026300
 8003390:	fff04007 	.word	0xfff04007
 8003394:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
 800339c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_ADC_Init+0x400>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d137      	bne.n	8003434 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_ADC_Init+0x404>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d116      	bne.n	8003402 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_ADC_Init+0x408>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	e020      	b.n	8003444 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_ADC_Init+0x40c>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003410:	3a01      	subs	r2, #1
 8003412:	0411      	lsls	r1, r2, #16
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003424:	430a      	orrs	r2, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e007      	b.n	8003444 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_ADC_Init+0x404>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d002      	beq.n	800346a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f001 f81b 	bl	80044a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10c      	bne.n	800348c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f023 010f 	bic.w	r1, r3, #15
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
 800348a:	e007      	b.n	800349c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 020f 	bic.w	r2, r2, #15
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	f023 0303 	bic.w	r3, r3, #3
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60
 80034ac:	e007      	b.n	80034be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3724      	adds	r7, #36	; 0x24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}
 80034c8:	ffffbffc 	.word	0xffffbffc
 80034cc:	58026000 	.word	0x58026000
 80034d0:	fc00f81f 	.word	0xfc00f81f
 80034d4:	fc00f81e 	.word	0xfc00f81e

080034d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a87      	ldr	r2, [pc, #540]	; (8003718 <HAL_ADC_IRQHandler+0x240>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_ADC_IRQHandler+0x30>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a86      	ldr	r2, [pc, #536]	; (800371c <HAL_ADC_IRQHandler+0x244>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_ADC_IRQHandler+0x34>
 8003508:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_ADC_IRQHandler+0x248>)
 800350a:	e000      	b.n	800350e <HAL_ADC_IRQHandler+0x36>
 800350c:	4b85      	ldr	r3, [pc, #532]	; (8003724 <HAL_ADC_IRQHandler+0x24c>)
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fd10 	bl	8002f34 <LL_ADC_GetMultimode>
 8003514:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d017      	beq.n	8003550 <HAL_ADC_IRQHandler+0x78>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 f956 	bl	80047f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2202      	movs	r2, #2
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_ADC_IRQHandler+0x8c>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8083 	beq.w	8003676 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07d      	beq.n	8003676 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fc0e 	bl	8002db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d062      	beq.n	8003668 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5d      	ldr	r2, [pc, #372]	; (800371c <HAL_ADC_IRQHandler+0x244>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d002      	beq.n	80035b2 <HAL_ADC_IRQHandler+0xda>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <HAL_ADC_IRQHandler+0xdc>
 80035b2:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_ADC_IRQHandler+0x240>)
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d008      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d002      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d104      	bne.n	80035d8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	e00c      	b.n	80035f2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_ADC_IRQHandler+0x244>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d002      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x110>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e000      	b.n	80035ea <HAL_ADC_IRQHandler+0x112>
 80035e8:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_ADC_IRQHandler+0x240>)
 80035ea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d135      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d12e      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd34 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11a      	bne.n	8003650 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 020c 	bic.w	r2, r2, #12
 8003628:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d112      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
 800364e:	e00b      	b.n	8003668 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	f043 0210 	orr.w	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f96f 	bl	800394c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_ADC_IRQHandler+0x1b2>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a0 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 809a 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fbb9 	bl	8002e36 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fb74 	bl	8002db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a11      	ldr	r2, [pc, #68]	; (800371c <HAL_ADC_IRQHandler+0x244>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d002      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x20a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_IRQHandler+0x20c>
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_ADC_IRQHandler+0x240>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d008      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d002      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d104      	bne.n	8003708 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	e014      	b.n	8003732 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a03      	ldr	r2, [pc, #12]	; (800371c <HAL_ADC_IRQHandler+0x244>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00a      	beq.n	8003728 <HAL_ADC_IRQHandler+0x250>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e008      	b.n	800372a <HAL_ADC_IRQHandler+0x252>
 8003718:	40022000 	.word	0x40022000
 800371c:	40022100 	.word	0x40022100
 8003720:	40022300 	.word	0x40022300
 8003724:	58026300 	.word	0x58026300
 8003728:	4b84      	ldr	r3, [pc, #528]	; (800393c <HAL_ADC_IRQHandler+0x464>)
 800372a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d047      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_ADC_IRQHandler+0x27a>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03f      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13a      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d133      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12e      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fc97 	bl	80030a2 <LL_ADC_INJ_IsConversionOngoing>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11a      	bne.n	80037b0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003788:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
 80037ae:	e00b      	b.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 ffeb 	bl	80047a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2260      	movs	r2, #96	; 0x60
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_ADC_IRQHandler+0x32c>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8b2 	bl	8003960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x35c>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 ffd1 	bl	80047cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <HAL_ADC_IRQHandler+0x38c>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 ffc3 	bl	80047e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d043      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x41e>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03e      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	e021      	b.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_ADC_IRQHandler+0x464>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x3c8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <HAL_ADC_IRQHandler+0x468>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x3cc>
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_ADC_IRQHandler+0x46c>)
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_IRQHandler+0x3ce>
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_ADC_IRQHandler+0x470>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fb52 	bl	8002f50 <LL_ADC_GetMultiDMATransfer>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e008      	b.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10e      	bne.n	80038ee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f843 	bl	8003974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2210      	movs	r2, #16
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_ADC_IRQHandler+0x45a>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 ff43 	bl	80047b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	; 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000
 8003940:	40022100 	.word	0x40022100
 8003944:	40022300 	.word	0x40022300
 8003948:	58026300 	.word	0x58026300

0800394c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b0b9      	sub	sp, #228	; 0xe4
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4ab3      	ldr	r2, [pc, #716]	; (8003c78 <HAL_ADC_ConfigChannel+0x2f0>)
 80039aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x34>
 80039b6:	2302      	movs	r3, #2
 80039b8:	f000 bcfa 	b.w	80043b0 <HAL_ADC_ConfigChannel+0xa28>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fb57 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 84de 	bne.w	8004392 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4aa8      	ldr	r2, [pc, #672]	; (8003c7c <HAL_ADC_ConfigChannel+0x2f4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d033      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x76>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2201      	movs	r2, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	e01d      	b.n	8003a3a <HAL_ADC_ConfigChannel+0xb2>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2201      	movs	r2, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	69d1      	ldr	r1, [r2, #28]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	f7ff f9c2 	bl	8002dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fb0c 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003a64:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb18 	bl	80030a2 <LL_ADC_INJ_IsConversionOngoing>
 8003a72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8270 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f040 826b 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7ff f9e0 	bl	8002e5c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a76      	ldr	r2, [pc, #472]	; (8003c7c <HAL_ADC_ConfigChannel+0x2f4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ac0:	e032      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ac2:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_ADC_ConfigChannel+0x2f8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x160>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	e01d      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x19c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x186>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	e00a      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x19c>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d048      	beq.n	8003bc2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6919      	ldr	r1, [r3, #16]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b40:	f7ff f848 	bl	8002bd4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <HAL_ADC_ConfigChannel+0x2f4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d119      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6919      	ldr	r1, [r3, #16]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7ff f8e0 	bl	8002d20 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6919      	ldr	r1, [r3, #16]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1f0>
 8003b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b76:	e000      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x1f2>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f7ff f8ae 	bl	8002cdc <LL_ADC_SetOffsetSaturation>
 8003b80:	e1ee      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6919      	ldr	r1, [r3, #16]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x212>
 8003b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b98:	e000      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x214>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f7ff f87b 	bl	8002c98 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6919      	ldr	r1, [r3, #16]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	7e1b      	ldrb	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x230>
 8003bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bb6:	e000      	b.n	8003bba <HAL_ADC_ConfigChannel+0x232>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7ff f852 	bl	8002c64 <LL_ADC_SetDataRightShift>
 8003bc0:	e1ce      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <HAL_ADC_ConfigChannel+0x2f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	f040 8181 	bne.w	8003ed0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff f82f 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x272>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f824 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	0e9b      	lsrs	r3, r3, #26
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	e01e      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x2b0>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff f819 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003c18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e004      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x2c8>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	e01e      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x306>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d107      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003c74:	2320      	movs	r3, #32
 8003c76:	e00a      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x306>
 8003c78:	47ff0000 	.word	0x47ff0000
 8003c7c:	58026000 	.word	0x58026000
 8003c80:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d106      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f862 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe ffc6 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x344>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe ffbb 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	f003 021f 	and.w	r2, r3, #31
 8003cca:	e01e      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x382>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe ffb0 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e004      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x39a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	e018      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x3cc>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003d46:	2320      	movs	r3, #32
 8003d48:	e004      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d106      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ffff 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe ff63 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x40a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff58 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	f003 021f 	and.w	r2, r3, #31
 8003d90:	e01e      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x448>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe ff4d 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da8:	fa93 f3a3 	rbit	r3, r3
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	e004      	b.n	8003dce <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x460>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	e014      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x48a>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003df0:	fa93 f3a3 	rbit	r3, r3
 8003df4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003e04:	2320      	movs	r3, #32
 8003e06:	e004      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e0c:	fab3 f383 	clz	r3, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d106      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe ffa0 	bl	8002d64 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2103      	movs	r1, #3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ff04 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x4c8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2103      	movs	r1, #3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fef9 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	f003 021f 	and.w	r2, r3, #31
 8003e4e:	e017      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x4f8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2103      	movs	r1, #3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe feee 	bl	8002c38 <LL_ADC_GetOffsetChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003e72:	2320      	movs	r3, #32
 8003e74:	e003      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x510>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0e9b      	lsrs	r3, r3, #26
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	e011      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x534>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	e003      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d14f      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2103      	movs	r1, #3
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe ff4b 	bl	8002d64 <LL_ADC_SetOffsetState>
 8003ece:	e047      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	069b      	lsls	r3, r3, #26
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d107      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d107      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f16:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	069b      	lsls	r3, r3, #26
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d107      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f3a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	069b      	lsls	r3, r3, #26
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff f863 	bl	8003030 <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 8219 	bne.w	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f7fe ff98 	bl	8002eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4aa1      	ldr	r2, [pc, #644]	; (8004210 <HAL_ADC_ConfigChannel+0x888>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f040 812e 	bne.w	80041ec <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x630>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	0e9b      	lsrs	r3, r3, #26
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	bf94      	ite	ls
 8003fb0:	2301      	movls	r3, #1
 8003fb2:	2300      	movhi	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e019      	b.n	8003fec <HAL_ADC_ConfigChannel+0x664>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2b09      	cmp	r3, #9
 8003fe4:	bf94      	ite	ls
 8003fe6:	2301      	movls	r3, #1
 8003fe8:	2300      	movhi	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d079      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_ADC_ConfigChannel+0x684>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	069b      	lsls	r3, r3, #26
 8004006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400a:	e015      	b.n	8004038 <HAL_ADC_ConfigChannel+0x6b0>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e003      	b.n	8004030 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	3301      	adds	r3, #1
 8004032:	069b      	lsls	r3, r3, #26
 8004034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x6d0>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	3301      	adds	r3, #1
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	e017      	b.n	8004088 <HAL_ADC_ConfigChannel+0x700>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	ea42 0103 	orr.w	r1, r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x726>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	0e9b      	lsrs	r3, r3, #26
 800409e:	3301      	adds	r3, #1
 80040a0:	f003 021f 	and.w	r2, r3, #31
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	e018      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x758>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040e0:	430b      	orrs	r3, r1
 80040e2:	e07e      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x778>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	069b      	lsls	r3, r3, #26
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fe:	e015      	b.n	800412c <HAL_ADC_ConfigChannel+0x7a4>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	3301      	adds	r3, #1
 8004126:	069b      	lsls	r3, r3, #26
 8004128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_ADC_ConfigChannel+0x7c4>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	3301      	adds	r3, #1
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	e017      	b.n	800417c <HAL_ADC_ConfigChannel+0x7f4>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	61bb      	str	r3, [r7, #24]
  return result;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004164:	2320      	movs	r3, #32
 8004166:	e003      	b.n	8004170 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2101      	movs	r1, #1
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	ea42 0103 	orr.w	r1, r2, r3
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x820>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	3301      	adds	r3, #1
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	3b1e      	subs	r3, #30
 80041a0:	051b      	lsls	r3, r3, #20
 80041a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041a6:	e01b      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x858>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	60fb      	str	r3, [r7, #12]
  return result;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e003      	b.n	80041cc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f003 021f 	and.w	r2, r3, #31
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	3b1e      	subs	r3, #30
 80041da:	051b      	lsls	r3, r3, #20
 80041dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	430b      	orrs	r3, r1
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7fe fe38 	bl	8002e5c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f280 80d7 	bge.w	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a06      	ldr	r2, [pc, #24]	; (8004214 <HAL_ADC_ConfigChannel+0x88c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_ADC_ConfigChannel+0x882>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_ADC_ConfigChannel+0x890>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10a      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x898>
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_ADC_ConfigChannel+0x894>)
 800420c:	e009      	b.n	8004222 <HAL_ADC_ConfigChannel+0x89a>
 800420e:	bf00      	nop
 8004210:	47ff0000 	.word	0x47ff0000
 8004214:	40022000 	.word	0x40022000
 8004218:	40022100 	.word	0x40022100
 800421c:	40022300 	.word	0x40022300
 8004220:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <HAL_ADC_ConfigChannel+0xa30>)
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fcc8 	bl	8002bb8 <LL_ADC_GetCommonPathInternalCh>
 8004228:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a62      	ldr	r2, [pc, #392]	; (80043bc <HAL_ADC_ConfigChannel+0xa34>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_ADC_ConfigChannel+0x8b8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a61      	ldr	r2, [pc, #388]	; (80043c0 <HAL_ADC_ConfigChannel+0xa38>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10e      	bne.n	800425e <HAL_ADC_ConfigChannel+0x8d6>
 8004240:	485e      	ldr	r0, [pc, #376]	; (80043bc <HAL_ADC_ConfigChannel+0xa34>)
 8004242:	f7fe fef5 	bl	8003030 <LL_ADC_IsEnabled>
 8004246:	4604      	mov	r4, r0
 8004248:	485d      	ldr	r0, [pc, #372]	; (80043c0 <HAL_ADC_ConfigChannel+0xa38>)
 800424a:	f7fe fef1 	bl	8003030 <LL_ADC_IsEnabled>
 800424e:	4603      	mov	r3, r0
 8004250:	4323      	orrs	r3, r4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	e008      	b.n	8004270 <HAL_ADC_ConfigChannel+0x8e8>
 800425e:	4859      	ldr	r0, [pc, #356]	; (80043c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004260:	f7fe fee6 	bl	8003030 <LL_ADC_IsEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8084 	beq.w	800437e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a53      	ldr	r2, [pc, #332]	; (80043c8 <HAL_ADC_ConfigChannel+0xa40>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d132      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x95e>
 8004280:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d12c      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	f040 8086 	bne.w	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a47      	ldr	r2, [pc, #284]	; (80043bc <HAL_ADC_ConfigChannel+0xa34>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_ADC_ConfigChannel+0x924>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <HAL_ADC_ConfigChannel+0xa38>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x928>
 80042ac:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_ADC_ConfigChannel+0xa44>)
 80042ae:	e000      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x92a>
 80042b0:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <HAL_ADC_ConfigChannel+0xa30>)
 80042b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7fe fc68 	bl	8002b92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c2:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_ADC_ConfigChannel+0xa48>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	4a42      	ldr	r2, [pc, #264]	; (80043d4 <HAL_ADC_ConfigChannel+0xa4c>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	3301      	adds	r3, #1
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042d6:	e002      	b.n	80042de <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	3b01      	subs	r3, #1
 80042dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f9      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e4:	e05e      	b.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3b      	ldr	r2, [pc, #236]	; (80043d8 <HAL_ADC_ConfigChannel+0xa50>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d120      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x9aa>
 80042f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11a      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d14e      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <HAL_ADC_ConfigChannel+0xa34>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_ADC_ConfigChannel+0x992>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_ADC_ConfigChannel+0xa38>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x996>
 800431a:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <HAL_ADC_ConfigChannel+0xa44>)
 800431c:	e000      	b.n	8004320 <HAL_ADC_ConfigChannel+0x998>
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_ADC_ConfigChannel+0xa30>)
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fe fc31 	bl	8002b92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004330:	e038      	b.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <HAL_ADC_ConfigChannel+0xa54>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d133      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
 800433c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d12d      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_ADC_ConfigChannel+0xa3c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d128      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a19      	ldr	r2, [pc, #100]	; (80043bc <HAL_ADC_ConfigChannel+0xa34>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_ADC_ConfigChannel+0x9de>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_ADC_ConfigChannel+0xa38>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x9e2>
 8004366:	4a19      	ldr	r2, [pc, #100]	; (80043cc <HAL_ADC_ConfigChannel+0xa44>)
 8004368:	e000      	b.n	800436c <HAL_ADC_ConfigChannel+0x9e4>
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_ADC_ConfigChannel+0xa30>)
 800436c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fc0b 	bl	8002b92 <LL_ADC_SetCommonPathInternalCh>
 800437c:	e012      	b.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004390:	e008      	b.n	80043a4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	37e4      	adds	r7, #228	; 0xe4
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd90      	pop	{r4, r7, pc}
 80043b8:	58026300 	.word	0x58026300
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40022100 	.word	0x40022100
 80043c4:	58026000 	.word	0x58026000
 80043c8:	c7520000 	.word	0xc7520000
 80043cc:	40022300 	.word	0x40022300
 80043d0:	20000000 	.word	0x20000000
 80043d4:	053e2d63 	.word	0x053e2d63
 80043d8:	c3210000 	.word	0xc3210000
 80043dc:	cb840000 	.word	0xcb840000

080043e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fe32 	bl	8003056 <LL_ADC_IsDisableOngoing>
 80043f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fe19 	bl	8003030 <LL_ADC_IsEnabled>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d047      	beq.n	8004494 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d144      	bne.n	8004494 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030d 	and.w	r3, r3, #13
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fdf3 	bl	8003008 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2203      	movs	r2, #3
 8004428:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800442a:	f7fe fb6f 	bl	8002b0c <HAL_GetTick>
 800442e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004430:	e029      	b.n	8004486 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004436:	f043 0210 	orr.w	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004442:	f043 0201 	orr.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e023      	b.n	8004496 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800444e:	f7fe fb5d 	bl	8002b0c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d914      	bls.n	8004486 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446e:	f043 0210 	orr.w	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e007      	b.n	8004496 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1dc      	bne.n	800444e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a6b      	ldr	r2, [pc, #428]	; (800465c <ADC_ConfigureBoostMode+0x1bc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <ADC_ConfigureBoostMode+0x1c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6a      	ldr	r2, [pc, #424]	; (8004660 <ADC_ConfigureBoostMode+0x1c0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d109      	bne.n	80044d0 <ADC_ConfigureBoostMode+0x30>
 80044bc:	4b69      	ldr	r3, [pc, #420]	; (8004664 <ADC_ConfigureBoostMode+0x1c4>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e008      	b.n	80044e2 <ADC_ConfigureBoostMode+0x42>
 80044d0:	4b65      	ldr	r3, [pc, #404]	; (8004668 <ADC_ConfigureBoostMode+0x1c8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01c      	beq.n	8004520 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80044e6:	f003 fe5f 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80044ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044f4:	d010      	beq.n	8004518 <ADC_ConfigureBoostMode+0x78>
 80044f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044fa:	d871      	bhi.n	80045e0 <ADC_ConfigureBoostMode+0x140>
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004500:	d002      	beq.n	8004508 <ADC_ConfigureBoostMode+0x68>
 8004502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004506:	d16b      	bne.n	80045e0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	60fb      	str	r3, [r7, #12]
        break;
 8004516:	e066      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	60fb      	str	r3, [r7, #12]
        break;
 800451e:	e062      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004520:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004524:	f004 fd96 	bl	8009054 <HAL_RCCEx_GetPeriphCLKFreq>
 8004528:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004532:	d051      	beq.n	80045d8 <ADC_ConfigureBoostMode+0x138>
 8004534:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004538:	d854      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 800453a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800453e:	d047      	beq.n	80045d0 <ADC_ConfigureBoostMode+0x130>
 8004540:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004544:	d84e      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 8004546:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800454a:	d03d      	beq.n	80045c8 <ADC_ConfigureBoostMode+0x128>
 800454c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004550:	d848      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 8004552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004556:	d033      	beq.n	80045c0 <ADC_ConfigureBoostMode+0x120>
 8004558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455c:	d842      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 800455e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004562:	d029      	beq.n	80045b8 <ADC_ConfigureBoostMode+0x118>
 8004564:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004568:	d83c      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 800456a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800456e:	d01a      	beq.n	80045a6 <ADC_ConfigureBoostMode+0x106>
 8004570:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004574:	d836      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 8004576:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800457a:	d014      	beq.n	80045a6 <ADC_ConfigureBoostMode+0x106>
 800457c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004580:	d830      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 8004582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004586:	d00e      	beq.n	80045a6 <ADC_ConfigureBoostMode+0x106>
 8004588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458c:	d82a      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 800458e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004592:	d008      	beq.n	80045a6 <ADC_ConfigureBoostMode+0x106>
 8004594:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004598:	d824      	bhi.n	80045e4 <ADC_ConfigureBoostMode+0x144>
 800459a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800459e:	d002      	beq.n	80045a6 <ADC_ConfigureBoostMode+0x106>
 80045a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045a4:	d11e      	bne.n	80045e4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0c9b      	lsrs	r3, r3, #18
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	60fb      	str	r3, [r7, #12]
        break;
 80045b6:	e016      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]
        break;
 80045be:	e012      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	60fb      	str	r3, [r7, #12]
        break;
 80045c6:	e00e      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	60fb      	str	r3, [r7, #12]
        break;
 80045ce:	e00a      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	09db      	lsrs	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
        break;
 80045d6:	e006      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	60fb      	str	r3, [r7, #12]
        break;
 80045de:	e002      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
        break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80045e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a1f      	ldr	r2, [pc, #124]	; (800466c <ADC_ConfigureBoostMode+0x1cc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d808      	bhi.n	8004606 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004602:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004604:	e025      	b.n	8004652 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <ADC_ConfigureBoostMode+0x1d0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d80a      	bhi.n	8004624 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004620:	609a      	str	r2, [r3, #8]
}
 8004622:	e016      	b.n	8004652 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <ADC_ConfigureBoostMode+0x1d4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d80a      	bhi.n	8004642 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	e007      	b.n	8004652 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40022000 	.word	0x40022000
 8004660:	40022100 	.word	0x40022100
 8004664:	40022300 	.word	0x40022300
 8004668:	58026300 	.word	0x58026300
 800466c:	005f5e10 	.word	0x005f5e10
 8004670:	00bebc20 	.word	0x00bebc20
 8004674:	017d7840 	.word	0x017d7840

08004678 <LL_ADC_StartCalibration>:
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <LL_ADC_StartCalibration+0x38>)
 800468a:	4013      	ands	r3, r2
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004698:	430a      	orrs	r2, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	3ffeffc0 	.word	0x3ffeffc0

080046b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c8:	d101      	bne.n	80046ce <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_ADCEx_Calibration_Start+0x1e>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e04c      	b.n	8004794 <HAL_ADCEx_Calibration_Start+0xb8>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fe6c 	bl	80043e0 <ADC_Disable>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d135      	bne.n	800477e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004718:	4013      	ands	r3, r2
 800471a:	f043 0202 	orr.w	r2, r3, #2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ffa4 	bl	8004678 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004730:	e014      	b.n	800475c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3301      	adds	r3, #1
 8004736:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d30d      	bcc.n	800475c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	f023 0312 	bic.w	r3, r3, #18
 8004748:	f043 0210 	orr.w	r2, r3, #16
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e01b      	b.n	8004794 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ffa7 	bl	80046b4 <LL_ADC_IsCalibrationOnGoing>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e2      	bne.n	8004732 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	661a      	str	r2, [r3, #96]	; 0x60
 800477c:	e005      	b.n	800478a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	f043 0210 	orr.w	r2, r3, #16
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffffeefd 	.word	0xffffeefd
 80047a0:	25c3f800 	.word	0x25c3f800

080047a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	4313      	orrs	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	60d3      	str	r3, [r2, #12]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	05fa0000 	.word	0x05fa0000

08004850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0b      	blt.n	8004896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <__NVIC_EnableIRQ+0x38>)
 8004886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000e100 	.word	0xe000e100

080048a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	db0a      	blt.n	80048d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	490c      	ldr	r1, [pc, #48]	; (80048f4 <__NVIC_SetPriority+0x4c>)
 80048c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	440b      	add	r3, r1
 80048cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d0:	e00a      	b.n	80048e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4908      	ldr	r1, [pc, #32]	; (80048f8 <__NVIC_SetPriority+0x50>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3b04      	subs	r3, #4
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	440b      	add	r3, r1
 80048e6:	761a      	strb	r2, [r3, #24]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000e100 	.word	0xe000e100
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f1c3 0307 	rsb	r3, r3, #7
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf28      	it	cs
 800491a:	2304      	movcs	r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3304      	adds	r3, #4
 8004922:	2b06      	cmp	r3, #6
 8004924:	d902      	bls.n	800492c <NVIC_EncodePriority+0x30>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3b03      	subs	r3, #3
 800492a:	e000      	b.n	800492e <NVIC_EncodePriority+0x32>
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	401a      	ands	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004944:	f04f 31ff 	mov.w	r1, #4294967295
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	43d9      	mvns	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	4313      	orrs	r3, r2
         );
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004974:	d301      	bcc.n	800497a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004976:	2301      	movs	r3, #1
 8004978:	e00f      	b.n	800499a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <SysTick_Config+0x40>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3b01      	subs	r3, #1
 8004980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004982:	210f      	movs	r1, #15
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	f7ff ff8e 	bl	80048a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <SysTick_Config+0x40>)
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <SysTick_Config+0x40>)
 8004994:	2207      	movs	r2, #7
 8004996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	e000e010 	.word	0xe000e010

080049a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff29 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049cc:	f7ff ff40 	bl	8004850 <__NVIC_GetPriorityGrouping>
 80049d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	6978      	ldr	r0, [r7, #20]
 80049d8:	f7ff ff90 	bl	80048fc <NVIC_EncodePriority>
 80049dc:	4602      	mov	r2, r0
 80049de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff5f 	bl	80048a8 <__NVIC_SetPriority>
}
 80049ea:	bf00      	nop
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff ff33 	bl	800486c <__NVIC_EnableIRQ>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ffa4 	bl	8004964 <SysTick_Config>
 8004a1c:	4603      	mov	r3, r0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e054      	b.n	8004ae4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7f5b      	ldrb	r3, [r3, #29]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd f938 	bl	8001cc0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_CRC_Init+0xc4>)
 8004a64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0218 	bic.w	r2, r2, #24
 8004a74:	609a      	str	r2, [r3, #8]
 8004a76:	e00c      	b.n	8004a92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6899      	ldr	r1, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f834 	bl	8004af0 <HAL_CRCEx_Polynomial_Set>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e028      	b.n	8004ae4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	795b      	ldrb	r3, [r3, #5]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa2:	611a      	str	r2, [r3, #16]
 8004aa4:	e004      	b.n	8004ab0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6912      	ldr	r2, [r2, #16]
 8004aae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	04c11db7 	.word	0x04c11db7

08004af0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004b00:	231f      	movs	r3, #31
 8004b02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004b04:	bf00      	nop
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	613a      	str	r2, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_CRCEx_Polynomial_Set+0x34>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_CRCEx_Polynomial_Set+0x16>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b18      	cmp	r3, #24
 8004b28:	d846      	bhi.n	8004bb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004bbf 	.word	0x08004bbf
 8004b34:	08004bb9 	.word	0x08004bb9
 8004b38:	08004bb9 	.word	0x08004bb9
 8004b3c:	08004bb9 	.word	0x08004bb9
 8004b40:	08004bb9 	.word	0x08004bb9
 8004b44:	08004bb9 	.word	0x08004bb9
 8004b48:	08004bb9 	.word	0x08004bb9
 8004b4c:	08004bb9 	.word	0x08004bb9
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004bb9 	.word	0x08004bb9
 8004b58:	08004bb9 	.word	0x08004bb9
 8004b5c:	08004bb9 	.word	0x08004bb9
 8004b60:	08004bb9 	.word	0x08004bb9
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004bb9 	.word	0x08004bb9
 8004b6c:	08004bb9 	.word	0x08004bb9
 8004b70:	08004ba1 	.word	0x08004ba1
 8004b74:	08004bb9 	.word	0x08004bb9
 8004b78:	08004bb9 	.word	0x08004bb9
 8004b7c:	08004bb9 	.word	0x08004bb9
 8004b80:	08004bb9 	.word	0x08004bb9
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bb9 	.word	0x08004bb9
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004b95 	.word	0x08004b95
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b06      	cmp	r3, #6
 8004b98:	d913      	bls.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004b9e:	e010      	b.n	8004bc2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b07      	cmp	r3, #7
 8004ba4:	d90f      	bls.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004baa:	e00c      	b.n	8004bc6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d90b      	bls.n	8004bca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004bb6:	e008      	b.n	8004bca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
      break;
 8004bbc:	e006      	b.n	8004bcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e004      	b.n	8004bcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004bca:	bf00      	nop
  }
  if (status == HAL_OK)
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 0118 	bic.w	r1, r3, #24
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c04:	f7fd ff82 	bl	8002b0c <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e314      	b.n	800523e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a66      	ldr	r2, [pc, #408]	; (8004db4 <HAL_DMA_Init+0x1b8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d04a      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a65      	ldr	r2, [pc, #404]	; (8004db8 <HAL_DMA_Init+0x1bc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d045      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a63      	ldr	r2, [pc, #396]	; (8004dbc <HAL_DMA_Init+0x1c0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d040      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a62      	ldr	r2, [pc, #392]	; (8004dc0 <HAL_DMA_Init+0x1c4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d03b      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a60      	ldr	r2, [pc, #384]	; (8004dc4 <HAL_DMA_Init+0x1c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d036      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5f      	ldr	r2, [pc, #380]	; (8004dc8 <HAL_DMA_Init+0x1cc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d031      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a5d      	ldr	r2, [pc, #372]	; (8004dcc <HAL_DMA_Init+0x1d0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02c      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a5c      	ldr	r2, [pc, #368]	; (8004dd0 <HAL_DMA_Init+0x1d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d027      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5a      	ldr	r2, [pc, #360]	; (8004dd4 <HAL_DMA_Init+0x1d8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a59      	ldr	r2, [pc, #356]	; (8004dd8 <HAL_DMA_Init+0x1dc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a57      	ldr	r2, [pc, #348]	; (8004ddc <HAL_DMA_Init+0x1e0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a56      	ldr	r2, [pc, #344]	; (8004de0 <HAL_DMA_Init+0x1e4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <HAL_DMA_Init+0x1e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a53      	ldr	r2, [pc, #332]	; (8004de8 <HAL_DMA_Init+0x1ec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a51      	ldr	r2, [pc, #324]	; (8004dec <HAL_DMA_Init+0x1f0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMA_Init+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a50      	ldr	r2, [pc, #320]	; (8004df0 <HAL_DMA_Init+0x1f4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_DMA_Init+0xbc>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_DMA_Init+0xbe>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 813c 	beq.w	8004f38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a37      	ldr	r2, [pc, #220]	; (8004db4 <HAL_DMA_Init+0x1b8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d04a      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a36      	ldr	r2, [pc, #216]	; (8004db8 <HAL_DMA_Init+0x1bc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d045      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_DMA_Init+0x1c0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d040      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a33      	ldr	r2, [pc, #204]	; (8004dc0 <HAL_DMA_Init+0x1c4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d03b      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <HAL_DMA_Init+0x1c8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d036      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a30      	ldr	r2, [pc, #192]	; (8004dc8 <HAL_DMA_Init+0x1cc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d031      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2e      	ldr	r2, [pc, #184]	; (8004dcc <HAL_DMA_Init+0x1d0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02c      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2d      	ldr	r2, [pc, #180]	; (8004dd0 <HAL_DMA_Init+0x1d4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d027      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <HAL_DMA_Init+0x1d8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d022      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <HAL_DMA_Init+0x1dc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d01d      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_DMA_Init+0x1e0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d018      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <HAL_DMA_Init+0x1e4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a25      	ldr	r2, [pc, #148]	; (8004de4 <HAL_DMA_Init+0x1e8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00e      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a24      	ldr	r2, [pc, #144]	; (8004de8 <HAL_DMA_Init+0x1ec>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <HAL_DMA_Init+0x1f0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_DMA_Init+0x174>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_DMA_Init+0x1f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <HAL_DMA_Init+0x186>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e007      	b.n	8004d92 <HAL_DMA_Init+0x196>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d92:	e02f      	b.n	8004df4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d94:	f7fd feba 	bl	8002b0c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d928      	bls.n	8004df4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2203      	movs	r2, #3
 8004dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e244      	b.n	800523e <HAL_DMA_Init+0x642>
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1c8      	bne.n	8004d94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4b84      	ldr	r3, [pc, #528]	; (8005020 <HAL_DMA_Init+0x424>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d107      	bne.n	8004e58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	4313      	orrs	r3, r2
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b28      	cmp	r3, #40	; 0x28
 8004e5e:	d903      	bls.n	8004e68 <HAL_DMA_Init+0x26c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b2e      	cmp	r3, #46	; 0x2e
 8004e66:	d91f      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e6e:	d903      	bls.n	8004e78 <HAL_DMA_Init+0x27c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b42      	cmp	r3, #66	; 0x42
 8004e76:	d917      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b46      	cmp	r3, #70	; 0x46
 8004e7e:	d903      	bls.n	8004e88 <HAL_DMA_Init+0x28c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b48      	cmp	r3, #72	; 0x48
 8004e86:	d90f      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b4e      	cmp	r3, #78	; 0x4e
 8004e8e:	d903      	bls.n	8004e98 <HAL_DMA_Init+0x29c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b52      	cmp	r3, #82	; 0x52
 8004e96:	d907      	bls.n	8004ea8 <HAL_DMA_Init+0x2ac>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b73      	cmp	r3, #115	; 0x73
 8004e9e:	d905      	bls.n	8004eac <HAL_DMA_Init+0x2b0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b77      	cmp	r3, #119	; 0x77
 8004ea6:	d801      	bhi.n	8004eac <HAL_DMA_Init+0x2b0>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_DMA_Init+0x2b2>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d117      	bne.n	8004f14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 fdcc 	bl	8006a94 <DMA_CheckFifoParam>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2240      	movs	r2, #64	; 0x40
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e194      	b.n	800523e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 fd07 	bl	8006930 <DMA_CalcBaseAndBitshift>
 8004f22:	4603      	mov	r3, r0
 8004f24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	223f      	movs	r2, #63	; 0x3f
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	e0ca      	b.n	80050ce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a39      	ldr	r2, [pc, #228]	; (8005024 <HAL_DMA_Init+0x428>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a38      	ldr	r2, [pc, #224]	; (8005028 <HAL_DMA_Init+0x42c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a36      	ldr	r2, [pc, #216]	; (800502c <HAL_DMA_Init+0x430>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a35      	ldr	r2, [pc, #212]	; (8005030 <HAL_DMA_Init+0x434>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <HAL_DMA_Init+0x438>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a32      	ldr	r2, [pc, #200]	; (8005038 <HAL_DMA_Init+0x43c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <HAL_DMA_Init+0x440>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_Init+0x38c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <HAL_DMA_Init+0x444>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_DMA_Init+0x390>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_DMA_Init+0x392>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 8094 	beq.w	80050bc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a22      	ldr	r2, [pc, #136]	; (8005024 <HAL_DMA_Init+0x428>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d021      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a21      	ldr	r2, [pc, #132]	; (8005028 <HAL_DMA_Init+0x42c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1f      	ldr	r2, [pc, #124]	; (800502c <HAL_DMA_Init+0x430>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d017      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_DMA_Init+0x434>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d012      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <HAL_DMA_Init+0x438>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_DMA_Init+0x43c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d008      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <HAL_DMA_Init+0x440>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d003      	beq.n	8004fe2 <HAL_DMA_Init+0x3e6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_DMA_Init+0x444>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4b11      	ldr	r3, [pc, #68]	; (8005044 <HAL_DMA_Init+0x448>)
 8005000:	4013      	ands	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d01d      	beq.n	8005048 <HAL_DMA_Init+0x44c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d102      	bne.n	800501a <HAL_DMA_Init+0x41e>
 8005014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005018:	e017      	b.n	800504a <HAL_DMA_Init+0x44e>
 800501a:	2300      	movs	r3, #0
 800501c:	e015      	b.n	800504a <HAL_DMA_Init+0x44e>
 800501e:	bf00      	nop
 8005020:	fe10803f 	.word	0xfe10803f
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494
 8005044:	fffe000f 	.word	0xfffe000f
 8005048:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68d2      	ldr	r2, [r2, #12]
 800504e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005058:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005078:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b6e      	ldr	r3, [pc, #440]	; (8005248 <HAL_DMA_Init+0x64c>)
 8005090:	4413      	add	r3, r2
 8005092:	4a6e      	ldr	r2, [pc, #440]	; (800524c <HAL_DMA_Init+0x650>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f001 fc45 	bl	8006930 <DMA_CalcBaseAndBitshift>
 80050a6:	4603      	mov	r3, r0
 80050a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e008      	b.n	80050ce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2203      	movs	r2, #3
 80050c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0b7      	b.n	800523e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a5f      	ldr	r2, [pc, #380]	; (8005250 <HAL_DMA_Init+0x654>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d072      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5d      	ldr	r2, [pc, #372]	; (8005254 <HAL_DMA_Init+0x658>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d06d      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_DMA_Init+0x65c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d068      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5a      	ldr	r2, [pc, #360]	; (800525c <HAL_DMA_Init+0x660>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d063      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a59      	ldr	r2, [pc, #356]	; (8005260 <HAL_DMA_Init+0x664>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d05e      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a57      	ldr	r2, [pc, #348]	; (8005264 <HAL_DMA_Init+0x668>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d059      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_DMA_Init+0x66c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d054      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a54      	ldr	r2, [pc, #336]	; (800526c <HAL_DMA_Init+0x670>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04f      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a53      	ldr	r2, [pc, #332]	; (8005270 <HAL_DMA_Init+0x674>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d04a      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a51      	ldr	r2, [pc, #324]	; (8005274 <HAL_DMA_Init+0x678>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d045      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a50      	ldr	r2, [pc, #320]	; (8005278 <HAL_DMA_Init+0x67c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d040      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a4e      	ldr	r2, [pc, #312]	; (800527c <HAL_DMA_Init+0x680>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d03b      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4d      	ldr	r2, [pc, #308]	; (8005280 <HAL_DMA_Init+0x684>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d036      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a4b      	ldr	r2, [pc, #300]	; (8005284 <HAL_DMA_Init+0x688>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <HAL_DMA_Init+0x68c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d02c      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a48      	ldr	r2, [pc, #288]	; (800528c <HAL_DMA_Init+0x690>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d027      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a47      	ldr	r2, [pc, #284]	; (8005290 <HAL_DMA_Init+0x694>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a45      	ldr	r2, [pc, #276]	; (8005294 <HAL_DMA_Init+0x698>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a44      	ldr	r2, [pc, #272]	; (8005298 <HAL_DMA_Init+0x69c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_DMA_Init+0x6a0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a41      	ldr	r2, [pc, #260]	; (80052a0 <HAL_DMA_Init+0x6a4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3f      	ldr	r2, [pc, #252]	; (80052a4 <HAL_DMA_Init+0x6a8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3e      	ldr	r2, [pc, #248]	; (80052a8 <HAL_DMA_Init+0x6ac>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_DMA_Init+0x5c2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_DMA_Init+0x6b0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <HAL_DMA_Init+0x5c6>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_DMA_Init+0x5c8>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d032      	beq.n	800522e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 fcdf 	bl	8006b8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b80      	cmp	r3, #128	; 0x80
 80051d4:	d102      	bne.n	80051dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <HAL_DMA_Init+0x620>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d80c      	bhi.n	800521c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 fd5c 	bl	8006cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	e008      	b.n	800522e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	a7fdabf8 	.word	0xa7fdabf8
 800524c:	cccccccd 	.word	0xcccccccd
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8
 8005290:	58025408 	.word	0x58025408
 8005294:	5802541c 	.word	0x5802541c
 8005298:	58025430 	.word	0x58025430
 800529c:	58025444 	.word	0x58025444
 80052a0:	58025458 	.word	0x58025458
 80052a4:	5802546c 	.word	0x5802546c
 80052a8:	58025480 	.word	0x58025480
 80052ac:	58025494 	.word	0x58025494

080052b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e226      	b.n	800571a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_DMA_Start_IT+0x2a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e21f      	b.n	800571a <HAL_DMA_Start_IT+0x46a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	f040 820a 	bne.w	8005704 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a68      	ldr	r2, [pc, #416]	; (80054a4 <HAL_DMA_Start_IT+0x1f4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d04a      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a66      	ldr	r2, [pc, #408]	; (80054a8 <HAL_DMA_Start_IT+0x1f8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d045      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_DMA_Start_IT+0x1fc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d040      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a63      	ldr	r2, [pc, #396]	; (80054b0 <HAL_DMA_Start_IT+0x200>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d03b      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a62      	ldr	r2, [pc, #392]	; (80054b4 <HAL_DMA_Start_IT+0x204>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d036      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a60      	ldr	r2, [pc, #384]	; (80054b8 <HAL_DMA_Start_IT+0x208>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5f      	ldr	r2, [pc, #380]	; (80054bc <HAL_DMA_Start_IT+0x20c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d02c      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5d      	ldr	r2, [pc, #372]	; (80054c0 <HAL_DMA_Start_IT+0x210>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d027      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a5c      	ldr	r2, [pc, #368]	; (80054c4 <HAL_DMA_Start_IT+0x214>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a5a      	ldr	r2, [pc, #360]	; (80054c8 <HAL_DMA_Start_IT+0x218>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01d      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a59      	ldr	r2, [pc, #356]	; (80054cc <HAL_DMA_Start_IT+0x21c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a57      	ldr	r2, [pc, #348]	; (80054d0 <HAL_DMA_Start_IT+0x220>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a56      	ldr	r2, [pc, #344]	; (80054d4 <HAL_DMA_Start_IT+0x224>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a54      	ldr	r2, [pc, #336]	; (80054d8 <HAL_DMA_Start_IT+0x228>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a53      	ldr	r2, [pc, #332]	; (80054dc <HAL_DMA_Start_IT+0x22c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_DMA_Start_IT+0xee>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a51      	ldr	r2, [pc, #324]	; (80054e0 <HAL_DMA_Start_IT+0x230>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <HAL_DMA_Start_IT+0x100>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e007      	b.n	80053c0 <HAL_DMA_Start_IT+0x110>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0201 	bic.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f001 f906 	bl	80065d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a34      	ldr	r2, [pc, #208]	; (80054a4 <HAL_DMA_Start_IT+0x1f4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d04a      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a33      	ldr	r2, [pc, #204]	; (80054a8 <HAL_DMA_Start_IT+0x1f8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d045      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a31      	ldr	r2, [pc, #196]	; (80054ac <HAL_DMA_Start_IT+0x1fc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d040      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a30      	ldr	r2, [pc, #192]	; (80054b0 <HAL_DMA_Start_IT+0x200>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d03b      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2e      	ldr	r2, [pc, #184]	; (80054b4 <HAL_DMA_Start_IT+0x204>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d036      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2d      	ldr	r2, [pc, #180]	; (80054b8 <HAL_DMA_Start_IT+0x208>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d031      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <HAL_DMA_Start_IT+0x20c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d02c      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <HAL_DMA_Start_IT+0x210>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d027      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a28      	ldr	r2, [pc, #160]	; (80054c4 <HAL_DMA_Start_IT+0x214>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <HAL_DMA_Start_IT+0x218>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a25      	ldr	r2, [pc, #148]	; (80054cc <HAL_DMA_Start_IT+0x21c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <HAL_DMA_Start_IT+0x220>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <HAL_DMA_Start_IT+0x224>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <HAL_DMA_Start_IT+0x228>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <HAL_DMA_Start_IT+0x22c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_DMA_Start_IT+0x1bc>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <HAL_DMA_Start_IT+0x230>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_DMA_Start_IT+0x1c0>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_DMA_Start_IT+0x1c2>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d036      	beq.n	80054e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 021e 	bic.w	r2, r3, #30
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0216 	orr.w	r2, r2, #22
 8005488:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d03e      	beq.n	8005510 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e035      	b.n	8005510 <HAL_DMA_Start_IT+0x260>
 80054a4:	40020010 	.word	0x40020010
 80054a8:	40020028 	.word	0x40020028
 80054ac:	40020040 	.word	0x40020040
 80054b0:	40020058 	.word	0x40020058
 80054b4:	40020070 	.word	0x40020070
 80054b8:	40020088 	.word	0x40020088
 80054bc:	400200a0 	.word	0x400200a0
 80054c0:	400200b8 	.word	0x400200b8
 80054c4:	40020410 	.word	0x40020410
 80054c8:	40020428 	.word	0x40020428
 80054cc:	40020440 	.word	0x40020440
 80054d0:	40020458 	.word	0x40020458
 80054d4:	40020470 	.word	0x40020470
 80054d8:	40020488 	.word	0x40020488
 80054dc:	400204a0 	.word	0x400204a0
 80054e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 020e 	bic.w	r2, r3, #14
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 020a 	orr.w	r2, r2, #10
 80054f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0204 	orr.w	r2, r2, #4
 800550e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a83      	ldr	r2, [pc, #524]	; (8005724 <HAL_DMA_Start_IT+0x474>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d072      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a82      	ldr	r2, [pc, #520]	; (8005728 <HAL_DMA_Start_IT+0x478>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d06d      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a80      	ldr	r2, [pc, #512]	; (800572c <HAL_DMA_Start_IT+0x47c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d068      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a7f      	ldr	r2, [pc, #508]	; (8005730 <HAL_DMA_Start_IT+0x480>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d063      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a7d      	ldr	r2, [pc, #500]	; (8005734 <HAL_DMA_Start_IT+0x484>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d05e      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7c      	ldr	r2, [pc, #496]	; (8005738 <HAL_DMA_Start_IT+0x488>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d059      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a7a      	ldr	r2, [pc, #488]	; (800573c <HAL_DMA_Start_IT+0x48c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d054      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a79      	ldr	r2, [pc, #484]	; (8005740 <HAL_DMA_Start_IT+0x490>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d04f      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a77      	ldr	r2, [pc, #476]	; (8005744 <HAL_DMA_Start_IT+0x494>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d04a      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a76      	ldr	r2, [pc, #472]	; (8005748 <HAL_DMA_Start_IT+0x498>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d045      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a74      	ldr	r2, [pc, #464]	; (800574c <HAL_DMA_Start_IT+0x49c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d040      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a73      	ldr	r2, [pc, #460]	; (8005750 <HAL_DMA_Start_IT+0x4a0>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d03b      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a71      	ldr	r2, [pc, #452]	; (8005754 <HAL_DMA_Start_IT+0x4a4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d036      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a70      	ldr	r2, [pc, #448]	; (8005758 <HAL_DMA_Start_IT+0x4a8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d031      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	; (800575c <HAL_DMA_Start_IT+0x4ac>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02c      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6d      	ldr	r2, [pc, #436]	; (8005760 <HAL_DMA_Start_IT+0x4b0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d027      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6b      	ldr	r2, [pc, #428]	; (8005764 <HAL_DMA_Start_IT+0x4b4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d022      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <HAL_DMA_Start_IT+0x4b8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d01d      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a68      	ldr	r2, [pc, #416]	; (800576c <HAL_DMA_Start_IT+0x4bc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d018      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a67      	ldr	r2, [pc, #412]	; (8005770 <HAL_DMA_Start_IT+0x4c0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a65      	ldr	r2, [pc, #404]	; (8005774 <HAL_DMA_Start_IT+0x4c4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00e      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a64      	ldr	r2, [pc, #400]	; (8005778 <HAL_DMA_Start_IT+0x4c8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a62      	ldr	r2, [pc, #392]	; (800577c <HAL_DMA_Start_IT+0x4cc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_DMA_Start_IT+0x350>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a61      	ldr	r2, [pc, #388]	; (8005780 <HAL_DMA_Start_IT+0x4d0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d101      	bne.n	8005604 <HAL_DMA_Start_IT+0x354>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <HAL_DMA_Start_IT+0x356>
 8005604:	2300      	movs	r3, #0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01a      	beq.n	8005640 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005626:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800563a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a37      	ldr	r2, [pc, #220]	; (8005724 <HAL_DMA_Start_IT+0x474>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d04a      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a36      	ldr	r2, [pc, #216]	; (8005728 <HAL_DMA_Start_IT+0x478>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d045      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a34      	ldr	r2, [pc, #208]	; (800572c <HAL_DMA_Start_IT+0x47c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d040      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a33      	ldr	r2, [pc, #204]	; (8005730 <HAL_DMA_Start_IT+0x480>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d03b      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a31      	ldr	r2, [pc, #196]	; (8005734 <HAL_DMA_Start_IT+0x484>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d036      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a30      	ldr	r2, [pc, #192]	; (8005738 <HAL_DMA_Start_IT+0x488>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d031      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a2e      	ldr	r2, [pc, #184]	; (800573c <HAL_DMA_Start_IT+0x48c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d02c      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <HAL_DMA_Start_IT+0x490>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d027      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <HAL_DMA_Start_IT+0x494>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d022      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <HAL_DMA_Start_IT+0x498>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d01d      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a28      	ldr	r2, [pc, #160]	; (800574c <HAL_DMA_Start_IT+0x49c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a27      	ldr	r2, [pc, #156]	; (8005750 <HAL_DMA_Start_IT+0x4a0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a25      	ldr	r2, [pc, #148]	; (8005754 <HAL_DMA_Start_IT+0x4a4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a24      	ldr	r2, [pc, #144]	; (8005758 <HAL_DMA_Start_IT+0x4a8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a22      	ldr	r2, [pc, #136]	; (800575c <HAL_DMA_Start_IT+0x4ac>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_DMA_Start_IT+0x430>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a21      	ldr	r2, [pc, #132]	; (8005760 <HAL_DMA_Start_IT+0x4b0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <HAL_DMA_Start_IT+0x442>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e012      	b.n	8005718 <HAL_DMA_Start_IT+0x468>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e009      	b.n	8005718 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800570a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40020010 	.word	0x40020010
 8005728:	40020028 	.word	0x40020028
 800572c:	40020040 	.word	0x40020040
 8005730:	40020058 	.word	0x40020058
 8005734:	40020070 	.word	0x40020070
 8005738:	40020088 	.word	0x40020088
 800573c:	400200a0 	.word	0x400200a0
 8005740:	400200b8 	.word	0x400200b8
 8005744:	40020410 	.word	0x40020410
 8005748:	40020428 	.word	0x40020428
 800574c:	40020440 	.word	0x40020440
 8005750:	40020458 	.word	0x40020458
 8005754:	40020470 	.word	0x40020470
 8005758:	40020488 	.word	0x40020488
 800575c:	400204a0 	.word	0x400204a0
 8005760:	400204b8 	.word	0x400204b8
 8005764:	58025408 	.word	0x58025408
 8005768:	5802541c 	.word	0x5802541c
 800576c:	58025430 	.word	0x58025430
 8005770:	58025444 	.word	0x58025444
 8005774:	58025458 	.word	0x58025458
 8005778:	5802546c 	.word	0x5802546c
 800577c:	58025480 	.word	0x58025480
 8005780:	58025494 	.word	0x58025494

08005784 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005790:	4b67      	ldr	r3, [pc, #412]	; (8005930 <HAL_DMA_IRQHandler+0x1ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a67      	ldr	r2, [pc, #412]	; (8005934 <HAL_DMA_IRQHandler+0x1b0>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a5f      	ldr	r2, [pc, #380]	; (8005938 <HAL_DMA_IRQHandler+0x1b4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d04a      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a5d      	ldr	r2, [pc, #372]	; (800593c <HAL_DMA_IRQHandler+0x1b8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d045      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a5c      	ldr	r2, [pc, #368]	; (8005940 <HAL_DMA_IRQHandler+0x1bc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d040      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a5a      	ldr	r2, [pc, #360]	; (8005944 <HAL_DMA_IRQHandler+0x1c0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d03b      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a59      	ldr	r2, [pc, #356]	; (8005948 <HAL_DMA_IRQHandler+0x1c4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d036      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a57      	ldr	r2, [pc, #348]	; (800594c <HAL_DMA_IRQHandler+0x1c8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d031      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a56      	ldr	r2, [pc, #344]	; (8005950 <HAL_DMA_IRQHandler+0x1cc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d02c      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a54      	ldr	r2, [pc, #336]	; (8005954 <HAL_DMA_IRQHandler+0x1d0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d027      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a53      	ldr	r2, [pc, #332]	; (8005958 <HAL_DMA_IRQHandler+0x1d4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a51      	ldr	r2, [pc, #324]	; (800595c <HAL_DMA_IRQHandler+0x1d8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01d      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a50      	ldr	r2, [pc, #320]	; (8005960 <HAL_DMA_IRQHandler+0x1dc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a4e      	ldr	r2, [pc, #312]	; (8005964 <HAL_DMA_IRQHandler+0x1e0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a4d      	ldr	r2, [pc, #308]	; (8005968 <HAL_DMA_IRQHandler+0x1e4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a4b      	ldr	r2, [pc, #300]	; (800596c <HAL_DMA_IRQHandler+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a4a      	ldr	r2, [pc, #296]	; (8005970 <HAL_DMA_IRQHandler+0x1ec>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_DMA_IRQHandler+0xd2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a48      	ldr	r2, [pc, #288]	; (8005974 <HAL_DMA_IRQHandler+0x1f0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_DMA_IRQHandler+0xd6>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_DMA_IRQHandler+0xd8>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 842b 	beq.w	80060b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2208      	movs	r2, #8
 800586c:	409a      	lsls	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a2 	beq.w	80059bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a2e      	ldr	r2, [pc, #184]	; (8005938 <HAL_DMA_IRQHandler+0x1b4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d04a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2d      	ldr	r2, [pc, #180]	; (800593c <HAL_DMA_IRQHandler+0x1b8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d045      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2b      	ldr	r2, [pc, #172]	; (8005940 <HAL_DMA_IRQHandler+0x1bc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d040      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <HAL_DMA_IRQHandler+0x1c0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d03b      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <HAL_DMA_IRQHandler+0x1c4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d036      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a27      	ldr	r2, [pc, #156]	; (800594c <HAL_DMA_IRQHandler+0x1c8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d031      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a25      	ldr	r2, [pc, #148]	; (8005950 <HAL_DMA_IRQHandler+0x1cc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02c      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a24      	ldr	r2, [pc, #144]	; (8005954 <HAL_DMA_IRQHandler+0x1d0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d027      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_DMA_IRQHandler+0x1d4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a21      	ldr	r2, [pc, #132]	; (800595c <HAL_DMA_IRQHandler+0x1d8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d01d      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <HAL_DMA_IRQHandler+0x1dc>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <HAL_DMA_IRQHandler+0x1e0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <HAL_DMA_IRQHandler+0x1e4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_DMA_IRQHandler+0x1e8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <HAL_DMA_IRQHandler+0x1ec>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_DMA_IRQHandler+0x194>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <HAL_DMA_IRQHandler+0x1f0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d12f      	bne.n	8005978 <HAL_DMA_IRQHandler+0x1f4>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf14      	ite	ne
 8005926:	2301      	movne	r3, #1
 8005928:	2300      	moveq	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	e02e      	b.n	800598c <HAL_DMA_IRQHandler+0x208>
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000
 8005934:	1b4e81b5 	.word	0x1b4e81b5
 8005938:	40020010 	.word	0x40020010
 800593c:	40020028 	.word	0x40020028
 8005940:	40020040 	.word	0x40020040
 8005944:	40020058 	.word	0x40020058
 8005948:	40020070 	.word	0x40020070
 800594c:	40020088 	.word	0x40020088
 8005950:	400200a0 	.word	0x400200a0
 8005954:	400200b8 	.word	0x400200b8
 8005958:	40020410 	.word	0x40020410
 800595c:	40020428 	.word	0x40020428
 8005960:	40020440 	.word	0x40020440
 8005964:	40020458 	.word	0x40020458
 8005968:	40020470 	.word	0x40020470
 800596c:	40020488 	.word	0x40020488
 8005970:	400204a0 	.word	0x400204a0
 8005974:	400204b8 	.word	0x400204b8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d015      	beq.n	80059bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0204 	bic.w	r2, r2, #4
 800599e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2208      	movs	r2, #8
 80059aa:	409a      	lsls	r2, r3
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	f043 0201 	orr.w	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d06e      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a69      	ldr	r2, [pc, #420]	; (8005b7c <HAL_DMA_IRQHandler+0x3f8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d04a      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a67      	ldr	r2, [pc, #412]	; (8005b80 <HAL_DMA_IRQHandler+0x3fc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d045      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a66      	ldr	r2, [pc, #408]	; (8005b84 <HAL_DMA_IRQHandler+0x400>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d040      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a64      	ldr	r2, [pc, #400]	; (8005b88 <HAL_DMA_IRQHandler+0x404>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d03b      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a63      	ldr	r2, [pc, #396]	; (8005b8c <HAL_DMA_IRQHandler+0x408>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d036      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a61      	ldr	r2, [pc, #388]	; (8005b90 <HAL_DMA_IRQHandler+0x40c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d031      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a60      	ldr	r2, [pc, #384]	; (8005b94 <HAL_DMA_IRQHandler+0x410>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d02c      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a5e      	ldr	r2, [pc, #376]	; (8005b98 <HAL_DMA_IRQHandler+0x414>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d027      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a5d      	ldr	r2, [pc, #372]	; (8005b9c <HAL_DMA_IRQHandler+0x418>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5b      	ldr	r2, [pc, #364]	; (8005ba0 <HAL_DMA_IRQHandler+0x41c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01d      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a5a      	ldr	r2, [pc, #360]	; (8005ba4 <HAL_DMA_IRQHandler+0x420>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a58      	ldr	r2, [pc, #352]	; (8005ba8 <HAL_DMA_IRQHandler+0x424>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a57      	ldr	r2, [pc, #348]	; (8005bac <HAL_DMA_IRQHandler+0x428>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a55      	ldr	r2, [pc, #340]	; (8005bb0 <HAL_DMA_IRQHandler+0x42c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a54      	ldr	r2, [pc, #336]	; (8005bb4 <HAL_DMA_IRQHandler+0x430>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x2ee>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a52      	ldr	r2, [pc, #328]	; (8005bb8 <HAL_DMA_IRQHandler+0x434>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10a      	bne.n	8005a88 <HAL_DMA_IRQHandler+0x304>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e003      	b.n	8005a90 <HAL_DMA_IRQHandler+0x30c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00d      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	f043 0202 	orr.w	r2, r3, #2
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2204      	movs	r2, #4
 8005aba:	409a      	lsls	r2, r3
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 808f 	beq.w	8005be4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <HAL_DMA_IRQHandler+0x3f8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <HAL_DMA_IRQHandler+0x3fc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <HAL_DMA_IRQHandler+0x400>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <HAL_DMA_IRQHandler+0x404>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_DMA_IRQHandler+0x408>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a24      	ldr	r2, [pc, #144]	; (8005b90 <HAL_DMA_IRQHandler+0x40c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <HAL_DMA_IRQHandler+0x410>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <HAL_DMA_IRQHandler+0x414>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <HAL_DMA_IRQHandler+0x418>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <HAL_DMA_IRQHandler+0x41c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <HAL_DMA_IRQHandler+0x420>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_DMA_IRQHandler+0x424>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_DMA_IRQHandler+0x428>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_DMA_IRQHandler+0x42c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_DMA_IRQHandler+0x430>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x3e2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <HAL_DMA_IRQHandler+0x434>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d12a      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x438>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf14      	ite	ne
 8005b74:	2301      	movne	r3, #1
 8005b76:	2300      	moveq	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	e023      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x440>
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2210      	movs	r2, #16
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80a6 	beq.w	8005d46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a85      	ldr	r2, [pc, #532]	; (8005e14 <HAL_DMA_IRQHandler+0x690>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d04a      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a83      	ldr	r2, [pc, #524]	; (8005e18 <HAL_DMA_IRQHandler+0x694>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d045      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a82      	ldr	r2, [pc, #520]	; (8005e1c <HAL_DMA_IRQHandler+0x698>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d040      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a80      	ldr	r2, [pc, #512]	; (8005e20 <HAL_DMA_IRQHandler+0x69c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d03b      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7f      	ldr	r2, [pc, #508]	; (8005e24 <HAL_DMA_IRQHandler+0x6a0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d036      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7d      	ldr	r2, [pc, #500]	; (8005e28 <HAL_DMA_IRQHandler+0x6a4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d031      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7c      	ldr	r2, [pc, #496]	; (8005e2c <HAL_DMA_IRQHandler+0x6a8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d02c      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a7a      	ldr	r2, [pc, #488]	; (8005e30 <HAL_DMA_IRQHandler+0x6ac>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d027      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a79      	ldr	r2, [pc, #484]	; (8005e34 <HAL_DMA_IRQHandler+0x6b0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d022      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a77      	ldr	r2, [pc, #476]	; (8005e38 <HAL_DMA_IRQHandler+0x6b4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01d      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a76      	ldr	r2, [pc, #472]	; (8005e3c <HAL_DMA_IRQHandler+0x6b8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a74      	ldr	r2, [pc, #464]	; (8005e40 <HAL_DMA_IRQHandler+0x6bc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a73      	ldr	r2, [pc, #460]	; (8005e44 <HAL_DMA_IRQHandler+0x6c0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00e      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a71      	ldr	r2, [pc, #452]	; (8005e48 <HAL_DMA_IRQHandler+0x6c4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a70      	ldr	r2, [pc, #448]	; (8005e4c <HAL_DMA_IRQHandler+0x6c8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x516>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6e      	ldr	r2, [pc, #440]	; (8005e50 <HAL_DMA_IRQHandler+0x6cc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d10a      	bne.n	8005cb0 <HAL_DMA_IRQHandler+0x52c>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf14      	ite	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	2300      	moveq	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e009      	b.n	8005cc4 <HAL_DMA_IRQHandler+0x540>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf14      	ite	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	2300      	moveq	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d03e      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d108      	bne.n	8005d06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d024      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	e01f      	b.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01b      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
 8005d16:	e016      	b.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0208 	bic.w	r2, r2, #8
 8005d34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2220      	movs	r2, #32
 8005d50:	409a      	lsls	r2, r3
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8110 	beq.w	8005f7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <HAL_DMA_IRQHandler+0x690>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2b      	ldr	r2, [pc, #172]	; (8005e18 <HAL_DMA_IRQHandler+0x694>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a29      	ldr	r2, [pc, #164]	; (8005e1c <HAL_DMA_IRQHandler+0x698>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a28      	ldr	r2, [pc, #160]	; (8005e20 <HAL_DMA_IRQHandler+0x69c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <HAL_DMA_IRQHandler+0x6a0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <HAL_DMA_IRQHandler+0x6a4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <HAL_DMA_IRQHandler+0x6a8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <HAL_DMA_IRQHandler+0x6ac>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <HAL_DMA_IRQHandler+0x6b0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_DMA_IRQHandler+0x6b4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	; (8005e3c <HAL_DMA_IRQHandler+0x6b8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <HAL_DMA_IRQHandler+0x6bc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <HAL_DMA_IRQHandler+0x6c0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_DMA_IRQHandler+0x6c4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <HAL_DMA_IRQHandler+0x6c8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x678>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_DMA_IRQHandler+0x6cc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d12b      	bne.n	8005e54 <HAL_DMA_IRQHandler+0x6d0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf14      	ite	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	2300      	moveq	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e02a      	b.n	8005e68 <HAL_DMA_IRQHandler+0x6e4>
 8005e12:	bf00      	nop
 8005e14:	40020010 	.word	0x40020010
 8005e18:	40020028 	.word	0x40020028
 8005e1c:	40020040 	.word	0x40020040
 8005e20:	40020058 	.word	0x40020058
 8005e24:	40020070 	.word	0x40020070
 8005e28:	40020088 	.word	0x40020088
 8005e2c:	400200a0 	.word	0x400200a0
 8005e30:	400200b8 	.word	0x400200b8
 8005e34:	40020410 	.word	0x40020410
 8005e38:	40020428 	.word	0x40020428
 8005e3c:	40020440 	.word	0x40020440
 8005e40:	40020458 	.word	0x40020458
 8005e44:	40020470 	.word	0x40020470
 8005e48:	40020488 	.word	0x40020488
 8005e4c:	400204a0 	.word	0x400204a0
 8005e50:	400204b8 	.word	0x400204b8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8087 	beq.w	8005f7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	2220      	movs	r2, #32
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d139      	bne.n	8005efe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0216 	bic.w	r2, r2, #22
 8005e98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_DMA_IRQHandler+0x736>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0208 	bic.w	r2, r2, #8
 8005ec8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	223f      	movs	r2, #63	; 0x3f
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 834a 	beq.w	8006588 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
          }
          return;
 8005efc:	e344      	b.n	8006588 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d108      	bne.n	8005f2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02c      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
 8005f2a:	e027      	b.n	8005f7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d023      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
 8005f3c:	e01e      	b.n	8005f7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10f      	bne.n	8005f6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0210 	bic.w	r2, r2, #16
 8005f5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8306 	beq.w	8006592 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8088 	beq.w	80060a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2204      	movs	r2, #4
 8005f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a7a      	ldr	r2, [pc, #488]	; (800618c <HAL_DMA_IRQHandler+0xa08>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d04a      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a79      	ldr	r2, [pc, #484]	; (8006190 <HAL_DMA_IRQHandler+0xa0c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d045      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a77      	ldr	r2, [pc, #476]	; (8006194 <HAL_DMA_IRQHandler+0xa10>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d040      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a76      	ldr	r2, [pc, #472]	; (8006198 <HAL_DMA_IRQHandler+0xa14>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d03b      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a74      	ldr	r2, [pc, #464]	; (800619c <HAL_DMA_IRQHandler+0xa18>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d036      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a73      	ldr	r2, [pc, #460]	; (80061a0 <HAL_DMA_IRQHandler+0xa1c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d031      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a71      	ldr	r2, [pc, #452]	; (80061a4 <HAL_DMA_IRQHandler+0xa20>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d02c      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a70      	ldr	r2, [pc, #448]	; (80061a8 <HAL_DMA_IRQHandler+0xa24>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d027      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a6e      	ldr	r2, [pc, #440]	; (80061ac <HAL_DMA_IRQHandler+0xa28>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d022      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6d      	ldr	r2, [pc, #436]	; (80061b0 <HAL_DMA_IRQHandler+0xa2c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d01d      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6b      	ldr	r2, [pc, #428]	; (80061b4 <HAL_DMA_IRQHandler+0xa30>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d018      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <HAL_DMA_IRQHandler+0xa34>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a68      	ldr	r2, [pc, #416]	; (80061bc <HAL_DMA_IRQHandler+0xa38>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00e      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a67      	ldr	r2, [pc, #412]	; (80061c0 <HAL_DMA_IRQHandler+0xa3c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d009      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a65      	ldr	r2, [pc, #404]	; (80061c4 <HAL_DMA_IRQHandler+0xa40>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_DMA_IRQHandler+0x8b8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a64      	ldr	r2, [pc, #400]	; (80061c8 <HAL_DMA_IRQHandler+0xa44>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <HAL_DMA_IRQHandler+0x8ca>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e007      	b.n	800605e <HAL_DMA_IRQHandler+0x8da>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006066:	429a      	cmp	r2, r3
 8006068:	d307      	bcc.n	800607a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f2      	bne.n	800605e <HAL_DMA_IRQHandler+0x8da>
 8006078:	e000      	b.n	800607c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800607a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2203      	movs	r2, #3
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006092:	e003      	b.n	800609c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8272 	beq.w	8006592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	4798      	blx	r3
 80060b6:	e26c      	b.n	8006592 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a43      	ldr	r2, [pc, #268]	; (80061cc <HAL_DMA_IRQHandler+0xa48>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d022      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a42      	ldr	r2, [pc, #264]	; (80061d0 <HAL_DMA_IRQHandler+0xa4c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d01d      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <HAL_DMA_IRQHandler+0xa50>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d018      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <HAL_DMA_IRQHandler+0xa54>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3d      	ldr	r2, [pc, #244]	; (80061dc <HAL_DMA_IRQHandler+0xa58>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3c      	ldr	r2, [pc, #240]	; (80061e0 <HAL_DMA_IRQHandler+0xa5c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d009      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <HAL_DMA_IRQHandler+0xa60>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_DMA_IRQHandler+0x984>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a39      	ldr	r2, [pc, #228]	; (80061e8 <HAL_DMA_IRQHandler+0xa64>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d101      	bne.n	800610c <HAL_DMA_IRQHandler+0x988>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <HAL_DMA_IRQHandler+0x98a>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 823f 	beq.w	8006592 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2204      	movs	r2, #4
 8006126:	409a      	lsls	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80cd 	beq.w	80062cc <HAL_DMA_IRQHandler+0xb48>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80c7 	beq.w	80062cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2204      	movs	r2, #4
 8006148:	409a      	lsls	r2, r3
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d049      	beq.n	80061ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 8210 	beq.w	800658c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006174:	e20a      	b.n	800658c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8206 	beq.w	800658c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006188:	e200      	b.n	800658c <HAL_DMA_IRQHandler+0xe08>
 800618a:	bf00      	nop
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8
 80061cc:	58025408 	.word	0x58025408
 80061d0:	5802541c 	.word	0x5802541c
 80061d4:	58025430 	.word	0x58025430
 80061d8:	58025444 	.word	0x58025444
 80061dc:	58025458 	.word	0x58025458
 80061e0:	5802546c 	.word	0x5802546c
 80061e4:	58025480 	.word	0x58025480
 80061e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d160      	bne.n	80062b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a8c      	ldr	r2, [pc, #560]	; (800642c <HAL_DMA_IRQHandler+0xca8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a8a      	ldr	r2, [pc, #552]	; (8006430 <HAL_DMA_IRQHandler+0xcac>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a89      	ldr	r2, [pc, #548]	; (8006434 <HAL_DMA_IRQHandler+0xcb0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a87      	ldr	r2, [pc, #540]	; (8006438 <HAL_DMA_IRQHandler+0xcb4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a86      	ldr	r2, [pc, #536]	; (800643c <HAL_DMA_IRQHandler+0xcb8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a84      	ldr	r2, [pc, #528]	; (8006440 <HAL_DMA_IRQHandler+0xcbc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a83      	ldr	r2, [pc, #524]	; (8006444 <HAL_DMA_IRQHandler+0xcc0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a81      	ldr	r2, [pc, #516]	; (8006448 <HAL_DMA_IRQHandler+0xcc4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a80      	ldr	r2, [pc, #512]	; (800644c <HAL_DMA_IRQHandler+0xcc8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a7e      	ldr	r2, [pc, #504]	; (8006450 <HAL_DMA_IRQHandler+0xccc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a7d      	ldr	r2, [pc, #500]	; (8006454 <HAL_DMA_IRQHandler+0xcd0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7b      	ldr	r2, [pc, #492]	; (8006458 <HAL_DMA_IRQHandler+0xcd4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a7a      	ldr	r2, [pc, #488]	; (800645c <HAL_DMA_IRQHandler+0xcd8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a78      	ldr	r2, [pc, #480]	; (8006460 <HAL_DMA_IRQHandler+0xcdc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a77      	ldr	r2, [pc, #476]	; (8006464 <HAL_DMA_IRQHandler+0xce0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_IRQHandler+0xb12>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a75      	ldr	r2, [pc, #468]	; (8006468 <HAL_DMA_IRQHandler+0xce4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d108      	bne.n	80062a8 <HAL_DMA_IRQHandler+0xb24>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0208 	bic.w	r2, r2, #8
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e007      	b.n	80062b8 <HAL_DMA_IRQHandler+0xb34>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8165 	beq.w	800658c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ca:	e15f      	b.n	800658c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2202      	movs	r2, #2
 80062d6:	409a      	lsls	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80c5 	beq.w	800646c <HAL_DMA_IRQHandler+0xce8>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80bf 	beq.w	800646c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2202      	movs	r2, #2
 80062f8:	409a      	lsls	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d018      	beq.n	800633a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d109      	bne.n	8006326 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 813a 	beq.w	8006590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006324:	e134      	b.n	8006590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8130 	beq.w	8006590 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006338:	e12a      	b.n	8006590 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d168      	bne.n	8006416 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a38      	ldr	r2, [pc, #224]	; (800642c <HAL_DMA_IRQHandler+0xca8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d04a      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a37      	ldr	r2, [pc, #220]	; (8006430 <HAL_DMA_IRQHandler+0xcac>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d045      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a35      	ldr	r2, [pc, #212]	; (8006434 <HAL_DMA_IRQHandler+0xcb0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d040      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a34      	ldr	r2, [pc, #208]	; (8006438 <HAL_DMA_IRQHandler+0xcb4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d03b      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a32      	ldr	r2, [pc, #200]	; (800643c <HAL_DMA_IRQHandler+0xcb8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d036      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a31      	ldr	r2, [pc, #196]	; (8006440 <HAL_DMA_IRQHandler+0xcbc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d031      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2f      	ldr	r2, [pc, #188]	; (8006444 <HAL_DMA_IRQHandler+0xcc0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d02c      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <HAL_DMA_IRQHandler+0xcc4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d027      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2c      	ldr	r2, [pc, #176]	; (800644c <HAL_DMA_IRQHandler+0xcc8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d022      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	; (8006450 <HAL_DMA_IRQHandler+0xccc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d01d      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a29      	ldr	r2, [pc, #164]	; (8006454 <HAL_DMA_IRQHandler+0xcd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d018      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a28      	ldr	r2, [pc, #160]	; (8006458 <HAL_DMA_IRQHandler+0xcd4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a26      	ldr	r2, [pc, #152]	; (800645c <HAL_DMA_IRQHandler+0xcd8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a25      	ldr	r2, [pc, #148]	; (8006460 <HAL_DMA_IRQHandler+0xcdc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <HAL_DMA_IRQHandler+0xce0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_DMA_IRQHandler+0xc60>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_DMA_IRQHandler+0xce4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d108      	bne.n	80063f6 <HAL_DMA_IRQHandler+0xc72>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0214 	bic.w	r2, r2, #20
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e007      	b.n	8006406 <HAL_DMA_IRQHandler+0xc82>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 020a 	bic.w	r2, r2, #10
 8006404:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 80b8 	beq.w	8006590 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006428:	e0b2      	b.n	8006590 <HAL_DMA_IRQHandler+0xe0c>
 800642a:	bf00      	nop
 800642c:	40020010 	.word	0x40020010
 8006430:	40020028 	.word	0x40020028
 8006434:	40020040 	.word	0x40020040
 8006438:	40020058 	.word	0x40020058
 800643c:	40020070 	.word	0x40020070
 8006440:	40020088 	.word	0x40020088
 8006444:	400200a0 	.word	0x400200a0
 8006448:	400200b8 	.word	0x400200b8
 800644c:	40020410 	.word	0x40020410
 8006450:	40020428 	.word	0x40020428
 8006454:	40020440 	.word	0x40020440
 8006458:	40020458 	.word	0x40020458
 800645c:	40020470 	.word	0x40020470
 8006460:	40020488 	.word	0x40020488
 8006464:	400204a0 	.word	0x400204a0
 8006468:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	2208      	movs	r2, #8
 8006476:	409a      	lsls	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8088 	beq.w	8006592 <HAL_DMA_IRQHandler+0xe0e>
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8082 	beq.w	8006592 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a41      	ldr	r2, [pc, #260]	; (8006598 <HAL_DMA_IRQHandler+0xe14>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d04a      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3f      	ldr	r2, [pc, #252]	; (800659c <HAL_DMA_IRQHandler+0xe18>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d045      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a3e      	ldr	r2, [pc, #248]	; (80065a0 <HAL_DMA_IRQHandler+0xe1c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d040      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a3c      	ldr	r2, [pc, #240]	; (80065a4 <HAL_DMA_IRQHandler+0xe20>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3b      	ldr	r2, [pc, #236]	; (80065a8 <HAL_DMA_IRQHandler+0xe24>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d036      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a39      	ldr	r2, [pc, #228]	; (80065ac <HAL_DMA_IRQHandler+0xe28>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d031      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a38      	ldr	r2, [pc, #224]	; (80065b0 <HAL_DMA_IRQHandler+0xe2c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d02c      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a36      	ldr	r2, [pc, #216]	; (80065b4 <HAL_DMA_IRQHandler+0xe30>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d027      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a35      	ldr	r2, [pc, #212]	; (80065b8 <HAL_DMA_IRQHandler+0xe34>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d022      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a33      	ldr	r2, [pc, #204]	; (80065bc <HAL_DMA_IRQHandler+0xe38>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01d      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <HAL_DMA_IRQHandler+0xe3c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a30      	ldr	r2, [pc, #192]	; (80065c4 <HAL_DMA_IRQHandler+0xe40>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <HAL_DMA_IRQHandler+0xe44>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2d      	ldr	r2, [pc, #180]	; (80065cc <HAL_DMA_IRQHandler+0xe48>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2c      	ldr	r2, [pc, #176]	; (80065d0 <HAL_DMA_IRQHandler+0xe4c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_DMA_IRQHandler+0xdaa>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2a      	ldr	r2, [pc, #168]	; (80065d4 <HAL_DMA_IRQHandler+0xe50>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d108      	bne.n	8006540 <HAL_DMA_IRQHandler+0xdbc>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 021c 	bic.w	r2, r2, #28
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e007      	b.n	8006550 <HAL_DMA_IRQHandler+0xdcc>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 020e 	bic.w	r2, r2, #14
 800654e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	2201      	movs	r2, #1
 800655a:	409a      	lsls	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
 8006586:	e004      	b.n	8006592 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006588:	bf00      	nop
 800658a:	e002      	b.n	8006592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800658c:	bf00      	nop
 800658e:	e000      	b.n	8006592 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006590:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40020010 	.word	0x40020010
 800659c:	40020028 	.word	0x40020028
 80065a0:	40020040 	.word	0x40020040
 80065a4:	40020058 	.word	0x40020058
 80065a8:	40020070 	.word	0x40020070
 80065ac:	40020088 	.word	0x40020088
 80065b0:	400200a0 	.word	0x400200a0
 80065b4:	400200b8 	.word	0x400200b8
 80065b8:	40020410 	.word	0x40020410
 80065bc:	40020428 	.word	0x40020428
 80065c0:	40020440 	.word	0x40020440
 80065c4:	40020458 	.word	0x40020458
 80065c8:	40020470 	.word	0x40020470
 80065cc:	40020488 	.word	0x40020488
 80065d0:	400204a0 	.word	0x400204a0
 80065d4:	400204b8 	.word	0x400204b8

080065d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a84      	ldr	r2, [pc, #528]	; (8006808 <DMA_SetConfig+0x230>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d072      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a82      	ldr	r2, [pc, #520]	; (800680c <DMA_SetConfig+0x234>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d06d      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a81      	ldr	r2, [pc, #516]	; (8006810 <DMA_SetConfig+0x238>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d068      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a7f      	ldr	r2, [pc, #508]	; (8006814 <DMA_SetConfig+0x23c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d063      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7e      	ldr	r2, [pc, #504]	; (8006818 <DMA_SetConfig+0x240>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d05e      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a7c      	ldr	r2, [pc, #496]	; (800681c <DMA_SetConfig+0x244>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d059      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a7b      	ldr	r2, [pc, #492]	; (8006820 <DMA_SetConfig+0x248>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d054      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a79      	ldr	r2, [pc, #484]	; (8006824 <DMA_SetConfig+0x24c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d04f      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a78      	ldr	r2, [pc, #480]	; (8006828 <DMA_SetConfig+0x250>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d04a      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a76      	ldr	r2, [pc, #472]	; (800682c <DMA_SetConfig+0x254>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d045      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a75      	ldr	r2, [pc, #468]	; (8006830 <DMA_SetConfig+0x258>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d040      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a73      	ldr	r2, [pc, #460]	; (8006834 <DMA_SetConfig+0x25c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d03b      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a72      	ldr	r2, [pc, #456]	; (8006838 <DMA_SetConfig+0x260>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d036      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a70      	ldr	r2, [pc, #448]	; (800683c <DMA_SetConfig+0x264>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d031      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a6f      	ldr	r2, [pc, #444]	; (8006840 <DMA_SetConfig+0x268>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d02c      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a6d      	ldr	r2, [pc, #436]	; (8006844 <DMA_SetConfig+0x26c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d027      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6c      	ldr	r2, [pc, #432]	; (8006848 <DMA_SetConfig+0x270>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d022      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a6a      	ldr	r2, [pc, #424]	; (800684c <DMA_SetConfig+0x274>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01d      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a69      	ldr	r2, [pc, #420]	; (8006850 <DMA_SetConfig+0x278>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a67      	ldr	r2, [pc, #412]	; (8006854 <DMA_SetConfig+0x27c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a66      	ldr	r2, [pc, #408]	; (8006858 <DMA_SetConfig+0x280>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a64      	ldr	r2, [pc, #400]	; (800685c <DMA_SetConfig+0x284>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a63      	ldr	r2, [pc, #396]	; (8006860 <DMA_SetConfig+0x288>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <DMA_SetConfig+0x10a>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a61      	ldr	r2, [pc, #388]	; (8006864 <DMA_SetConfig+0x28c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <DMA_SetConfig+0x10e>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <DMA_SetConfig+0x110>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006706:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a3e      	ldr	r2, [pc, #248]	; (8006808 <DMA_SetConfig+0x230>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3d      	ldr	r2, [pc, #244]	; (800680c <DMA_SetConfig+0x234>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a3b      	ldr	r2, [pc, #236]	; (8006810 <DMA_SetConfig+0x238>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a3a      	ldr	r2, [pc, #232]	; (8006814 <DMA_SetConfig+0x23c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a38      	ldr	r2, [pc, #224]	; (8006818 <DMA_SetConfig+0x240>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a37      	ldr	r2, [pc, #220]	; (800681c <DMA_SetConfig+0x244>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a35      	ldr	r2, [pc, #212]	; (8006820 <DMA_SetConfig+0x248>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a34      	ldr	r2, [pc, #208]	; (8006824 <DMA_SetConfig+0x24c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a32      	ldr	r2, [pc, #200]	; (8006828 <DMA_SetConfig+0x250>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a31      	ldr	r2, [pc, #196]	; (800682c <DMA_SetConfig+0x254>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a2f      	ldr	r2, [pc, #188]	; (8006830 <DMA_SetConfig+0x258>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a2e      	ldr	r2, [pc, #184]	; (8006834 <DMA_SetConfig+0x25c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <DMA_SetConfig+0x260>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2b      	ldr	r2, [pc, #172]	; (800683c <DMA_SetConfig+0x264>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <DMA_SetConfig+0x268>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <DMA_SetConfig+0x1d0>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a28      	ldr	r2, [pc, #160]	; (8006844 <DMA_SetConfig+0x26c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <DMA_SetConfig+0x1d4>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <DMA_SetConfig+0x1d6>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d05a      	beq.n	8006868 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	223f      	movs	r2, #63	; 0x3f
 80067bc:	409a      	lsls	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d108      	bne.n	80067f4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067f2:	e087      	b.n	8006904 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
}
 8006804:	e07e      	b.n	8006904 <DMA_SetConfig+0x32c>
 8006806:	bf00      	nop
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8
 8006848:	58025408 	.word	0x58025408
 800684c:	5802541c 	.word	0x5802541c
 8006850:	58025430 	.word	0x58025430
 8006854:	58025444 	.word	0x58025444
 8006858:	58025458 	.word	0x58025458
 800685c:	5802546c 	.word	0x5802546c
 8006860:	58025480 	.word	0x58025480
 8006864:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a28      	ldr	r2, [pc, #160]	; (8006910 <DMA_SetConfig+0x338>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d022      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <DMA_SetConfig+0x33c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d01d      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a25      	ldr	r2, [pc, #148]	; (8006918 <DMA_SetConfig+0x340>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d018      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <DMA_SetConfig+0x344>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <DMA_SetConfig+0x348>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00e      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <DMA_SetConfig+0x34c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d009      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <DMA_SetConfig+0x350>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <DMA_SetConfig+0x2e0>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <DMA_SetConfig+0x354>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d101      	bne.n	80068bc <DMA_SetConfig+0x2e4>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <DMA_SetConfig+0x2e6>
 80068bc:	2300      	movs	r3, #0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d020      	beq.n	8006904 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2201      	movs	r2, #1
 80068cc:	409a      	lsls	r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d108      	bne.n	80068f4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	60da      	str	r2, [r3, #12]
}
 80068f2:	e007      	b.n	8006904 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	58025408 	.word	0x58025408
 8006914:	5802541c 	.word	0x5802541c
 8006918:	58025430 	.word	0x58025430
 800691c:	58025444 	.word	0x58025444
 8006920:	58025458 	.word	0x58025458
 8006924:	5802546c 	.word	0x5802546c
 8006928:	58025480 	.word	0x58025480
 800692c:	58025494 	.word	0x58025494

08006930 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a42      	ldr	r2, [pc, #264]	; (8006a48 <DMA_CalcBaseAndBitshift+0x118>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d04a      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a41      	ldr	r2, [pc, #260]	; (8006a4c <DMA_CalcBaseAndBitshift+0x11c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d045      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3f      	ldr	r2, [pc, #252]	; (8006a50 <DMA_CalcBaseAndBitshift+0x120>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d040      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a3e      	ldr	r2, [pc, #248]	; (8006a54 <DMA_CalcBaseAndBitshift+0x124>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d03b      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a3c      	ldr	r2, [pc, #240]	; (8006a58 <DMA_CalcBaseAndBitshift+0x128>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d036      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3b      	ldr	r2, [pc, #236]	; (8006a5c <DMA_CalcBaseAndBitshift+0x12c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d031      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a39      	ldr	r2, [pc, #228]	; (8006a60 <DMA_CalcBaseAndBitshift+0x130>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02c      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a38      	ldr	r2, [pc, #224]	; (8006a64 <DMA_CalcBaseAndBitshift+0x134>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d027      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a36      	ldr	r2, [pc, #216]	; (8006a68 <DMA_CalcBaseAndBitshift+0x138>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d022      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a35      	ldr	r2, [pc, #212]	; (8006a6c <DMA_CalcBaseAndBitshift+0x13c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d01d      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a33      	ldr	r2, [pc, #204]	; (8006a70 <DMA_CalcBaseAndBitshift+0x140>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d018      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a32      	ldr	r2, [pc, #200]	; (8006a74 <DMA_CalcBaseAndBitshift+0x144>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d013      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a30      	ldr	r2, [pc, #192]	; (8006a78 <DMA_CalcBaseAndBitshift+0x148>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00e      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2f      	ldr	r2, [pc, #188]	; (8006a7c <DMA_CalcBaseAndBitshift+0x14c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d009      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2d      	ldr	r2, [pc, #180]	; (8006a80 <DMA_CalcBaseAndBitshift+0x150>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <DMA_CalcBaseAndBitshift+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2c      	ldr	r2, [pc, #176]	; (8006a84 <DMA_CalcBaseAndBitshift+0x154>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d101      	bne.n	80069dc <DMA_CalcBaseAndBitshift+0xac>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <DMA_CalcBaseAndBitshift+0xae>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d024      	beq.n	8006a2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3b10      	subs	r3, #16
 80069ea:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <DMA_CalcBaseAndBitshift+0x158>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	4a24      	ldr	r2, [pc, #144]	; (8006a8c <DMA_CalcBaseAndBitshift+0x15c>)
 80069fc:	5cd3      	ldrb	r3, [r2, r3]
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d908      	bls.n	8006a1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <DMA_CalcBaseAndBitshift+0x160>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	659a      	str	r2, [r3, #88]	; 0x58
 8006a1a:	e00d      	b.n	8006a38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <DMA_CalcBaseAndBitshift+0x160>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6593      	str	r3, [r2, #88]	; 0x58
 8006a2a:	e005      	b.n	8006a38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40020010 	.word	0x40020010
 8006a4c:	40020028 	.word	0x40020028
 8006a50:	40020040 	.word	0x40020040
 8006a54:	40020058 	.word	0x40020058
 8006a58:	40020070 	.word	0x40020070
 8006a5c:	40020088 	.word	0x40020088
 8006a60:	400200a0 	.word	0x400200a0
 8006a64:	400200b8 	.word	0x400200b8
 8006a68:	40020410 	.word	0x40020410
 8006a6c:	40020428 	.word	0x40020428
 8006a70:	40020440 	.word	0x40020440
 8006a74:	40020458 	.word	0x40020458
 8006a78:	40020470 	.word	0x40020470
 8006a7c:	40020488 	.word	0x40020488
 8006a80:	400204a0 	.word	0x400204a0
 8006a84:	400204b8 	.word	0x400204b8
 8006a88:	aaaaaaab 	.word	0xaaaaaaab
 8006a8c:	0800e680 	.word	0x0800e680
 8006a90:	fffffc00 	.word	0xfffffc00

08006a94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d120      	bne.n	8006aea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d858      	bhi.n	8006b62 <DMA_CheckFifoParam+0xce>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <DMA_CheckFifoParam+0x24>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006adb 	.word	0x08006adb
 8006ac0:	08006ac9 	.word	0x08006ac9
 8006ac4:	08006b63 	.word	0x08006b63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d048      	beq.n	8006b66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ad8:	e045      	b.n	8006b66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ae2:	d142      	bne.n	8006b6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ae8:	e03f      	b.n	8006b6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	d123      	bne.n	8006b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d838      	bhi.n	8006b6e <DMA_CheckFifoParam+0xda>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <DMA_CheckFifoParam+0x70>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b15 	.word	0x08006b15
 8006b08:	08006b1b 	.word	0x08006b1b
 8006b0c:	08006b15 	.word	0x08006b15
 8006b10:	08006b2d 	.word	0x08006b2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
        break;
 8006b18:	e030      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d025      	beq.n	8006b72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b2a:	e022      	b.n	8006b72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b34:	d11f      	bne.n	8006b76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b3a:	e01c      	b.n	8006b76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d902      	bls.n	8006b4a <DMA_CheckFifoParam+0xb6>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d003      	beq.n	8006b50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b48:	e018      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b4e:	e015      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00e      	beq.n	8006b7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b60:	e00b      	b.n	8006b7a <DMA_CheckFifoParam+0xe6>
        break;
 8006b62:	bf00      	nop
 8006b64:	e00a      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        break;
 8006b66:	bf00      	nop
 8006b68:	e008      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        break;
 8006b6a:	bf00      	nop
 8006b6c:	e006      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        break;
 8006b6e:	bf00      	nop
 8006b70:	e004      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        break;
 8006b72:	bf00      	nop
 8006b74:	e002      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
        break;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <DMA_CheckFifoParam+0xe8>
    break;
 8006b7a:	bf00      	nop
    }
  }

  return status;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop

08006b8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a38      	ldr	r2, [pc, #224]	; (8006c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a36      	ldr	r2, [pc, #216]	; (8006c84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01d      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a35      	ldr	r2, [pc, #212]	; (8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a33      	ldr	r2, [pc, #204]	; (8006c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a32      	ldr	r2, [pc, #200]	; (8006c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a30      	ldr	r2, [pc, #192]	; (8006c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a2f      	ldr	r2, [pc, #188]	; (8006c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a2d      	ldr	r2, [pc, #180]	; (8006c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01a      	beq.n	8006c2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	3b08      	subs	r3, #8
 8006bfc:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	091b      	lsrs	r3, r3, #4
 8006c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4b26      	ldr	r3, [pc, #152]	; (8006ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2201      	movs	r2, #1
 8006c22:	409a      	lsls	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c28:	e024      	b.n	8006c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	3b10      	subs	r3, #16
 8006c32:	4a1e      	ldr	r2, [pc, #120]	; (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4a1c      	ldr	r2, [pc, #112]	; (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d806      	bhi.n	8006c52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d902      	bls.n	8006c52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	58025408 	.word	0x58025408
 8006c84:	5802541c 	.word	0x5802541c
 8006c88:	58025430 	.word	0x58025430
 8006c8c:	58025444 	.word	0x58025444
 8006c90:	58025458 	.word	0x58025458
 8006c94:	5802546c 	.word	0x5802546c
 8006c98:	58025480 	.word	0x58025480
 8006c9c:	58025494 	.word	0x58025494
 8006ca0:	cccccccd 	.word	0xcccccccd
 8006ca4:	16009600 	.word	0x16009600
 8006ca8:	58025880 	.word	0x58025880
 8006cac:	aaaaaaab 	.word	0xaaaaaaab
 8006cb0:	400204b8 	.word	0x400204b8
 8006cb4:	4002040f 	.word	0x4002040f
 8006cb8:	10008200 	.word	0x10008200
 8006cbc:	40020880 	.word	0x40020880

08006cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d04a      	beq.n	8006d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d847      	bhi.n	8006d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a25      	ldr	r2, [pc, #148]	; (8006d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d022      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d01d      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d018      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d013      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a1f      	ldr	r2, [pc, #124]	; (8006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00e      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d009      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d101      	bne.n	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d30:	2300      	movs	r3, #0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4b17      	ldr	r3, [pc, #92]	; (8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d48:	671a      	str	r2, [r3, #112]	; 0x70
 8006d4a:	e009      	b.n	8006d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d5e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	2201      	movs	r2, #1
 8006d66:	409a      	lsls	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	58025408 	.word	0x58025408
 8006d7c:	5802541c 	.word	0x5802541c
 8006d80:	58025430 	.word	0x58025430
 8006d84:	58025444 	.word	0x58025444
 8006d88:	58025458 	.word	0x58025458
 8006d8c:	5802546c 	.word	0x5802546c
 8006d90:	58025480 	.word	0x58025480
 8006d94:	58025494 	.word	0x58025494
 8006d98:	1600963f 	.word	0x1600963f
 8006d9c:	58025940 	.word	0x58025940
 8006da0:	1000823f 	.word	0x1000823f
 8006da4:	40020940 	.word	0x40020940

08006da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006db6:	4b86      	ldr	r3, [pc, #536]	; (8006fd0 <HAL_GPIO_Init+0x228>)
 8006db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dba:	e18c      	b.n	80070d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc8:	4013      	ands	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 817e 	beq.w	80070d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d005      	beq.n	8006dec <HAL_GPIO_Init+0x44>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d130      	bne.n	8006e4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	2203      	movs	r2, #3
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	4013      	ands	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e22:	2201      	movs	r2, #1
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	091b      	lsrs	r3, r3, #4
 8006e38:	f003 0201 	and.w	r2, r3, #1
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d017      	beq.n	8006e8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	2203      	movs	r2, #3
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d123      	bne.n	8006ede <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	08da      	lsrs	r2, r3, #3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3208      	adds	r2, #8
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	220f      	movs	r2, #15
 8006eae:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	08da      	lsrs	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	2203      	movs	r2, #3
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 0203 	and.w	r2, r3, #3
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80d8 	beq.w	80070d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f20:	4b2c      	ldr	r3, [pc, #176]	; (8006fd4 <HAL_GPIO_Init+0x22c>)
 8006f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f26:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <HAL_GPIO_Init+0x22c>)
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006f30:	4b28      	ldr	r3, [pc, #160]	; (8006fd4 <HAL_GPIO_Init+0x22c>)
 8006f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f3e:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <HAL_GPIO_Init+0x230>)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	3302      	adds	r3, #2
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	220f      	movs	r2, #15
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_GPIO_Init+0x234>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d04a      	beq.n	8007000 <HAL_GPIO_Init+0x258>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_GPIO_Init+0x238>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02b      	beq.n	8006fca <HAL_GPIO_Init+0x222>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <HAL_GPIO_Init+0x23c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d025      	beq.n	8006fc6 <HAL_GPIO_Init+0x21e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <HAL_GPIO_Init+0x240>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01f      	beq.n	8006fc2 <HAL_GPIO_Init+0x21a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <HAL_GPIO_Init+0x244>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d019      	beq.n	8006fbe <HAL_GPIO_Init+0x216>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <HAL_GPIO_Init+0x248>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_GPIO_Init+0x212>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <HAL_GPIO_Init+0x24c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00d      	beq.n	8006fb6 <HAL_GPIO_Init+0x20e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <HAL_GPIO_Init+0x250>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <HAL_GPIO_Init+0x20a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <HAL_GPIO_Init+0x254>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <HAL_GPIO_Init+0x206>
 8006faa:	2309      	movs	r3, #9
 8006fac:	e029      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fae:	230a      	movs	r3, #10
 8006fb0:	e027      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	e025      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fb6:	2306      	movs	r3, #6
 8006fb8:	e023      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fba:	2305      	movs	r3, #5
 8006fbc:	e021      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fbe:	2304      	movs	r3, #4
 8006fc0:	e01f      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e01d      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e01b      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e019      	b.n	8007002 <HAL_GPIO_Init+0x25a>
 8006fce:	bf00      	nop
 8006fd0:	58000080 	.word	0x58000080
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	58000400 	.word	0x58000400
 8006fdc:	58020000 	.word	0x58020000
 8006fe0:	58020400 	.word	0x58020400
 8006fe4:	58020800 	.word	0x58020800
 8006fe8:	58020c00 	.word	0x58020c00
 8006fec:	58021000 	.word	0x58021000
 8006ff0:	58021400 	.word	0x58021400
 8006ff4:	58021800 	.word	0x58021800
 8006ff8:	58021c00 	.word	0x58021c00
 8006ffc:	58022400 	.word	0x58022400
 8007000:	2300      	movs	r3, #0
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	f002 0203 	and.w	r2, r2, #3
 8007008:	0092      	lsls	r2, r2, #2
 800700a:	4093      	lsls	r3, r2
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4313      	orrs	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007012:	4938      	ldr	r1, [pc, #224]	; (80070f4 <HAL_GPIO_Init+0x34c>)
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	089b      	lsrs	r3, r3, #2
 8007018:	3302      	adds	r3, #2
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	43db      	mvns	r3, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4013      	ands	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800704e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	43db      	mvns	r3, r3
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	4013      	ands	r3, r2
 800705e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	43db      	mvns	r3, r3
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	4013      	ands	r3, r2
 800708a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	43db      	mvns	r3, r3
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	4013      	ands	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f ae6b 	bne.w	8006dbc <HAL_GPIO_Init+0x14>
  }
}
 80070e6:	bf00      	nop
 80070e8:	bf00      	nop
 80070ea:	3724      	adds	r7, #36	; 0x24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	58000400 	.word	0x58000400

080070f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
 8007104:	4613      	mov	r3, r2
 8007106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007108:	787b      	ldrb	r3, [r7, #1]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800710e:	887a      	ldrh	r2, [r7, #2]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007114:	e003      	b.n	800711e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	041a      	lsls	r2, r3, #16
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	619a      	str	r2, [r3, #24]
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07f      	b.n	800723e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fdd6 	bl	8001d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2224      	movs	r2, #36	; 0x24
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800717c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800718c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d107      	bne.n	80071a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	e006      	b.n	80071b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d104      	bne.n	80071c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6859      	ldr	r1, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <HAL_I2C_Init+0x11c>)
 80071d2:	430b      	orrs	r3, r1
 80071d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69d9      	ldr	r1, [r3, #28]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1a      	ldr	r2, [r3, #32]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	02008000 	.word	0x02008000

0800724c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b20      	cmp	r3, #32
 8007260:	d138      	bne.n	80072d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800726c:	2302      	movs	r3, #2
 800726e:	e032      	b.n	80072d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2224      	movs	r2, #36	; 0x24
 800727c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800729e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6819      	ldr	r1, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d139      	bne.n	800736c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007302:	2302      	movs	r3, #2
 8007304:	e033      	b.n	800736e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2224      	movs	r2, #36	; 0x24
 8007312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0201 	bic.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007384:	4b19      	ldr	r3, [pc, #100]	; (80073ec <HAL_PWREx_ConfigSupply+0x70>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b04      	cmp	r3, #4
 800738e:	d00a      	beq.n	80073a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007390:	4b16      	ldr	r3, [pc, #88]	; (80073ec <HAL_PWREx_ConfigSupply+0x70>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d001      	beq.n	80073a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e01f      	b.n	80073e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e01d      	b.n	80073e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80073a6:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_PWREx_ConfigSupply+0x70>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f023 0207 	bic.w	r2, r3, #7
 80073ae:	490f      	ldr	r1, [pc, #60]	; (80073ec <HAL_PWREx_ConfigSupply+0x70>)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80073b6:	f7fb fba9 	bl	8002b0c <HAL_GetTick>
 80073ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073bc:	e009      	b.n	80073d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073be:	f7fb fba5 	bl	8002b0c <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073cc:	d901      	bls.n	80073d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e007      	b.n	80073e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_PWREx_ConfigSupply+0x70>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073de:	d1ee      	bne.n	80073be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	58024800 	.word	0x58024800

080073f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08c      	sub	sp, #48	; 0x30
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e397      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8087 	beq.w	800751e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007410:	4b9e      	ldr	r3, [pc, #632]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800741a:	4b9c      	ldr	r3, [pc, #624]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	2b10      	cmp	r3, #16
 8007424:	d007      	beq.n	8007436 <HAL_RCC_OscConfig+0x46>
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	2b18      	cmp	r3, #24
 800742a:	d110      	bne.n	800744e <HAL_RCC_OscConfig+0x5e>
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d10b      	bne.n	800744e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007436:	4b95      	ldr	r3, [pc, #596]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d06c      	beq.n	800751c <HAL_RCC_OscConfig+0x12c>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d168      	bne.n	800751c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e371      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007456:	d106      	bne.n	8007466 <HAL_RCC_OscConfig+0x76>
 8007458:	4b8c      	ldr	r3, [pc, #560]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a8b      	ldr	r2, [pc, #556]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800745e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	e02e      	b.n	80074c4 <HAL_RCC_OscConfig+0xd4>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10c      	bne.n	8007488 <HAL_RCC_OscConfig+0x98>
 800746e:	4b87      	ldr	r3, [pc, #540]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a86      	ldr	r2, [pc, #536]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4b84      	ldr	r3, [pc, #528]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a83      	ldr	r2, [pc, #524]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e01d      	b.n	80074c4 <HAL_RCC_OscConfig+0xd4>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007490:	d10c      	bne.n	80074ac <HAL_RCC_OscConfig+0xbc>
 8007492:	4b7e      	ldr	r3, [pc, #504]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a7d      	ldr	r2, [pc, #500]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	4b7b      	ldr	r3, [pc, #492]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a7a      	ldr	r2, [pc, #488]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	e00b      	b.n	80074c4 <HAL_RCC_OscConfig+0xd4>
 80074ac:	4b77      	ldr	r3, [pc, #476]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a76      	ldr	r2, [pc, #472]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4b74      	ldr	r3, [pc, #464]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a73      	ldr	r2, [pc, #460]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d013      	beq.n	80074f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fb fb1e 	bl	8002b0c <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074d4:	f7fb fb1a 	bl	8002b0c <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b64      	cmp	r3, #100	; 0x64
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e325      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074e6:	4b69      	ldr	r3, [pc, #420]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0f0      	beq.n	80074d4 <HAL_RCC_OscConfig+0xe4>
 80074f2:	e014      	b.n	800751e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f4:	f7fb fb0a 	bl	8002b0c <HAL_GetTick>
 80074f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074fc:	f7fb fb06 	bl	8002b0c <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b64      	cmp	r3, #100	; 0x64
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e311      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800750e:	4b5f      	ldr	r3, [pc, #380]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f0      	bne.n	80074fc <HAL_RCC_OscConfig+0x10c>
 800751a:	e000      	b.n	800751e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 808a 	beq.w	8007640 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800752c:	4b57      	ldr	r3, [pc, #348]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007536:	4b55      	ldr	r3, [pc, #340]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_RCC_OscConfig+0x162>
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	2b18      	cmp	r3, #24
 8007546:	d137      	bne.n	80075b8 <HAL_RCC_OscConfig+0x1c8>
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d132      	bne.n	80075b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007552:	4b4e      	ldr	r3, [pc, #312]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_RCC_OscConfig+0x17a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e2e3      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800756a:	4b48      	ldr	r3, [pc, #288]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f023 0219 	bic.w	r2, r3, #25
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4945      	ldr	r1, [pc, #276]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007578:	4313      	orrs	r3, r2
 800757a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800757c:	f7fb fac6 	bl	8002b0c <HAL_GetTick>
 8007580:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007584:	f7fb fac2 	bl	8002b0c <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e2cd      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007596:	4b3d      	ldr	r3, [pc, #244]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f0      	beq.n	8007584 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a2:	4b3a      	ldr	r3, [pc, #232]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	061b      	lsls	r3, r3, #24
 80075b0:	4936      	ldr	r1, [pc, #216]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075b6:	e043      	b.n	8007640 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d026      	beq.n	800760e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075c0:	4b32      	ldr	r3, [pc, #200]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f023 0219 	bic.w	r2, r3, #25
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	492f      	ldr	r1, [pc, #188]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d2:	f7fb fa9b 	bl	8002b0c <HAL_GetTick>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075da:	f7fb fa97 	bl	8002b0c <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e2a2      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ec:	4b27      	ldr	r3, [pc, #156]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	4921      	ldr	r1, [pc, #132]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007608:	4313      	orrs	r3, r2
 800760a:	604b      	str	r3, [r1, #4]
 800760c:	e018      	b.n	8007640 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760e:	4b1f      	ldr	r3, [pc, #124]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761a:	f7fb fa77 	bl	8002b0c <HAL_GetTick>
 800761e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007622:	f7fb fa73 	bl	8002b0c <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e27e      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f0      	bne.n	8007622 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d06d      	beq.n	8007728 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007654:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	2b08      	cmp	r3, #8
 8007660:	d007      	beq.n	8007672 <HAL_RCC_OscConfig+0x282>
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b18      	cmp	r3, #24
 8007666:	d11e      	bne.n	80076a6 <HAL_RCC_OscConfig+0x2b6>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	2b01      	cmp	r3, #1
 8007670:	d119      	bne.n	80076a6 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007672:	4b06      	ldr	r3, [pc, #24]	; (800768c <HAL_RCC_OscConfig+0x29c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_RCC_OscConfig+0x2a0>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d004      	beq.n	8007690 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e253      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007690:	4ba3      	ldr	r3, [pc, #652]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	061b      	lsls	r3, r3, #24
 800769e:	49a0      	ldr	r1, [pc, #640]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076a4:	e040      	b.n	8007728 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d023      	beq.n	80076f6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80076ae:	4b9c      	ldr	r3, [pc, #624]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a9b      	ldr	r2, [pc, #620]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fb fa27 	bl	8002b0c <HAL_GetTick>
 80076be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80076c2:	f7fb fa23 	bl	8002b0c <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e22e      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076d4:	4b92      	ldr	r3, [pc, #584]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076e0:	4b8f      	ldr	r3, [pc, #572]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	498c      	ldr	r1, [pc, #560]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60cb      	str	r3, [r1, #12]
 80076f4:	e018      	b.n	8007728 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80076f6:	4b8a      	ldr	r3, [pc, #552]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a89      	ldr	r2, [pc, #548]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80076fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007702:	f7fb fa03 	bl	8002b0c <HAL_GetTick>
 8007706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800770a:	f7fb f9ff 	bl	8002b0c <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e20a      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800771c:	4b80      	ldr	r3, [pc, #512]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d036      	beq.n	80077a2 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d019      	beq.n	8007770 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800773c:	4b78      	ldr	r3, [pc, #480]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800773e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007740:	4a77      	ldr	r2, [pc, #476]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007748:	f7fb f9e0 	bl	8002b0c <HAL_GetTick>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007750:	f7fb f9dc 	bl	8002b0c <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e1e7      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007762:	4b6f      	ldr	r3, [pc, #444]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0f0      	beq.n	8007750 <HAL_RCC_OscConfig+0x360>
 800776e:	e018      	b.n	80077a2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007770:	4b6b      	ldr	r3, [pc, #428]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007774:	4a6a      	ldr	r2, [pc, #424]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777c:	f7fb f9c6 	bl	8002b0c <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007784:	f7fb f9c2 	bl	8002b0c <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e1cd      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007796:	4b62      	ldr	r3, [pc, #392]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d036      	beq.n	800781c <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d019      	beq.n	80077ea <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077b6:	4b5a      	ldr	r3, [pc, #360]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a59      	ldr	r2, [pc, #356]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80077bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077c2:	f7fb f9a3 	bl	8002b0c <HAL_GetTick>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80077ca:	f7fb f99f 	bl	8002b0c <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e1aa      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077dc:	4b50      	ldr	r3, [pc, #320]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x3da>
 80077e8:	e018      	b.n	800781c <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077ea:	4b4d      	ldr	r3, [pc, #308]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a4c      	ldr	r2, [pc, #304]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80077f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077f6:	f7fb f989 	bl	8002b0c <HAL_GetTick>
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80077fe:	f7fb f985 	bl	8002b0c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e190      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007810:	4b43      	ldr	r3, [pc, #268]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8085 	beq.w	8007934 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800782a:	4b3e      	ldr	r3, [pc, #248]	; (8007924 <HAL_RCC_OscConfig+0x534>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a3d      	ldr	r2, [pc, #244]	; (8007924 <HAL_RCC_OscConfig+0x534>)
 8007830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007836:	f7fb f969 	bl	8002b0c <HAL_GetTick>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800783e:	f7fb f965 	bl	8002b0c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b64      	cmp	r3, #100	; 0x64
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e170      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007850:	4b34      	ldr	r3, [pc, #208]	; (8007924 <HAL_RCC_OscConfig+0x534>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0f0      	beq.n	800783e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d106      	bne.n	8007872 <HAL_RCC_OscConfig+0x482>
 8007864:	4b2e      	ldr	r3, [pc, #184]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007868:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800786a:	f043 0301 	orr.w	r3, r3, #1
 800786e:	6713      	str	r3, [r2, #112]	; 0x70
 8007870:	e02d      	b.n	80078ce <HAL_RCC_OscConfig+0x4de>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10c      	bne.n	8007894 <HAL_RCC_OscConfig+0x4a4>
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787e:	4a28      	ldr	r2, [pc, #160]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007880:	f023 0301 	bic.w	r3, r3, #1
 8007884:	6713      	str	r3, [r2, #112]	; 0x70
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	4a25      	ldr	r2, [pc, #148]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800788c:	f023 0304 	bic.w	r3, r3, #4
 8007890:	6713      	str	r3, [r2, #112]	; 0x70
 8007892:	e01c      	b.n	80078ce <HAL_RCC_OscConfig+0x4de>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2b05      	cmp	r3, #5
 800789a:	d10c      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4c6>
 800789c:	4b20      	ldr	r3, [pc, #128]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 800789e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a0:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078a2:	f043 0304 	orr.w	r3, r3, #4
 80078a6:	6713      	str	r3, [r2, #112]	; 0x70
 80078a8:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	4a1c      	ldr	r2, [pc, #112]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
 80078b4:	e00b      	b.n	80078ce <HAL_RCC_OscConfig+0x4de>
 80078b6:	4b1a      	ldr	r3, [pc, #104]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	4a19      	ldr	r2, [pc, #100]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078bc:	f023 0301 	bic.w	r3, r3, #1
 80078c0:	6713      	str	r3, [r2, #112]	; 0x70
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078c8:	f023 0304 	bic.w	r3, r3, #4
 80078cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d015      	beq.n	8007902 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d6:	f7fb f919 	bl	8002b0c <HAL_GetTick>
 80078da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fb f915 	bl	8002b0c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e11e      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <HAL_RCC_OscConfig+0x530>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0ee      	beq.n	80078de <HAL_RCC_OscConfig+0x4ee>
 8007900:	e018      	b.n	8007934 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007902:	f7fb f903 	bl	8002b0c <HAL_GetTick>
 8007906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007908:	e00e      	b.n	8007928 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800790a:	f7fb f8ff 	bl	8002b0c <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	; 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d905      	bls.n	8007928 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e108      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
 8007920:	58024400 	.word	0x58024400
 8007924:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007928:	4b84      	ldr	r3, [pc, #528]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1ea      	bne.n	800790a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80f9 	beq.w	8007b30 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800793e:	4b7f      	ldr	r3, [pc, #508]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007946:	2b18      	cmp	r3, #24
 8007948:	f000 80b4 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b02      	cmp	r3, #2
 8007952:	f040 8095 	bne.w	8007a80 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007956:	4b79      	ldr	r3, [pc, #484]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a78      	ldr	r2, [pc, #480]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 800795c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007962:	f7fb f8d3 	bl	8002b0c <HAL_GetTick>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800796a:	f7fb f8cf 	bl	8002b0c <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e0da      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800797c:	4b6f      	ldr	r3, [pc, #444]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007988:	4b6c      	ldr	r3, [pc, #432]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 800798a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800798c:	4b6c      	ldr	r3, [pc, #432]	; (8007b40 <HAL_RCC_OscConfig+0x750>)
 800798e:	4013      	ands	r3, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007998:	0112      	lsls	r2, r2, #4
 800799a:	430a      	orrs	r2, r1
 800799c:	4967      	ldr	r1, [pc, #412]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	628b      	str	r3, [r1, #40]	; 0x28
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a6:	3b01      	subs	r3, #1
 80079a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	3b01      	subs	r3, #1
 80079b2:	025b      	lsls	r3, r3, #9
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	3b01      	subs	r3, #1
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ca:	3b01      	subs	r3, #1
 80079cc:	061b      	lsls	r3, r3, #24
 80079ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079d2:	495a      	ldr	r1, [pc, #360]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80079d8:	4b58      	ldr	r3, [pc, #352]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	4a57      	ldr	r2, [pc, #348]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079e4:	4b55      	ldr	r3, [pc, #340]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e8:	4b56      	ldr	r3, [pc, #344]	; (8007b44 <HAL_RCC_OscConfig+0x754>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80079f0:	00d2      	lsls	r2, r2, #3
 80079f2:	4952      	ldr	r1, [pc, #328]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80079f8:	4b50      	ldr	r3, [pc, #320]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	f023 020c 	bic.w	r2, r3, #12
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	494d      	ldr	r1, [pc, #308]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a0a:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	f023 0202 	bic.w	r2, r3, #2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	4949      	ldr	r1, [pc, #292]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a1c:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	4a46      	ldr	r2, [pc, #280]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a28:	4b44      	ldr	r3, [pc, #272]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	4a43      	ldr	r2, [pc, #268]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a34:	4b41      	ldr	r3, [pc, #260]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a40      	ldr	r2, [pc, #256]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007a40:	4b3e      	ldr	r3, [pc, #248]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a3d      	ldr	r2, [pc, #244]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a4c:	4b3b      	ldr	r3, [pc, #236]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a3a      	ldr	r2, [pc, #232]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a58:	f7fb f858 	bl	8002b0c <HAL_GetTick>
 8007a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a60:	f7fb f854 	bl	8002b0c <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e05f      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a72:	4b32      	ldr	r3, [pc, #200]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f0      	beq.n	8007a60 <HAL_RCC_OscConfig+0x670>
 8007a7e:	e057      	b.n	8007b30 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a80:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fb f83e 	bl	8002b0c <HAL_GetTick>
 8007a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a94:	f7fb f83a 	bl	8002b0c <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e045      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007aa6:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f0      	bne.n	8007a94 <HAL_RCC_OscConfig+0x6a4>
 8007ab2:	e03d      	b.n	8007b30 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ab4:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007aba:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <HAL_RCC_OscConfig+0x74c>)
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d031      	beq.n	8007b2c <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f003 0203 	and.w	r2, r3, #3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d12a      	bne.n	8007b2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d122      	bne.n	8007b2c <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d11a      	bne.n	8007b2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	0a5b      	lsrs	r3, r3, #9
 8007afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d111      	bne.n	8007b2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d108      	bne.n	8007b2c <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3730      	adds	r7, #48	; 0x30
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	fffffc0c 	.word	0xfffffc0c
 8007b44:	ffff0007 	.word	0xffff0007

08007b48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e19c      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b5c:	4b8a      	ldr	r3, [pc, #552]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 030f 	and.w	r3, r3, #15
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d910      	bls.n	8007b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6a:	4b87      	ldr	r3, [pc, #540]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 020f 	bic.w	r2, r3, #15
 8007b72:	4985      	ldr	r1, [pc, #532]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b83      	ldr	r3, [pc, #524]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e184      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d010      	beq.n	8007bba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	4b7b      	ldr	r3, [pc, #492]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d908      	bls.n	8007bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ba8:	4b78      	ldr	r3, [pc, #480]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	4975      	ldr	r1, [pc, #468]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d010      	beq.n	8007be8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695a      	ldr	r2, [r3, #20]
 8007bca:	4b70      	ldr	r3, [pc, #448]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d908      	bls.n	8007be8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007bd6:	4b6d      	ldr	r3, [pc, #436]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	496a      	ldr	r1, [pc, #424]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d010      	beq.n	8007c16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	699a      	ldr	r2, [r3, #24]
 8007bf8:	4b64      	ldr	r3, [pc, #400]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d908      	bls.n	8007c16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c04:	4b61      	ldr	r3, [pc, #388]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	495e      	ldr	r1, [pc, #376]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d010      	beq.n	8007c44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69da      	ldr	r2, [r3, #28]
 8007c26:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d908      	bls.n	8007c44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007c32:	4b56      	ldr	r3, [pc, #344]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	4953      	ldr	r1, [pc, #332]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d010      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	4b4d      	ldr	r3, [pc, #308]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d908      	bls.n	8007c72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c60:	4b4a      	ldr	r3, [pc, #296]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f023 020f 	bic.w	r2, r3, #15
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	4947      	ldr	r1, [pc, #284]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d055      	beq.n	8007d2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c7e:	4b43      	ldr	r3, [pc, #268]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	4940      	ldr	r1, [pc, #256]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c98:	4b3c      	ldr	r3, [pc, #240]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d121      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e0f6      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d107      	bne.n	8007cc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cb0:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d115      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e0ea      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d107      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cc8:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0de      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cd8:	4b2c      	ldr	r3, [pc, #176]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e0d6      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ce8:	4b28      	ldr	r3, [pc, #160]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	f023 0207 	bic.w	r2, r3, #7
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4925      	ldr	r1, [pc, #148]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfa:	f7fa ff07 	bl	8002b0c <HAL_GetTick>
 8007cfe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d00:	e00a      	b.n	8007d18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d02:	f7fa ff03 	bl	8002b0c <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e0be      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d18:	4b1c      	ldr	r3, [pc, #112]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	00db      	lsls	r3, r3, #3
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d1eb      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d208      	bcs.n	8007d58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f023 020f 	bic.w	r2, r3, #15
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	490e      	ldr	r1, [pc, #56]	; (8007d8c <HAL_RCC_ClockConfig+0x244>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d58:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d214      	bcs.n	8007d90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f023 020f 	bic.w	r2, r3, #15
 8007d6e:	4906      	ldr	r1, [pc, #24]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d76:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <HAL_RCC_ClockConfig+0x240>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d005      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e086      	b.n	8007e96 <HAL_RCC_ClockConfig+0x34e>
 8007d88:	52002000 	.word	0x52002000
 8007d8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d010      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	4b3f      	ldr	r3, [pc, #252]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d208      	bcs.n	8007dbe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007dac:	4b3c      	ldr	r3, [pc, #240]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	4939      	ldr	r1, [pc, #228]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695a      	ldr	r2, [r3, #20]
 8007dce:	4b34      	ldr	r3, [pc, #208]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d208      	bcs.n	8007dec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dda:	4b31      	ldr	r3, [pc, #196]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	492e      	ldr	r1, [pc, #184]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d010      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d208      	bcs.n	8007e1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	4922      	ldr	r1, [pc, #136]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	69da      	ldr	r2, [r3, #28]
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d208      	bcs.n	8007e48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	4917      	ldr	r1, [pc, #92]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e48:	f000 f834 	bl	8007eb4 <HAL_RCC_GetSysClockFreq>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	4912      	ldr	r1, [pc, #72]	; (8007ea4 <HAL_RCC_ClockConfig+0x35c>)
 8007e5a:	5ccb      	ldrb	r3, [r1, r3]
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	fa22 f303 	lsr.w	r3, r2, r3
 8007e64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e66:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <HAL_RCC_ClockConfig+0x358>)
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <HAL_RCC_ClockConfig+0x35c>)
 8007e70:	5cd3      	ldrb	r3, [r2, r3]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_RCC_ClockConfig+0x360>)
 8007e7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <HAL_RCC_ClockConfig+0x364>)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <HAL_RCC_ClockConfig+0x368>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fa fdf4 	bl	8002a78 <HAL_InitTick>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	0800e670 	.word	0x0800e670
 8007ea8:	20000004 	.word	0x20000004
 8007eac:	20000000 	.word	0x20000000
 8007eb0:	20000008 	.word	0x20000008

08007eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b089      	sub	sp, #36	; 0x24
 8007eb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eba:	4bb3      	ldr	r3, [pc, #716]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ec2:	2b18      	cmp	r3, #24
 8007ec4:	f200 8155 	bhi.w	8008172 <HAL_RCC_GetSysClockFreq+0x2be>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f35 	.word	0x08007f35
 8007ed4:	08008173 	.word	0x08008173
 8007ed8:	08008173 	.word	0x08008173
 8007edc:	08008173 	.word	0x08008173
 8007ee0:	08008173 	.word	0x08008173
 8007ee4:	08008173 	.word	0x08008173
 8007ee8:	08008173 	.word	0x08008173
 8007eec:	08008173 	.word	0x08008173
 8007ef0:	08007f5b 	.word	0x08007f5b
 8007ef4:	08008173 	.word	0x08008173
 8007ef8:	08008173 	.word	0x08008173
 8007efc:	08008173 	.word	0x08008173
 8007f00:	08008173 	.word	0x08008173
 8007f04:	08008173 	.word	0x08008173
 8007f08:	08008173 	.word	0x08008173
 8007f0c:	08008173 	.word	0x08008173
 8007f10:	08007f61 	.word	0x08007f61
 8007f14:	08008173 	.word	0x08008173
 8007f18:	08008173 	.word	0x08008173
 8007f1c:	08008173 	.word	0x08008173
 8007f20:	08008173 	.word	0x08008173
 8007f24:	08008173 	.word	0x08008173
 8007f28:	08008173 	.word	0x08008173
 8007f2c:	08008173 	.word	0x08008173
 8007f30:	08007f67 	.word	0x08007f67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f34:	4b94      	ldr	r3, [pc, #592]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d009      	beq.n	8007f54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f40:	4b91      	ldr	r3, [pc, #580]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	08db      	lsrs	r3, r3, #3
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	4a90      	ldr	r2, [pc, #576]	; (800818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007f52:	e111      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f54:	4b8d      	ldr	r3, [pc, #564]	; (800818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f56:	61bb      	str	r3, [r7, #24]
    break;
 8007f58:	e10e      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007f5a:	4b8d      	ldr	r3, [pc, #564]	; (8008190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f5c:	61bb      	str	r3, [r7, #24]
    break;
 8007f5e:	e10b      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007f60:	4b8c      	ldr	r3, [pc, #560]	; (8008194 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f62:	61bb      	str	r3, [r7, #24]
    break;
 8007f64:	e108      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f66:	4b88      	ldr	r3, [pc, #544]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007f70:	4b85      	ldr	r3, [pc, #532]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	091b      	lsrs	r3, r3, #4
 8007f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f7c:	4b82      	ldr	r3, [pc, #520]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f86:	4b80      	ldr	r3, [pc, #512]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	fb02 f303 	mul.w	r3, r2, r3
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80e1 	beq.w	800816c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	f000 8083 	beq.w	80080b8 <HAL_RCC_GetSysClockFreq+0x204>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	f200 80a1 	bhi.w	80080fc <HAL_RCC_GetSysClockFreq+0x248>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_RCC_GetSysClockFreq+0x114>
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d056      	beq.n	8008074 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007fc6:	e099      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fc8:	4b6f      	ldr	r3, [pc, #444]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d02d      	beq.n	8008030 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fd4:	4b6c      	ldr	r3, [pc, #432]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	08db      	lsrs	r3, r3, #3
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	4a6b      	ldr	r2, [pc, #428]	; (800818c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffe:	4b62      	ldr	r3, [pc, #392]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800800e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008012:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800801e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800802e:	e087      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800819c <HAL_RCC_GetSysClockFreq+0x2e8>
 800803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008042:	4b51      	ldr	r3, [pc, #324]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	ed97 6a02 	vldr	s12, [r7, #8]
 8008056:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008072:	e065      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80081a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008086:	4b40      	ldr	r3, [pc, #256]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	ed97 6a02 	vldr	s12, [r7, #8]
 800809a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008198 <HAL_RCC_GetSysClockFreq+0x2e4>
 800809e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080b6:	e043      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80081a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ca:	4b2f      	ldr	r3, [pc, #188]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080da:	ed97 6a02 	vldr	s12, [r7, #8]
 80080de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008198 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080fa:	e021      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	eddf 6a26 	vldr	s13, [pc, #152]	; 80081a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810e:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008122:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008198 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800813e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	0a5b      	lsrs	r3, r3, #9
 8008146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814a:	3301      	adds	r3, #1
 800814c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	ee07 3a90 	vmov	s15, r3
 8008154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008158:	edd7 6a07 	vldr	s13, [r7, #28]
 800815c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008164:	ee17 3a90 	vmov	r3, s15
 8008168:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800816a:	e005      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	61bb      	str	r3, [r7, #24]
    break;
 8008170:	e002      	b.n	8008178 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008172:	4b07      	ldr	r3, [pc, #28]	; (8008190 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008174:	61bb      	str	r3, [r7, #24]
    break;
 8008176:	bf00      	nop
  }

  return sysclockfreq;
 8008178:	69bb      	ldr	r3, [r7, #24]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3724      	adds	r7, #36	; 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
 800818c:	03d09000 	.word	0x03d09000
 8008190:	003d0900 	.word	0x003d0900
 8008194:	017d7840 	.word	0x017d7840
 8008198:	46000000 	.word	0x46000000
 800819c:	4c742400 	.word	0x4c742400
 80081a0:	4a742400 	.word	0x4a742400
 80081a4:	4bbebc20 	.word	0x4bbebc20

080081a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081ae:	f7ff fe81 	bl	8007eb4 <HAL_RCC_GetSysClockFreq>
 80081b2:	4602      	mov	r2, r0
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	0a1b      	lsrs	r3, r3, #8
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	490f      	ldr	r1, [pc, #60]	; (80081fc <HAL_RCC_GetHCLKFreq+0x54>)
 80081c0:	5ccb      	ldrb	r3, [r1, r3]
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081cc:	4b0a      	ldr	r3, [pc, #40]	; (80081f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <HAL_RCC_GetHCLKFreq+0x54>)
 80081d6:	5cd3      	ldrb	r3, [r2, r3]
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	fa22 f303 	lsr.w	r3, r2, r3
 80081e2:	4a07      	ldr	r2, [pc, #28]	; (8008200 <HAL_RCC_GetHCLKFreq+0x58>)
 80081e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081e6:	4a07      	ldr	r2, [pc, #28]	; (8008204 <HAL_RCC_GetHCLKFreq+0x5c>)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <HAL_RCC_GetHCLKFreq+0x58>)
 80081ee:	681b      	ldr	r3, [r3, #0]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	58024400 	.word	0x58024400
 80081fc:	0800e670 	.word	0x0800e670
 8008200:	20000004 	.word	0x20000004
 8008204:	20000000 	.word	0x20000000

08008208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800820c:	f7ff ffcc 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b06      	ldr	r3, [pc, #24]	; (800822c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	091b      	lsrs	r3, r3, #4
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4904      	ldr	r1, [pc, #16]	; (8008230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008228:	4618      	mov	r0, r3
 800822a:	bd80      	pop	{r7, pc}
 800822c:	58024400 	.word	0x58024400
 8008230:	0800e670 	.word	0x0800e670

08008234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008238:	f7ff ffb6 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 800823c:	4602      	mov	r2, r0
 800823e:	4b06      	ldr	r3, [pc, #24]	; (8008258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	4904      	ldr	r1, [pc, #16]	; (800825c <HAL_RCC_GetPCLK2Freq+0x28>)
 800824a:	5ccb      	ldrb	r3, [r1, r3]
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	58024400 	.word	0x58024400
 800825c:	0800e670 	.word	0x0800e670

08008260 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008268:	2300      	movs	r3, #0
 800826a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800826c:	2300      	movs	r3, #0
 800826e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d03f      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008284:	d02a      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800828a:	d824      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800828c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008290:	d018      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008296:	d81e      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800829c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a0:	d007      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80082a2:	e018      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a4:	4bab      	ldr	r3, [pc, #684]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4aaa      	ldr	r2, [pc, #680]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80082b0:	e015      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3304      	adds	r3, #4
 80082b6:	2102      	movs	r1, #2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f001 feff 	bl	800a0bc <RCCEx_PLL2_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80082c2:	e00c      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	2102      	movs	r1, #2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 ffa8 	bl	800a220 <RCCEx_PLL3_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80082d4:	e003      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]
      break;
 80082da:	e000      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80082dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80082e4:	4b9b      	ldr	r3, [pc, #620]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f0:	4998      	ldr	r1, [pc, #608]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	650b      	str	r3, [r1, #80]	; 0x50
 80082f6:	e001      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d03d      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	2b04      	cmp	r3, #4
 800830e:	d826      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	0800832d 	.word	0x0800832d
 800831c:	0800833b 	.word	0x0800833b
 8008320:	0800834d 	.word	0x0800834d
 8008324:	08008365 	.word	0x08008365
 8008328:	08008365 	.word	0x08008365
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800832c:	4b89      	ldr	r3, [pc, #548]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	4a88      	ldr	r2, [pc, #544]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008338:	e015      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f001 febb 	bl	800a0bc <RCCEx_PLL2_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800834a:	e00c      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f001 ff64 	bl	800a220 <RCCEx_PLL3_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800835c:	e003      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
      break;
 8008362:	e000      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800836c:	4b79      	ldr	r3, [pc, #484]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800836e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008370:	f023 0207 	bic.w	r2, r3, #7
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	4976      	ldr	r1, [pc, #472]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800837a:	4313      	orrs	r3, r2
 800837c:	650b      	str	r3, [r1, #80]	; 0x50
 800837e:	e001      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838c:	2b00      	cmp	r3, #0
 800838e:	d051      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008396:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800839a:	d036      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800839c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80083a0:	d830      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80083a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083a6:	d032      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80083a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ac:	d82a      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80083ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083b2:	d02e      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80083b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083b8:	d824      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80083ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083be:	d018      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80083c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083c4:	d81e      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80083ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ce:	d007      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80083d0:	e018      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d2:	4b60      	ldr	r3, [pc, #384]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	4a5f      	ldr	r2, [pc, #380]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083de:	e019      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 fe68 	bl	800a0bc <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083f0:	e010      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3324      	adds	r3, #36	; 0x24
 80083f6:	2100      	movs	r1, #0
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 ff11 	bl	800a220 <RCCEx_PLL3_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008402:	e007      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
      break;
 8008408:	e004      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800841a:	4b4e      	ldr	r3, [pc, #312]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008428:	494a      	ldr	r1, [pc, #296]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800842a:	4313      	orrs	r3, r2
 800842c:	658b      	str	r3, [r1, #88]	; 0x58
 800842e:	e001      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843c:	2b00      	cmp	r3, #0
 800843e:	d051      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008446:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800844a:	d036      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800844c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008450:	d830      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008456:	d032      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800845c:	d82a      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800845e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008462:	d02e      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008464:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008468:	d824      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800846a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846e:	d018      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008474:	d81e      	bhi.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800847a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800847e:	d007      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008480:	e018      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008482:	4b34      	ldr	r3, [pc, #208]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	4a33      	ldr	r2, [pc, #204]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800848c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800848e:	e019      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3304      	adds	r3, #4
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fe10 	bl	800a0bc <RCCEx_PLL2_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084a0:	e010      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3324      	adds	r3, #36	; 0x24
 80084a6:	2100      	movs	r1, #0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 feb9 	bl	800a220 <RCCEx_PLL3_Config>
 80084ae:	4603      	mov	r3, r0
 80084b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084b2:	e007      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	75fb      	strb	r3, [r7, #23]
      break;
 80084b8:	e004      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80084ba:	bf00      	nop
 80084bc:	e002      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80084be:	bf00      	nop
 80084c0:	e000      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80084c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084ca:	4b22      	ldr	r3, [pc, #136]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084d8:	491e      	ldr	r1, [pc, #120]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	658b      	str	r3, [r1, #88]	; 0x58
 80084de:	e001      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d035      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d01c      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d817      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d00c      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d813      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d016      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008508:	2b10      	cmp	r3, #16
 800850a:	d10f      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850c:	4b11      	ldr	r3, [pc, #68]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4a10      	ldr	r2, [pc, #64]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008518:	e00e      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3304      	adds	r3, #4
 800851e:	2102      	movs	r1, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fdcb 	bl	800a0bc <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800852a:	e005      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10c      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008542:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854a:	4902      	ldr	r1, [pc, #8]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800854c:	4313      	orrs	r3, r2
 800854e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008550:	e004      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008552:	bf00      	nop
 8008554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d047      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008570:	d030      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008576:	d82a      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800857c:	d02c      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800857e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008582:	d824      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008588:	d018      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800858a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800858e:	d81e      	bhi.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008598:	d007      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800859a:	e018      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859c:	4bac      	ldr	r3, [pc, #688]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	4aab      	ldr	r2, [pc, #684]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085a8:	e017      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3304      	adds	r3, #4
 80085ae:	2100      	movs	r1, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fd83 	bl	800a0bc <RCCEx_PLL2_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085ba:	e00e      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fe2c 	bl	800a220 <RCCEx_PLL3_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085cc:	e005      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75fb      	strb	r3, [r7, #23]
      break;
 80085d2:	e002      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80085d4:	bf00      	nop
 80085d6:	e000      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80085d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d109      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085e0:	4b9b      	ldr	r3, [pc, #620]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ec:	4998      	ldr	r1, [pc, #608]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	650b      	str	r3, [r1, #80]	; 0x50
 80085f2:	e001      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d049      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800860c:	d02e      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800860e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008612:	d828      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008618:	d02a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800861a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800861e:	d822      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008624:	d026      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800862a:	d81c      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800862c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008630:	d010      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008636:	d816      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01d      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800863c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008640:	d111      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3304      	adds	r3, #4
 8008646:	2101      	movs	r1, #1
 8008648:	4618      	mov	r0, r3
 800864a:	f001 fd37 	bl	800a0bc <RCCEx_PLL2_Config>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008652:	e012      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	2101      	movs	r1, #1
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fde0 	bl	800a220 <RCCEx_PLL3_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008664:	e009      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	75fb      	strb	r3, [r7, #23]
      break;
 800866a:	e006      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800866c:	bf00      	nop
 800866e:	e004      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008670:	bf00      	nop
 8008672:	e002      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008680:	4b73      	ldr	r3, [pc, #460]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800868c:	4970      	ldr	r1, [pc, #448]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800868e:	4313      	orrs	r3, r2
 8008690:	650b      	str	r3, [r1, #80]	; 0x50
 8008692:	e001      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d04b      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ae:	d02e      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80086b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086b4:	d828      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ba:	d02a      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80086bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c0:	d822      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80086c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086c6:	d026      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80086c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086cc:	d81c      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d2:	d010      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80086d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d8:	d816      	bhi.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01d      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80086de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e2:	d111      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3304      	adds	r3, #4
 80086e8:	2101      	movs	r1, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fce6 	bl	800a0bc <RCCEx_PLL2_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80086f4:	e012      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3324      	adds	r3, #36	; 0x24
 80086fa:	2101      	movs	r1, #1
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fd8f 	bl	800a220 <RCCEx_PLL3_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008706:	e009      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
      break;
 800870c:	e006      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800870e:	bf00      	nop
 8008710:	e004      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800871a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008722:	4b4b      	ldr	r3, [pc, #300]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008730:	4947      	ldr	r1, [pc, #284]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008732:	4313      	orrs	r3, r2
 8008734:	658b      	str	r3, [r1, #88]	; 0x58
 8008736:	e001      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d02f      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800874c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008750:	d00e      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008756:	d814      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d015      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008760:	d10f      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008762:	4b3b      	ldr	r3, [pc, #236]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	4a3a      	ldr	r2, [pc, #232]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800876e:	e00c      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	2101      	movs	r1, #1
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fca0 	bl	800a0bc <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008780:	e003      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	75fb      	strb	r3, [r7, #23]
      break;
 8008786:	e000      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008790:	4b2f      	ldr	r3, [pc, #188]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879c:	492c      	ldr	r1, [pc, #176]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	650b      	str	r3, [r1, #80]	; 0x50
 80087a2:	e001      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d032      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d81b      	bhi.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087fb 	.word	0x080087fb
 80087c8:	080087d5 	.word	0x080087d5
 80087cc:	080087e3 	.word	0x080087e3
 80087d0:	080087fb 	.word	0x080087fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d4:	4b1e      	ldr	r3, [pc, #120]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	4a1d      	ldr	r2, [pc, #116]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80087da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087e0:	e00c      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3304      	adds	r3, #4
 80087e6:	2102      	movs	r1, #2
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 fc67 	bl	800a0bc <RCCEx_PLL2_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087f2:	e003      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]
      break;
 80087f8:	e000      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80087fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008802:	4b13      	ldr	r3, [pc, #76]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008806:	f023 0203 	bic.w	r2, r3, #3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880e:	4910      	ldr	r1, [pc, #64]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008810:	4313      	orrs	r3, r2
 8008812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008814:	e001      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 808a 	beq.w	800893c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a09      	ldr	r2, [pc, #36]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800882e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008834:	f7fa f96a 	bl	8002b0c <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800883a:	e00d      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883c:	f7fa f966 	bl	8002b0c <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b64      	cmp	r3, #100	; 0x64
 8008848:	d906      	bls.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	75fb      	strb	r3, [r7, #23]
        break;
 800884e:	e009      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008850:	58024400 	.word	0x58024400
 8008854:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008858:	4bb9      	ldr	r3, [pc, #740]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0eb      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d166      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800886a:	4bb6      	ldr	r3, [pc, #728]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800886c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008874:	4053      	eors	r3, r2
 8008876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800887a:	2b00      	cmp	r3, #0
 800887c:	d013      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800887e:	4bb1      	ldr	r3, [pc, #708]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008886:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008888:	4bae      	ldr	r3, [pc, #696]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	4aad      	ldr	r2, [pc, #692]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008894:	4bab      	ldr	r3, [pc, #684]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	4aaa      	ldr	r2, [pc, #680]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800889a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800889e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80088a0:	4aa8      	ldr	r2, [pc, #672]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b0:	d115      	bne.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b2:	f7fa f92b 	bl	8002b0c <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088b8:	e00b      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ba:	f7fa f927 	bl	8002b0c <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d902      	bls.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
            break;
 80088d0:	e005      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088d2:	4b9c      	ldr	r3, [pc, #624]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0ed      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d126      	bne.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088f2:	d10d      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80088f4:	4b93      	ldr	r3, [pc, #588]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008902:	0919      	lsrs	r1, r3, #4
 8008904:	4b90      	ldr	r3, [pc, #576]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008906:	400b      	ands	r3, r1
 8008908:	498e      	ldr	r1, [pc, #568]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800890a:	4313      	orrs	r3, r2
 800890c:	610b      	str	r3, [r1, #16]
 800890e:	e005      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008910:	4b8c      	ldr	r3, [pc, #560]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	4a8b      	ldr	r2, [pc, #556]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008916:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800891a:	6113      	str	r3, [r2, #16]
 800891c:	4b89      	ldr	r3, [pc, #548]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800891e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800892a:	4986      	ldr	r1, [pc, #536]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800892c:	4313      	orrs	r3, r2
 800892e:	670b      	str	r3, [r1, #112]	; 0x70
 8008930:	e004      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	75bb      	strb	r3, [r7, #22]
 8008936:	e001      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d07e      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800894c:	2b28      	cmp	r3, #40	; 0x28
 800894e:	d867      	bhi.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008950:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	08008a27 	.word	0x08008a27
 800895c:	08008a21 	.word	0x08008a21
 8008960:	08008a21 	.word	0x08008a21
 8008964:	08008a21 	.word	0x08008a21
 8008968:	08008a21 	.word	0x08008a21
 800896c:	08008a21 	.word	0x08008a21
 8008970:	08008a21 	.word	0x08008a21
 8008974:	08008a21 	.word	0x08008a21
 8008978:	080089fd 	.word	0x080089fd
 800897c:	08008a21 	.word	0x08008a21
 8008980:	08008a21 	.word	0x08008a21
 8008984:	08008a21 	.word	0x08008a21
 8008988:	08008a21 	.word	0x08008a21
 800898c:	08008a21 	.word	0x08008a21
 8008990:	08008a21 	.word	0x08008a21
 8008994:	08008a21 	.word	0x08008a21
 8008998:	08008a0f 	.word	0x08008a0f
 800899c:	08008a21 	.word	0x08008a21
 80089a0:	08008a21 	.word	0x08008a21
 80089a4:	08008a21 	.word	0x08008a21
 80089a8:	08008a21 	.word	0x08008a21
 80089ac:	08008a21 	.word	0x08008a21
 80089b0:	08008a21 	.word	0x08008a21
 80089b4:	08008a21 	.word	0x08008a21
 80089b8:	08008a27 	.word	0x08008a27
 80089bc:	08008a21 	.word	0x08008a21
 80089c0:	08008a21 	.word	0x08008a21
 80089c4:	08008a21 	.word	0x08008a21
 80089c8:	08008a21 	.word	0x08008a21
 80089cc:	08008a21 	.word	0x08008a21
 80089d0:	08008a21 	.word	0x08008a21
 80089d4:	08008a21 	.word	0x08008a21
 80089d8:	08008a27 	.word	0x08008a27
 80089dc:	08008a21 	.word	0x08008a21
 80089e0:	08008a21 	.word	0x08008a21
 80089e4:	08008a21 	.word	0x08008a21
 80089e8:	08008a21 	.word	0x08008a21
 80089ec:	08008a21 	.word	0x08008a21
 80089f0:	08008a21 	.word	0x08008a21
 80089f4:	08008a21 	.word	0x08008a21
 80089f8:	08008a27 	.word	0x08008a27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3304      	adds	r3, #4
 8008a00:	2101      	movs	r1, #1
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fb5a 	bl	800a0bc <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a0c:	e00c      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3324      	adds	r3, #36	; 0x24
 8008a12:	2101      	movs	r1, #1
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 fc03 	bl	800a220 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a1e:	e003      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
      break;
 8008a24:	e000      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8008a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a2e:	4b45      	ldr	r3, [pc, #276]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3a:	4942      	ldr	r1, [pc, #264]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a40:	e001      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d037      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d820      	bhi.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008aa3 	.word	0x08008aa3
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008a8b 	.word	0x08008a8b
 8008a6c:	08008aa3 	.word	0x08008aa3
 8008a70:	08008aa3 	.word	0x08008aa3
 8008a74:	08008aa3 	.word	0x08008aa3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f001 fb1c 	bl	800a0bc <RCCEx_PLL2_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a88:	e00c      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3324      	adds	r3, #36	; 0x24
 8008a8e:	2101      	movs	r1, #1
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fbc5 	bl	800a220 <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a9a:	e003      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa0:	e000      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8008aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008aaa:	4b26      	ldr	r3, [pc, #152]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	f023 0207 	bic.w	r2, r3, #7
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab6:	4923      	ldr	r1, [pc, #140]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	654b      	str	r3, [r1, #84]	; 0x54
 8008abc:	e001      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d040      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d821      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b23 	.word	0x08008b23
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008b0b 	.word	0x08008b0b
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b23 	.word	0x08008b23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3304      	adds	r3, #4
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 fadc 	bl	800a0bc <RCCEx_PLL2_Config>
 8008b04:	4603      	mov	r3, r0
 8008b06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b08:	e00c      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3324      	adds	r3, #36	; 0x24
 8008b0e:	2101      	movs	r1, #1
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 fb85 	bl	800a220 <RCCEx_PLL3_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	e000      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8008b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d110      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2e:	f023 0207 	bic.w	r2, r3, #7
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b38:	4902      	ldr	r1, [pc, #8]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b3e:	e007      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008b40:	58024800 	.word	0x58024800
 8008b44:	58024400 	.word	0x58024400
 8008b48:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d04b      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b66:	d02e      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6c:	d828      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b72:	d02a      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d822      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b7e:	d026      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008b80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b84:	d81c      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b8a:	d010      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b90:	d816      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01d      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b9a:	d111      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 fa8a 	bl	800a0bc <RCCEx_PLL2_Config>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bac:	e012      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3324      	adds	r3, #36	; 0x24
 8008bb2:	2102      	movs	r1, #2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 fb33 	bl	800a220 <RCCEx_PLL3_Config>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bbe:	e009      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc4:	e006      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008bc6:	bf00      	nop
 8008bc8:	e004      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008bca:	bf00      	nop
 8008bcc:	e002      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008bce:	bf00      	nop
 8008bd0:	e000      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bda:	4bb2      	ldr	r3, [pc, #712]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	49ae      	ldr	r1, [pc, #696]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	654b      	str	r3, [r1, #84]	; 0x54
 8008bee:	e001      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d04b      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c0a:	d02e      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008c0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c10:	d828      	bhi.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c16:	d02a      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1c:	d822      	bhi.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c22:	d026      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c28:	d81c      	bhi.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c2e:	d010      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c34:	d816      	bhi.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d01d      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3e:	d111      	bne.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 fa38 	bl	800a0bc <RCCEx_PLL2_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c50:	e012      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3324      	adds	r3, #36	; 0x24
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fae1 	bl	800a220 <RCCEx_PLL3_Config>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c62:	e009      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
      break;
 8008c68:	e006      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008c6a:	bf00      	nop
 8008c6c:	e004      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008c6e:	bf00      	nop
 8008c70:	e002      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008c72:	bf00      	nop
 8008c74:	e000      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c7e:	4b89      	ldr	r3, [pc, #548]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c8c:	4985      	ldr	r1, [pc, #532]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	658b      	str	r3, [r1, #88]	; 0x58
 8008c92:	e001      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d04b      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008caa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008cae:	d02e      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008cb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008cb4:	d828      	bhi.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cba:	d02a      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc0:	d822      	bhi.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008cc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cc6:	d026      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008cc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ccc:	d81c      	bhi.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cd2:	d010      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cd8:	d816      	bhi.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01d      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8008cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce2:	d111      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 f9e6 	bl	800a0bc <RCCEx_PLL2_Config>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008cf4:	e012      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3324      	adds	r3, #36	; 0x24
 8008cfa:	2102      	movs	r1, #2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 fa8f 	bl	800a220 <RCCEx_PLL3_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008d06:	e009      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d0c:	e006      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008d0e:	bf00      	nop
 8008d10:	e004      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008d12:	bf00      	nop
 8008d14:	e002      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008d16:	bf00      	nop
 8008d18:	e000      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1c:	7dfb      	ldrb	r3, [r7, #23]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d22:	4b60      	ldr	r3, [pc, #384]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d30:	495c      	ldr	r1, [pc, #368]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	658b      	str	r3, [r1, #88]	; 0x58
 8008d36:	e001      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0308 	and.w	r3, r3, #8
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d018      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d50:	d10a      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3324      	adds	r3, #36	; 0x24
 8008d56:	2102      	movs	r1, #2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 fa61 	bl	800a220 <RCCEx_PLL3_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008d68:	4b4e      	ldr	r3, [pc, #312]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d74:	494b      	ldr	r1, [pc, #300]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01a      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d10a      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	3324      	adds	r3, #36	; 0x24
 8008d96:	2102      	movs	r1, #2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fa41 	bl	800a220 <RCCEx_PLL3_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008da8:	4b3e      	ldr	r3, [pc, #248]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db6:	493b      	ldr	r1, [pc, #236]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d034      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dd2:	d01d      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dd8:	d817      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de2:	d009      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008de4:	e011      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3304      	adds	r3, #4
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 f965 	bl	800a0bc <RCCEx_PLL2_Config>
 8008df2:	4603      	mov	r3, r0
 8008df4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008df6:	e00c      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3324      	adds	r3, #36	; 0x24
 8008dfc:	2102      	movs	r1, #2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f001 fa0e 	bl	800a220 <RCCEx_PLL3_Config>
 8008e04:	4603      	mov	r3, r0
 8008e06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008e08:	e003      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0e:	e000      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e18:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e26:	491f      	ldr	r1, [pc, #124]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	658b      	str	r3, [r1, #88]	; 0x58
 8008e2c:	e001      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d036      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e48:	d01c      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008e4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e4e:	d816      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e54:	d003      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e5a:	d007      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008e5c:	e00f      	b.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	4a10      	ldr	r2, [pc, #64]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e6a:	e00c      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3324      	adds	r3, #36	; 0x24
 8008e70:	2101      	movs	r1, #1
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 f9d4 	bl	800a220 <RCCEx_PLL3_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]
      break;
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10d      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e9a:	4902      	ldr	r1, [pc, #8]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8008ea0:	e004      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008ea2:	bf00      	nop
 8008ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d029      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec4:	d007      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008ec6:	e00f      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b61      	ldr	r3, [pc, #388]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	4a60      	ldr	r2, [pc, #384]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ed4:	e00b      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f001 f8ed 	bl	800a0bc <RCCEx_PLL2_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008ee6:	e002      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
      break;
 8008eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ef4:	4b56      	ldr	r3, [pc, #344]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f00:	4953      	ldr	r1, [pc, #332]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f06:	e001      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3324      	adds	r3, #36	; 0x24
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 f97e 	bl	800a220 <RCCEx_PLL3_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d030      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f42:	d017      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f48:	d811      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f4e:	d013      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d80b      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5e:	d106      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f60:	4b3b      	ldr	r3, [pc, #236]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4a3a      	ldr	r2, [pc, #232]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008f6c:	e007      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
      break;
 8008f72:	e004      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d109      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f84:	4b32      	ldr	r3, [pc, #200]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f90:	492f      	ldr	r1, [pc, #188]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	654b      	str	r3, [r1, #84]	; 0x54
 8008f96:	e001      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d008      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fa8:	4b29      	ldr	r3, [pc, #164]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb4:	4926      	ldr	r1, [pc, #152]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fc6:	4b22      	ldr	r3, [pc, #136]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd2:	491f      	ldr	r1, [pc, #124]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00d      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008fea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fee:	6113      	str	r3, [r2, #16]
 8008ff0:	4b17      	ldr	r3, [pc, #92]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ffa:	4915      	ldr	r1, [pc, #84]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	da08      	bge.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009008:	4b11      	ldr	r3, [pc, #68]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800900a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	490e      	ldr	r1, [pc, #56]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009016:	4313      	orrs	r3, r2
 8009018:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d009      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009034:	4906      	ldr	r1, [pc, #24]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009036:	4313      	orrs	r3, r2
 8009038:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800903a:	7dbb      	ldrb	r3, [r7, #22]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	58024400 	.word	0x58024400

08009054 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b090      	sub	sp, #64	; 0x40
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009062:	f040 8089 	bne.w	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009066:	4b95      	ldr	r3, [pc, #596]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	633b      	str	r3, [r7, #48]	; 0x30
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	2b04      	cmp	r3, #4
 8009074:	d87d      	bhi.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	08009091 	.word	0x08009091
 8009080:	080090b5 	.word	0x080090b5
 8009084:	080090d9 	.word	0x080090d9
 8009088:	0800916d 	.word	0x0800916d
 800908c:	080090fd 	.word	0x080090fd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009090:	4b8a      	ldr	r3, [pc, #552]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800909c:	d107      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800909e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 feb8 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090ac:	e3ed      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b2:	e3ea      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090b4:	4b81      	ldr	r3, [pc, #516]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090c0:	d107      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c2:	f107 0318 	add.w	r3, r7, #24
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fbfe 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090d0:	e3db      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d6:	e3d8      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090d8:	4b78      	ldr	r3, [pc, #480]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e4:	d107      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fd40 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090f4:	e3c9      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090fa:	e3c6      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090fc:	4b6f      	ldr	r3, [pc, #444]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80090fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009104:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009106:	4b6d      	ldr	r3, [pc, #436]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b04      	cmp	r3, #4
 8009110:	d10c      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009118:	4b68      	ldr	r3, [pc, #416]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	08db      	lsrs	r3, r3, #3
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	4a67      	ldr	r2, [pc, #412]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009124:	fa22 f303 	lsr.w	r3, r2, r3
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912a:	e01e      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800912c:	4b63      	ldr	r3, [pc, #396]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009138:	d106      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009140:	d102      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009142:	4b60      	ldr	r3, [pc, #384]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009146:	e010      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009148:	4b5c      	ldr	r3, [pc, #368]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009154:	d106      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800915c:	d102      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800915e:	4b5a      	ldr	r3, [pc, #360]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009162:	e002      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009168:	e38f      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800916a:	e38e      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800916c:	4b57      	ldr	r3, [pc, #348]	; (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009170:	e38b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009176:	e388      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917e:	f040 80a7 	bne.w	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009182:	4b4e      	ldr	r3, [pc, #312]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800918a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009192:	d054      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800919a:	f200 808b 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091a4:	f000 8083 	beq.w	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091ae:	f200 8081 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b8:	d02f      	beq.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091c0:	d878      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ce:	d012      	beq.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80091d0:	e070      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d2:	4b3a      	ldr	r3, [pc, #232]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 fe17 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ee:	e34c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f4:	e349      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f6:	4b31      	ldr	r3, [pc, #196]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009202:	d107      	bne.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009204:	f107 0318 	add.w	r3, r7, #24
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fb5d 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009212:	e33a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009218:	e337      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800921a:	4b28      	ldr	r3, [pc, #160]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d107      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fc9f 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009236:	e328      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800923c:	e325      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009246:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009248:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b04      	cmp	r3, #4
 8009252:	d10c      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009256:	2b00      	cmp	r3, #0
 8009258:	d109      	bne.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800925a:	4b18      	ldr	r3, [pc, #96]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	08db      	lsrs	r3, r3, #3
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	4a16      	ldr	r2, [pc, #88]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009266:	fa22 f303 	lsr.w	r3, r2, r3
 800926a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800926c:	e01e      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927a:	d106      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009284:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009288:	e010      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009296:	d106      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929e:	d102      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80092a0:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a4:	e002      	b.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092aa:	e2ee      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80092ac:	e2ed      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092ae:	4b07      	ldr	r3, [pc, #28]	; (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b2:	e2ea      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b8:	e2e7      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80092ba:	bf00      	nop
 80092bc:	58024400 	.word	0x58024400
 80092c0:	03d09000 	.word	0x03d09000
 80092c4:	003d0900 	.word	0x003d0900
 80092c8:	017d7840 	.word	0x017d7840
 80092cc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092d6:	f040 809c 	bne.w	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80092da:	4b9e      	ldr	r3, [pc, #632]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80092dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092de:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80092e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092ea:	d054      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092f2:	f200 808b 	bhi.w	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092fc:	f000 8083 	beq.w	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009306:	f200 8081 	bhi.w	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009310:	d02f      	beq.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009318:	d878      	bhi.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	2b00      	cmp	r3, #0
 800931e:	d004      	beq.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009326:	d012      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009328:	e070      	b.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800932a:	4b8a      	ldr	r3, [pc, #552]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009336:	d107      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fd6b 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009346:	e2a0      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934c:	e29d      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800934e:	4b81      	ldr	r3, [pc, #516]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800935a:	d107      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935c:	f107 0318 	add.w	r3, r7, #24
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fab1 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800936a:	e28e      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009370:	e28b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009372:	4b78      	ldr	r3, [pc, #480]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800937a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800937e:	d107      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009380:	f107 030c 	add.w	r3, r7, #12
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fbf3 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800938e:	e27c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009394:	e279      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009396:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800939e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093a0:	4b6c      	ldr	r3, [pc, #432]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d10c      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80093ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b2:	4b68      	ldr	r3, [pc, #416]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	08db      	lsrs	r3, r3, #3
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	4a66      	ldr	r2, [pc, #408]	; (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80093be:	fa22 f303 	lsr.w	r3, r2, r3
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c4:	e01e      	b.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093c6:	4b63      	ldr	r3, [pc, #396]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d2:	d106      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80093dc:	4b5f      	ldr	r3, [pc, #380]	; (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e0:	e010      	b.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093e2:	4b5c      	ldr	r3, [pc, #368]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ee:	d106      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093f6:	d102      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093f8:	4b59      	ldr	r3, [pc, #356]	; (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fc:	e002      	b.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009402:	e242      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009404:	e241      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009406:	4b57      	ldr	r3, [pc, #348]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800940a:	e23e      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009410:	e23b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009418:	f040 80a6 	bne.w	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800941c:	4b4d      	ldr	r3, [pc, #308]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942c:	d054      	beq.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009434:	f200 808b 	bhi.w	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800943e:	f000 8083 	beq.w	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009444:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009448:	f200 8081 	bhi.w	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009452:	d02f      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800945a:	d878      	bhi.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800945c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945e:	2b00      	cmp	r3, #0
 8009460:	d004      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009468:	d012      	beq.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800946a:	e070      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800946c:	4b39      	ldr	r3, [pc, #228]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800947a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800947e:	4618      	mov	r0, r3
 8009480:	f000 fcca 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009488:	e1ff      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800948e:	e1fc      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009490:	4b30      	ldr	r3, [pc, #192]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949e:	f107 0318 	add.w	r3, r7, #24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fa10 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ac:	e1ed      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b2:	e1ea      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c0:	d107      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c2:	f107 030c 	add.w	r3, r7, #12
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fb52 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d0:	e1db      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e1d8      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e2:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0304 	and.w	r3, r3, #4
 80094ea:	2b04      	cmp	r3, #4
 80094ec:	d10c      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d109      	bne.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094f4:	4b17      	ldr	r3, [pc, #92]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	08db      	lsrs	r3, r3, #3
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	4a16      	ldr	r2, [pc, #88]	; (8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009500:	fa22 f303 	lsr.w	r3, r2, r3
 8009504:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009506:	e01e      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009508:	4b12      	ldr	r3, [pc, #72]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009514:	d106      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800951c:	d102      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009522:	e010      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009524:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800952c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009530:	d106      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009538:	d102      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800953c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800953e:	e002      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009544:	e1a1      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009546:	e1a0      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009548:	4b06      	ldr	r3, [pc, #24]	; (8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954c:	e19d      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	e19a      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009554:	58024400 	.word	0x58024400
 8009558:	03d09000 	.word	0x03d09000
 800955c:	003d0900 	.word	0x003d0900
 8009560:	017d7840 	.word	0x017d7840
 8009564:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800956e:	d173      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009570:	4b9a      	ldr	r3, [pc, #616]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009578:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009580:	d02f      	beq.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009588:	d863      	bhi.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009596:	d012      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009598:	e05b      	b.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800959a:	4b90      	ldr	r3, [pc, #576]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095a6:	d107      	bne.n	80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a8:	f107 0318 	add.w	r3, r7, #24
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f98b 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095b6:	e168      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095bc:	e165      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095be:	4b87      	ldr	r3, [pc, #540]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ca:	d107      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095cc:	f107 030c 	add.w	r3, r7, #12
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 facd 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095da:	e156      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e0:	e153      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095e2:	4b7e      	ldr	r3, [pc, #504]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095ec:	4b7b      	ldr	r3, [pc, #492]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d10c      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80095f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095fe:	4b77      	ldr	r3, [pc, #476]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	4a75      	ldr	r2, [pc, #468]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800960a:	fa22 f303 	lsr.w	r3, r2, r3
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009610:	e01e      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009612:	4b72      	ldr	r3, [pc, #456]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961e:	d106      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009626:	d102      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009628:	4b6e      	ldr	r3, [pc, #440]	; (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800962c:	e010      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800962e:	4b6b      	ldr	r3, [pc, #428]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800963a:	d106      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009642:	d102      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009644:	4b68      	ldr	r3, [pc, #416]	; (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009648:	e002      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800964e:	e11c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009650:	e11b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009656:	e118      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965e:	d133      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009660:	4b5e      	ldr	r3, [pc, #376]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009668:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009676:	d012      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009678:	e023      	b.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800967a:	4b58      	ldr	r3, [pc, #352]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009686:	d107      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800968c:	4618      	mov	r0, r3
 800968e:	f000 fbc3 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009696:	e0f8      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800969c:	e0f5      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800969e:	4b4f      	ldr	r3, [pc, #316]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096aa:	d107      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ac:	f107 0318 	add.w	r3, r7, #24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f909 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80096ba:	e0e6      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c0:	e0e3      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096c6:	e0e0      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ce:	f040 808d 	bne.w	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80096d2:	4b42      	ldr	r3, [pc, #264]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80096d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096e2:	d06b      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ea:	d874      	bhi.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f2:	d056      	beq.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d86c      	bhi.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80096fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009702:	d03b      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800970a:	d864      	bhi.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800970c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009712:	d021      	beq.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971a:	d85c      	bhi.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	2b00      	cmp	r3, #0
 8009720:	d004      	beq.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009728:	d004      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800972a:	e054      	b.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800972c:	f000 f8b6 	bl	800989c <HAL_RCCEx_GetD3PCLK1Freq>
 8009730:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009732:	e0aa      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009734:	4b29      	ldr	r3, [pc, #164]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800973c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009740:	d107      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009742:	f107 0318 	add.w	r3, r7, #24
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f8be 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009750:	e09b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009756:	e098      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009758:	4b20      	ldr	r3, [pc, #128]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009764:	d107      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009766:	f107 030c 	add.w	r3, r7, #12
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fa00 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009774:	e089      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800977a:	e086      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800977c:	4b17      	ldr	r3, [pc, #92]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b04      	cmp	r3, #4
 8009786:	d109      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009788:	4b14      	ldr	r3, [pc, #80]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	08db      	lsrs	r3, r3, #3
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	4a13      	ldr	r2, [pc, #76]	; (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800979a:	e076      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a0:	e073      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097a2:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ae:	d102      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097b4:	e069      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ba:	e066      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097bc:	4b07      	ldr	r3, [pc, #28]	; (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c8:	d102      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80097ca:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80097ce:	e05c      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097d4:	e059      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097da:	e056      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900
 80097e8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f2:	d148      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80097f4:	4b27      	ldr	r3, [pc, #156]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009804:	d02a      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980c:	d838      	bhi.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800981a:	d00d      	beq.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800981c:	e030      	b.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800981e:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800982a:	d102      	bne.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800982c:	4b1a      	ldr	r3, [pc, #104]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009830:	e02b      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009836:	e028      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009838:	4b16      	ldr	r3, [pc, #88]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009844:	d107      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800984a:	4618      	mov	r0, r3
 800984c:	f000 fae4 	bl	8009e18 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009854:	e019      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800985a:	e016      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800985c:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009868:	d107      	bne.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986a:	f107 0318 	add.w	r3, r7, #24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 f82a 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009878:	e007      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800987e:	e004      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009884:	e001      	b.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800988a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800988c:	4618      	mov	r0, r3
 800988e:	3740      	adds	r7, #64	; 0x40
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	58024400 	.word	0x58024400
 8009898:	017d7840 	.word	0x017d7840

0800989c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80098a0:	f7fe fc82 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80098a4:	4602      	mov	r2, r0
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	091b      	lsrs	r3, r3, #4
 80098ac:	f003 0307 	and.w	r3, r3, #7
 80098b0:	4904      	ldr	r1, [pc, #16]	; (80098c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80098b2:	5ccb      	ldrb	r3, [r1, r3]
 80098b4:	f003 031f 	and.w	r3, r3, #31
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80098bc:	4618      	mov	r0, r3
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	58024400 	.word	0x58024400
 80098c4:	0800e670 	.word	0x0800e670

080098c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b089      	sub	sp, #36	; 0x24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098d0:	4ba1      	ldr	r3, [pc, #644]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	f003 0303 	and.w	r3, r3, #3
 80098d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80098da:	4b9f      	ldr	r3, [pc, #636]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098de:	0b1b      	lsrs	r3, r3, #12
 80098e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80098e6:	4b9c      	ldr	r3, [pc, #624]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80098f2:	4b99      	ldr	r3, [pc, #612]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	08db      	lsrs	r3, r3, #3
 80098f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	fb02 f303 	mul.w	r3, r2, r3
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 8111 	beq.w	8009b38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b02      	cmp	r3, #2
 800991a:	f000 8083 	beq.w	8009a24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b02      	cmp	r3, #2
 8009922:	f200 80a1 	bhi.w	8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d056      	beq.n	80099e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009932:	e099      	b.n	8009a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009934:	4b88      	ldr	r3, [pc, #544]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0320 	and.w	r3, r3, #32
 800993c:	2b00      	cmp	r3, #0
 800993e:	d02d      	beq.n	800999c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009940:	4b85      	ldr	r3, [pc, #532]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	08db      	lsrs	r3, r3, #3
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	4a84      	ldr	r2, [pc, #528]	; (8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800994c:	fa22 f303 	lsr.w	r3, r2, r3
 8009950:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	ee07 3a90 	vmov	s15, r3
 8009958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b7b      	ldr	r3, [pc, #492]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997a:	ed97 6a03 	vldr	s12, [r7, #12]
 800997e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800999a:	e087      	b.n	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ae:	4b6a      	ldr	r3, [pc, #424]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099be:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099de:	e065      	b.n	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b59      	ldr	r3, [pc, #356]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a22:	e043      	b.n	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b48      	ldr	r3, [pc, #288]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a66:	e021      	b.n	8009aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b37      	ldr	r3, [pc, #220]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009aac:	4b2a      	ldr	r3, [pc, #168]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	0a5b      	lsrs	r3, r3, #9
 8009ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad2:	ee17 2a90 	vmov	r2, s15
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ada:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae4:	ee07 3a90 	vmov	s15, r3
 8009ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b00:	ee17 2a90 	vmov	r2, s15
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009b08:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	0e1b      	lsrs	r3, r3, #24
 8009b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b2e:	ee17 2a90 	vmov	r2, s15
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009b36:	e008      	b.n	8009b4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	609a      	str	r2, [r3, #8]
}
 8009b4a:	bf00      	nop
 8009b4c:	3724      	adds	r7, #36	; 0x24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	03d09000 	.word	0x03d09000
 8009b60:	46000000 	.word	0x46000000
 8009b64:	4c742400 	.word	0x4c742400
 8009b68:	4a742400 	.word	0x4a742400
 8009b6c:	4bbebc20 	.word	0x4bbebc20

08009b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b089      	sub	sp, #36	; 0x24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b78:	4ba1      	ldr	r3, [pc, #644]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009b82:	4b9f      	ldr	r3, [pc, #636]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	0d1b      	lsrs	r3, r3, #20
 8009b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009b8e:	4b9c      	ldr	r3, [pc, #624]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009b9a:	4b99      	ldr	r3, [pc, #612]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9e:	08db      	lsrs	r3, r3, #3
 8009ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8111 	beq.w	8009de0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	f000 8083 	beq.w	8009ccc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	f200 80a1 	bhi.w	8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d056      	beq.n	8009c88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009bda:	e099      	b.n	8009d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bdc:	4b88      	ldr	r3, [pc, #544]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02d      	beq.n	8009c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009be8:	4b85      	ldr	r3, [pc, #532]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	08db      	lsrs	r3, r3, #3
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	4a84      	ldr	r2, [pc, #528]	; (8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	ee07 3a90 	vmov	s15, r3
 8009c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c42:	e087      	b.n	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b6a      	ldr	r3, [pc, #424]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c86:	e065      	b.n	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cca:	e043      	b.n	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cde:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0e:	e021      	b.n	8009d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009d54:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	0a5b      	lsrs	r3, r3, #9
 8009d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7a:	ee17 2a90 	vmov	r2, s15
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009d82:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da8:	ee17 2a90 	vmov	r2, s15
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009db0:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	0e1b      	lsrs	r3, r3, #24
 8009db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd6:	ee17 2a90 	vmov	r2, s15
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009dde:	e008      	b.n	8009df2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
}
 8009df2:	bf00      	nop
 8009df4:	3724      	adds	r7, #36	; 0x24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
 8009e04:	03d09000 	.word	0x03d09000
 8009e08:	46000000 	.word	0x46000000
 8009e0c:	4c742400 	.word	0x4c742400
 8009e10:	4a742400 	.word	0x4a742400
 8009e14:	4bbebc20 	.word	0x4bbebc20

08009e18 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b089      	sub	sp, #36	; 0x24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e20:	4ba0      	ldr	r3, [pc, #640]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009e2a:	4b9e      	ldr	r3, [pc, #632]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	091b      	lsrs	r3, r3, #4
 8009e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e34:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009e36:	4b9b      	ldr	r3, [pc, #620]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009e40:	4b98      	ldr	r3, [pc, #608]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	08db      	lsrs	r3, r3, #3
 8009e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	fb02 f303 	mul.w	r3, r2, r3
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e58:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8111 	beq.w	800a086 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	f000 8083 	beq.w	8009f72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	f200 80a1 	bhi.w	8009fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d056      	beq.n	8009f2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009e80:	e099      	b.n	8009fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e82:	4b88      	ldr	r3, [pc, #544]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d02d      	beq.n	8009eea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e8e:	4b85      	ldr	r3, [pc, #532]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	08db      	lsrs	r3, r3, #3
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	4a83      	ldr	r2, [pc, #524]	; (800a0a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e9e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb8:	4b7a      	ldr	r3, [pc, #488]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec0:	ee07 3a90 	vmov	s15, r3
 8009ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ecc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a0ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ee8:	e087      	b.n	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	ee07 3a90 	vmov	s15, r3
 8009ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efc:	4b69      	ldr	r3, [pc, #420]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f10:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a0ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f2c:	e065      	b.n	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	ee07 3a90 	vmov	s15, r3
 8009f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f40:	4b58      	ldr	r3, [pc, #352]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f54:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a0ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f70:	e043      	b.n	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	ee07 3a90 	vmov	s15, r3
 8009f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f84:	4b47      	ldr	r3, [pc, #284]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f94:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f98:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a0ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fb4:	e021      	b.n	8009ffa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	ee07 3a90 	vmov	s15, r3
 8009fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc8:	4b36      	ldr	r3, [pc, #216]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd0:	ee07 3a90 	vmov	s15, r3
 8009fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fdc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a0ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ff8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	0a5b      	lsrs	r3, r3, #9
 800a000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a004:	ee07 3a90 	vmov	s15, r3
 800a008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a010:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a014:	edd7 6a07 	vldr	s13, [r7, #28]
 800a018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a020:	ee17 2a90 	vmov	r2, s15
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02c:	0c1b      	lsrs	r3, r3, #16
 800a02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a042:	edd7 6a07 	vldr	s13, [r7, #28]
 800a046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04e:	ee17 2a90 	vmov	r2, s15
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	0e1b      	lsrs	r3, r3, #24
 800a05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a06c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a070:	edd7 6a07 	vldr	s13, [r7, #28]
 800a074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a07c:	ee17 2a90 	vmov	r2, s15
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a084:	e008      	b.n	800a098 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	609a      	str	r2, [r3, #8]
}
 800a098:	bf00      	nop
 800a09a:	3724      	adds	r7, #36	; 0x24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	03d09000 	.word	0x03d09000
 800a0ac:	46000000 	.word	0x46000000
 800a0b0:	4c742400 	.word	0x4c742400
 800a0b4:	4a742400 	.word	0x4a742400
 800a0b8:	4bbebc20 	.word	0x4bbebc20

0800a0bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0ca:	4b53      	ldr	r3, [pc, #332]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d101      	bne.n	800a0da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e099      	b.n	800a20e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0da:	4b4f      	ldr	r3, [pc, #316]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a4e      	ldr	r2, [pc, #312]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0e6:	f7f8 fd11 	bl	8002b0c <HAL_GetTick>
 800a0ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0ec:	e008      	b.n	800a100 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0ee:	f7f8 fd0d 	bl	8002b0c <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d901      	bls.n	800a100 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e086      	b.n	800a20e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a100:	4b45      	ldr	r3, [pc, #276]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f0      	bne.n	800a0ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a10c:	4b42      	ldr	r3, [pc, #264]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	031b      	lsls	r3, r3, #12
 800a11a:	493f      	ldr	r1, [pc, #252]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	628b      	str	r3, [r1, #40]	; 0x28
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	3b01      	subs	r3, #1
 800a126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	3b01      	subs	r3, #1
 800a130:	025b      	lsls	r3, r3, #9
 800a132:	b29b      	uxth	r3, r3
 800a134:	431a      	orrs	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	041b      	lsls	r3, r3, #16
 800a13e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a142:	431a      	orrs	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	3b01      	subs	r3, #1
 800a14a:	061b      	lsls	r3, r3, #24
 800a14c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a150:	4931      	ldr	r1, [pc, #196]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a152:	4313      	orrs	r3, r2
 800a154:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a156:	4b30      	ldr	r3, [pc, #192]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	492d      	ldr	r1, [pc, #180]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a164:	4313      	orrs	r3, r2
 800a166:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a168:	4b2b      	ldr	r3, [pc, #172]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	f023 0220 	bic.w	r2, r3, #32
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	4928      	ldr	r1, [pc, #160]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a176:	4313      	orrs	r3, r2
 800a178:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a17a:	4b27      	ldr	r3, [pc, #156]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	4a26      	ldr	r2, [pc, #152]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a180:	f023 0310 	bic.w	r3, r3, #16
 800a184:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a186:	4b24      	ldr	r3, [pc, #144]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a18a:	4b24      	ldr	r3, [pc, #144]	; (800a21c <RCCEx_PLL2_Config+0x160>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	69d2      	ldr	r2, [r2, #28]
 800a192:	00d2      	lsls	r2, r2, #3
 800a194:	4920      	ldr	r1, [pc, #128]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a196:	4313      	orrs	r3, r2
 800a198:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a19a:	4b1f      	ldr	r3, [pc, #124]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	f043 0310 	orr.w	r3, r3, #16
 800a1a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1ac:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4a19      	ldr	r2, [pc, #100]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1b8:	e00f      	b.n	800a1da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d106      	bne.n	800a1ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a1c0:	4b15      	ldr	r3, [pc, #84]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	4a14      	ldr	r2, [pc, #80]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1cc:	e005      	b.n	800a1da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1ce:	4b12      	ldr	r3, [pc, #72]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	4a11      	ldr	r2, [pc, #68]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1da:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a0e      	ldr	r2, [pc, #56]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e6:	f7f8 fc91 	bl	8002b0c <HAL_GetTick>
 800a1ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1ec:	e008      	b.n	800a200 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1ee:	f7f8 fc8d 	bl	8002b0c <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e006      	b.n	800a20e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <RCCEx_PLL2_Config+0x15c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0f0      	beq.n	800a1ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	58024400 	.word	0x58024400
 800a21c:	ffff0007 	.word	0xffff0007

0800a220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a22e:	4b53      	ldr	r3, [pc, #332]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	f003 0303 	and.w	r3, r3, #3
 800a236:	2b03      	cmp	r3, #3
 800a238:	d101      	bne.n	800a23e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e099      	b.n	800a372 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a23e:	4b4f      	ldr	r3, [pc, #316]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a4e      	ldr	r2, [pc, #312]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a24a:	f7f8 fc5f 	bl	8002b0c <HAL_GetTick>
 800a24e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a250:	e008      	b.n	800a264 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a252:	f7f8 fc5b 	bl	8002b0c <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e086      	b.n	800a372 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a264:	4b45      	ldr	r3, [pc, #276]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1f0      	bne.n	800a252 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a270:	4b42      	ldr	r3, [pc, #264]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	051b      	lsls	r3, r3, #20
 800a27e:	493f      	ldr	r1, [pc, #252]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a280:	4313      	orrs	r3, r2
 800a282:	628b      	str	r3, [r1, #40]	; 0x28
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	3b01      	subs	r3, #1
 800a28a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	3b01      	subs	r3, #1
 800a294:	025b      	lsls	r3, r3, #9
 800a296:	b29b      	uxth	r3, r3
 800a298:	431a      	orrs	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	041b      	lsls	r3, r3, #16
 800a2a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	061b      	lsls	r3, r3, #24
 800a2b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2b4:	4931      	ldr	r1, [pc, #196]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a2ba:	4b30      	ldr	r3, [pc, #192]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	492d      	ldr	r1, [pc, #180]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2cc:	4b2b      	ldr	r3, [pc, #172]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4928      	ldr	r1, [pc, #160]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2de:	4b27      	ldr	r3, [pc, #156]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	4a26      	ldr	r2, [pc, #152]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2ea:	4b24      	ldr	r3, [pc, #144]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ee:	4b24      	ldr	r3, [pc, #144]	; (800a380 <RCCEx_PLL3_Config+0x160>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	69d2      	ldr	r2, [r2, #28]
 800a2f6:	00d2      	lsls	r2, r2, #3
 800a2f8:	4920      	ldr	r1, [pc, #128]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2fe:	4b1f      	ldr	r3, [pc, #124]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a302:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d106      	bne.n	800a31e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a310:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	4a19      	ldr	r2, [pc, #100]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a316:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a31a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a31c:	e00f      	b.n	800a33e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d106      	bne.n	800a332 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a324:	4b15      	ldr	r3, [pc, #84]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	4a14      	ldr	r2, [pc, #80]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a32a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a32e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a330:	e005      	b.n	800a33e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a332:	4b12      	ldr	r3, [pc, #72]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	4a11      	ldr	r2, [pc, #68]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a33c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a33e:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a34a:	f7f8 fbdf 	bl	8002b0c <HAL_GetTick>
 800a34e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a350:	e008      	b.n	800a364 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a352:	f7f8 fbdb 	bl	8002b0c <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d901      	bls.n	800a364 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e006      	b.n	800a372 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a364:	4b05      	ldr	r3, [pc, #20]	; (800a37c <RCCEx_PLL3_Config+0x15c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d0f0      	beq.n	800a352 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	58024400 	.word	0x58024400
 800a380:	ffff0007 	.word	0xffff0007

0800a384 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e0f1      	b.n	800a57a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a78      	ldr	r2, [pc, #480]	; (800a584 <HAL_SPI_Init+0x200>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d00f      	beq.n	800a3c6 <HAL_SPI_Init+0x42>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a77      	ldr	r2, [pc, #476]	; (800a588 <HAL_SPI_Init+0x204>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00a      	beq.n	800a3c6 <HAL_SPI_Init+0x42>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a75      	ldr	r2, [pc, #468]	; (800a58c <HAL_SPI_Init+0x208>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d005      	beq.n	800a3c6 <HAL_SPI_Init+0x42>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	2b0f      	cmp	r3, #15
 800a3c0:	d901      	bls.n	800a3c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0d9      	b.n	800a57a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f001 f880 	bl	800b4cc <SPI_GetPacketSize>
 800a3cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a6c      	ldr	r2, [pc, #432]	; (800a584 <HAL_SPI_Init+0x200>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00c      	beq.n	800a3f2 <HAL_SPI_Init+0x6e>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a6a      	ldr	r2, [pc, #424]	; (800a588 <HAL_SPI_Init+0x204>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d007      	beq.n	800a3f2 <HAL_SPI_Init+0x6e>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a69      	ldr	r2, [pc, #420]	; (800a58c <HAL_SPI_Init+0x208>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d002      	beq.n	800a3f2 <HAL_SPI_Init+0x6e>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b08      	cmp	r3, #8
 800a3f0:	d811      	bhi.n	800a416 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3f6:	4a63      	ldr	r2, [pc, #396]	; (800a584 <HAL_SPI_Init+0x200>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d009      	beq.n	800a410 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a61      	ldr	r2, [pc, #388]	; (800a588 <HAL_SPI_Init+0x204>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d004      	beq.n	800a410 <HAL_SPI_Init+0x8c>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a60      	ldr	r2, [pc, #384]	; (800a58c <HAL_SPI_Init+0x208>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d104      	bne.n	800a41a <HAL_SPI_Init+0x96>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b10      	cmp	r3, #16
 800a414:	d901      	bls.n	800a41a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e0af      	b.n	800a57a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7f7 fcce 	bl	8001dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0201 	bic.w	r2, r2, #1
 800a44a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a456:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a460:	d119      	bne.n	800a496 <HAL_SPI_Init+0x112>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a46a:	d103      	bne.n	800a474 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a470:	2b00      	cmp	r3, #0
 800a472:	d008      	beq.n	800a486 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10c      	bne.n	800a496 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a484:	d107      	bne.n	800a496 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69da      	ldr	r2, [r3, #28]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a8:	ea42 0103 	orr.w	r1, r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f6:	ea42 0103 	orr.w	r1, r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d113      	bne.n	800a536 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a520:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a534:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0201 	bic.w	r2, r2, #1
 800a544:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40013000 	.word	0x40013000
 800a588:	40003800 	.word	0x40003800
 800a58c:	40003c00 	.word	0x40003c00

0800a590 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	; 0x28
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	4613      	mov	r3, r2
 800a59e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3320      	adds	r3, #32
 800a5a6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_SPI_Transmit+0x2a>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e1d7      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5c2:	f7f8 faa3 	bl	8002b0c <HAL_GetTick>
 800a5c6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d007      	beq.n	800a5e4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a5e0:	7efb      	ldrb	r3, [r7, #27]
 800a5e2:	e1c2      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <HAL_SPI_Transmit+0x60>
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d107      	bne.n	800a600 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a5fc:	7efb      	ldrb	r3, [r7, #27]
 800a5fe:	e1b4      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2203      	movs	r2, #3
 800a604:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	88fa      	ldrh	r2, [r7, #6]
 800a61a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	88fa      	ldrh	r2, [r7, #6]
 800a622:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a650:	d107      	bne.n	800a662 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a660:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	4b96      	ldr	r3, [pc, #600]	; (800a8c4 <HAL_SPI_Transmit+0x334>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	88f9      	ldrh	r1, [r7, #6]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	430b      	orrs	r3, r1
 800a674:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f042 0201 	orr.w	r2, r2, #1
 800a684:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a68e:	d107      	bne.n	800a6a0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a69e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	2b0f      	cmp	r3, #15
 800a6a6:	d947      	bls.n	800a738 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6a8:	e03f      	b.n	800a72a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d114      	bne.n	800a6e2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c8:	1d1a      	adds	r2, r3, #4
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a6e0:	e023      	b.n	800a72a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6e2:	f7f8 fa13 	bl	8002b0c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d803      	bhi.n	800a6fa <HAL_SPI_Transmit+0x16a>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d102      	bne.n	800a700 <HAL_SPI_Transmit+0x170>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d114      	bne.n	800a72a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fe15 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a714:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e11f      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a730:	b29b      	uxth	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1b9      	bne.n	800a6aa <HAL_SPI_Transmit+0x11a>
 800a736:	e0f2      	b.n	800a91e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	f240 80e7 	bls.w	800a910 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a742:	e05d      	b.n	800a800 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d132      	bne.n	800a7b8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d918      	bls.n	800a790 <HAL_SPI_Transmit+0x200>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a762:	2b00      	cmp	r3, #0
 800a764:	d014      	beq.n	800a790 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6812      	ldr	r2, [r2, #0]
 800a770:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a776:	1d1a      	adds	r2, r3, #4
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b02      	subs	r3, #2
 800a786:	b29a      	uxth	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a78e:	e037      	b.n	800a800 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a794:	881a      	ldrh	r2, [r3, #0]
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a79e:	1c9a      	adds	r2, r3, #2
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a7b6:	e023      	b.n	800a800 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7b8:	f7f8 f9a8 	bl	8002b0c <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d803      	bhi.n	800a7d0 <HAL_SPI_Transmit+0x240>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d102      	bne.n	800a7d6 <HAL_SPI_Transmit+0x246>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d114      	bne.n	800a800 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fdaa 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e0b4      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a806:	b29b      	uxth	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d19b      	bne.n	800a744 <HAL_SPI_Transmit+0x1b4>
 800a80c:	e087      	b.n	800a91e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d155      	bne.n	800a8c8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a822:	b29b      	uxth	r3, r3
 800a824:	2b03      	cmp	r3, #3
 800a826:	d918      	bls.n	800a85a <HAL_SPI_Transmit+0x2ca>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d914      	bls.n	800a85a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	3b04      	subs	r3, #4
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a858:	e05a      	b.n	800a910 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a860:	b29b      	uxth	r3, r3
 800a862:	2b01      	cmp	r3, #1
 800a864:	d917      	bls.n	800a896 <HAL_SPI_Transmit+0x306>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d013      	beq.n	800a896 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	881a      	ldrh	r2, [r3, #0]
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	1c9a      	adds	r2, r3, #2
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a888:	b29b      	uxth	r3, r3
 800a88a:	3b02      	subs	r3, #2
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a894:	e03c      	b.n	800a910 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3320      	adds	r3, #32
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a8c0:	e026      	b.n	800a910 <HAL_SPI_Transmit+0x380>
 800a8c2:	bf00      	nop
 800a8c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8c8:	f7f8 f920 	bl	8002b0c <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d803      	bhi.n	800a8e0 <HAL_SPI_Transmit+0x350>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d102      	bne.n	800a8e6 <HAL_SPI_Transmit+0x356>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d114      	bne.n	800a910 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 fd22 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e02c      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a916:	b29b      	uxth	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f47f af78 	bne.w	800a80e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2200      	movs	r2, #0
 800a926:	2108      	movs	r1, #8
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fda1 	bl	800b470 <SPI_WaitOnFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93a:	f043 0220 	orr.w	r2, r3, #32
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fcf3 	bl	800b330 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a968:	7efb      	ldrb	r3, [r7, #27]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop

0800a974 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	; 0x28
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3330      	adds	r3, #48	; 0x30
 800a98e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a998:	d112      	bne.n	800a9c0 <HAL_SPI_Receive+0x4c>
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10e      	bne.n	800a9c0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2204      	movs	r2, #4
 800a9a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a9aa:	88fa      	ldrh	r2, [r7, #6]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 f9ce 	bl	800ad58 <HAL_SPI_TransmitReceive>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e1c7      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d101      	bne.n	800a9ce <HAL_SPI_Receive+0x5a>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e1c0      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9d6:	f7f8 f899 	bl	8002b0c <HAL_GetTick>
 800a9da:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d007      	beq.n	800a9f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a9f4:	7ffb      	ldrb	r3, [r7, #31]
 800a9f6:	e1ab      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_SPI_Receive+0x90>
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d107      	bne.n	800aa14 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aa10:	7ffb      	ldrb	r3, [r7, #31]
 800aa12:	e19d      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2204      	movs	r2, #4
 800aa18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	88fa      	ldrh	r2, [r7, #6]
 800aa2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	88fa      	ldrh	r2, [r7, #6]
 800aa36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800aa64:	d107      	bne.n	800aa76 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	4b94      	ldr	r3, [pc, #592]	; (800acd0 <HAL_SPI_Receive+0x35c>)
 800aa7e:	4013      	ands	r3, r2
 800aa80:	88f9      	ldrh	r1, [r7, #6]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	6812      	ldr	r2, [r2, #0]
 800aa86:	430b      	orrs	r3, r1
 800aa88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0201 	orr.w	r2, r2, #1
 800aa98:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaa2:	d107      	bne.n	800aab4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aab2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d948      	bls.n	800ab4e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800aabc:	e040      	b.n	800ab40 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	695a      	ldr	r2, [r3, #20]
 800aac4:	f248 0308 	movw	r3, #32776	; 0x8008
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d014      	beq.n	800aaf8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aad8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aade:	1d1a      	adds	r2, r3, #4
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aaf6:	e023      	b.n	800ab40 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaf8:	f7f8 f808 	bl	8002b0c <HAL_GetTick>
 800aafc:	4602      	mov	r2, r0
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d803      	bhi.n	800ab10 <HAL_SPI_Receive+0x19c>
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d102      	bne.n	800ab16 <HAL_SPI_Receive+0x1a2>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d114      	bne.n	800ab40 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fc0a 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e107      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1b8      	bne.n	800aabe <HAL_SPI_Receive+0x14a>
 800ab4c:	e0ed      	b.n	800ad2a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	2b07      	cmp	r3, #7
 800ab54:	f240 80e2 	bls.w	800ad1c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ab58:	e05b      	b.n	800ac12 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d030      	beq.n	800abca <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d014      	beq.n	800aba0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab80:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab86:	1d1a      	adds	r2, r3, #4
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3b02      	subs	r3, #2
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ab9e:	e038      	b.n	800ac12 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	8812      	ldrh	r2, [r2, #0]
 800aba8:	b292      	uxth	r2, r2
 800abaa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb0:	1c9a      	adds	r2, r3, #2
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800abc8:	e023      	b.n	800ac12 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abca:	f7f7 ff9f 	bl	8002b0c <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d803      	bhi.n	800abe2 <HAL_SPI_Receive+0x26e>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe0:	d102      	bne.n	800abe8 <HAL_SPI_Receive+0x274>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d114      	bne.n	800ac12 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fba1 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e09e      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d19d      	bne.n	800ab5a <HAL_SPI_Receive+0x1e6>
 800ac1e:	e084      	b.n	800ad2a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d052      	beq.n	800acd4 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d014      	beq.n	800ac66 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac4c:	1d1a      	adds	r2, r3, #4
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b04      	subs	r3, #4
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ac64:	e05a      	b.n	800ad1c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ac70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac74:	d914      	bls.n	800aca0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	8812      	ldrh	r2, [r2, #0]
 800ac7e:	b292      	uxth	r2, r2
 800ac80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac86:	1c9a      	adds	r2, r3, #2
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	3b02      	subs	r3, #2
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ac9e:	e03d      	b.n	800ad1c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acac:	7812      	ldrb	r2, [r2, #0]
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	3b01      	subs	r3, #1
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800acce:	e025      	b.n	800ad1c <HAL_SPI_Receive+0x3a8>
 800acd0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acd4:	f7f7 ff1a 	bl	8002b0c <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d803      	bhi.n	800acec <HAL_SPI_Receive+0x378>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acea:	d102      	bne.n	800acf2 <HAL_SPI_Receive+0x37e>
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d114      	bne.n	800ad1c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 fb1c 	bl	800b330 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e019      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f47f af7b 	bne.w	800ac20 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 fb00 	bl	800b330 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800ad4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3720      	adds	r7, #32
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b08e      	sub	sp, #56	; 0x38
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3320      	adds	r3, #32
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3330      	adds	r3, #48	; 0x30
 800ad7a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_SPI_TransmitReceive+0x32>
 800ad86:	2302      	movs	r3, #2
 800ad88:	e2ce      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad92:	f7f7 febb 	bl	8002b0c <HAL_GetTick>
 800ad96:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ad98:	887b      	ldrh	r3, [r7, #2]
 800ad9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ad9c:	887b      	ldrh	r3, [r7, #2]
 800ad9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ada6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800adae:	7efb      	ldrb	r3, [r7, #27]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d014      	beq.n	800adde <HAL_SPI_TransmitReceive+0x86>
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adba:	d106      	bne.n	800adca <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800adc4:	7efb      	ldrb	r3, [r7, #27]
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d009      	beq.n	800adde <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800adca:	2302      	movs	r3, #2
 800adcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800add8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800addc:	e2a4      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_SPI_TransmitReceive+0x98>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <HAL_SPI_TransmitReceive+0x98>
 800adea:	887b      	ldrh	r3, [r7, #2]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d109      	bne.n	800ae04 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800adfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae02:	e291      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d003      	beq.n	800ae18 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2205      	movs	r2, #5
 800ae14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	887a      	ldrh	r2, [r7, #2]
 800ae2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	887a      	ldrh	r2, [r7, #2]
 800ae32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	887a      	ldrh	r2, [r7, #2]
 800ae40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	887a      	ldrh	r2, [r7, #2]
 800ae48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	4b9f      	ldr	r3, [pc, #636]	; (800b0dc <HAL_SPI_TransmitReceive+0x384>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	8879      	ldrh	r1, [r7, #2]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	6812      	ldr	r2, [r2, #0]
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f042 0201 	orr.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae84:	d107      	bne.n	800ae96 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	2b0f      	cmp	r3, #15
 800ae9c:	d970      	bls.n	800af80 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae9e:	e068      	b.n	800af72 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d11a      	bne.n	800aee4 <HAL_SPI_TransmitReceive+0x18c>
 800aeae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d017      	beq.n	800aee4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6812      	ldr	r2, [r2, #0]
 800aebe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	f248 0308 	movw	r3, #32776	; 0x8008
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01a      	beq.n	800af2a <HAL_SPI_TransmitReceive+0x1d2>
 800aef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d017      	beq.n	800af2a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af0a:	1d1a      	adds	r2, r3, #4
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af28:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af2a:	f7f7 fdef 	bl	8002b0c <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af36:	429a      	cmp	r2, r3
 800af38:	d803      	bhi.n	800af42 <HAL_SPI_TransmitReceive+0x1ea>
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af40:	d102      	bne.n	800af48 <HAL_SPI_TransmitReceive+0x1f0>
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	2b00      	cmp	r3, #0
 800af46:	d114      	bne.n	800af72 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 f9f1 	bl	800b330 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e1da      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af74:	2b00      	cmp	r3, #0
 800af76:	d193      	bne.n	800aea0 <HAL_SPI_TransmitReceive+0x148>
 800af78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d190      	bne.n	800aea0 <HAL_SPI_TransmitReceive+0x148>
 800af7e:	e1ac      	b.n	800b2da <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b07      	cmp	r3, #7
 800af86:	f240 81a0 	bls.w	800b2ca <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af8a:	e0a9      	b.n	800b0e0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b02      	cmp	r3, #2
 800af98:	d139      	bne.n	800b00e <HAL_SPI_TransmitReceive+0x2b6>
 800af9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d036      	beq.n	800b00e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800afa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d91c      	bls.n	800afe0 <HAL_SPI_TransmitReceive+0x288>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d018      	beq.n	800afe0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6812      	ldr	r2, [r2, #0]
 800afb8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afca:	b29b      	uxth	r3, r3
 800afcc:	3b02      	subs	r3, #2
 800afce:	b29a      	uxth	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800afde:	e016      	b.n	800b00e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afe4:	881a      	ldrh	r2, [r3, #0]
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afee:	1c9a      	adds	r2, r3, #2
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800affa:	b29b      	uxth	r3, r3
 800affc:	3b01      	subs	r3, #1
 800affe:	b29a      	uxth	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b00c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d03a      	beq.n	800b092 <HAL_SPI_TransmitReceive+0x33a>
 800b01c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d037      	beq.n	800b092 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d018      	beq.n	800b062 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b038:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b03a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	3b02      	subs	r3, #2
 800b050:	b29a      	uxth	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b05e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b060:	e017      	b.n	800b092 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b066:	6a3a      	ldr	r2, [r7, #32]
 800b068:	8812      	ldrh	r2, [r2, #0]
 800b06a:	b292      	uxth	r2, r2
 800b06c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b072:	1c9a      	adds	r2, r3, #2
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3b01      	subs	r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b090:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b092:	f7f7 fd3b 	bl	8002b0c <HAL_GetTick>
 800b096:	4602      	mov	r2, r0
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d803      	bhi.n	800b0aa <HAL_SPI_TransmitReceive+0x352>
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d102      	bne.n	800b0b0 <HAL_SPI_TransmitReceive+0x358>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d117      	bne.n	800b0e0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f93d 	bl	800b330 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e126      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
 800b0da:	bf00      	nop
 800b0dc:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b0e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f47f af52 	bne.w	800af8c <HAL_SPI_TransmitReceive+0x234>
 800b0e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f47f af4e 	bne.w	800af8c <HAL_SPI_TransmitReceive+0x234>
 800b0f0:	e0f3      	b.n	800b2da <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d15a      	bne.n	800b1b6 <HAL_SPI_TransmitReceive+0x45e>
 800b100:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b102:	2b00      	cmp	r3, #0
 800b104:	d057      	beq.n	800b1b6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d91c      	bls.n	800b146 <HAL_SPI_TransmitReceive+0x3ee>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b110:	2b40      	cmp	r3, #64	; 0x40
 800b112:	d918      	bls.n	800b146 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6812      	ldr	r2, [r2, #0]
 800b11e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b124:	1d1a      	adds	r2, r3, #4
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b130:	b29b      	uxth	r3, r3
 800b132:	3b04      	subs	r3, #4
 800b134:	b29a      	uxth	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b142:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b144:	e037      	b.n	800b1b6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d91b      	bls.n	800b184 <HAL_SPI_TransmitReceive+0x42c>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b150:	2b00      	cmp	r3, #0
 800b152:	d017      	beq.n	800b184 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b158:	881a      	ldrh	r2, [r3, #0]
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b16e:	b29b      	uxth	r3, r3
 800b170:	3b02      	subs	r3, #2
 800b172:	b29a      	uxth	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b180:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b182:	e018      	b.n	800b1b6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3320      	adds	r3, #32
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b1b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d05e      	beq.n	800b282 <HAL_SPI_TransmitReceive+0x52a>
 800b1c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d05b      	beq.n	800b282 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d018      	beq.n	800b20a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b1e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1e8:	1d1a      	adds	r2, r3, #4
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3b04      	subs	r3, #4
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b206:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b208:	e03b      	b.n	800b282 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b218:	d918      	bls.n	800b24c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b21e:	6a3a      	ldr	r2, [r7, #32]
 800b220:	8812      	ldrh	r2, [r2, #0]
 800b222:	b292      	uxth	r2, r2
 800b224:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b22a:	1c9a      	adds	r2, r3, #2
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b236:	b29b      	uxth	r3, r3
 800b238:	3b02      	subs	r3, #2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b248:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b24a:	e01a      	b.n	800b282 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b258:	7812      	ldrb	r2, [r2, #0]
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b26e:	b29b      	uxth	r3, r3
 800b270:	3b01      	subs	r3, #1
 800b272:	b29a      	uxth	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b280:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b282:	f7f7 fc43 	bl	8002b0c <HAL_GetTick>
 800b286:	4602      	mov	r2, r0
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28e:	429a      	cmp	r2, r3
 800b290:	d803      	bhi.n	800b29a <HAL_SPI_TransmitReceive+0x542>
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b298:	d102      	bne.n	800b2a0 <HAL_SPI_TransmitReceive+0x548>
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d114      	bne.n	800b2ca <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f845 	bl	800b330 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e02e      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b2ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f47f af10 	bne.w	800b0f2 <HAL_SPI_TransmitReceive+0x39a>
 800b2d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f47f af0c 	bne.w	800b0f2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2108      	movs	r1, #8
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 f8c3 	bl	800b470 <SPI_WaitOnFlagUntilTimeout>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f6:	f043 0220 	orr.w	r2, r3, #32
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f815 	bl	800b330 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2201      	movs	r2, #1
 800b312:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e001      	b.n	800b328 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3730      	adds	r7, #48	; 0x30
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	699a      	ldr	r2, [r3, #24]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 0208 	orr.w	r2, r2, #8
 800b34e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699a      	ldr	r2, [r3, #24]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f042 0210 	orr.w	r2, r2, #16
 800b35e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6919      	ldr	r1, [r3, #16]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	4b3c      	ldr	r3, [pc, #240]	; (800b46c <SPI_CloseTransfer+0x13c>)
 800b37c:	400b      	ands	r3, r1
 800b37e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b38e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d014      	beq.n	800b3c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00f      	beq.n	800b3c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f042 0220 	orr.w	r2, r2, #32
 800b3c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d014      	beq.n	800b3fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00f      	beq.n	800b3fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3e2:	f043 0204 	orr.w	r2, r3, #4
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00f      	beq.n	800b426 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40c:	f043 0201 	orr.w	r2, r3, #1
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	699a      	ldr	r2, [r3, #24]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b424:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00f      	beq.n	800b450 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b436:	f043 0208 	orr.w	r2, r3, #8
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b44e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	fffffc90 	.word	0xfffffc90

0800b470 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	4613      	mov	r3, r2
 800b47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b480:	e010      	b.n	800b4a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b482:	f7f7 fb43 	bl	8002b0c <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d803      	bhi.n	800b49a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b498:	d102      	bne.n	800b4a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e00f      	b.n	800b4c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	695a      	ldr	r2, [r3, #20]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	bf0c      	ite	eq
 800b4b4:	2301      	moveq	r3, #1
 800b4b6:	2300      	movne	r3, #0
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	79fb      	ldrb	r3, [r7, #7]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d0df      	beq.n	800b482 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d8:	095b      	lsrs	r3, r3, #5
 800b4da:	3301      	adds	r3, #1
 800b4dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	3307      	adds	r3, #7
 800b4ea:	08db      	lsrs	r3, r3, #3
 800b4ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr

0800b502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d101      	bne.n	800b514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	e049      	b.n	800b5a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7f6 fe61 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2202      	movs	r2, #2
 800b532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3304      	adds	r3, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f000 febd 	bl	800c2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d001      	beq.n	800b5c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e056      	b.n	800b676 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a2b      	ldr	r2, [pc, #172]	; (800b684 <HAL_TIM_Base_Start+0xd4>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d02c      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e2:	d027      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a27      	ldr	r2, [pc, #156]	; (800b688 <HAL_TIM_Base_Start+0xd8>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d022      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a26      	ldr	r2, [pc, #152]	; (800b68c <HAL_TIM_Base_Start+0xdc>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d01d      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a24      	ldr	r2, [pc, #144]	; (800b690 <HAL_TIM_Base_Start+0xe0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d018      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a23      	ldr	r2, [pc, #140]	; (800b694 <HAL_TIM_Base_Start+0xe4>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d013      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a21      	ldr	r2, [pc, #132]	; (800b698 <HAL_TIM_Base_Start+0xe8>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d00e      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a20      	ldr	r2, [pc, #128]	; (800b69c <HAL_TIM_Base_Start+0xec>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d009      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <HAL_TIM_Base_Start+0xf0>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d004      	beq.n	800b634 <HAL_TIM_Base_Start+0x84>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <HAL_TIM_Base_Start+0xf4>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d115      	bne.n	800b660 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	689a      	ldr	r2, [r3, #8]
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <HAL_TIM_Base_Start+0xf8>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b06      	cmp	r3, #6
 800b644:	d015      	beq.n	800b672 <HAL_TIM_Base_Start+0xc2>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b64c:	d011      	beq.n	800b672 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f042 0201 	orr.w	r2, r2, #1
 800b65c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b65e:	e008      	b.n	800b672 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0201 	orr.w	r2, r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e000      	b.n	800b674 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	40010000 	.word	0x40010000
 800b688:	40000400 	.word	0x40000400
 800b68c:	40000800 	.word	0x40000800
 800b690:	40000c00 	.word	0x40000c00
 800b694:	40010400 	.word	0x40010400
 800b698:	40001800 	.word	0x40001800
 800b69c:	40014000 	.word	0x40014000
 800b6a0:	4000e000 	.word	0x4000e000
 800b6a4:	4000e400 	.word	0x4000e400
 800b6a8:	00010007 	.word	0x00010007

0800b6ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d001      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e05e      	b.n	800b782 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68da      	ldr	r2, [r3, #12]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a2b      	ldr	r2, [pc, #172]	; (800b790 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d02c      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ee:	d027      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a27      	ldr	r2, [pc, #156]	; (800b794 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d022      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a26      	ldr	r2, [pc, #152]	; (800b798 <HAL_TIM_Base_Start_IT+0xec>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d01d      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a24      	ldr	r2, [pc, #144]	; (800b79c <HAL_TIM_Base_Start_IT+0xf0>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d018      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a23      	ldr	r2, [pc, #140]	; (800b7a0 <HAL_TIM_Base_Start_IT+0xf4>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d013      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a21      	ldr	r2, [pc, #132]	; (800b7a4 <HAL_TIM_Base_Start_IT+0xf8>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00e      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a20      	ldr	r2, [pc, #128]	; (800b7a8 <HAL_TIM_Base_Start_IT+0xfc>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d009      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1e      	ldr	r2, [pc, #120]	; (800b7ac <HAL_TIM_Base_Start_IT+0x100>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d004      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x94>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a1d      	ldr	r2, [pc, #116]	; (800b7b0 <HAL_TIM_Base_Start_IT+0x104>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d115      	bne.n	800b76c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	4b1b      	ldr	r3, [pc, #108]	; (800b7b4 <HAL_TIM_Base_Start_IT+0x108>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b06      	cmp	r3, #6
 800b750:	d015      	beq.n	800b77e <HAL_TIM_Base_Start_IT+0xd2>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b758:	d011      	beq.n	800b77e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0201 	orr.w	r2, r2, #1
 800b768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76a:	e008      	b.n	800b77e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f042 0201 	orr.w	r2, r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e000      	b.n	800b780 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b77e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40010000 	.word	0x40010000
 800b794:	40000400 	.word	0x40000400
 800b798:	40000800 	.word	0x40000800
 800b79c:	40000c00 	.word	0x40000c00
 800b7a0:	40010400 	.word	0x40010400
 800b7a4:	40001800 	.word	0x40001800
 800b7a8:	40014000 	.word	0x40014000
 800b7ac:	4000e000 	.word	0x4000e000
 800b7b0:	4000e400 	.word	0x4000e400
 800b7b4:	00010007 	.word	0x00010007

0800b7b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e049      	b.n	800b85e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7f6 fbac 	bl	8001f3c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	f000 fd62 	bl	800c2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e049      	b.n	800b90c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d106      	bne.n	800b892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7f6 fd99 	bl	80023c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2202      	movs	r2, #2
 800b896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f000 fd0b 	bl	800c2c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d109      	bne.n	800b938 <HAL_TIM_PWM_Start+0x24>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	bf14      	ite	ne
 800b930:	2301      	movne	r3, #1
 800b932:	2300      	moveq	r3, #0
 800b934:	b2db      	uxtb	r3, r3
 800b936:	e03c      	b.n	800b9b2 <HAL_TIM_PWM_Start+0x9e>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d109      	bne.n	800b952 <HAL_TIM_PWM_Start+0x3e>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b01      	cmp	r3, #1
 800b948:	bf14      	ite	ne
 800b94a:	2301      	movne	r3, #1
 800b94c:	2300      	moveq	r3, #0
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	e02f      	b.n	800b9b2 <HAL_TIM_PWM_Start+0x9e>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b08      	cmp	r3, #8
 800b956:	d109      	bne.n	800b96c <HAL_TIM_PWM_Start+0x58>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b01      	cmp	r3, #1
 800b962:	bf14      	ite	ne
 800b964:	2301      	movne	r3, #1
 800b966:	2300      	moveq	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	e022      	b.n	800b9b2 <HAL_TIM_PWM_Start+0x9e>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b0c      	cmp	r3, #12
 800b970:	d109      	bne.n	800b986 <HAL_TIM_PWM_Start+0x72>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	bf14      	ite	ne
 800b97e:	2301      	movne	r3, #1
 800b980:	2300      	moveq	r3, #0
 800b982:	b2db      	uxtb	r3, r3
 800b984:	e015      	b.n	800b9b2 <HAL_TIM_PWM_Start+0x9e>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b10      	cmp	r3, #16
 800b98a:	d109      	bne.n	800b9a0 <HAL_TIM_PWM_Start+0x8c>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b01      	cmp	r3, #1
 800b996:	bf14      	ite	ne
 800b998:	2301      	movne	r3, #1
 800b99a:	2300      	moveq	r3, #0
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	e008      	b.n	800b9b2 <HAL_TIM_PWM_Start+0x9e>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf14      	ite	ne
 800b9ac:	2301      	movne	r3, #1
 800b9ae:	2300      	moveq	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e0ab      	b.n	800bb12 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <HAL_TIM_PWM_Start+0xb6>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9c8:	e023      	b.n	800ba12 <HAL_TIM_PWM_Start+0xfe>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d104      	bne.n	800b9da <HAL_TIM_PWM_Start+0xc6>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9d8:	e01b      	b.n	800ba12 <HAL_TIM_PWM_Start+0xfe>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d104      	bne.n	800b9ea <HAL_TIM_PWM_Start+0xd6>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9e8:	e013      	b.n	800ba12 <HAL_TIM_PWM_Start+0xfe>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	2b0c      	cmp	r3, #12
 800b9ee:	d104      	bne.n	800b9fa <HAL_TIM_PWM_Start+0xe6>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9f8:	e00b      	b.n	800ba12 <HAL_TIM_PWM_Start+0xfe>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b10      	cmp	r3, #16
 800b9fe:	d104      	bne.n	800ba0a <HAL_TIM_PWM_Start+0xf6>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2202      	movs	r2, #2
 800ba04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba08:	e003      	b.n	800ba12 <HAL_TIM_PWM_Start+0xfe>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2201      	movs	r2, #1
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 f86a 	bl	800caf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a3d      	ldr	r2, [pc, #244]	; (800bb1c <HAL_TIM_PWM_Start+0x208>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d013      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x13e>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a3c      	ldr	r2, [pc, #240]	; (800bb20 <HAL_TIM_PWM_Start+0x20c>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d00e      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x13e>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a3a      	ldr	r2, [pc, #232]	; (800bb24 <HAL_TIM_PWM_Start+0x210>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d009      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x13e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a39      	ldr	r2, [pc, #228]	; (800bb28 <HAL_TIM_PWM_Start+0x214>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d004      	beq.n	800ba52 <HAL_TIM_PWM_Start+0x13e>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a37      	ldr	r2, [pc, #220]	; (800bb2c <HAL_TIM_PWM_Start+0x218>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d101      	bne.n	800ba56 <HAL_TIM_PWM_Start+0x142>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <HAL_TIM_PWM_Start+0x144>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a2a      	ldr	r2, [pc, #168]	; (800bb1c <HAL_TIM_PWM_Start+0x208>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d02c      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7e:	d027      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a2a      	ldr	r2, [pc, #168]	; (800bb30 <HAL_TIM_PWM_Start+0x21c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d022      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a29      	ldr	r2, [pc, #164]	; (800bb34 <HAL_TIM_PWM_Start+0x220>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d01d      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a27      	ldr	r2, [pc, #156]	; (800bb38 <HAL_TIM_PWM_Start+0x224>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d018      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <HAL_TIM_PWM_Start+0x20c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d013      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a23      	ldr	r2, [pc, #140]	; (800bb3c <HAL_TIM_PWM_Start+0x228>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00e      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a1b      	ldr	r2, [pc, #108]	; (800bb24 <HAL_TIM_PWM_Start+0x210>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d009      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a1f      	ldr	r2, [pc, #124]	; (800bb40 <HAL_TIM_PWM_Start+0x22c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIM_PWM_Start+0x1bc>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a1e      	ldr	r2, [pc, #120]	; (800bb44 <HAL_TIM_PWM_Start+0x230>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d115      	bne.n	800bafc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <HAL_TIM_PWM_Start+0x234>)
 800bad8:	4013      	ands	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b06      	cmp	r3, #6
 800bae0:	d015      	beq.n	800bb0e <HAL_TIM_PWM_Start+0x1fa>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae8:	d011      	beq.n	800bb0e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafa:	e008      	b.n	800bb0e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0201 	orr.w	r2, r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	e000      	b.n	800bb10 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	40010000 	.word	0x40010000
 800bb20:	40010400 	.word	0x40010400
 800bb24:	40014000 	.word	0x40014000
 800bb28:	40014400 	.word	0x40014400
 800bb2c:	40014800 	.word	0x40014800
 800bb30:	40000400 	.word	0x40000400
 800bb34:	40000800 	.word	0x40000800
 800bb38:	40000c00 	.word	0x40000c00
 800bb3c:	40001800 	.word	0x40001800
 800bb40:	4000e000 	.word	0x4000e000
 800bb44:	4000e400 	.word	0x4000e400
 800bb48:	00010007 	.word	0x00010007

0800bb4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e08f      	b.n	800bc80 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7f6 fa2b 	bl	8001fd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6899      	ldr	r1, [r3, #8]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	4b3e      	ldr	r3, [pc, #248]	; (800bc88 <HAL_TIM_Encoder_Init+0x13c>)
 800bb8e:	400b      	ands	r3, r1
 800bb90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f000 fb8f 	bl	800c2c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	4b31      	ldr	r3, [pc, #196]	; (800bc8c <HAL_TIM_Encoder_Init+0x140>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	4b2b      	ldr	r3, [pc, #172]	; (800bc90 <HAL_TIM_Encoder_Init+0x144>)
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	4b2a      	ldr	r3, [pc, #168]	; (800bc94 <HAL_TIM_Encoder_Init+0x148>)
 800bbea:	4013      	ands	r3, r2
 800bbec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	68da      	ldr	r2, [r3, #12]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	69db      	ldr	r3, [r3, #28]
 800bbf6:	021b      	lsls	r3, r3, #8
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	011a      	lsls	r2, r3, #4
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	031b      	lsls	r3, r3, #12
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bc1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bc22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	011b      	lsls	r3, r3, #4
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	fffebff8 	.word	0xfffebff8
 800bc8c:	fffffcfc 	.word	0xfffffcfc
 800bc90:	fffff3f3 	.word	0xfffff3f3
 800bc94:	ffff0f0f 	.word	0xffff0f0f

0800bc98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bcb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d110      	bne.n	800bcea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d102      	bne.n	800bcd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcce:	7b7b      	ldrb	r3, [r7, #13]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d001      	beq.n	800bcd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e069      	b.n	800bdac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2202      	movs	r2, #2
 800bcdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bce8:	e031      	b.n	800bd4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b04      	cmp	r3, #4
 800bcee:	d110      	bne.n	800bd12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d102      	bne.n	800bcfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcf6:	7b3b      	ldrb	r3, [r7, #12]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d001      	beq.n	800bd00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e055      	b.n	800bdac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2202      	movs	r2, #2
 800bd04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd10:	e01d      	b.n	800bd4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d108      	bne.n	800bd2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d105      	bne.n	800bd2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd1e:	7b7b      	ldrb	r3, [r7, #13]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d102      	bne.n	800bd2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd24:	7b3b      	ldrb	r3, [r7, #12]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d001      	beq.n	800bd2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e03e      	b.n	800bdac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2202      	movs	r2, #2
 800bd32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2202      	movs	r2, #2
 800bd3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2202      	movs	r2, #2
 800bd42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2202      	movs	r2, #2
 800bd4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d003      	beq.n	800bd5c <HAL_TIM_Encoder_Start+0xc4>
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	d008      	beq.n	800bd6c <HAL_TIM_Encoder_Start+0xd4>
 800bd5a:	e00f      	b.n	800bd7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2201      	movs	r2, #1
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fec5 	bl	800caf4 <TIM_CCxChannelCmd>
      break;
 800bd6a:	e016      	b.n	800bd9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2201      	movs	r2, #1
 800bd72:	2104      	movs	r1, #4
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 febd 	bl	800caf4 <TIM_CCxChannelCmd>
      break;
 800bd7a:	e00e      	b.n	800bd9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2201      	movs	r2, #1
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 feb5 	bl	800caf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	2104      	movs	r1, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 feae 	bl	800caf4 <TIM_CCxChannelCmd>
      break;
 800bd98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f042 0201 	orr.w	r2, r2, #1
 800bda8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d101      	bne.n	800bdd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	e066      	b.n	800bea0 <HAL_TIM_OC_ConfigChannel+0xec>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b14      	cmp	r3, #20
 800bdde:	d857      	bhi.n	800be90 <HAL_TIM_OC_ConfigChannel+0xdc>
 800bde0:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800bde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde6:	bf00      	nop
 800bde8:	0800be3d 	.word	0x0800be3d
 800bdec:	0800be91 	.word	0x0800be91
 800bdf0:	0800be91 	.word	0x0800be91
 800bdf4:	0800be91 	.word	0x0800be91
 800bdf8:	0800be4b 	.word	0x0800be4b
 800bdfc:	0800be91 	.word	0x0800be91
 800be00:	0800be91 	.word	0x0800be91
 800be04:	0800be91 	.word	0x0800be91
 800be08:	0800be59 	.word	0x0800be59
 800be0c:	0800be91 	.word	0x0800be91
 800be10:	0800be91 	.word	0x0800be91
 800be14:	0800be91 	.word	0x0800be91
 800be18:	0800be67 	.word	0x0800be67
 800be1c:	0800be91 	.word	0x0800be91
 800be20:	0800be91 	.word	0x0800be91
 800be24:	0800be91 	.word	0x0800be91
 800be28:	0800be75 	.word	0x0800be75
 800be2c:	0800be91 	.word	0x0800be91
 800be30:	0800be91 	.word	0x0800be91
 800be34:	0800be91 	.word	0x0800be91
 800be38:	0800be83 	.word	0x0800be83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68b9      	ldr	r1, [r7, #8]
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fae2 	bl	800c40c <TIM_OC1_SetConfig>
      break;
 800be48:	e025      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68b9      	ldr	r1, [r7, #8]
 800be50:	4618      	mov	r0, r3
 800be52:	f000 fb6b 	bl	800c52c <TIM_OC2_SetConfig>
      break;
 800be56:	e01e      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fbee 	bl	800c640 <TIM_OC3_SetConfig>
      break;
 800be64:	e017      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68b9      	ldr	r1, [r7, #8]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 fc6f 	bl	800c750 <TIM_OC4_SetConfig>
      break;
 800be72:	e010      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 fcd2 	bl	800c824 <TIM_OC5_SetConfig>
      break;
 800be80:	e009      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68b9      	ldr	r1, [r7, #8]
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fd2f 	bl	800c8ec <TIM_OC6_SetConfig>
      break;
 800be8e:	e002      	b.n	800be96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	75fb      	strb	r3, [r7, #23]
      break;
 800be94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e0ff      	b.n	800c0c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b14      	cmp	r3, #20
 800bed2:	f200 80f0 	bhi.w	800c0b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bf31 	.word	0x0800bf31
 800bee0:	0800c0b7 	.word	0x0800c0b7
 800bee4:	0800c0b7 	.word	0x0800c0b7
 800bee8:	0800c0b7 	.word	0x0800c0b7
 800beec:	0800bf71 	.word	0x0800bf71
 800bef0:	0800c0b7 	.word	0x0800c0b7
 800bef4:	0800c0b7 	.word	0x0800c0b7
 800bef8:	0800c0b7 	.word	0x0800c0b7
 800befc:	0800bfb3 	.word	0x0800bfb3
 800bf00:	0800c0b7 	.word	0x0800c0b7
 800bf04:	0800c0b7 	.word	0x0800c0b7
 800bf08:	0800c0b7 	.word	0x0800c0b7
 800bf0c:	0800bff3 	.word	0x0800bff3
 800bf10:	0800c0b7 	.word	0x0800c0b7
 800bf14:	0800c0b7 	.word	0x0800c0b7
 800bf18:	0800c0b7 	.word	0x0800c0b7
 800bf1c:	0800c035 	.word	0x0800c035
 800bf20:	0800c0b7 	.word	0x0800c0b7
 800bf24:	0800c0b7 	.word	0x0800c0b7
 800bf28:	0800c0b7 	.word	0x0800c0b7
 800bf2c:	0800c075 	.word	0x0800c075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 fa68 	bl	800c40c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	699a      	ldr	r2, [r3, #24]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f042 0208 	orr.w	r2, r2, #8
 800bf4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f022 0204 	bic.w	r2, r2, #4
 800bf5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6999      	ldr	r1, [r3, #24]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	619a      	str	r2, [r3, #24]
      break;
 800bf6e:	e0a5      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68b9      	ldr	r1, [r7, #8]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 fad8 	bl	800c52c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	699a      	ldr	r2, [r3, #24]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699a      	ldr	r2, [r3, #24]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6999      	ldr	r1, [r3, #24]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	021a      	lsls	r2, r3, #8
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	619a      	str	r2, [r3, #24]
      break;
 800bfb0:	e084      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68b9      	ldr	r1, [r7, #8]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 fb41 	bl	800c640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	69da      	ldr	r2, [r3, #28]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f042 0208 	orr.w	r2, r2, #8
 800bfcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69da      	ldr	r2, [r3, #28]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f022 0204 	bic.w	r2, r2, #4
 800bfdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69d9      	ldr	r1, [r3, #28]
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	430a      	orrs	r2, r1
 800bfee:	61da      	str	r2, [r3, #28]
      break;
 800bff0:	e064      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 fba9 	bl	800c750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c00c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69da      	ldr	r2, [r3, #28]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c01c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	69d9      	ldr	r1, [r3, #28]
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	021a      	lsls	r2, r3, #8
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	61da      	str	r2, [r3, #28]
      break;
 800c032:	e043      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 fbf2 	bl	800c824 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0208 	orr.w	r2, r2, #8
 800c04e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 0204 	bic.w	r2, r2, #4
 800c05e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	691a      	ldr	r2, [r3, #16]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	430a      	orrs	r2, r1
 800c070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c072:	e023      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68b9      	ldr	r1, [r7, #8]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fc36 	bl	800c8ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c08e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c09e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	021a      	lsls	r2, r3, #8
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0b4:	e002      	b.n	800c0bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3718      	adds	r7, #24
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop

0800c0d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d101      	bne.n	800c0ec <HAL_TIM_ConfigClockSource+0x1c>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	e0dc      	b.n	800c2a6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	4b6a      	ldr	r3, [pc, #424]	; (800c2b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c108:	4013      	ands	r3, r2
 800c10a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a64      	ldr	r2, [pc, #400]	; (800c2b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c122:	4293      	cmp	r3, r2
 800c124:	f000 80a9 	beq.w	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c128:	4a62      	ldr	r2, [pc, #392]	; (800c2b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	f200 80ae 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c130:	4a61      	ldr	r2, [pc, #388]	; (800c2b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c132:	4293      	cmp	r3, r2
 800c134:	f000 80a1 	beq.w	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c138:	4a5f      	ldr	r2, [pc, #380]	; (800c2b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	f200 80a6 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c140:	4a5e      	ldr	r2, [pc, #376]	; (800c2bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c142:	4293      	cmp	r3, r2
 800c144:	f000 8099 	beq.w	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c148:	4a5c      	ldr	r2, [pc, #368]	; (800c2bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	f200 809e 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c150:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c154:	f000 8091 	beq.w	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c158:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c15c:	f200 8096 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c164:	f000 8089 	beq.w	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c16c:	f200 808e 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c174:	d03e      	beq.n	800c1f4 <HAL_TIM_ConfigClockSource+0x124>
 800c176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c17a:	f200 8087 	bhi.w	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c17e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c182:	f000 8086 	beq.w	800c292 <HAL_TIM_ConfigClockSource+0x1c2>
 800c186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18a:	d87f      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c18c:	2b70      	cmp	r3, #112	; 0x70
 800c18e:	d01a      	beq.n	800c1c6 <HAL_TIM_ConfigClockSource+0xf6>
 800c190:	2b70      	cmp	r3, #112	; 0x70
 800c192:	d87b      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c194:	2b60      	cmp	r3, #96	; 0x60
 800c196:	d050      	beq.n	800c23a <HAL_TIM_ConfigClockSource+0x16a>
 800c198:	2b60      	cmp	r3, #96	; 0x60
 800c19a:	d877      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c19c:	2b50      	cmp	r3, #80	; 0x50
 800c19e:	d03c      	beq.n	800c21a <HAL_TIM_ConfigClockSource+0x14a>
 800c1a0:	2b50      	cmp	r3, #80	; 0x50
 800c1a2:	d873      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1a4:	2b40      	cmp	r3, #64	; 0x40
 800c1a6:	d058      	beq.n	800c25a <HAL_TIM_ConfigClockSource+0x18a>
 800c1a8:	2b40      	cmp	r3, #64	; 0x40
 800c1aa:	d86f      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1ac:	2b30      	cmp	r3, #48	; 0x30
 800c1ae:	d064      	beq.n	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1b0:	2b30      	cmp	r3, #48	; 0x30
 800c1b2:	d86b      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1b4:	2b20      	cmp	r3, #32
 800c1b6:	d060      	beq.n	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1b8:	2b20      	cmp	r3, #32
 800c1ba:	d867      	bhi.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d05c      	beq.n	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c0:	2b10      	cmp	r3, #16
 800c1c2:	d05a      	beq.n	800c27a <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c4:	e062      	b.n	800c28c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	6899      	ldr	r1, [r3, #8]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f000 fc6d 	bl	800cab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	609a      	str	r2, [r3, #8]
      break;
 800c1f2:	e04f      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6818      	ldr	r0, [r3, #0]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	6899      	ldr	r1, [r3, #8]
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	f000 fc56 	bl	800cab4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689a      	ldr	r2, [r3, #8]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c216:	609a      	str	r2, [r3, #8]
      break;
 800c218:	e03c      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	6859      	ldr	r1, [r3, #4]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	461a      	mov	r2, r3
 800c228:	f000 fbc6 	bl	800c9b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2150      	movs	r1, #80	; 0x50
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fc20 	bl	800ca78 <TIM_ITRx_SetConfig>
      break;
 800c238:	e02c      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	6859      	ldr	r1, [r3, #4]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	461a      	mov	r2, r3
 800c248:	f000 fbe5 	bl	800ca16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2160      	movs	r1, #96	; 0x60
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fc10 	bl	800ca78 <TIM_ITRx_SetConfig>
      break;
 800c258:	e01c      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6818      	ldr	r0, [r3, #0]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	6859      	ldr	r1, [r3, #4]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	461a      	mov	r2, r3
 800c268:	f000 fba6 	bl	800c9b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2140      	movs	r1, #64	; 0x40
 800c272:	4618      	mov	r0, r3
 800c274:	f000 fc00 	bl	800ca78 <TIM_ITRx_SetConfig>
      break;
 800c278:	e00c      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f000 fbf7 	bl	800ca78 <TIM_ITRx_SetConfig>
      break;
 800c28a:	e003      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
      break;
 800c290:	e000      	b.n	800c294 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	ffceff88 	.word	0xffceff88
 800c2b4:	00100040 	.word	0x00100040
 800c2b8:	00100030 	.word	0x00100030
 800c2bc:	00100020 	.word	0x00100020

0800c2c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a44      	ldr	r2, [pc, #272]	; (800c3e4 <TIM_Base_SetConfig+0x124>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d013      	beq.n	800c300 <TIM_Base_SetConfig+0x40>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2de:	d00f      	beq.n	800c300 <TIM_Base_SetConfig+0x40>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a41      	ldr	r2, [pc, #260]	; (800c3e8 <TIM_Base_SetConfig+0x128>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d00b      	beq.n	800c300 <TIM_Base_SetConfig+0x40>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a40      	ldr	r2, [pc, #256]	; (800c3ec <TIM_Base_SetConfig+0x12c>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d007      	beq.n	800c300 <TIM_Base_SetConfig+0x40>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a3f      	ldr	r2, [pc, #252]	; (800c3f0 <TIM_Base_SetConfig+0x130>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d003      	beq.n	800c300 <TIM_Base_SetConfig+0x40>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a3e      	ldr	r2, [pc, #248]	; (800c3f4 <TIM_Base_SetConfig+0x134>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d108      	bne.n	800c312 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c306:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	4313      	orrs	r3, r2
 800c310:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a33      	ldr	r2, [pc, #204]	; (800c3e4 <TIM_Base_SetConfig+0x124>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d027      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c320:	d023      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a30      	ldr	r2, [pc, #192]	; (800c3e8 <TIM_Base_SetConfig+0x128>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d01f      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a2f      	ldr	r2, [pc, #188]	; (800c3ec <TIM_Base_SetConfig+0x12c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d01b      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a2e      	ldr	r2, [pc, #184]	; (800c3f0 <TIM_Base_SetConfig+0x130>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d017      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a2d      	ldr	r2, [pc, #180]	; (800c3f4 <TIM_Base_SetConfig+0x134>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d013      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a2c      	ldr	r2, [pc, #176]	; (800c3f8 <TIM_Base_SetConfig+0x138>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d00f      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a2b      	ldr	r2, [pc, #172]	; (800c3fc <TIM_Base_SetConfig+0x13c>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d00b      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a2a      	ldr	r2, [pc, #168]	; (800c400 <TIM_Base_SetConfig+0x140>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d007      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a29      	ldr	r2, [pc, #164]	; (800c404 <TIM_Base_SetConfig+0x144>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d003      	beq.n	800c36a <TIM_Base_SetConfig+0xaa>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a28      	ldr	r2, [pc, #160]	; (800c408 <TIM_Base_SetConfig+0x148>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d108      	bne.n	800c37c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a10      	ldr	r2, [pc, #64]	; (800c3e4 <TIM_Base_SetConfig+0x124>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d00f      	beq.n	800c3c8 <TIM_Base_SetConfig+0x108>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a12      	ldr	r2, [pc, #72]	; (800c3f4 <TIM_Base_SetConfig+0x134>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <TIM_Base_SetConfig+0x108>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a11      	ldr	r2, [pc, #68]	; (800c3f8 <TIM_Base_SetConfig+0x138>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d007      	beq.n	800c3c8 <TIM_Base_SetConfig+0x108>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <TIM_Base_SetConfig+0x13c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d003      	beq.n	800c3c8 <TIM_Base_SetConfig+0x108>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a0f      	ldr	r2, [pc, #60]	; (800c400 <TIM_Base_SetConfig+0x140>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d103      	bne.n	800c3d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	691a      	ldr	r2, [r3, #16]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	615a      	str	r2, [r3, #20]
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	40000400 	.word	0x40000400
 800c3ec:	40000800 	.word	0x40000800
 800c3f0:	40000c00 	.word	0x40000c00
 800c3f4:	40010400 	.word	0x40010400
 800c3f8:	40014000 	.word	0x40014000
 800c3fc:	40014400 	.word	0x40014400
 800c400:	40014800 	.word	0x40014800
 800c404:	4000e000 	.word	0x4000e000
 800c408:	4000e400 	.word	0x4000e400

0800c40c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	f023 0201 	bic.w	r2, r3, #1
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4b37      	ldr	r3, [pc, #220]	; (800c514 <TIM_OC1_SetConfig+0x108>)
 800c438:	4013      	ands	r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f023 0303 	bic.w	r3, r3, #3
 800c442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f023 0302 	bic.w	r3, r3, #2
 800c454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a2d      	ldr	r2, [pc, #180]	; (800c518 <TIM_OC1_SetConfig+0x10c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d00f      	beq.n	800c488 <TIM_OC1_SetConfig+0x7c>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a2c      	ldr	r2, [pc, #176]	; (800c51c <TIM_OC1_SetConfig+0x110>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d00b      	beq.n	800c488 <TIM_OC1_SetConfig+0x7c>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a2b      	ldr	r2, [pc, #172]	; (800c520 <TIM_OC1_SetConfig+0x114>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d007      	beq.n	800c488 <TIM_OC1_SetConfig+0x7c>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a2a      	ldr	r2, [pc, #168]	; (800c524 <TIM_OC1_SetConfig+0x118>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d003      	beq.n	800c488 <TIM_OC1_SetConfig+0x7c>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4a29      	ldr	r2, [pc, #164]	; (800c528 <TIM_OC1_SetConfig+0x11c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d10c      	bne.n	800c4a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f023 0308 	bic.w	r3, r3, #8
 800c48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	4313      	orrs	r3, r2
 800c498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f023 0304 	bic.w	r3, r3, #4
 800c4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a1c      	ldr	r2, [pc, #112]	; (800c518 <TIM_OC1_SetConfig+0x10c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00f      	beq.n	800c4ca <TIM_OC1_SetConfig+0xbe>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a1b      	ldr	r2, [pc, #108]	; (800c51c <TIM_OC1_SetConfig+0x110>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00b      	beq.n	800c4ca <TIM_OC1_SetConfig+0xbe>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a1a      	ldr	r2, [pc, #104]	; (800c520 <TIM_OC1_SetConfig+0x114>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <TIM_OC1_SetConfig+0xbe>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a19      	ldr	r2, [pc, #100]	; (800c524 <TIM_OC1_SetConfig+0x118>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d003      	beq.n	800c4ca <TIM_OC1_SetConfig+0xbe>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a18      	ldr	r2, [pc, #96]	; (800c528 <TIM_OC1_SetConfig+0x11c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d111      	bne.n	800c4ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	621a      	str	r2, [r3, #32]
}
 800c508:	bf00      	nop
 800c50a:	371c      	adds	r7, #28
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	fffeff8f 	.word	0xfffeff8f
 800c518:	40010000 	.word	0x40010000
 800c51c:	40010400 	.word	0x40010400
 800c520:	40014000 	.word	0x40014000
 800c524:	40014400 	.word	0x40014400
 800c528:	40014800 	.word	0x40014800

0800c52c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	f023 0210 	bic.w	r2, r3, #16
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4b34      	ldr	r3, [pc, #208]	; (800c628 <TIM_OC2_SetConfig+0xfc>)
 800c558:	4013      	ands	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	021b      	lsls	r3, r3, #8
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	f023 0320 	bic.w	r3, r3, #32
 800c576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	011b      	lsls	r3, r3, #4
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	4313      	orrs	r3, r2
 800c582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a29      	ldr	r2, [pc, #164]	; (800c62c <TIM_OC2_SetConfig+0x100>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_OC2_SetConfig+0x68>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a28      	ldr	r2, [pc, #160]	; (800c630 <TIM_OC2_SetConfig+0x104>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d10d      	bne.n	800c5b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c59a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a1e      	ldr	r2, [pc, #120]	; (800c62c <TIM_OC2_SetConfig+0x100>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d00f      	beq.n	800c5d8 <TIM_OC2_SetConfig+0xac>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a1d      	ldr	r2, [pc, #116]	; (800c630 <TIM_OC2_SetConfig+0x104>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d00b      	beq.n	800c5d8 <TIM_OC2_SetConfig+0xac>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a1c      	ldr	r2, [pc, #112]	; (800c634 <TIM_OC2_SetConfig+0x108>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d007      	beq.n	800c5d8 <TIM_OC2_SetConfig+0xac>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a1b      	ldr	r2, [pc, #108]	; (800c638 <TIM_OC2_SetConfig+0x10c>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d003      	beq.n	800c5d8 <TIM_OC2_SetConfig+0xac>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a1a      	ldr	r2, [pc, #104]	; (800c63c <TIM_OC2_SetConfig+0x110>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d113      	bne.n	800c600 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	693a      	ldr	r2, [r7, #16]
 800c604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	621a      	str	r2, [r3, #32]
}
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	feff8fff 	.word	0xfeff8fff
 800c62c:	40010000 	.word	0x40010000
 800c630:	40010400 	.word	0x40010400
 800c634:	40014000 	.word	0x40014000
 800c638:	40014400 	.word	0x40014400
 800c63c:	40014800 	.word	0x40014800

0800c640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4b33      	ldr	r3, [pc, #204]	; (800c738 <TIM_OC3_SetConfig+0xf8>)
 800c66c:	4013      	ands	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f023 0303 	bic.w	r3, r3, #3
 800c676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	4313      	orrs	r3, r2
 800c694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a28      	ldr	r2, [pc, #160]	; (800c73c <TIM_OC3_SetConfig+0xfc>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_OC3_SetConfig+0x66>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a27      	ldr	r2, [pc, #156]	; (800c740 <TIM_OC3_SetConfig+0x100>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d10d      	bne.n	800c6c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	021b      	lsls	r3, r3, #8
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a1d      	ldr	r2, [pc, #116]	; (800c73c <TIM_OC3_SetConfig+0xfc>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00f      	beq.n	800c6ea <TIM_OC3_SetConfig+0xaa>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a1c      	ldr	r2, [pc, #112]	; (800c740 <TIM_OC3_SetConfig+0x100>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d00b      	beq.n	800c6ea <TIM_OC3_SetConfig+0xaa>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a1b      	ldr	r2, [pc, #108]	; (800c744 <TIM_OC3_SetConfig+0x104>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d007      	beq.n	800c6ea <TIM_OC3_SetConfig+0xaa>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1a      	ldr	r2, [pc, #104]	; (800c748 <TIM_OC3_SetConfig+0x108>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d003      	beq.n	800c6ea <TIM_OC3_SetConfig+0xaa>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a19      	ldr	r2, [pc, #100]	; (800c74c <TIM_OC3_SetConfig+0x10c>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d113      	bne.n	800c712 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	011b      	lsls	r3, r3, #4
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	4313      	orrs	r3, r2
 800c704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	011b      	lsls	r3, r3, #4
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	4313      	orrs	r3, r2
 800c710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	621a      	str	r2, [r3, #32]
}
 800c72c:	bf00      	nop
 800c72e:	371c      	adds	r7, #28
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	fffeff8f 	.word	0xfffeff8f
 800c73c:	40010000 	.word	0x40010000
 800c740:	40010400 	.word	0x40010400
 800c744:	40014000 	.word	0x40014000
 800c748:	40014400 	.word	0x40014400
 800c74c:	40014800 	.word	0x40014800

0800c750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4b24      	ldr	r3, [pc, #144]	; (800c80c <TIM_OC4_SetConfig+0xbc>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	021b      	lsls	r3, r3, #8
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	031b      	lsls	r3, r3, #12
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a19      	ldr	r2, [pc, #100]	; (800c810 <TIM_OC4_SetConfig+0xc0>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00f      	beq.n	800c7d0 <TIM_OC4_SetConfig+0x80>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a18      	ldr	r2, [pc, #96]	; (800c814 <TIM_OC4_SetConfig+0xc4>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d00b      	beq.n	800c7d0 <TIM_OC4_SetConfig+0x80>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a17      	ldr	r2, [pc, #92]	; (800c818 <TIM_OC4_SetConfig+0xc8>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d007      	beq.n	800c7d0 <TIM_OC4_SetConfig+0x80>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a16      	ldr	r2, [pc, #88]	; (800c81c <TIM_OC4_SetConfig+0xcc>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <TIM_OC4_SetConfig+0x80>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a15      	ldr	r2, [pc, #84]	; (800c820 <TIM_OC4_SetConfig+0xd0>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d109      	bne.n	800c7e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	695b      	ldr	r3, [r3, #20]
 800c7dc:	019b      	lsls	r3, r3, #6
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	621a      	str	r2, [r3, #32]
}
 800c7fe:	bf00      	nop
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	feff8fff 	.word	0xfeff8fff
 800c810:	40010000 	.word	0x40010000
 800c814:	40010400 	.word	0x40010400
 800c818:	40014000 	.word	0x40014000
 800c81c:	40014400 	.word	0x40014400
 800c820:	40014800 	.word	0x40014800

0800c824 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <TIM_OC5_SetConfig+0xb0>)
 800c850:	4013      	ands	r3, r2
 800c852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	041b      	lsls	r3, r3, #16
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	4313      	orrs	r3, r2
 800c870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a18      	ldr	r2, [pc, #96]	; (800c8d8 <TIM_OC5_SetConfig+0xb4>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00f      	beq.n	800c89a <TIM_OC5_SetConfig+0x76>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a17      	ldr	r2, [pc, #92]	; (800c8dc <TIM_OC5_SetConfig+0xb8>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d00b      	beq.n	800c89a <TIM_OC5_SetConfig+0x76>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a16      	ldr	r2, [pc, #88]	; (800c8e0 <TIM_OC5_SetConfig+0xbc>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d007      	beq.n	800c89a <TIM_OC5_SetConfig+0x76>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a15      	ldr	r2, [pc, #84]	; (800c8e4 <TIM_OC5_SetConfig+0xc0>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d003      	beq.n	800c89a <TIM_OC5_SetConfig+0x76>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a14      	ldr	r2, [pc, #80]	; (800c8e8 <TIM_OC5_SetConfig+0xc4>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d109      	bne.n	800c8ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	621a      	str	r2, [r3, #32]
}
 800c8c8:	bf00      	nop
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	fffeff8f 	.word	0xfffeff8f
 800c8d8:	40010000 	.word	0x40010000
 800c8dc:	40010400 	.word	0x40010400
 800c8e0:	40014000 	.word	0x40014000
 800c8e4:	40014400 	.word	0x40014400
 800c8e8:	40014800 	.word	0x40014800

0800c8ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b087      	sub	sp, #28
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4b22      	ldr	r3, [pc, #136]	; (800c9a0 <TIM_OC6_SetConfig+0xb4>)
 800c918:	4013      	ands	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	021b      	lsls	r3, r3, #8
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	4313      	orrs	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c92e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	051b      	lsls	r3, r3, #20
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	4313      	orrs	r3, r2
 800c93a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a19      	ldr	r2, [pc, #100]	; (800c9a4 <TIM_OC6_SetConfig+0xb8>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d00f      	beq.n	800c964 <TIM_OC6_SetConfig+0x78>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a18      	ldr	r2, [pc, #96]	; (800c9a8 <TIM_OC6_SetConfig+0xbc>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d00b      	beq.n	800c964 <TIM_OC6_SetConfig+0x78>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a17      	ldr	r2, [pc, #92]	; (800c9ac <TIM_OC6_SetConfig+0xc0>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d007      	beq.n	800c964 <TIM_OC6_SetConfig+0x78>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a16      	ldr	r2, [pc, #88]	; (800c9b0 <TIM_OC6_SetConfig+0xc4>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d003      	beq.n	800c964 <TIM_OC6_SetConfig+0x78>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a15      	ldr	r2, [pc, #84]	; (800c9b4 <TIM_OC6_SetConfig+0xc8>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d109      	bne.n	800c978 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c96a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	029b      	lsls	r3, r3, #10
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4313      	orrs	r3, r2
 800c976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	693a      	ldr	r2, [r7, #16]
 800c990:	621a      	str	r2, [r3, #32]
}
 800c992:	bf00      	nop
 800c994:	371c      	adds	r7, #28
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	feff8fff 	.word	0xfeff8fff
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	40010400 	.word	0x40010400
 800c9ac:	40014000 	.word	0x40014000
 800c9b0:	40014400 	.word	0x40014400
 800c9b4:	40014800 	.word	0x40014800

0800c9b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a1b      	ldr	r3, [r3, #32]
 800c9c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	f023 0201 	bic.w	r2, r3, #1
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	011b      	lsls	r3, r3, #4
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f023 030a 	bic.w	r3, r3, #10
 800c9f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9f6:	697a      	ldr	r2, [r7, #20]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	621a      	str	r2, [r3, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f023 0210 	bic.w	r2, r3, #16
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6a1b      	ldr	r3, [r3, #32]
 800ca38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	031b      	lsls	r3, r3, #12
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	011b      	lsls	r3, r3, #4
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	621a      	str	r2, [r3, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	371c      	adds	r7, #28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
	...

0800ca78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <TIM_ITRx_SetConfig+0x38>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	f043 0307 	orr.w	r3, r3, #7
 800ca9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	609a      	str	r2, [r3, #8]
}
 800caa2:	bf00      	nop
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	ffcfff8f 	.word	0xffcfff8f

0800cab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b087      	sub	sp, #28
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	021a      	lsls	r2, r3, #8
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	431a      	orrs	r2, r3
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4313      	orrs	r3, r2
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	4313      	orrs	r3, r2
 800cae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	609a      	str	r2, [r3, #8]
}
 800cae8:	bf00      	nop
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f003 031f 	and.w	r3, r3, #31
 800cb06:	2201      	movs	r2, #1
 800cb08:	fa02 f303 	lsl.w	r3, r2, r3
 800cb0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6a1a      	ldr	r2, [r3, #32]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	43db      	mvns	r3, r3
 800cb16:	401a      	ands	r2, r3
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6a1a      	ldr	r2, [r3, #32]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2c:	431a      	orrs	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	621a      	str	r2, [r3, #32]
}
 800cb32:	bf00      	nop
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
	...

0800cb40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d101      	bne.n	800cb58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb54:	2302      	movs	r3, #2
 800cb56:	e077      	b.n	800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2202      	movs	r2, #2
 800cb64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a35      	ldr	r2, [pc, #212]	; (800cc54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d004      	beq.n	800cb8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a34      	ldr	r2, [pc, #208]	; (800cc58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d108      	bne.n	800cb9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cba4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a25      	ldr	r2, [pc, #148]	; (800cc54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d02c      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbca:	d027      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a22      	ldr	r2, [pc, #136]	; (800cc5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d022      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a21      	ldr	r2, [pc, #132]	; (800cc60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d01d      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a1f      	ldr	r2, [pc, #124]	; (800cc64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d018      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a1a      	ldr	r2, [pc, #104]	; (800cc58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d013      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a1b      	ldr	r2, [pc, #108]	; (800cc68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d00e      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1a      	ldr	r2, [pc, #104]	; (800cc6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d009      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a18      	ldr	r2, [pc, #96]	; (800cc70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d004      	beq.n	800cc1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a17      	ldr	r2, [pc, #92]	; (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d10c      	bne.n	800cc36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	68ba      	ldr	r2, [r7, #8]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr
 800cc54:	40010000 	.word	0x40010000
 800cc58:	40010400 	.word	0x40010400
 800cc5c:	40000400 	.word	0x40000400
 800cc60:	40000800 	.word	0x40000800
 800cc64:	40000c00 	.word	0x40000c00
 800cc68:	40001800 	.word	0x40001800
 800cc6c:	40014000 	.word	0x40014000
 800cc70:	4000e000 	.word	0x4000e000
 800cc74:	4000e400 	.word	0x4000e400

0800cc78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d101      	bne.n	800cc94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc90:	2302      	movs	r3, #2
 800cc92:	e087      	b.n	800cda4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	041b      	lsls	r3, r3, #16
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a27      	ldr	r2, [pc, #156]	; (800cdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d004      	beq.n	800cd22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a25      	ldr	r2, [pc, #148]	; (800cdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d106      	bne.n	800cd30 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a1e      	ldr	r2, [pc, #120]	; (800cdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d004      	beq.n	800cd44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a1d      	ldr	r2, [pc, #116]	; (800cdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d126      	bne.n	800cd92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4e:	051b      	lsls	r3, r3, #20
 800cd50:	4313      	orrs	r3, r2
 800cd52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	6a1b      	ldr	r3, [r3, #32]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a0e      	ldr	r2, [pc, #56]	; (800cdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d004      	beq.n	800cd84 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a0d      	ldr	r2, [pc, #52]	; (800cdb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d106      	bne.n	800cd92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	40010000 	.word	0x40010000
 800cdb4:	40010400 	.word	0x40010400

0800cdb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e042      	b.n	800ce50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7f5 fc3f 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2224      	movs	r2, #36	; 0x24
 800cde6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f022 0201 	bic.w	r2, r2, #1
 800cdf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f8ac 	bl	800cf58 <UART_SetConfig>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e022      	b.n	800ce50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fefe 	bl	800dc14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	689a      	ldr	r2, [r3, #8]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f042 0201 	orr.w	r2, r2, #1
 800ce46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 ff85 	bl	800dd58 <UART_CheckIdleState>
 800ce4e:	4603      	mov	r3, r0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08a      	sub	sp, #40	; 0x28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	4613      	mov	r3, r2
 800ce64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce6c:	2b20      	cmp	r3, #32
 800ce6e:	d142      	bne.n	800cef6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <HAL_UART_Receive_DMA+0x24>
 800ce76:	88fb      	ldrh	r3, [r7, #6]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e03b      	b.n	800cef8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d101      	bne.n	800ce8e <HAL_UART_Receive_DMA+0x36>
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	e034      	b.n	800cef8 <HAL_UART_Receive_DMA+0xa0>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a17      	ldr	r2, [pc, #92]	; (800cf00 <HAL_UART_Receive_DMA+0xa8>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d01f      	beq.n	800cee6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d018      	beq.n	800cee6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	613b      	str	r3, [r7, #16]
   return(result);
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	623b      	str	r3, [r7, #32]
 800ced4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced6:	69f9      	ldr	r1, [r7, #28]
 800ced8:	6a3a      	ldr	r2, [r7, #32]
 800ceda:	e841 2300 	strex	r3, r2, [r1]
 800cede:	61bb      	str	r3, [r7, #24]
   return(result);
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1e6      	bne.n	800ceb4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cee6:	88fb      	ldrh	r3, [r7, #6]
 800cee8:	461a      	mov	r2, r3
 800ceea:	68b9      	ldr	r1, [r7, #8]
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f001 f847 	bl	800df80 <UART_Start_Receive_DMA>
 800cef2:	4603      	mov	r3, r0
 800cef4:	e000      	b.n	800cef8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cef6:	2302      	movs	r3, #2
  }
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3728      	adds	r7, #40	; 0x28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	58000c00 	.word	0x58000c00

0800cf04 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf58:	b5b0      	push	{r4, r5, r7, lr}
 800cf5a:	b08e      	sub	sp, #56	; 0x38
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	689a      	ldr	r2, [r3, #8]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	431a      	orrs	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	695b      	ldr	r3, [r3, #20]
 800cf74:	431a      	orrs	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	4bbf      	ldr	r3, [pc, #764]	; (800d284 <UART_SetConfig+0x32c>)
 800cf86:	4013      	ands	r3, r2
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4ab5      	ldr	r2, [pc, #724]	; (800d288 <UART_SetConfig+0x330>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d004      	beq.n	800cfc2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	689a      	ldr	r2, [r3, #8]
 800cfc8:	4bb0      	ldr	r3, [pc, #704]	; (800d28c <UART_SetConfig+0x334>)
 800cfca:	4013      	ands	r3, r2
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	6812      	ldr	r2, [r2, #0]
 800cfd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfd2:	430b      	orrs	r3, r1
 800cfd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	f023 010f 	bic.w	r1, r3, #15
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4aa7      	ldr	r2, [pc, #668]	; (800d290 <UART_SetConfig+0x338>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d176      	bne.n	800d0e4 <UART_SetConfig+0x18c>
 800cff6:	4ba7      	ldr	r3, [pc, #668]	; (800d294 <UART_SetConfig+0x33c>)
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cffe:	2b28      	cmp	r3, #40	; 0x28
 800d000:	d86c      	bhi.n	800d0dc <UART_SetConfig+0x184>
 800d002:	a201      	add	r2, pc, #4	; (adr r2, 800d008 <UART_SetConfig+0xb0>)
 800d004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d008:	0800d0ad 	.word	0x0800d0ad
 800d00c:	0800d0dd 	.word	0x0800d0dd
 800d010:	0800d0dd 	.word	0x0800d0dd
 800d014:	0800d0dd 	.word	0x0800d0dd
 800d018:	0800d0dd 	.word	0x0800d0dd
 800d01c:	0800d0dd 	.word	0x0800d0dd
 800d020:	0800d0dd 	.word	0x0800d0dd
 800d024:	0800d0dd 	.word	0x0800d0dd
 800d028:	0800d0b5 	.word	0x0800d0b5
 800d02c:	0800d0dd 	.word	0x0800d0dd
 800d030:	0800d0dd 	.word	0x0800d0dd
 800d034:	0800d0dd 	.word	0x0800d0dd
 800d038:	0800d0dd 	.word	0x0800d0dd
 800d03c:	0800d0dd 	.word	0x0800d0dd
 800d040:	0800d0dd 	.word	0x0800d0dd
 800d044:	0800d0dd 	.word	0x0800d0dd
 800d048:	0800d0bd 	.word	0x0800d0bd
 800d04c:	0800d0dd 	.word	0x0800d0dd
 800d050:	0800d0dd 	.word	0x0800d0dd
 800d054:	0800d0dd 	.word	0x0800d0dd
 800d058:	0800d0dd 	.word	0x0800d0dd
 800d05c:	0800d0dd 	.word	0x0800d0dd
 800d060:	0800d0dd 	.word	0x0800d0dd
 800d064:	0800d0dd 	.word	0x0800d0dd
 800d068:	0800d0c5 	.word	0x0800d0c5
 800d06c:	0800d0dd 	.word	0x0800d0dd
 800d070:	0800d0dd 	.word	0x0800d0dd
 800d074:	0800d0dd 	.word	0x0800d0dd
 800d078:	0800d0dd 	.word	0x0800d0dd
 800d07c:	0800d0dd 	.word	0x0800d0dd
 800d080:	0800d0dd 	.word	0x0800d0dd
 800d084:	0800d0dd 	.word	0x0800d0dd
 800d088:	0800d0cd 	.word	0x0800d0cd
 800d08c:	0800d0dd 	.word	0x0800d0dd
 800d090:	0800d0dd 	.word	0x0800d0dd
 800d094:	0800d0dd 	.word	0x0800d0dd
 800d098:	0800d0dd 	.word	0x0800d0dd
 800d09c:	0800d0dd 	.word	0x0800d0dd
 800d0a0:	0800d0dd 	.word	0x0800d0dd
 800d0a4:	0800d0dd 	.word	0x0800d0dd
 800d0a8:	0800d0d5 	.word	0x0800d0d5
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b2:	e326      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0b4:	2304      	movs	r3, #4
 800d0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ba:	e322      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0bc:	2308      	movs	r3, #8
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e31e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0c4:	2310      	movs	r3, #16
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e31a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0cc:	2320      	movs	r3, #32
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e316      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0d4:	2340      	movs	r3, #64	; 0x40
 800d0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0da:	e312      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0dc:	2380      	movs	r3, #128	; 0x80
 800d0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0e2:	e30e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a6b      	ldr	r2, [pc, #428]	; (800d298 <UART_SetConfig+0x340>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d130      	bne.n	800d150 <UART_SetConfig+0x1f8>
 800d0ee:	4b69      	ldr	r3, [pc, #420]	; (800d294 <UART_SetConfig+0x33c>)
 800d0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	2b05      	cmp	r3, #5
 800d0f8:	d826      	bhi.n	800d148 <UART_SetConfig+0x1f0>
 800d0fa:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <UART_SetConfig+0x1a8>)
 800d0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d100:	0800d119 	.word	0x0800d119
 800d104:	0800d121 	.word	0x0800d121
 800d108:	0800d129 	.word	0x0800d129
 800d10c:	0800d131 	.word	0x0800d131
 800d110:	0800d139 	.word	0x0800d139
 800d114:	0800d141 	.word	0x0800d141
 800d118:	2300      	movs	r3, #0
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	e2f0      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d120:	2304      	movs	r3, #4
 800d122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d126:	e2ec      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d128:	2308      	movs	r3, #8
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e2e8      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d130:	2310      	movs	r3, #16
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e2e4      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d138:	2320      	movs	r3, #32
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e2e0      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d140:	2340      	movs	r3, #64	; 0x40
 800d142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d146:	e2dc      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d148:	2380      	movs	r3, #128	; 0x80
 800d14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d14e:	e2d8      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a51      	ldr	r2, [pc, #324]	; (800d29c <UART_SetConfig+0x344>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d130      	bne.n	800d1bc <UART_SetConfig+0x264>
 800d15a:	4b4e      	ldr	r3, [pc, #312]	; (800d294 <UART_SetConfig+0x33c>)
 800d15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d15e:	f003 0307 	and.w	r3, r3, #7
 800d162:	2b05      	cmp	r3, #5
 800d164:	d826      	bhi.n	800d1b4 <UART_SetConfig+0x25c>
 800d166:	a201      	add	r2, pc, #4	; (adr r2, 800d16c <UART_SetConfig+0x214>)
 800d168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16c:	0800d185 	.word	0x0800d185
 800d170:	0800d18d 	.word	0x0800d18d
 800d174:	0800d195 	.word	0x0800d195
 800d178:	0800d19d 	.word	0x0800d19d
 800d17c:	0800d1a5 	.word	0x0800d1a5
 800d180:	0800d1ad 	.word	0x0800d1ad
 800d184:	2300      	movs	r3, #0
 800d186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d18a:	e2ba      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d18c:	2304      	movs	r3, #4
 800d18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d192:	e2b6      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d194:	2308      	movs	r3, #8
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19a:	e2b2      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d19c:	2310      	movs	r3, #16
 800d19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1a2:	e2ae      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d1a4:	2320      	movs	r3, #32
 800d1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1aa:	e2aa      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d1ac:	2340      	movs	r3, #64	; 0x40
 800d1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1b2:	e2a6      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d1b4:	2380      	movs	r3, #128	; 0x80
 800d1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ba:	e2a2      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a37      	ldr	r2, [pc, #220]	; (800d2a0 <UART_SetConfig+0x348>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d130      	bne.n	800d228 <UART_SetConfig+0x2d0>
 800d1c6:	4b33      	ldr	r3, [pc, #204]	; (800d294 <UART_SetConfig+0x33c>)
 800d1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ca:	f003 0307 	and.w	r3, r3, #7
 800d1ce:	2b05      	cmp	r3, #5
 800d1d0:	d826      	bhi.n	800d220 <UART_SetConfig+0x2c8>
 800d1d2:	a201      	add	r2, pc, #4	; (adr r2, 800d1d8 <UART_SetConfig+0x280>)
 800d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d8:	0800d1f1 	.word	0x0800d1f1
 800d1dc:	0800d1f9 	.word	0x0800d1f9
 800d1e0:	0800d201 	.word	0x0800d201
 800d1e4:	0800d209 	.word	0x0800d209
 800d1e8:	0800d211 	.word	0x0800d211
 800d1ec:	0800d219 	.word	0x0800d219
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1f6:	e284      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d1f8:	2304      	movs	r3, #4
 800d1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1fe:	e280      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d200:	2308      	movs	r3, #8
 800d202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d206:	e27c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d208:	2310      	movs	r3, #16
 800d20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d20e:	e278      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d210:	2320      	movs	r3, #32
 800d212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d216:	e274      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d218:	2340      	movs	r3, #64	; 0x40
 800d21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d21e:	e270      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d220:	2380      	movs	r3, #128	; 0x80
 800d222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d226:	e26c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <UART_SetConfig+0x34c>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d142      	bne.n	800d2b8 <UART_SetConfig+0x360>
 800d232:	4b18      	ldr	r3, [pc, #96]	; (800d294 <UART_SetConfig+0x33c>)
 800d234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b05      	cmp	r3, #5
 800d23c:	d838      	bhi.n	800d2b0 <UART_SetConfig+0x358>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <UART_SetConfig+0x2ec>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d25d 	.word	0x0800d25d
 800d248:	0800d265 	.word	0x0800d265
 800d24c:	0800d26d 	.word	0x0800d26d
 800d250:	0800d275 	.word	0x0800d275
 800d254:	0800d27d 	.word	0x0800d27d
 800d258:	0800d2a9 	.word	0x0800d2a9
 800d25c:	2300      	movs	r3, #0
 800d25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d262:	e24e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d264:	2304      	movs	r3, #4
 800d266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d26a:	e24a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d26c:	2308      	movs	r3, #8
 800d26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d272:	e246      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d274:	2310      	movs	r3, #16
 800d276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d27a:	e242      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d27c:	2320      	movs	r3, #32
 800d27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d282:	e23e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d284:	cfff69f3 	.word	0xcfff69f3
 800d288:	58000c00 	.word	0x58000c00
 800d28c:	11fff4ff 	.word	0x11fff4ff
 800d290:	40011000 	.word	0x40011000
 800d294:	58024400 	.word	0x58024400
 800d298:	40004400 	.word	0x40004400
 800d29c:	40004800 	.word	0x40004800
 800d2a0:	40004c00 	.word	0x40004c00
 800d2a4:	40005000 	.word	0x40005000
 800d2a8:	2340      	movs	r3, #64	; 0x40
 800d2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2ae:	e228      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d2b0:	2380      	movs	r3, #128	; 0x80
 800d2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2b6:	e224      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4ab1      	ldr	r2, [pc, #708]	; (800d584 <UART_SetConfig+0x62c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d176      	bne.n	800d3b0 <UART_SetConfig+0x458>
 800d2c2:	4bb1      	ldr	r3, [pc, #708]	; (800d588 <UART_SetConfig+0x630>)
 800d2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2ca:	2b28      	cmp	r3, #40	; 0x28
 800d2cc:	d86c      	bhi.n	800d3a8 <UART_SetConfig+0x450>
 800d2ce:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <UART_SetConfig+0x37c>)
 800d2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d4:	0800d379 	.word	0x0800d379
 800d2d8:	0800d3a9 	.word	0x0800d3a9
 800d2dc:	0800d3a9 	.word	0x0800d3a9
 800d2e0:	0800d3a9 	.word	0x0800d3a9
 800d2e4:	0800d3a9 	.word	0x0800d3a9
 800d2e8:	0800d3a9 	.word	0x0800d3a9
 800d2ec:	0800d3a9 	.word	0x0800d3a9
 800d2f0:	0800d3a9 	.word	0x0800d3a9
 800d2f4:	0800d381 	.word	0x0800d381
 800d2f8:	0800d3a9 	.word	0x0800d3a9
 800d2fc:	0800d3a9 	.word	0x0800d3a9
 800d300:	0800d3a9 	.word	0x0800d3a9
 800d304:	0800d3a9 	.word	0x0800d3a9
 800d308:	0800d3a9 	.word	0x0800d3a9
 800d30c:	0800d3a9 	.word	0x0800d3a9
 800d310:	0800d3a9 	.word	0x0800d3a9
 800d314:	0800d389 	.word	0x0800d389
 800d318:	0800d3a9 	.word	0x0800d3a9
 800d31c:	0800d3a9 	.word	0x0800d3a9
 800d320:	0800d3a9 	.word	0x0800d3a9
 800d324:	0800d3a9 	.word	0x0800d3a9
 800d328:	0800d3a9 	.word	0x0800d3a9
 800d32c:	0800d3a9 	.word	0x0800d3a9
 800d330:	0800d3a9 	.word	0x0800d3a9
 800d334:	0800d391 	.word	0x0800d391
 800d338:	0800d3a9 	.word	0x0800d3a9
 800d33c:	0800d3a9 	.word	0x0800d3a9
 800d340:	0800d3a9 	.word	0x0800d3a9
 800d344:	0800d3a9 	.word	0x0800d3a9
 800d348:	0800d3a9 	.word	0x0800d3a9
 800d34c:	0800d3a9 	.word	0x0800d3a9
 800d350:	0800d3a9 	.word	0x0800d3a9
 800d354:	0800d399 	.word	0x0800d399
 800d358:	0800d3a9 	.word	0x0800d3a9
 800d35c:	0800d3a9 	.word	0x0800d3a9
 800d360:	0800d3a9 	.word	0x0800d3a9
 800d364:	0800d3a9 	.word	0x0800d3a9
 800d368:	0800d3a9 	.word	0x0800d3a9
 800d36c:	0800d3a9 	.word	0x0800d3a9
 800d370:	0800d3a9 	.word	0x0800d3a9
 800d374:	0800d3a1 	.word	0x0800d3a1
 800d378:	2301      	movs	r3, #1
 800d37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d37e:	e1c0      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d380:	2304      	movs	r3, #4
 800d382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d386:	e1bc      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d388:	2308      	movs	r3, #8
 800d38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d38e:	e1b8      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d390:	2310      	movs	r3, #16
 800d392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d396:	e1b4      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d398:	2320      	movs	r3, #32
 800d39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d39e:	e1b0      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3a0:	2340      	movs	r3, #64	; 0x40
 800d3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3a6:	e1ac      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3a8:	2380      	movs	r3, #128	; 0x80
 800d3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ae:	e1a8      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a75      	ldr	r2, [pc, #468]	; (800d58c <UART_SetConfig+0x634>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d130      	bne.n	800d41c <UART_SetConfig+0x4c4>
 800d3ba:	4b73      	ldr	r3, [pc, #460]	; (800d588 <UART_SetConfig+0x630>)
 800d3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3be:	f003 0307 	and.w	r3, r3, #7
 800d3c2:	2b05      	cmp	r3, #5
 800d3c4:	d826      	bhi.n	800d414 <UART_SetConfig+0x4bc>
 800d3c6:	a201      	add	r2, pc, #4	; (adr r2, 800d3cc <UART_SetConfig+0x474>)
 800d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3cc:	0800d3e5 	.word	0x0800d3e5
 800d3d0:	0800d3ed 	.word	0x0800d3ed
 800d3d4:	0800d3f5 	.word	0x0800d3f5
 800d3d8:	0800d3fd 	.word	0x0800d3fd
 800d3dc:	0800d405 	.word	0x0800d405
 800d3e0:	0800d40d 	.word	0x0800d40d
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ea:	e18a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3f2:	e186      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3f4:	2308      	movs	r3, #8
 800d3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3fa:	e182      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d3fc:	2310      	movs	r3, #16
 800d3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d402:	e17e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d404:	2320      	movs	r3, #32
 800d406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d40a:	e17a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d40c:	2340      	movs	r3, #64	; 0x40
 800d40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d412:	e176      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d414:	2380      	movs	r3, #128	; 0x80
 800d416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d41a:	e172      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a5b      	ldr	r2, [pc, #364]	; (800d590 <UART_SetConfig+0x638>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d130      	bne.n	800d488 <UART_SetConfig+0x530>
 800d426:	4b58      	ldr	r3, [pc, #352]	; (800d588 <UART_SetConfig+0x630>)
 800d428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d42a:	f003 0307 	and.w	r3, r3, #7
 800d42e:	2b05      	cmp	r3, #5
 800d430:	d826      	bhi.n	800d480 <UART_SetConfig+0x528>
 800d432:	a201      	add	r2, pc, #4	; (adr r2, 800d438 <UART_SetConfig+0x4e0>)
 800d434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d438:	0800d451 	.word	0x0800d451
 800d43c:	0800d459 	.word	0x0800d459
 800d440:	0800d461 	.word	0x0800d461
 800d444:	0800d469 	.word	0x0800d469
 800d448:	0800d471 	.word	0x0800d471
 800d44c:	0800d479 	.word	0x0800d479
 800d450:	2300      	movs	r3, #0
 800d452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d456:	e154      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d458:	2304      	movs	r3, #4
 800d45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d45e:	e150      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d460:	2308      	movs	r3, #8
 800d462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d466:	e14c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d468:	2310      	movs	r3, #16
 800d46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d46e:	e148      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d470:	2320      	movs	r3, #32
 800d472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d476:	e144      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d47e:	e140      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d480:	2380      	movs	r3, #128	; 0x80
 800d482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d486:	e13c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a41      	ldr	r2, [pc, #260]	; (800d594 <UART_SetConfig+0x63c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	f040 8082 	bne.w	800d598 <UART_SetConfig+0x640>
 800d494:	4b3c      	ldr	r3, [pc, #240]	; (800d588 <UART_SetConfig+0x630>)
 800d496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d49c:	2b28      	cmp	r3, #40	; 0x28
 800d49e:	d86d      	bhi.n	800d57c <UART_SetConfig+0x624>
 800d4a0:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <UART_SetConfig+0x550>)
 800d4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a6:	bf00      	nop
 800d4a8:	0800d54d 	.word	0x0800d54d
 800d4ac:	0800d57d 	.word	0x0800d57d
 800d4b0:	0800d57d 	.word	0x0800d57d
 800d4b4:	0800d57d 	.word	0x0800d57d
 800d4b8:	0800d57d 	.word	0x0800d57d
 800d4bc:	0800d57d 	.word	0x0800d57d
 800d4c0:	0800d57d 	.word	0x0800d57d
 800d4c4:	0800d57d 	.word	0x0800d57d
 800d4c8:	0800d555 	.word	0x0800d555
 800d4cc:	0800d57d 	.word	0x0800d57d
 800d4d0:	0800d57d 	.word	0x0800d57d
 800d4d4:	0800d57d 	.word	0x0800d57d
 800d4d8:	0800d57d 	.word	0x0800d57d
 800d4dc:	0800d57d 	.word	0x0800d57d
 800d4e0:	0800d57d 	.word	0x0800d57d
 800d4e4:	0800d57d 	.word	0x0800d57d
 800d4e8:	0800d55d 	.word	0x0800d55d
 800d4ec:	0800d57d 	.word	0x0800d57d
 800d4f0:	0800d57d 	.word	0x0800d57d
 800d4f4:	0800d57d 	.word	0x0800d57d
 800d4f8:	0800d57d 	.word	0x0800d57d
 800d4fc:	0800d57d 	.word	0x0800d57d
 800d500:	0800d57d 	.word	0x0800d57d
 800d504:	0800d57d 	.word	0x0800d57d
 800d508:	0800d565 	.word	0x0800d565
 800d50c:	0800d57d 	.word	0x0800d57d
 800d510:	0800d57d 	.word	0x0800d57d
 800d514:	0800d57d 	.word	0x0800d57d
 800d518:	0800d57d 	.word	0x0800d57d
 800d51c:	0800d57d 	.word	0x0800d57d
 800d520:	0800d57d 	.word	0x0800d57d
 800d524:	0800d57d 	.word	0x0800d57d
 800d528:	0800d56d 	.word	0x0800d56d
 800d52c:	0800d57d 	.word	0x0800d57d
 800d530:	0800d57d 	.word	0x0800d57d
 800d534:	0800d57d 	.word	0x0800d57d
 800d538:	0800d57d 	.word	0x0800d57d
 800d53c:	0800d57d 	.word	0x0800d57d
 800d540:	0800d57d 	.word	0x0800d57d
 800d544:	0800d57d 	.word	0x0800d57d
 800d548:	0800d575 	.word	0x0800d575
 800d54c:	2301      	movs	r3, #1
 800d54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d552:	e0d6      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d554:	2304      	movs	r3, #4
 800d556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d55a:	e0d2      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d55c:	2308      	movs	r3, #8
 800d55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d562:	e0ce      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d564:	2310      	movs	r3, #16
 800d566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d56a:	e0ca      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d56c:	2320      	movs	r3, #32
 800d56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d572:	e0c6      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d574:	2340      	movs	r3, #64	; 0x40
 800d576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d57a:	e0c2      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d57c:	2380      	movs	r3, #128	; 0x80
 800d57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d582:	e0be      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d584:	40011400 	.word	0x40011400
 800d588:	58024400 	.word	0x58024400
 800d58c:	40007800 	.word	0x40007800
 800d590:	40007c00 	.word	0x40007c00
 800d594:	40011800 	.word	0x40011800
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4aad      	ldr	r2, [pc, #692]	; (800d854 <UART_SetConfig+0x8fc>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d176      	bne.n	800d690 <UART_SetConfig+0x738>
 800d5a2:	4bad      	ldr	r3, [pc, #692]	; (800d858 <UART_SetConfig+0x900>)
 800d5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5aa:	2b28      	cmp	r3, #40	; 0x28
 800d5ac:	d86c      	bhi.n	800d688 <UART_SetConfig+0x730>
 800d5ae:	a201      	add	r2, pc, #4	; (adr r2, 800d5b4 <UART_SetConfig+0x65c>)
 800d5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b4:	0800d659 	.word	0x0800d659
 800d5b8:	0800d689 	.word	0x0800d689
 800d5bc:	0800d689 	.word	0x0800d689
 800d5c0:	0800d689 	.word	0x0800d689
 800d5c4:	0800d689 	.word	0x0800d689
 800d5c8:	0800d689 	.word	0x0800d689
 800d5cc:	0800d689 	.word	0x0800d689
 800d5d0:	0800d689 	.word	0x0800d689
 800d5d4:	0800d661 	.word	0x0800d661
 800d5d8:	0800d689 	.word	0x0800d689
 800d5dc:	0800d689 	.word	0x0800d689
 800d5e0:	0800d689 	.word	0x0800d689
 800d5e4:	0800d689 	.word	0x0800d689
 800d5e8:	0800d689 	.word	0x0800d689
 800d5ec:	0800d689 	.word	0x0800d689
 800d5f0:	0800d689 	.word	0x0800d689
 800d5f4:	0800d669 	.word	0x0800d669
 800d5f8:	0800d689 	.word	0x0800d689
 800d5fc:	0800d689 	.word	0x0800d689
 800d600:	0800d689 	.word	0x0800d689
 800d604:	0800d689 	.word	0x0800d689
 800d608:	0800d689 	.word	0x0800d689
 800d60c:	0800d689 	.word	0x0800d689
 800d610:	0800d689 	.word	0x0800d689
 800d614:	0800d671 	.word	0x0800d671
 800d618:	0800d689 	.word	0x0800d689
 800d61c:	0800d689 	.word	0x0800d689
 800d620:	0800d689 	.word	0x0800d689
 800d624:	0800d689 	.word	0x0800d689
 800d628:	0800d689 	.word	0x0800d689
 800d62c:	0800d689 	.word	0x0800d689
 800d630:	0800d689 	.word	0x0800d689
 800d634:	0800d679 	.word	0x0800d679
 800d638:	0800d689 	.word	0x0800d689
 800d63c:	0800d689 	.word	0x0800d689
 800d640:	0800d689 	.word	0x0800d689
 800d644:	0800d689 	.word	0x0800d689
 800d648:	0800d689 	.word	0x0800d689
 800d64c:	0800d689 	.word	0x0800d689
 800d650:	0800d689 	.word	0x0800d689
 800d654:	0800d681 	.word	0x0800d681
 800d658:	2301      	movs	r3, #1
 800d65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d65e:	e050      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d660:	2304      	movs	r3, #4
 800d662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d666:	e04c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d668:	2308      	movs	r3, #8
 800d66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d66e:	e048      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d670:	2310      	movs	r3, #16
 800d672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d676:	e044      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d678:	2320      	movs	r3, #32
 800d67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d67e:	e040      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d680:	2340      	movs	r3, #64	; 0x40
 800d682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d686:	e03c      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d688:	2380      	movs	r3, #128	; 0x80
 800d68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d68e:	e038      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a71      	ldr	r2, [pc, #452]	; (800d85c <UART_SetConfig+0x904>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d130      	bne.n	800d6fc <UART_SetConfig+0x7a4>
 800d69a:	4b6f      	ldr	r3, [pc, #444]	; (800d858 <UART_SetConfig+0x900>)
 800d69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69e:	f003 0307 	and.w	r3, r3, #7
 800d6a2:	2b05      	cmp	r3, #5
 800d6a4:	d826      	bhi.n	800d6f4 <UART_SetConfig+0x79c>
 800d6a6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ac <UART_SetConfig+0x754>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d6c5 	.word	0x0800d6c5
 800d6b0:	0800d6cd 	.word	0x0800d6cd
 800d6b4:	0800d6d5 	.word	0x0800d6d5
 800d6b8:	0800d6dd 	.word	0x0800d6dd
 800d6bc:	0800d6e5 	.word	0x0800d6e5
 800d6c0:	0800d6ed 	.word	0x0800d6ed
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ca:	e01a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6cc:	2304      	movs	r3, #4
 800d6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6d2:	e016      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6d4:	2308      	movs	r3, #8
 800d6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6da:	e012      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6dc:	2310      	movs	r3, #16
 800d6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6e2:	e00e      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6e4:	2320      	movs	r3, #32
 800d6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ea:	e00a      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6ec:	2340      	movs	r3, #64	; 0x40
 800d6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6f2:	e006      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6f4:	2380      	movs	r3, #128	; 0x80
 800d6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6fa:	e002      	b.n	800d702 <UART_SetConfig+0x7aa>
 800d6fc:	2380      	movs	r3, #128	; 0x80
 800d6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a55      	ldr	r2, [pc, #340]	; (800d85c <UART_SetConfig+0x904>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	f040 80f0 	bne.w	800d8ee <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d70e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d712:	2b20      	cmp	r3, #32
 800d714:	dc46      	bgt.n	800d7a4 <UART_SetConfig+0x84c>
 800d716:	2b02      	cmp	r3, #2
 800d718:	db75      	blt.n	800d806 <UART_SetConfig+0x8ae>
 800d71a:	3b02      	subs	r3, #2
 800d71c:	2b1e      	cmp	r3, #30
 800d71e:	d872      	bhi.n	800d806 <UART_SetConfig+0x8ae>
 800d720:	a201      	add	r2, pc, #4	; (adr r2, 800d728 <UART_SetConfig+0x7d0>)
 800d722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d726:	bf00      	nop
 800d728:	0800d7ab 	.word	0x0800d7ab
 800d72c:	0800d807 	.word	0x0800d807
 800d730:	0800d7b3 	.word	0x0800d7b3
 800d734:	0800d807 	.word	0x0800d807
 800d738:	0800d807 	.word	0x0800d807
 800d73c:	0800d807 	.word	0x0800d807
 800d740:	0800d7c3 	.word	0x0800d7c3
 800d744:	0800d807 	.word	0x0800d807
 800d748:	0800d807 	.word	0x0800d807
 800d74c:	0800d807 	.word	0x0800d807
 800d750:	0800d807 	.word	0x0800d807
 800d754:	0800d807 	.word	0x0800d807
 800d758:	0800d807 	.word	0x0800d807
 800d75c:	0800d807 	.word	0x0800d807
 800d760:	0800d7d3 	.word	0x0800d7d3
 800d764:	0800d807 	.word	0x0800d807
 800d768:	0800d807 	.word	0x0800d807
 800d76c:	0800d807 	.word	0x0800d807
 800d770:	0800d807 	.word	0x0800d807
 800d774:	0800d807 	.word	0x0800d807
 800d778:	0800d807 	.word	0x0800d807
 800d77c:	0800d807 	.word	0x0800d807
 800d780:	0800d807 	.word	0x0800d807
 800d784:	0800d807 	.word	0x0800d807
 800d788:	0800d807 	.word	0x0800d807
 800d78c:	0800d807 	.word	0x0800d807
 800d790:	0800d807 	.word	0x0800d807
 800d794:	0800d807 	.word	0x0800d807
 800d798:	0800d807 	.word	0x0800d807
 800d79c:	0800d807 	.word	0x0800d807
 800d7a0:	0800d7f9 	.word	0x0800d7f9
 800d7a4:	2b40      	cmp	r3, #64	; 0x40
 800d7a6:	d02a      	beq.n	800d7fe <UART_SetConfig+0x8a6>
 800d7a8:	e02d      	b.n	800d806 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d7aa:	f7fc f877 	bl	800989c <HAL_RCCEx_GetD3PCLK1Freq>
 800d7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d7b0:	e02f      	b.n	800d812 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7b2:	f107 0314 	add.w	r3, r7, #20
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fc f886 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7c0:	e027      	b.n	800d812 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fc f9d2 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7d0:	e01f      	b.n	800d812 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7d2:	4b21      	ldr	r3, [pc, #132]	; (800d858 <UART_SetConfig+0x900>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d009      	beq.n	800d7f2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7de:	4b1e      	ldr	r3, [pc, #120]	; (800d858 <UART_SetConfig+0x900>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	08db      	lsrs	r3, r3, #3
 800d7e4:	f003 0303 	and.w	r3, r3, #3
 800d7e8:	4a1d      	ldr	r2, [pc, #116]	; (800d860 <UART_SetConfig+0x908>)
 800d7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7f0:	e00f      	b.n	800d812 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800d7f2:	4b1b      	ldr	r3, [pc, #108]	; (800d860 <UART_SetConfig+0x908>)
 800d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7f6:	e00c      	b.n	800d812 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7f8:	4b1a      	ldr	r3, [pc, #104]	; (800d864 <UART_SetConfig+0x90c>)
 800d7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7fc:	e009      	b.n	800d812 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d804:	e005      	b.n	800d812 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 81e6 	beq.w	800dbe6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81e:	4a12      	ldr	r2, [pc, #72]	; (800d868 <UART_SetConfig+0x910>)
 800d820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d824:	461a      	mov	r2, r3
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	fbb3 f3f2 	udiv	r3, r3, r2
 800d82c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685a      	ldr	r2, [r3, #4]
 800d832:	4613      	mov	r3, r2
 800d834:	005b      	lsls	r3, r3, #1
 800d836:	4413      	add	r3, r2
 800d838:	6a3a      	ldr	r2, [r7, #32]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d305      	bcc.n	800d84a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d844:	6a3a      	ldr	r2, [r7, #32]
 800d846:	429a      	cmp	r2, r3
 800d848:	d910      	bls.n	800d86c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d850:	e1c9      	b.n	800dbe6 <UART_SetConfig+0xc8e>
 800d852:	bf00      	nop
 800d854:	40011c00 	.word	0x40011c00
 800d858:	58024400 	.word	0x58024400
 800d85c:	58000c00 	.word	0x58000c00
 800d860:	03d09000 	.word	0x03d09000
 800d864:	003d0900 	.word	0x003d0900
 800d868:	0800e688 	.word	0x0800e688
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	4618      	mov	r0, r3
 800d870:	f04f 0100 	mov.w	r1, #0
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d878:	4ac1      	ldr	r2, [pc, #772]	; (800db80 <UART_SetConfig+0xc28>)
 800d87a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87e:	b29a      	uxth	r2, r3
 800d880:	f04f 0300 	mov.w	r3, #0
 800d884:	f7f2 fd42 	bl	800030c <__aeabi_uldivmod>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4610      	mov	r0, r2
 800d88e:	4619      	mov	r1, r3
 800d890:	f04f 0200 	mov.w	r2, #0
 800d894:	f04f 0300 	mov.w	r3, #0
 800d898:	020b      	lsls	r3, r1, #8
 800d89a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d89e:	0202      	lsls	r2, r0, #8
 800d8a0:	6879      	ldr	r1, [r7, #4]
 800d8a2:	6849      	ldr	r1, [r1, #4]
 800d8a4:	0849      	lsrs	r1, r1, #1
 800d8a6:	4608      	mov	r0, r1
 800d8a8:	f04f 0100 	mov.w	r1, #0
 800d8ac:	1814      	adds	r4, r2, r0
 800d8ae:	eb43 0501 	adc.w	r5, r3, r1
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f04f 0300 	mov.w	r3, #0
 800d8bc:	4620      	mov	r0, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	f7f2 fd24 	bl	800030c <__aeabi_uldivmod>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8d2:	d308      	bcc.n	800d8e6 <UART_SetConfig+0x98e>
 800d8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8da:	d204      	bcs.n	800d8e6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e2:	60da      	str	r2, [r3, #12]
 800d8e4:	e17f      	b.n	800dbe6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d8ec:	e17b      	b.n	800dbe6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8f6:	f040 80bd 	bne.w	800da74 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800d8fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	dc48      	bgt.n	800d994 <UART_SetConfig+0xa3c>
 800d902:	2b00      	cmp	r3, #0
 800d904:	db7b      	blt.n	800d9fe <UART_SetConfig+0xaa6>
 800d906:	2b20      	cmp	r3, #32
 800d908:	d879      	bhi.n	800d9fe <UART_SetConfig+0xaa6>
 800d90a:	a201      	add	r2, pc, #4	; (adr r2, 800d910 <UART_SetConfig+0x9b8>)
 800d90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d910:	0800d99b 	.word	0x0800d99b
 800d914:	0800d9a3 	.word	0x0800d9a3
 800d918:	0800d9ff 	.word	0x0800d9ff
 800d91c:	0800d9ff 	.word	0x0800d9ff
 800d920:	0800d9ab 	.word	0x0800d9ab
 800d924:	0800d9ff 	.word	0x0800d9ff
 800d928:	0800d9ff 	.word	0x0800d9ff
 800d92c:	0800d9ff 	.word	0x0800d9ff
 800d930:	0800d9bb 	.word	0x0800d9bb
 800d934:	0800d9ff 	.word	0x0800d9ff
 800d938:	0800d9ff 	.word	0x0800d9ff
 800d93c:	0800d9ff 	.word	0x0800d9ff
 800d940:	0800d9ff 	.word	0x0800d9ff
 800d944:	0800d9ff 	.word	0x0800d9ff
 800d948:	0800d9ff 	.word	0x0800d9ff
 800d94c:	0800d9ff 	.word	0x0800d9ff
 800d950:	0800d9cb 	.word	0x0800d9cb
 800d954:	0800d9ff 	.word	0x0800d9ff
 800d958:	0800d9ff 	.word	0x0800d9ff
 800d95c:	0800d9ff 	.word	0x0800d9ff
 800d960:	0800d9ff 	.word	0x0800d9ff
 800d964:	0800d9ff 	.word	0x0800d9ff
 800d968:	0800d9ff 	.word	0x0800d9ff
 800d96c:	0800d9ff 	.word	0x0800d9ff
 800d970:	0800d9ff 	.word	0x0800d9ff
 800d974:	0800d9ff 	.word	0x0800d9ff
 800d978:	0800d9ff 	.word	0x0800d9ff
 800d97c:	0800d9ff 	.word	0x0800d9ff
 800d980:	0800d9ff 	.word	0x0800d9ff
 800d984:	0800d9ff 	.word	0x0800d9ff
 800d988:	0800d9ff 	.word	0x0800d9ff
 800d98c:	0800d9ff 	.word	0x0800d9ff
 800d990:	0800d9f1 	.word	0x0800d9f1
 800d994:	2b40      	cmp	r3, #64	; 0x40
 800d996:	d02e      	beq.n	800d9f6 <UART_SetConfig+0xa9e>
 800d998:	e031      	b.n	800d9fe <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d99a:	f7fa fc35 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 800d99e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d9a0:	e033      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9a2:	f7fa fc47 	bl	8008234 <HAL_RCC_GetPCLK2Freq>
 800d9a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d9a8:	e02f      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9aa:	f107 0314 	add.w	r3, r7, #20
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fb ff8a 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9b8:	e027      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fc f8d6 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9c8:	e01f      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9ca:	4b6e      	ldr	r3, [pc, #440]	; (800db84 <UART_SetConfig+0xc2c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0320 	and.w	r3, r3, #32
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d009      	beq.n	800d9ea <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9d6:	4b6b      	ldr	r3, [pc, #428]	; (800db84 <UART_SetConfig+0xc2c>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	08db      	lsrs	r3, r3, #3
 800d9dc:	f003 0303 	and.w	r3, r3, #3
 800d9e0:	4a69      	ldr	r2, [pc, #420]	; (800db88 <UART_SetConfig+0xc30>)
 800d9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9e8:	e00f      	b.n	800da0a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800d9ea:	4b67      	ldr	r3, [pc, #412]	; (800db88 <UART_SetConfig+0xc30>)
 800d9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9ee:	e00c      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9f0:	4b66      	ldr	r3, [pc, #408]	; (800db8c <UART_SetConfig+0xc34>)
 800d9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9f4:	e009      	b.n	800da0a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9fc:	e005      	b.n	800da0a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800d9fe:	2300      	movs	r3, #0
 800da00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800da08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 80ea 	beq.w	800dbe6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da16:	4a5a      	ldr	r2, [pc, #360]	; (800db80 <UART_SetConfig+0xc28>)
 800da18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da1c:	461a      	mov	r2, r3
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	fbb3 f3f2 	udiv	r3, r3, r2
 800da24:	005a      	lsls	r2, r3, #1
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	441a      	add	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	fbb2 f3f3 	udiv	r3, r2, r3
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	2b0f      	cmp	r3, #15
 800da3c:	d916      	bls.n	800da6c <UART_SetConfig+0xb14>
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da44:	d212      	bcs.n	800da6c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	b29b      	uxth	r3, r3
 800da4a:	f023 030f 	bic.w	r3, r3, #15
 800da4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	085b      	lsrs	r3, r3, #1
 800da54:	b29b      	uxth	r3, r3
 800da56:	f003 0307 	and.w	r3, r3, #7
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da5e:	4313      	orrs	r3, r2
 800da60:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da68:	60da      	str	r2, [r3, #12]
 800da6a:	e0bc      	b.n	800dbe6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800da72:	e0b8      	b.n	800dbe6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da78:	2b20      	cmp	r3, #32
 800da7a:	dc4b      	bgt.n	800db14 <UART_SetConfig+0xbbc>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f2c0 8087 	blt.w	800db90 <UART_SetConfig+0xc38>
 800da82:	2b20      	cmp	r3, #32
 800da84:	f200 8084 	bhi.w	800db90 <UART_SetConfig+0xc38>
 800da88:	a201      	add	r2, pc, #4	; (adr r2, 800da90 <UART_SetConfig+0xb38>)
 800da8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8e:	bf00      	nop
 800da90:	0800db1b 	.word	0x0800db1b
 800da94:	0800db23 	.word	0x0800db23
 800da98:	0800db91 	.word	0x0800db91
 800da9c:	0800db91 	.word	0x0800db91
 800daa0:	0800db2b 	.word	0x0800db2b
 800daa4:	0800db91 	.word	0x0800db91
 800daa8:	0800db91 	.word	0x0800db91
 800daac:	0800db91 	.word	0x0800db91
 800dab0:	0800db3b 	.word	0x0800db3b
 800dab4:	0800db91 	.word	0x0800db91
 800dab8:	0800db91 	.word	0x0800db91
 800dabc:	0800db91 	.word	0x0800db91
 800dac0:	0800db91 	.word	0x0800db91
 800dac4:	0800db91 	.word	0x0800db91
 800dac8:	0800db91 	.word	0x0800db91
 800dacc:	0800db91 	.word	0x0800db91
 800dad0:	0800db4b 	.word	0x0800db4b
 800dad4:	0800db91 	.word	0x0800db91
 800dad8:	0800db91 	.word	0x0800db91
 800dadc:	0800db91 	.word	0x0800db91
 800dae0:	0800db91 	.word	0x0800db91
 800dae4:	0800db91 	.word	0x0800db91
 800dae8:	0800db91 	.word	0x0800db91
 800daec:	0800db91 	.word	0x0800db91
 800daf0:	0800db91 	.word	0x0800db91
 800daf4:	0800db91 	.word	0x0800db91
 800daf8:	0800db91 	.word	0x0800db91
 800dafc:	0800db91 	.word	0x0800db91
 800db00:	0800db91 	.word	0x0800db91
 800db04:	0800db91 	.word	0x0800db91
 800db08:	0800db91 	.word	0x0800db91
 800db0c:	0800db91 	.word	0x0800db91
 800db10:	0800db71 	.word	0x0800db71
 800db14:	2b40      	cmp	r3, #64	; 0x40
 800db16:	d02e      	beq.n	800db76 <UART_SetConfig+0xc1e>
 800db18:	e03a      	b.n	800db90 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db1a:	f7fa fb75 	bl	8008208 <HAL_RCC_GetPCLK1Freq>
 800db1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800db20:	e03c      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db22:	f7fa fb87 	bl	8008234 <HAL_RCC_GetPCLK2Freq>
 800db26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800db28:	e038      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2a:	f107 0314 	add.w	r3, r7, #20
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fb feca 	bl	80098c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db38:	e030      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db3a:	f107 0308 	add.w	r3, r7, #8
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fc f816 	bl	8009b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db48:	e028      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db4a:	4b0e      	ldr	r3, [pc, #56]	; (800db84 <UART_SetConfig+0xc2c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0320 	and.w	r3, r3, #32
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db56:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <UART_SetConfig+0xc2c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	08db      	lsrs	r3, r3, #3
 800db5c:	f003 0303 	and.w	r3, r3, #3
 800db60:	4a09      	ldr	r2, [pc, #36]	; (800db88 <UART_SetConfig+0xc30>)
 800db62:	fa22 f303 	lsr.w	r3, r2, r3
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db68:	e018      	b.n	800db9c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800db6a:	4b07      	ldr	r3, [pc, #28]	; (800db88 <UART_SetConfig+0xc30>)
 800db6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db6e:	e015      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db70:	4b06      	ldr	r3, [pc, #24]	; (800db8c <UART_SetConfig+0xc34>)
 800db72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db74:	e012      	b.n	800db9c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db7c:	e00e      	b.n	800db9c <UART_SetConfig+0xc44>
 800db7e:	bf00      	nop
 800db80:	0800e688 	.word	0x0800e688
 800db84:	58024400 	.word	0x58024400
 800db88:	03d09000 	.word	0x03d09000
 800db8c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800db90:	2300      	movs	r3, #0
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800db9a:	bf00      	nop
    }

    if (pclk != 0U)
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d021      	beq.n	800dbe6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba6:	4a1a      	ldr	r2, [pc, #104]	; (800dc10 <UART_SetConfig+0xcb8>)
 800dba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbac:	461a      	mov	r2, r3
 800dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	085b      	lsrs	r3, r3, #1
 800dbba:	441a      	add	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	2b0f      	cmp	r3, #15
 800dbca:	d909      	bls.n	800dbe0 <UART_SetConfig+0xc88>
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd2:	d205      	bcs.n	800dbe0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60da      	str	r2, [r3, #12]
 800dbde:	e002      	b.n	800dbe6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dc02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3738      	adds	r7, #56	; 0x38
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	0800e688 	.word	0x0800e688

0800dc14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00a      	beq.n	800dc3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc42:	f003 0302 	and.w	r3, r3, #2
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00a      	beq.n	800dc60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc64:	f003 0304 	and.w	r3, r3, #4
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00a      	beq.n	800dc82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	430a      	orrs	r2, r1
 800dc80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc86:	f003 0308 	and.w	r3, r3, #8
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00a      	beq.n	800dca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	430a      	orrs	r2, r1
 800dca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00a      	beq.n	800dcc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	689b      	ldr	r3, [r3, #8]
 800dcb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcca:	f003 0320 	and.w	r3, r3, #32
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00a      	beq.n	800dce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	430a      	orrs	r2, r1
 800dce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d01a      	beq.n	800dd2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	430a      	orrs	r2, r1
 800dd08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd12:	d10a      	bne.n	800dd2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d00a      	beq.n	800dd4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	430a      	orrs	r2, r1
 800dd4a:	605a      	str	r2, [r3, #4]
  }
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd68:	f7f4 fed0 	bl	8002b0c <HAL_GetTick>
 800dd6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 0308 	and.w	r3, r3, #8
 800dd78:	2b08      	cmp	r3, #8
 800dd7a:	d10e      	bne.n	800dd9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f82f 	bl	800ddee <UART_WaitOnFlagUntilTimeout>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd96:	2303      	movs	r3, #3
 800dd98:	e025      	b.n	800dde6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b04      	cmp	r3, #4
 800dda6:	d10e      	bne.n	800ddc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dda8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f819 	bl	800ddee <UART_WaitOnFlagUntilTimeout>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e00f      	b.n	800dde6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2220      	movs	r2, #32
 800ddca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b09c      	sub	sp, #112	; 0x70
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	60f8      	str	r0, [r7, #12]
 800ddf6:	60b9      	str	r1, [r7, #8]
 800ddf8:	603b      	str	r3, [r7, #0]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddfe:	e0a9      	b.n	800df54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de06:	f000 80a5 	beq.w	800df54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de0a:	f7f4 fe7f 	bl	8002b0c <HAL_GetTick>
 800de0e:	4602      	mov	r2, r0
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de16:	429a      	cmp	r2, r3
 800de18:	d302      	bcc.n	800de20 <UART_WaitOnFlagUntilTimeout+0x32>
 800de1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d140      	bne.n	800dea2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de28:	e853 3f00 	ldrex	r3, [r3]
 800de2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de34:	667b      	str	r3, [r7, #100]	; 0x64
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	461a      	mov	r2, r3
 800de3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de46:	e841 2300 	strex	r3, r2, [r1]
 800de4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800de4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e6      	bne.n	800de20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3308      	adds	r3, #8
 800de58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5c:	e853 3f00 	ldrex	r3, [r3]
 800de60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de64:	f023 0301 	bic.w	r3, r3, #1
 800de68:	663b      	str	r3, [r7, #96]	; 0x60
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3308      	adds	r3, #8
 800de70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de72:	64ba      	str	r2, [r7, #72]	; 0x48
 800de74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e5      	bne.n	800de52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2220      	movs	r2, #32
 800de92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800de9e:	2303      	movs	r3, #3
 800dea0:	e069      	b.n	800df76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 0304 	and.w	r3, r3, #4
 800deac:	2b00      	cmp	r3, #0
 800deae:	d051      	beq.n	800df54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800deba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800debe:	d149      	bne.n	800df54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dec8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	e853 3f00 	ldrex	r3, [r3]
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dede:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
 800dee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dee8:	637b      	str	r3, [r7, #52]	; 0x34
 800deea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800deee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800def0:	e841 2300 	strex	r3, r2, [r1]
 800def4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800def6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e6      	bne.n	800deca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	3308      	adds	r3, #8
 800df02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	e853 3f00 	ldrex	r3, [r3]
 800df0a:	613b      	str	r3, [r7, #16]
   return(result);
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	f023 0301 	bic.w	r3, r3, #1
 800df12:	66bb      	str	r3, [r7, #104]	; 0x68
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3308      	adds	r3, #8
 800df1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df1c:	623a      	str	r2, [r7, #32]
 800df1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df20:	69f9      	ldr	r1, [r7, #28]
 800df22:	6a3a      	ldr	r2, [r7, #32]
 800df24:	e841 2300 	strex	r3, r2, [r1]
 800df28:	61bb      	str	r3, [r7, #24]
   return(result);
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e5      	bne.n	800defc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2220      	movs	r2, #32
 800df34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2220      	movs	r2, #32
 800df3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2220      	movs	r2, #32
 800df44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df50:	2303      	movs	r3, #3
 800df52:	e010      	b.n	800df76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	69da      	ldr	r2, [r3, #28]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	4013      	ands	r3, r2
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	429a      	cmp	r2, r3
 800df62:	bf0c      	ite	eq
 800df64:	2301      	moveq	r3, #1
 800df66:	2300      	movne	r3, #0
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	461a      	mov	r2, r3
 800df6c:	79fb      	ldrb	r3, [r7, #7]
 800df6e:	429a      	cmp	r2, r3
 800df70:	f43f af46 	beq.w	800de00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3770      	adds	r7, #112	; 0x70
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b096      	sub	sp, #88	; 0x58
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	4613      	mov	r3, r2
 800df8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	88fa      	ldrh	r2, [r7, #6]
 800df98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2222      	movs	r2, #34	; 0x22
 800dfa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d02c      	beq.n	800e00e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb8:	4a42      	ldr	r2, [pc, #264]	; (800e0c4 <UART_Start_Receive_DMA+0x144>)
 800dfba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfc0:	4a41      	ldr	r2, [pc, #260]	; (800e0c8 <UART_Start_Receive_DMA+0x148>)
 800dfc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfc8:	4a40      	ldr	r2, [pc, #256]	; (800e0cc <UART_Start_Receive_DMA+0x14c>)
 800dfca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3324      	adds	r3, #36	; 0x24
 800dfde:	4619      	mov	r1, r3
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	88fb      	ldrh	r3, [r7, #6]
 800dfe8:	f7f7 f962 	bl	80052b0 <HAL_DMA_Start_IT>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00d      	beq.n	800e00e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2210      	movs	r2, #16
 800dff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2220      	movs	r2, #32
 800e006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e055      	b.n	800e0ba <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d018      	beq.n	800e050 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e026:	e853 3f00 	ldrex	r3, [r3]
 800e02a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e032:	657b      	str	r3, [r7, #84]	; 0x54
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	461a      	mov	r2, r3
 800e03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e03c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e03e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e040:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e044:	e841 2300 	strex	r3, r2, [r1]
 800e048:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1e6      	bne.n	800e01e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3308      	adds	r3, #8
 800e056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	e853 3f00 	ldrex	r3, [r3]
 800e05e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e062:	f043 0301 	orr.w	r3, r3, #1
 800e066:	653b      	str	r3, [r7, #80]	; 0x50
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3308      	adds	r3, #8
 800e06e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e070:	637a      	str	r2, [r7, #52]	; 0x34
 800e072:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e078:	e841 2300 	strex	r3, r2, [r1]
 800e07c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1e5      	bne.n	800e050 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3308      	adds	r3, #8
 800e08a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	e853 3f00 	ldrex	r3, [r3]
 800e092:	613b      	str	r3, [r7, #16]
   return(result);
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e09a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	3308      	adds	r3, #8
 800e0a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0a4:	623a      	str	r2, [r7, #32]
 800e0a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a8:	69f9      	ldr	r1, [r7, #28]
 800e0aa:	6a3a      	ldr	r2, [r7, #32]
 800e0ac:	e841 2300 	strex	r3, r2, [r1]
 800e0b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1e5      	bne.n	800e084 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3758      	adds	r7, #88	; 0x58
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800e221 	.word	0x0800e221
 800e0c8:	0800e343 	.word	0x0800e343
 800e0cc:	0800e37b 	.word	0x0800e37b

0800e0d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b08f      	sub	sp, #60	; 0x3c
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0de:	6a3b      	ldr	r3, [r7, #32]
 800e0e0:	e853 3f00 	ldrex	r3, [r3]
 800e0e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e0ec:	637b      	str	r3, [r7, #52]	; 0x34
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0fe:	e841 2300 	strex	r3, r2, [r1]
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1e6      	bne.n	800e0d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3308      	adds	r3, #8
 800e110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	e853 3f00 	ldrex	r3, [r3]
 800e118:	60bb      	str	r3, [r7, #8]
   return(result);
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e120:	633b      	str	r3, [r7, #48]	; 0x30
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3308      	adds	r3, #8
 800e128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e12a:	61ba      	str	r2, [r7, #24]
 800e12c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12e:	6979      	ldr	r1, [r7, #20]
 800e130:	69ba      	ldr	r2, [r7, #24]
 800e132:	e841 2300 	strex	r3, r2, [r1]
 800e136:	613b      	str	r3, [r7, #16]
   return(result);
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1e5      	bne.n	800e10a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2220      	movs	r2, #32
 800e142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e146:	bf00      	nop
 800e148:	373c      	adds	r7, #60	; 0x3c
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
	...

0800e154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e154:	b480      	push	{r7}
 800e156:	b095      	sub	sp, #84	; 0x54
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e164:	e853 3f00 	ldrex	r3, [r3]
 800e168:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e170:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e17a:	643b      	str	r3, [r7, #64]	; 0x40
 800e17c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e182:	e841 2300 	strex	r3, r2, [r1]
 800e186:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1e6      	bne.n	800e15c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3308      	adds	r3, #8
 800e194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	e853 3f00 	ldrex	r3, [r3]
 800e19c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e19e:	69fa      	ldr	r2, [r7, #28]
 800e1a0:	4b1e      	ldr	r3, [pc, #120]	; (800e21c <UART_EndRxTransfer+0xc8>)
 800e1a2:	4013      	ands	r3, r2
 800e1a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3308      	adds	r3, #8
 800e1ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e1b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1b6:	e841 2300 	strex	r3, r2, [r1]
 800e1ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1e5      	bne.n	800e18e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d118      	bne.n	800e1fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	e853 3f00 	ldrex	r3, [r3]
 800e1d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	f023 0310 	bic.w	r3, r3, #16
 800e1de:	647b      	str	r3, [r7, #68]	; 0x44
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1e8:	61bb      	str	r3, [r7, #24]
 800e1ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ec:	6979      	ldr	r1, [r7, #20]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	e841 2300 	strex	r3, r2, [r1]
 800e1f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1e6      	bne.n	800e1ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2220      	movs	r2, #32
 800e200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e210:	bf00      	nop
 800e212:	3754      	adds	r7, #84	; 0x54
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	effffffe 	.word	0xeffffffe

0800e220 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b09c      	sub	sp, #112	; 0x70
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e236:	d071      	beq.n	800e31c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e23a:	2200      	movs	r2, #0
 800e23c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e248:	e853 3f00 	ldrex	r3, [r3]
 800e24c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e254:	66bb      	str	r3, [r7, #104]	; 0x68
 800e256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e25e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e260:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e262:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e266:	e841 2300 	strex	r3, r2, [r1]
 800e26a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1e6      	bne.n	800e240 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3308      	adds	r3, #8
 800e278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27c:	e853 3f00 	ldrex	r3, [r3]
 800e280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e284:	f023 0301 	bic.w	r3, r3, #1
 800e288:	667b      	str	r3, [r7, #100]	; 0x64
 800e28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e292:	647a      	str	r2, [r7, #68]	; 0x44
 800e294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e29a:	e841 2300 	strex	r3, r2, [r1]
 800e29e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1e5      	bne.n	800e272 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	e853 3f00 	ldrex	r3, [r3]
 800e2b4:	623b      	str	r3, [r7, #32]
   return(result);
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2bc:	663b      	str	r3, [r7, #96]	; 0x60
 800e2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e2c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ce:	e841 2300 	strex	r3, r2, [r1]
 800e2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1e5      	bne.n	800e2a6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2dc:	2220      	movs	r2, #32
 800e2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d118      	bne.n	800e31c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	e853 3f00 	ldrex	r3, [r3]
 800e2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f023 0310 	bic.w	r3, r3, #16
 800e2fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	461a      	mov	r2, r3
 800e306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e308:	61fb      	str	r3, [r7, #28]
 800e30a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30c:	69b9      	ldr	r1, [r7, #24]
 800e30e:	69fa      	ldr	r2, [r7, #28]
 800e310:	e841 2300 	strex	r3, r2, [r1]
 800e314:	617b      	str	r3, [r7, #20]
   return(result);
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1e6      	bne.n	800e2ea <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e320:	2b01      	cmp	r3, #1
 800e322:	d107      	bne.n	800e334 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e326:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e32a:	4619      	mov	r1, r3
 800e32c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e32e:	f7fe fe07 	bl	800cf40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e332:	e002      	b.n	800e33a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e334:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e336:	f7fe fde5 	bl	800cf04 <HAL_UART_RxCpltCallback>
}
 800e33a:	bf00      	nop
 800e33c:	3770      	adds	r7, #112	; 0x70
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e354:	2b01      	cmp	r3, #1
 800e356:	d109      	bne.n	800e36c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e35e:	085b      	lsrs	r3, r3, #1
 800e360:	b29b      	uxth	r3, r3
 800e362:	4619      	mov	r1, r3
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f7fe fdeb 	bl	800cf40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e36a:	e002      	b.n	800e372 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7fe fdd3 	bl	800cf18 <HAL_UART_RxHalfCpltCallback>
}
 800e372:	bf00      	nop
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b086      	sub	sp, #24
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e386:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e38e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e396:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a2:	2b80      	cmp	r3, #128	; 0x80
 800e3a4:	d109      	bne.n	800e3ba <UART_DMAError+0x40>
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	2b21      	cmp	r3, #33	; 0x21
 800e3aa:	d106      	bne.n	800e3ba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e3b4:	6978      	ldr	r0, [r7, #20]
 800e3b6:	f7ff fe8b 	bl	800e0d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c4:	2b40      	cmp	r3, #64	; 0x40
 800e3c6:	d109      	bne.n	800e3dc <UART_DMAError+0x62>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b22      	cmp	r3, #34	; 0x22
 800e3cc:	d106      	bne.n	800e3dc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e3d6:	6978      	ldr	r0, [r7, #20]
 800e3d8:	f7ff febc 	bl	800e154 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3e2:	f043 0210 	orr.w	r2, r3, #16
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3ec:	6978      	ldr	r0, [r7, #20]
 800e3ee:	f7fe fd9d 	bl	800cf2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3f2:	bf00      	nop
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b085      	sub	sp, #20
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d101      	bne.n	800e410 <HAL_UARTEx_DisableFifoMode+0x16>
 800e40c:	2302      	movs	r3, #2
 800e40e:	e027      	b.n	800e460 <HAL_UARTEx_DisableFifoMode+0x66>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2224      	movs	r2, #36	; 0x24
 800e41c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f022 0201 	bic.w	r2, r2, #1
 800e436:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e43e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2220      	movs	r2, #32
 800e452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d101      	bne.n	800e484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e480:	2302      	movs	r3, #2
 800e482:	e02d      	b.n	800e4e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2224      	movs	r2, #36	; 0x24
 800e490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f022 0201 	bic.w	r2, r2, #1
 800e4aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	430a      	orrs	r2, r1
 800e4be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f84f 	bl	800e564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3710      	adds	r7, #16
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d101      	bne.n	800e500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	e02d      	b.n	800e55c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2224      	movs	r2, #36	; 0x24
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f022 0201 	bic.w	r2, r2, #1
 800e526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	430a      	orrs	r2, r1
 800e53a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f811 	bl	800e564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2220      	movs	r2, #32
 800e54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3710      	adds	r7, #16
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e570:	2b00      	cmp	r3, #0
 800e572:	d108      	bne.n	800e586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e584:	e031      	b.n	800e5ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e586:	2310      	movs	r3, #16
 800e588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e58a:	2310      	movs	r3, #16
 800e58c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	0e5b      	lsrs	r3, r3, #25
 800e596:	b2db      	uxtb	r3, r3
 800e598:	f003 0307 	and.w	r3, r3, #7
 800e59c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	0f5b      	lsrs	r3, r3, #29
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	f003 0307 	and.w	r3, r3, #7
 800e5ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5ae:	7bbb      	ldrb	r3, [r7, #14]
 800e5b0:	7b3a      	ldrb	r2, [r7, #12]
 800e5b2:	4911      	ldr	r1, [pc, #68]	; (800e5f8 <UARTEx_SetNbDataToProcess+0x94>)
 800e5b4:	5c8a      	ldrb	r2, [r1, r2]
 800e5b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e5ba:	7b3a      	ldrb	r2, [r7, #12]
 800e5bc:	490f      	ldr	r1, [pc, #60]	; (800e5fc <UARTEx_SetNbDataToProcess+0x98>)
 800e5be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	7b7a      	ldrb	r2, [r7, #13]
 800e5d0:	4909      	ldr	r1, [pc, #36]	; (800e5f8 <UARTEx_SetNbDataToProcess+0x94>)
 800e5d2:	5c8a      	ldrb	r2, [r1, r2]
 800e5d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e5d8:	7b7a      	ldrb	r2, [r7, #13]
 800e5da:	4908      	ldr	r1, [pc, #32]	; (800e5fc <UARTEx_SetNbDataToProcess+0x98>)
 800e5dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5de:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e5ea:	bf00      	nop
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	0800e6a0 	.word	0x0800e6a0
 800e5fc:	0800e6a8 	.word	0x0800e6a8

0800e600 <__libc_init_array>:
 800e600:	b570      	push	{r4, r5, r6, lr}
 800e602:	4d0d      	ldr	r5, [pc, #52]	; (800e638 <__libc_init_array+0x38>)
 800e604:	4c0d      	ldr	r4, [pc, #52]	; (800e63c <__libc_init_array+0x3c>)
 800e606:	1b64      	subs	r4, r4, r5
 800e608:	10a4      	asrs	r4, r4, #2
 800e60a:	2600      	movs	r6, #0
 800e60c:	42a6      	cmp	r6, r4
 800e60e:	d109      	bne.n	800e624 <__libc_init_array+0x24>
 800e610:	4d0b      	ldr	r5, [pc, #44]	; (800e640 <__libc_init_array+0x40>)
 800e612:	4c0c      	ldr	r4, [pc, #48]	; (800e644 <__libc_init_array+0x44>)
 800e614:	f000 f820 	bl	800e658 <_init>
 800e618:	1b64      	subs	r4, r4, r5
 800e61a:	10a4      	asrs	r4, r4, #2
 800e61c:	2600      	movs	r6, #0
 800e61e:	42a6      	cmp	r6, r4
 800e620:	d105      	bne.n	800e62e <__libc_init_array+0x2e>
 800e622:	bd70      	pop	{r4, r5, r6, pc}
 800e624:	f855 3b04 	ldr.w	r3, [r5], #4
 800e628:	4798      	blx	r3
 800e62a:	3601      	adds	r6, #1
 800e62c:	e7ee      	b.n	800e60c <__libc_init_array+0xc>
 800e62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e632:	4798      	blx	r3
 800e634:	3601      	adds	r6, #1
 800e636:	e7f2      	b.n	800e61e <__libc_init_array+0x1e>
 800e638:	0800e6b8 	.word	0x0800e6b8
 800e63c:	0800e6b8 	.word	0x0800e6b8
 800e640:	0800e6b8 	.word	0x0800e6b8
 800e644:	0800e6bc 	.word	0x0800e6bc

0800e648 <memset>:
 800e648:	4402      	add	r2, r0
 800e64a:	4603      	mov	r3, r0
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d100      	bne.n	800e652 <memset+0xa>
 800e650:	4770      	bx	lr
 800e652:	f803 1b01 	strb.w	r1, [r3], #1
 800e656:	e7f9      	b.n	800e64c <memset+0x4>

0800e658 <_init>:
 800e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65a:	bf00      	nop
 800e65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65e:	bc08      	pop	{r3}
 800e660:	469e      	mov	lr, r3
 800e662:	4770      	bx	lr

0800e664 <_fini>:
 800e664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e666:	bf00      	nop
 800e668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e66a:	bc08      	pop	{r3}
 800e66c:	469e      	mov	lr, r3
 800e66e:	4770      	bx	lr
