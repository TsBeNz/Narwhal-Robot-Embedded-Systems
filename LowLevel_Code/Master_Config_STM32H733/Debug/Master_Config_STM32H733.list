
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116a8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08011978  08011978  00021978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080119c8  080119c8  000219c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080119d0  080119d0  000219d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080119d4  080119d4  000219d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080119d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dbc  20000010  080119e8  00030010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000dcc  080119e8  00030dcc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003da35  00000000  00000000  0003003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005901  00000000  00000000  0006da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c80  00000000  00000000  00073378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001aa8  00000000  00000000  00074ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039152  00000000  00000000  00076aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a11b  00000000  00000000  000afbf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cc94  00000000  00000000  000d9d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002469a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007950  00000000  00000000  002469f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000010 	.word	0x20000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011960 	.word	0x08011960

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000014 	.word	0x20000014
 800030c:	08011960 	.word	0x08011960

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f85f 	bl	80006dc <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	89db      	ldrh	r3, [r3, #14]
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000648 <EncPulse2Rad_Read+0x40>
 800062e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edd3 7a07 	vldr	s15, [r3, #28]
 8000638:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	39c90fd4 	.word	0x39c90fd4

0800064c <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6178      	str	r0, [r7, #20]
 8000654:	6139      	str	r1, [r7, #16]
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	8c3a      	ldrh	r2, [r7, #32]
 8000674:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000676:	8c3b      	ldrh	r3, [r7, #32]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f008 fc3f 	bl	8008f00 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2200      	movs	r2, #0
 8000686:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2200      	movs	r2, #0
 800068c:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006be:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006d8 <AS5047U_init+0x8c>
 80006c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	39c90fd4 	.word	0x39c90fd4

080006dc <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 80006e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80006ec:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 80006ee:	2300      	movs	r3, #0
 80006f0:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 80006f2:	2300      	movs	r3, #0
 80006f4:	83fb      	strh	r3, [r7, #30]
 80006f6:	e002      	b.n	80006fe <AS5047U_Position_Highspeed_Read+0x22>
 80006f8:	8bfb      	ldrh	r3, [r7, #30]
 80006fa:	3301      	adds	r3, #1
 80006fc:	83fb      	strh	r3, [r7, #30]
 80006fe:	8bfb      	ldrh	r3, [r7, #30]
 8000700:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000704:	d9f8      	bls.n	80006f8 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6898      	ldr	r0, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	f008 fbf5 	bl	8008f00 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 400; i++);
 8000716:	2300      	movs	r3, #0
 8000718:	83bb      	strh	r3, [r7, #28]
 800071a:	e002      	b.n	8000722 <AS5047U_Position_Highspeed_Read+0x46>
 800071c:	8bbb      	ldrh	r3, [r7, #28]
 800071e:	3301      	adds	r3, #1
 8000720:	83bb      	strh	r3, [r7, #28]
 8000722:	8bbb      	ldrh	r3, [r7, #28]
 8000724:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000728:	d9f8      	bls.n	800071c <AS5047U_Position_Highspeed_Read+0x40>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f107 0110 	add.w	r1, r7, #16
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	2202      	movs	r2, #2
 8000736:	f00b fe49 	bl	800c3cc <HAL_SPI_Transmit>
	for (uint16_t i=0; i <= 400; i++);
 800073a:	2300      	movs	r3, #0
 800073c:	837b      	strh	r3, [r7, #26]
 800073e:	e002      	b.n	8000746 <AS5047U_Position_Highspeed_Read+0x6a>
 8000740:	8b7b      	ldrh	r3, [r7, #26]
 8000742:	3301      	adds	r3, #1
 8000744:	837b      	strh	r3, [r7, #26]
 8000746:	8b7b      	ldrh	r3, [r7, #26]
 8000748:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800074c:	d9f8      	bls.n	8000740 <AS5047U_Position_Highspeed_Read+0x64>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6898      	ldr	r0, [r3, #8]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	899b      	ldrh	r3, [r3, #12]
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	f008 fbd1 	bl	8008f00 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 800075e:	2300      	movs	r3, #0
 8000760:	833b      	strh	r3, [r7, #24]
 8000762:	e002      	b.n	800076a <AS5047U_Position_Highspeed_Read+0x8e>
 8000764:	8b3b      	ldrh	r3, [r7, #24]
 8000766:	3301      	adds	r3, #1
 8000768:	833b      	strh	r3, [r7, #24]
 800076a:	8b3b      	ldrh	r3, [r7, #24]
 800076c:	f240 2226 	movw	r2, #550	; 0x226
 8000770:	4293      	cmp	r3, r2
 8000772:	d9f7      	bls.n	8000764 <AS5047U_Position_Highspeed_Read+0x88>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6898      	ldr	r0, [r3, #8]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	899b      	ldrh	r3, [r3, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f008 fbbe 	bl	8008f00 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 400; i++);
 8000784:	2300      	movs	r3, #0
 8000786:	82fb      	strh	r3, [r7, #22]
 8000788:	e002      	b.n	8000790 <AS5047U_Position_Highspeed_Read+0xb4>
 800078a:	8afb      	ldrh	r3, [r7, #22]
 800078c:	3301      	adds	r3, #1
 800078e:	82fb      	strh	r3, [r7, #22]
 8000790:	8afb      	ldrh	r3, [r7, #22]
 8000792:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000796:	d9f8      	bls.n	800078a <AS5047U_Position_Highspeed_Read+0xae>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	f107 010c 	add.w	r1, r7, #12
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2202      	movs	r2, #2
 80007a4:	f00c f804 	bl	800c7b0 <HAL_SPI_Receive>
	for (uint16_t i=0; i <= 400; i++);
 80007a8:	2300      	movs	r3, #0
 80007aa:	82bb      	strh	r3, [r7, #20]
 80007ac:	e002      	b.n	80007b4 <AS5047U_Position_Highspeed_Read+0xd8>
 80007ae:	8abb      	ldrh	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	82bb      	strh	r3, [r7, #20]
 80007b4:	8abb      	ldrh	r3, [r7, #20]
 80007b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007ba:	d9f8      	bls.n	80007ae <AS5047U_Position_Highspeed_Read+0xd2>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6898      	ldr	r0, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	899b      	ldrh	r3, [r3, #12]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f008 fb9a 	bl	8008f00 <HAL_GPIO_WritePin>
	if (dir == 1){
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d111      	bne.n	80007f6 <AS5047U_Position_Highspeed_Read+0x11a>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80007d2:	7b3b      	ldrb	r3, [r7, #12]
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7b7b      	ldrb	r3, [r7, #13]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80007ec:	4053      	eors	r3, r2
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	81da      	strh	r2, [r3, #14]
 80007f4:	e00c      	b.n	8000810 <AS5047U_Position_Highspeed_Read+0x134>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80007f6:	7b3b      	ldrb	r3, [r7, #12]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000800:	b21a      	sxth	r2, r3
 8000802:	7b7b      	ldrb	r3, [r7, #13]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	89db      	ldrh	r3, [r3, #14]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2224      	movs	r2, #36	; 0x24
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f011 f891 	bl	8011950 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000830:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <MX_ADC3_Init+0xdc>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000834:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000836:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800083a:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800084a:	2204      	movs	r2, #4
 800084c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000850:	2200      	movs	r2, #0
 8000852:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800085c:	2201      	movs	r2, #1
 800085e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800087e:	2200      	movs	r2, #0
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800088a:	2200      	movs	r2, #0
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC3_Init+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800089c:	4815      	ldr	r0, [pc, #84]	; (80008f4 <MX_ADC3_Init+0xd8>)
 800089e:	f003 fee9 	bl	8004674 <HAL_ADC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008a8:	f001 fece 	bl	8002648 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_ADC3_Init+0xe0>)
 80008ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b0:	2306      	movs	r3, #6
 80008b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 80008b4:	2306      	movs	r3, #6
 80008b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008be:	2304      	movs	r3, #4
 80008c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC3_Init+0xd8>)
 80008dc:	f004 fc6e 	bl	80051bc <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008e6:	f001 feaf 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000040 	.word	0x20000040
 80008f8:	58026000 	.word	0x58026000
 80008fc:	c7520000 	.word	0xc7520000

08000900 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_ADC_MspInit+0x48>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d116      	bne.n	8000940 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_ADC_MspInit+0x4c>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <HAL_ADC_MspInit+0x4c>)
 800091a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_ADC_MspInit+0x4c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	207f      	movs	r0, #127	; 0x7f
 8000936:	f005 fce6 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800093a:	207f      	movs	r0, #127	; 0x7f
 800093c:	f005 fcfd 	bl	800633a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58026000 	.word	0x58026000
 800094c:	58024400 	.word	0x58024400

08000950 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
 800095c:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	8b3a      	ldrh	r2, [r7, #24]
 8000974:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	b29a      	uxth	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000984:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4619      	mov	r1, r3
 8000990:	4610      	mov	r0, r2
 8000992:	f00c fe09 	bl	800d5a8 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 80009c0:	edd7 7a00 	vldr	s15, [r7]
 80009c4:	eef0 7ae7 	vabs.f32	s15, s15
 80009c8:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 80009cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80009d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009dc:	d80e      	bhi.n	80009fc <Step_Driver+0x48>
		reg_out = 20000;
 80009de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009e2:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
 80009fa:	e033      	b.n	8000a64 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 80009fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a00:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0c:	d50f      	bpl.n	8000a2e <Step_Driver+0x7a>
		reg_out = 20000;
 8000a0e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a12:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	897a      	ldrh	r2, [r7, #10]
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000a1e:	897b      	ldrh	r3, [r7, #10]
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2c:	e01a      	b.n	8000a64 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	89db      	ldrh	r3, [r3, #14]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a46:	ee17 3a90 	vmov	r3, s15
 8000a4a:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	897a      	ldrh	r2, [r7, #10]
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000a56:	897b      	ldrh	r3, [r7, #10]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000a64:	edd7 7a00 	vldr	s15, [r7]
 8000a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a70:	db09      	blt.n	8000a86 <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6898      	ldr	r0, [r3, #8]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	8999      	ldrh	r1, [r3, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7c1b      	ldrb	r3, [r3, #16]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f008 fa3e 	bl	8008f00 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000a84:	e00b      	b.n	8000a9e <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6898      	ldr	r0, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8999      	ldrh	r1, [r3, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7c1b      	ldrb	r3, [r3, #16]
 8000a92:	f083 0301 	eor.w	r3, r3, #1
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	f008 fa31 	bl	8008f00 <HAL_GPIO_WritePin>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
		float Pos_Now, float Vel_Now) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b08d      	sub	sp, #52	; 0x34
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6178      	str	r0, [r7, #20]
 8000aae:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ab2:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ab6:	ed87 1a02 	vstr	s2, [r7, #8]
 8000aba:	edc7 1a01 	vstr	s3, [r7, #4]
	Traj->T = T;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	619a      	str	r2, [r3, #24]
	float T_P2 = T * T;
 8000ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ac8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000acc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float T_P3 = T_P2 * T;
 8000ad0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float T_P4 = T_P3 * T;
 8000ae0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float T_P5 = T_P4 * T;
 8000af0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000af4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a08 	vstr	s15, [r7, #32]
	float ds = Pos_Now - Pos_Final;
 8000b00:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b0c:	edc7 7a07 	vstr	s15, [r7, #28]
	float tfv0 = T * Vel_Now;
 8000b10:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1c:	edc7 7a06 	vstr	s15, [r7, #24]
	Traj->TrajCoef[0] = Pos_Now;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	601a      	str	r2, [r3, #0]
	Traj->TrajCoef[1] = Vel_Now;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	605a      	str	r2, [r3, #4]
	Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0)) / T_P3;
 8000b2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b30:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000b34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b38:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b3c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000b40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b4c:	eef1 6a67 	vneg.f32	s13, s15
 8000b50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	edc3 7a03 	vstr	s15, [r3, #12]
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
 8000b5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b62:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b6e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000b72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000b76:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000b7a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	edc3 7a04 	vstr	s15, [r3, #16]
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
 8000b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b90:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b98:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba0:	eef1 6a67 	vneg.f32	s13, s15
 8000ba4:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000bb2:	bf00      	nop
 8000bb4:	3734      	adds	r7, #52	; 0x34
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <TrajFollow>:
	Traj->TrajCoef[4] = ((15 * ds) + (8 * tfv0)) / T_P4;
	Traj->TrajCoef[5] = -(3 * ((2 * ds) + tfv0)) / T_P5;
}

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	edd3 7a00 	vldr	s15, [r3]
 8000bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	edd3 7a00 	vldr	s15, [r3]
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	edd3 6a04 	vldr	s13, [r3, #16]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	330c      	adds	r3, #12
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	edd3 6a05 	vldr	s13, [r3, #20]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3310      	adds	r3, #16
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c24:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c34:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c42:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000c46:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c5a:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c68:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c6c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3308      	adds	r3, #8
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c7c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c80:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8000c92:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	330c      	adds	r3, #12
 8000c9a:	edd3 7a00 	vldr	s15, [r3]
 8000c9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ca6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6178      	str	r0, [r7, #20]
 8000cc8:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ccc:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8000cd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000cd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8000cde:	ed97 7b00 	vldr	d7, [r7]
 8000ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f04f 0200 	mov.w	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <Kalman_init+0x60>)
 8000d00:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <Kalman_init+0x60>)
 8000d06:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <Kalman_init+0x60>)
 8000d0c:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <Kalman_init+0x60>)
 8000d12:	61da      	str	r2, [r3, #28]
}
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	3d4ccccd 	.word	0x3d4ccccd
 8000d24:	00000000 	.word	0x00000000

08000d28 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b0a5      	sub	sp, #148	; 0x94
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80010f0 <KalmanFilter+0x3c8>
 8000d42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d46:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d54:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80010f0 <KalmanFilter+0x3c8>
 8000d58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d5c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d6a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80010f8 <KalmanFilter+0x3d0>
 8000d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d72:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8000d76:	a3e6      	add	r3, pc, #920	; (adr r3, 8001110 <KalmanFilter+0x3e8>)
 8000d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8000d80:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000d84:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000d88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d96:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000d9a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000da4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000dac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000db6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dba:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000dbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dc6:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000dca:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dce:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000dd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000dd6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000dda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dde:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000de6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000df0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000df8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e14:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e18:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e1c:	ed97 7b00 	vldr	d7, [r7]
 8000e20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e28:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8000e2c:	ed97 7b00 	vldr	d7, [r7]
 8000e30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e34:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e42:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e4a:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8001100 <KalmanFilter+0x3d8>
 8000e4e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e64:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8000e68:	ed97 7b00 	vldr	d7, [r7]
 8000e6c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e74:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000e78:	ed97 7b00 	vldr	d7, [r7]
 8000e7c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e80:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8000e84:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000e88:	ed97 7b00 	vldr	d7, [r7]
 8000e8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e90:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000e94:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e9c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eaa:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8001100 <KalmanFilter+0x3d8>
 8000eae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec0:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8001108 <KalmanFilter+0x3e0>
 8000ec4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ec8:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8000ecc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000ed0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000ed4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed8:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000edc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ee0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eee:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000ef2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ef6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f18:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8001100 <KalmanFilter+0x3d8>
 8000f1c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f24:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000f28:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8000f2c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f3a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f3e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8000f42:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000f46:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8001100 <KalmanFilter+0x3d8>
 8000f4a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f52:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f66:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f6a:	ed97 7b00 	vldr	d7, [r7]
 8000f6e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8001100 <KalmanFilter+0x3d8>
 8000f80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000f84:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f88:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000f8c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000f90:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000f94:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f9c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fa6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fb8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000fbc:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000fc0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fc4:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000fc8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fcc:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000fd0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000fd4:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000fd8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000fdc:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000fe0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000fe4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fe8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ffa:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8001100 <KalmanFilter+0x3d8>
 8000ffe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001002:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001006:	ee36 7b07 	vadd.f64	d7, d6, d7
 800100a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001018:	ee37 6b07 	vadd.f64	d6, d7, d7
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001026:	ee37 5b07 	vadd.f64	d5, d7, d7
 800102a:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800102e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001032:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001036:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800103a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800103e:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	edd3 7a01 	vldr	s15, [r3, #4]
 8001048:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800104c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	edd3 7a06 	vldr	s15, [r3, #24]
 8001056:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800105e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001062:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001066:	ee26 5b07 	vmul.f64	d5, d6, d7
 800106a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800106e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001072:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edd3 7a07 	vldr	s15, [r3, #28]
 800107c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800108a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800108e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001092:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a05 	vldr	s15, [r3, #20]
 800109c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80010a0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80010a4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80010a8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80010ac:	ee25 4b07 	vmul.f64	d4, d5, d7
 80010b0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80010b4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80010b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010bc:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 80010c0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80010c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 80010ce:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80010d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 80010dc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80010e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edc3 7a04 	vstr	s15, [r3, #16]
 80010ea:	e015      	b.n	8001118 <KalmanFilter+0x3f0>
 80010ec:	f3af 8000 	nop.w
 80010f0:	47ae147b 	.word	0x47ae147b
 80010f4:	3fa47ae1 	.word	0x3fa47ae1
 80010f8:	e2308c3b 	.word	0xe2308c3b
 80010fc:	3e45798e 	.word	0x3e45798e
 8001100:	47ae147b 	.word	0x47ae147b
 8001104:	3f847ae1 	.word	0x3f847ae1
 8001108:	a0b5ed8e 	.word	0xa0b5ed8e
 800110c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001110:	eb1c432d 	.word	0xeb1c432d
 8001114:	3f1a36e2 	.word	0x3f1a36e2
	kalman->p12 = pp12;
 8001118:	ed97 7b08 	vldr	d7, [r7, #32]
 800111c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 8001126:	ed97 7b06 	vldr	d7, [r7, #24]
 800112a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 8001134:	ed97 7b04 	vldr	d7, [r7, #16]
 8001138:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001142:	bf00      	nop
 8001144:	3794      	adds	r7, #148	; 0x94
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	ed87 0a02 	vstr	s0, [r7, #8]
 800115c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001160:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80011be:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	ed93 7a00 	vldr	s14, [r3]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	edd3 7a06 	vldr	s15, [r3, #24]
 8001206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	edd3 7a03 	vldr	s15, [r3, #12]
 8001216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800121a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 6a02 	vldr	s13, [r3, #8]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	ed93 6a06 	vldr	s12, [r3, #24]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	61da      	str	r2, [r3, #28]
	return PID->Output;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	ee07 3a90 	vmov	s15, r3
}
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GearRatio ,float StepDriver){
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6278      	str	r0, [r7, #36]	; 0x24
 8001268:	ed87 0a08 	vstr	s0, [r7, #32]
 800126c:	edc7 0a07 	vstr	s1, [r7, #28]
 8001270:	ed87 1a06 	vstr	s2, [r7, #24]
 8001274:	edc7 1a05 	vstr	s3, [r7, #20]
 8001278:	ed87 2a04 	vstr	s4, [r7, #16]
 800127c:	edc7 2a03 	vstr	s5, [r7, #12]
 8001280:	ed87 3a02 	vstr	s6, [r7, #8]
 8001284:	edc7 3a01 	vstr	s7, [r7, #4]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	ed97 1a06 	vldr	s2, [r7, #24]
 800128e:	edd7 0a07 	vldr	s1, [r7, #28]
 8001292:	ed97 0a08 	vldr	s0, [r7, #32]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff5a 	bl	8001150 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	3330      	adds	r3, #48	; 0x30
 80012a0:	ed97 1a03 	vldr	s2, [r7, #12]
 80012a4:	edd7 0a04 	vldr	s1, [r7, #16]
 80012a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff4f 	bl	8001150 <PID_init>
	Control->Vel_Gfeed = (GearRatio * StepDriver) / (2*PI);
 80012b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012be:	eddf 6a05 	vldr	s13, [pc, #20]	; 80012d4 <CascadeControl_init+0x74>
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40c90fdb 	.word	0x40c90fdb

080012d8 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6178      	str	r0, [r7, #20]
 80012e0:	6139      	str	r1, [r7, #16]
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ea:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 80012fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001302:	eeb0 0b47 	vmov.f64	d0, d7
 8001306:	6938      	ldr	r0, [r7, #16]
 8001308:	f7ff fd0e 	bl	8000d28 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
	Control->PositionFeedback = kalman->x1;
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800132a:	eef0 0a47 	vmov.f32	s1, s14
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	4610      	mov	r0, r2
 8001334:	f7ff ff3d 	bl	80011b2 <PID_Control>
 8001338:	eef0 7a40 	vmov.f32	s15, s0
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800134e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800136a:	eef0 0a47 	vmov.f32	s1, s14
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	4610      	mov	r0, r2
 8001374:	f7ff ff1d 	bl	80011b2 <PID_Control>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800138e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001398:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
//	Control->Output = Control->VelocityPIDOutput;
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_CRC_Init+0x50>)
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <MX_CRC_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_CRC_Init+0x50>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_CRC_Init+0x50>)
 80013be:	2201      	movs	r2, #1
 80013c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_CRC_Init+0x50>)
 80013c4:	221d      	movs	r2, #29
 80013c6:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_CRC_Init+0x50>)
 80013ca:	2210      	movs	r2, #16
 80013cc:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_CRC_Init+0x50>)
 80013d0:	22c4      	movs	r2, #196	; 0xc4
 80013d2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_CRC_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_CRC_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_CRC_Init+0x50>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_CRC_Init+0x50>)
 80013e8:	f004 ffc2 	bl	8006370 <HAL_CRC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80013f2:	f001 f929 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200000b0 	.word	0x200000b0
 8001400:	58024c00 	.word	0x58024c00

08001404 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_CRC_MspInit+0x3c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10e      	bne.n	8001434 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_CRC_MspInit+0x40>)
 800141e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <HAL_CRC_MspInit+0x40>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	58024c00 	.word	0x58024c00
 8001444:	58024400 	.word	0x58024400

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_DMA_Init+0x3c>)
 8001450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <MX_DMA_Init+0x3c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_DMA_Init+0x3c>)
 8001460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	200b      	movs	r0, #11
 8001472:	f004 ff48 	bl	8006306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001476:	200b      	movs	r0, #11
 8001478:	f004 ff5f 	bl	800633a <HAL_NVIC_EnableIRQ>

}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400

08001488 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_HS_DP
     PA15(JTDI)   ------> S_TIM2_CH1_ETR
     PB3(JTDO/TRACESWO)   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4ba2      	ldr	r3, [pc, #648]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4aa0      	ldr	r2, [pc, #640]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b9a      	ldr	r3, [pc, #616]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a99      	ldr	r2, [pc, #612]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b96      	ldr	r3, [pc, #600]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b93      	ldr	r3, [pc, #588]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	4a91      	ldr	r2, [pc, #580]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ea:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <MX_GPIO_Init+0x2a0>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <MX_GPIO_Init+0x2a0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b87      	ldr	r3, [pc, #540]	; (8001728 <MX_GPIO_Init+0x2a0>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <MX_GPIO_Init+0x2a0>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	4a82      	ldr	r2, [pc, #520]	; (8001728 <MX_GPIO_Init+0x2a0>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001526:	4b80      	ldr	r3, [pc, #512]	; (8001728 <MX_GPIO_Init+0x2a0>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <MX_GPIO_Init+0x2a0>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a7b      	ldr	r2, [pc, #492]	; (8001728 <MX_GPIO_Init+0x2a0>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b78      	ldr	r3, [pc, #480]	; (8001728 <MX_GPIO_Init+0x2a0>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001552:	2200      	movs	r2, #0
 8001554:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001558:	4874      	ldr	r0, [pc, #464]	; (800172c <MX_GPIO_Init+0x2a4>)
 800155a:	f007 fcd1 	bl	8008f00 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001564:	4872      	ldr	r0, [pc, #456]	; (8001730 <MX_GPIO_Init+0x2a8>)
 8001566:	f007 fccb 	bl	8008f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	21c4      	movs	r1, #196	; 0xc4
 800156e:	4871      	ldr	r0, [pc, #452]	; (8001734 <MX_GPIO_Init+0x2ac>)
 8001570:	f007 fcc6 	bl	8008f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f24c 0140 	movw	r1, #49216	; 0xc040
 800157a:	486f      	ldr	r0, [pc, #444]	; (8001738 <MX_GPIO_Init+0x2b0>)
 800157c:	f007 fcc0 	bl	8008f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001586:	486a      	ldr	r0, [pc, #424]	; (8001730 <MX_GPIO_Init+0x2a8>)
 8001588:	f007 fcba 	bl	8008f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 800158c:	2201      	movs	r2, #1
 800158e:	213f      	movs	r1, #63	; 0x3f
 8001590:	4869      	ldr	r0, [pc, #420]	; (8001738 <MX_GPIO_Init+0x2b0>)
 8001592:	f007 fcb5 	bl	8008f00 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001596:	f648 33df 	movw	r3, #35807	; 0x8bdf
 800159a:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	485f      	ldr	r0, [pc, #380]	; (800172c <MX_GPIO_Init+0x2a4>)
 80015b0:	f007 fafe 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80015b4:	f24e 032f 	movw	r3, #57391	; 0xe02f
 80015b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4859      	ldr	r0, [pc, #356]	; (8001730 <MX_GPIO_Init+0x2a8>)
 80015ca:	f007 faf1 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015ce:	233c      	movs	r3, #60	; 0x3c
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4856      	ldr	r0, [pc, #344]	; (800173c <MX_GPIO_Init+0x2b4>)
 80015e2:	f007 fae5 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80015e6:	f44f 7344 	mov.w	r3, #784	; 0x310
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	484c      	ldr	r0, [pc, #304]	; (8001730 <MX_GPIO_Init+0x2a8>)
 8001600:	f007 fad6 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2303      	movs	r3, #3
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4847      	ldr	r0, [pc, #284]	; (8001734 <MX_GPIO_Init+0x2ac>)
 8001618:	f007 faca 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 800161c:	2302      	movs	r3, #2
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001620:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4840      	ldr	r0, [pc, #256]	; (8001734 <MX_GPIO_Init+0x2ac>)
 8001632:	f007 fabd 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001636:	23c4      	movs	r3, #196	; 0xc4
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4839      	ldr	r0, [pc, #228]	; (8001734 <MX_GPIO_Init+0x2ac>)
 800164e:	f007 faaf 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	2303      	movs	r3, #3
 800165a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <MX_GPIO_Init+0x2a4>)
 8001668:	f007 faa2 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 800166c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	482d      	ldr	r0, [pc, #180]	; (8001738 <MX_GPIO_Init+0x2b0>)
 8001682:	f007 fa95 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001686:	f24c 037f 	movw	r3, #49279	; 0xc07f
 800168a:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	4826      	ldr	r0, [pc, #152]	; (8001738 <MX_GPIO_Init+0x2b0>)
 80016a0:	f007 fa86 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4820      	ldr	r0, [pc, #128]	; (800173c <MX_GPIO_Init+0x2b4>)
 80016ba:	f007 fa79 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4819      	ldr	r0, [pc, #100]	; (800173c <MX_GPIO_Init+0x2b4>)
 80016d8:	f007 fa6a 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 80016dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4810      	ldr	r0, [pc, #64]	; (800173c <MX_GPIO_Init+0x2b4>)
 80016fa:	f007 fa59 	bl	8008bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6B_Pin;
 80016fe:	2308      	movs	r3, #8
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170e:	2301      	movs	r3, #1
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_GPIO_Init+0x2ac>)
 800171a:	f007 fa49 	bl	8008bb0 <HAL_GPIO_Init>

}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	58024400 	.word	0x58024400
 800172c:	58021000 	.word	0x58021000
 8001730:	58020800 	.word	0x58020800
 8001734:	58020400 	.word	0x58020400
 8001738:	58020c00 	.word	0x58020c00
 800173c:	58020000 	.word	0x58020000

08001740 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_I2C2_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_I2C2_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_I2C2_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001758:	2201      	movs	r2, #1
 800175a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_I2C2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_I2C2_Init+0x74>)
 800177c:	f007 fbf4 	bl	8008f68 <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001786:	f000 ff5f 	bl	8002648 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <MX_I2C2_Init+0x74>)
 800178e:	f007 fc7b 	bl	8009088 <HAL_I2CEx_ConfigAnalogFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 ff56 	bl	8002648 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_I2C2_Init+0x74>)
 80017a0:	f007 fcbd 	bl	800911e <HAL_I2CEx_ConfigDigitalFilter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 ff4d 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000d4 	.word	0x200000d4
 80017b8:	40005800 	.word	0x40005800
 80017bc:	60404e72 	.word	0x60404e72

080017c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0b6      	sub	sp, #216	; 0xd8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	22b4      	movs	r2, #180	; 0xb4
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f010 f8b5 	bl	8011950 <memset>
  if(i2cHandle->Instance==I2C2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a25      	ldr	r2, [pc, #148]	; (8001880 <HAL_I2C_MspInit+0xc0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d142      	bne.n	8001876 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017f0:	2308      	movs	r3, #8
 80017f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4618      	mov	r0, r3
 8001800:	f008 fc4c 	bl	800a09c <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800180a:	f000 ff1d 	bl	8002648 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001814:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800182c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001834:	2312      	movs	r3, #18
 8001836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001846:	2304      	movs	r3, #4
 8001848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001850:	4619      	mov	r1, r3
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <HAL_I2C_MspInit+0xc8>)
 8001854:	f007 f9ac 	bl	8008bb0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 800185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 8001860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_I2C_MspInit+0xc4>)
 800186a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001876:	bf00      	nop
 8001878:	37d8      	adds	r7, #216	; 0xd8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40005800 	.word	0x40005800
 8001884:	58024400 	.word	0x58024400
 8001888:	58020400 	.word	0x58020400
 800188c:	00000000 	.word	0x00000000

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001896:	f002 fb85 	bl	8003fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800189a:	f000 fba7 	bl	8001fec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800189e:	f000 fc1d 	bl	80020dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a2:	f7ff fdf1 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 80018a6:	f7ff fdcf 	bl	8001448 <MX_DMA_Init>
  MX_ADC3_Init();
 80018aa:	f7fe ffb7 	bl	800081c <MX_ADC3_Init>
  MX_TIM1_Init();
 80018ae:	f001 f927 	bl	8002b00 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018b2:	f001 f9b5 	bl	8002c20 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018b6:	f001 fa2b 	bl	8002d10 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018ba:	f001 fa7f 	bl	8002dbc <MX_TIM5_Init>
  MX_TIM8_Init();
 80018be:	f001 fb0b 	bl	8002ed8 <MX_TIM8_Init>
  MX_TIM13_Init();
 80018c2:	f001 fb63 	bl	8002f8c <MX_TIM13_Init>
  MX_TIM14_Init();
 80018c6:	f001 fbb1 	bl	800302c <MX_TIM14_Init>
  MX_TIM15_Init();
 80018ca:	f001 fbff 	bl	80030cc <MX_TIM15_Init>
  MX_TIM16_Init();
 80018ce:	f001 fc85 	bl	80031dc <MX_TIM16_Init>
  MX_TIM17_Init();
 80018d2:	f001 fcff 	bl	80032d4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80018d6:	f002 f9d7 	bl	8003c88 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80018da:	f002 fa23 	bl	8003d24 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80018de:	f000 feb9 	bl	8002654 <MX_SPI3_Init>
  MX_SPI4_Init();
 80018e2:	f000 ff0f 	bl	8002704 <MX_SPI4_Init>
  MX_I2C2_Init();
 80018e6:	f7ff ff2b 	bl	8001740 <MX_I2C2_Init>
  MX_CRC_Init();
 80018ea:	f7ff fd5f 	bl	80013ac <MX_CRC_Init>
  MX_TIM24_Init();
 80018ee:	f001 fdbd 	bl	800346c <MX_TIM24_Init>
  MX_TIM23_Init();
 80018f2:	f001 fd6b 	bl	80033cc <MX_TIM23_Init>
  MX_TIM6_Init();
 80018f6:	f001 fab7 	bl	8002e68 <MX_TIM6_Init>
  MX_UART5_Init();
 80018fa:	f002 f973 	bl	8003be4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 80018fe:	2201      	movs	r2, #1
 8001900:	2140      	movs	r1, #64	; 0x40
 8001902:	48a9      	ldr	r0, [pc, #676]	; (8001ba8 <main+0x318>)
 8001904:	f007 fafc 	bl	8008f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8001908:	2201      	movs	r2, #1
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	48a7      	ldr	r0, [pc, #668]	; (8001bac <main+0x31c>)
 800190e:	f007 faf7 	bl	8008f00 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8001912:	4ba7      	ldr	r3, [pc, #668]	; (8001bb0 <main+0x320>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4ba6      	ldr	r3, [pc, #664]	; (8001bb4 <main+0x324>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001926:	ed9f 5b9a 	vldr	d5, [pc, #616]	; 8001b90 <main+0x300>
 800192a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800192e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001932:	4ba1      	ldr	r3, [pc, #644]	; (8001bb8 <main+0x328>)
 8001934:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001938:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800193c:	2100      	movs	r1, #0
 800193e:	489f      	ldr	r0, [pc, #636]	; (8001bbc <main+0x32c>)
 8001940:	f004 fb70 	bl	8006024 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8001944:	2301      	movs	r3, #1
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001bc0 <main+0x330>
 800194c:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <main+0x334>)
 800194e:	4a96      	ldr	r2, [pc, #600]	; (8001ba8 <main+0x318>)
 8001950:	499d      	ldr	r1, [pc, #628]	; (8001bc8 <main+0x338>)
 8001952:	489e      	ldr	r0, [pc, #632]	; (8001bcc <main+0x33c>)
 8001954:	f7fe fe7a 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10831);
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8001bd0 <main+0x340>
 8001960:	4b98      	ldr	r3, [pc, #608]	; (8001bc4 <main+0x334>)
 8001962:	4a91      	ldr	r2, [pc, #580]	; (8001ba8 <main+0x318>)
 8001964:	4998      	ldr	r1, [pc, #608]	; (8001bc8 <main+0x338>)
 8001966:	489b      	ldr	r0, [pc, #620]	; (8001bd4 <main+0x344>)
 8001968:	f7fe fe70 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,2982);
 800196c:	2304      	movs	r3, #4
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8001bd8 <main+0x348>
 8001974:	4b93      	ldr	r3, [pc, #588]	; (8001bc4 <main+0x334>)
 8001976:	4a8c      	ldr	r2, [pc, #560]	; (8001ba8 <main+0x318>)
 8001978:	4993      	ldr	r1, [pc, #588]	; (8001bc8 <main+0x338>)
 800197a:	4898      	ldr	r0, [pc, #608]	; (8001bdc <main+0x34c>)
 800197c:	f7fe fe66 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,5000);
 8001980:	2308      	movs	r3, #8
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8001be0 <main+0x350>
 8001988:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <main+0x334>)
 800198a:	4a87      	ldr	r2, [pc, #540]	; (8001ba8 <main+0x318>)
 800198c:	498e      	ldr	r1, [pc, #568]	; (8001bc8 <main+0x338>)
 800198e:	4895      	ldr	r0, [pc, #596]	; (8001be4 <main+0x354>)
 8001990:	f7fe fe5c 	bl	800064c <AS5047U_init>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8001994:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001b98 <main+0x308>
 8001998:	ed9f 0b81 	vldr	d0, [pc, #516]	; 8001ba0 <main+0x310>
 800199c:	4892      	ldr	r0, [pc, #584]	; (8001be8 <main+0x358>)
 800199e:	f7ff f98f 	bl	8000cc0 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 80019a2:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8001b98 <main+0x308>
 80019a6:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8001ba0 <main+0x310>
 80019aa:	4890      	ldr	r0, [pc, #576]	; (8001bec <main+0x35c>)
 80019ac:	f7ff f988 	bl	8000cc0 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 80019b0:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001b98 <main+0x308>
 80019b4:	ed9f 0b7a 	vldr	d0, [pc, #488]	; 8001ba0 <main+0x310>
 80019b8:	488d      	ldr	r0, [pc, #564]	; (8001bf0 <main+0x360>)
 80019ba:	f7ff f981 	bl	8000cc0 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 80019be:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8001b98 <main+0x308>
 80019c2:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8001ba0 <main+0x310>
 80019c6:	488b      	ldr	r0, [pc, #556]	; (8001bf4 <main+0x364>)
 80019c8:	f7ff f97a 	bl	8000cc0 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.7, 0, 0, 0.1, 0, 0, 4*5.18f, 180);
 80019cc:	eddf 3a8a 	vldr	s7, [pc, #552]	; 8001bf8 <main+0x368>
 80019d0:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 8001bfc <main+0x36c>
 80019d4:	eddf 2a8a 	vldr	s5, [pc, #552]	; 8001c00 <main+0x370>
 80019d8:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8001c00 <main+0x370>
 80019dc:	eddf 1a89 	vldr	s3, [pc, #548]	; 8001c04 <main+0x374>
 80019e0:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8001c00 <main+0x370>
 80019e4:	eddf 0a86 	vldr	s1, [pc, #536]	; 8001c00 <main+0x370>
 80019e8:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8001c08 <main+0x378>
 80019ec:	4887      	ldr	r0, [pc, #540]	; (8001c0c <main+0x37c>)
 80019ee:	f7ff fc37 	bl	8001260 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.7, 0, 0, 0.1, 0, 0, 9, 80);
 80019f2:	eddf 3a87 	vldr	s7, [pc, #540]	; 8001c10 <main+0x380>
 80019f6:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 80019fa:	eddf 2a81 	vldr	s5, [pc, #516]	; 8001c00 <main+0x370>
 80019fe:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8001c00 <main+0x370>
 8001a02:	eddf 1a80 	vldr	s3, [pc, #512]	; 8001c04 <main+0x374>
 8001a06:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8001c00 <main+0x370>
 8001a0a:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001c00 <main+0x370>
 8001a0e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8001c08 <main+0x378>
 8001a12:	4880      	ldr	r0, [pc, #512]	; (8001c14 <main+0x384>)
 8001a14:	f7ff fc24 	bl	8001260 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.7, 0, 0, 0.1, 0, 0, 9, 170);
 8001a18:	eddf 3a7f 	vldr	s7, [pc, #508]	; 8001c18 <main+0x388>
 8001a1c:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 8001a20:	eddf 2a77 	vldr	s5, [pc, #476]	; 8001c00 <main+0x370>
 8001a24:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8001c00 <main+0x370>
 8001a28:	eddf 1a76 	vldr	s3, [pc, #472]	; 8001c04 <main+0x374>
 8001a2c:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8001c00 <main+0x370>
 8001a30:	eddf 0a73 	vldr	s1, [pc, #460]	; 8001c00 <main+0x370>
 8001a34:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001c08 <main+0x378>
 8001a38:	4878      	ldr	r0, [pc, #480]	; (8001c1c <main+0x38c>)
 8001a3a:	f7ff fc11 	bl	8001260 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.7, 0, 0, 0.1, 0, 0, 6, 180);
 8001a3e:	eddf 3a6e 	vldr	s7, [pc, #440]	; 8001bf8 <main+0x368>
 8001a42:	eeb1 3a08 	vmov.f32	s6, #24	; 0x40c00000  6.0
 8001a46:	eddf 2a6e 	vldr	s5, [pc, #440]	; 8001c00 <main+0x370>
 8001a4a:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8001c00 <main+0x370>
 8001a4e:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8001c04 <main+0x374>
 8001a52:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001c00 <main+0x370>
 8001a56:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8001c00 <main+0x370>
 8001a5a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8001c08 <main+0x378>
 8001a5e:	4870      	ldr	r0, [pc, #448]	; (8001c20 <main+0x390>)
 8001a60:	f7ff fbfe 	bl	8001260 <CascadeControl_init>

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 8001a64:	2301      	movs	r3, #1
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <main+0x394>)
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <main+0x31c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	496c      	ldr	r1, [pc, #432]	; (8001c28 <main+0x398>)
 8001a76:	486d      	ldr	r0, [pc, #436]	; (8001c2c <main+0x39c>)
 8001a78:	f7fe ff6a 	bl	8000950 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <main+0x394>)
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	2302      	movs	r3, #2
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4b48      	ldr	r3, [pc, #288]	; (8001bac <main+0x31c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	4968      	ldr	r1, [pc, #416]	; (8001c30 <main+0x3a0>)
 8001a8e:	4869      	ldr	r0, [pc, #420]	; (8001c34 <main+0x3a4>)
 8001a90:	f7fe ff5e 	bl	8000950 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 8001a94:	2300      	movs	r3, #0
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <main+0x394>)
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <main+0x31c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4964      	ldr	r1, [pc, #400]	; (8001c38 <main+0x3a8>)
 8001aa6:	4865      	ldr	r0, [pc, #404]	; (8001c3c <main+0x3ac>)
 8001aa8:	f7fe ff52 	bl	8000950 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8001aac:	2300      	movs	r3, #0
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <main+0x394>)
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <main+0x31c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	4960      	ldr	r1, [pc, #384]	; (8001c40 <main+0x3b0>)
 8001abe:	4861      	ldr	r0, [pc, #388]	; (8001c44 <main+0x3b4>)
 8001ac0:	f7fe ff46 	bl	8000950 <Step_Driver_init>
	/*			Traj		*/

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4841      	ldr	r0, [pc, #260]	; (8001bcc <main+0x33c>)
 8001ac8:	f7fe fd9e 	bl	8000608 <EncPulse2Rad_Read>
 8001acc:	eef0 7a40 	vmov.f32	s15, s0
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <main+0x3b8>)
 8001ad2:	edc3 7a00 	vstr	s15, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	483e      	ldr	r0, [pc, #248]	; (8001bd4 <main+0x344>)
 8001ada:	f7fe fd95 	bl	8000608 <EncPulse2Rad_Read>
 8001ade:	eef0 7a40 	vmov.f32	s15, s0
 8001ae2:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <main+0x3b8>)
 8001ae4:	edc3 7a01 	vstr	s15, [r3, #4]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	483c      	ldr	r0, [pc, #240]	; (8001bdc <main+0x34c>)
 8001aec:	f7fe fd8c 	bl	8000608 <EncPulse2Rad_Read>
 8001af0:	eef0 7a40 	vmov.f32	s15, s0
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <main+0x3b8>)
 8001af6:	edc3 7a02 	vstr	s15, [r3, #8]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8001afa:	2100      	movs	r1, #0
 8001afc:	4839      	ldr	r0, [pc, #228]	; (8001be4 <main+0x354>)
 8001afe:	f7fe fd83 	bl	8000608 <EncPulse2Rad_Read>
 8001b02:	eef0 7a40 	vmov.f32	s15, s0
 8001b06:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <main+0x3b8>)
 8001b08:	edc3 7a03 	vstr	s15, [r3, #12]
	SetPoint_Velocity[0] = 0;
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <main+0x3bc>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
	SetPoint_Velocity[1] = 0;
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <main+0x3bc>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
	SetPoint_Velocity[2] = 0;
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <main+0x3bc>)
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
	SetPoint_Velocity[3] = 0;
 8001b24:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <main+0x3bc>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
	Test_traj_Val[0] = 0;
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <main+0x3c0>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
	Test_traj_Val[1] = 0;
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <main+0x3c0>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
	Test_traj_Val[2] = 0;
 8001b3c:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <main+0x3c0>)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
	Test_traj_Val[3] = 0;
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <main+0x3c0>)
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]

	Traj_Flag = 0;
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <main+0x3c4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	t = 0;
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <main+0x3c8>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8001b5a:	4840      	ldr	r0, [pc, #256]	; (8001c5c <main+0x3cc>)
 8001b5c:	f00b fc46 	bl	800d3ec <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT (&huart5, UART5_rxBuffer, 14);
 8001b60:	220e      	movs	r2, #14
 8001b62:	493f      	ldr	r1, [pc, #252]	; (8001c60 <main+0x3d0>)
 8001b64:	483f      	ldr	r0, [pc, #252]	; (8001c64 <main+0x3d4>)
 8001b66:	f00d f9b5 	bl	800eed4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Test_traj && !Traj_Flag) {
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <main+0x3d8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a9 	beq.w	8001cc6 <main+0x436>
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <main+0x3c4>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 80a4 	bne.w	8001cc6 <main+0x436>
			t = 0;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <main+0x3c8>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	e093      	b.n	8001cb4 <main+0x424>
 8001b8c:	f3af 8000 	nop.w
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40540000 	.word	0x40540000
 8001b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b9c:	3f50624d 	.word	0x3f50624d
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40b38800 	.word	0x40b38800
 8001ba8:	58020c00 	.word	0x58020c00
 8001bac:	58021000 	.word	0x58021000
 8001bb0:	1ff1e840 	.word	0x1ff1e840
 8001bb4:	1ff1e820 	.word	0x1ff1e820
 8001bb8:	2000067c 	.word	0x2000067c
 8001bbc:	20000040 	.word	0x20000040
 8001bc0:	45cb2000 	.word	0x45cb2000
 8001bc4:	200000b0 	.word	0x200000b0
 8001bc8:	200006b4 	.word	0x200006b4
 8001bcc:	200003fc 	.word	0x200003fc
 8001bd0:	46293c00 	.word	0x46293c00
 8001bd4:	2000041c 	.word	0x2000041c
 8001bd8:	453a6000 	.word	0x453a6000
 8001bdc:	2000043c 	.word	0x2000043c
 8001be0:	459c4000 	.word	0x459c4000
 8001be4:	2000045c 	.word	0x2000045c
 8001be8:	20000304 	.word	0x20000304
 8001bec:	20000324 	.word	0x20000324
 8001bf0:	20000344 	.word	0x20000344
 8001bf4:	20000364 	.word	0x20000364
 8001bf8:	43340000 	.word	0x43340000
 8001bfc:	41a5c28f 	.word	0x41a5c28f
 8001c00:	00000000 	.word	0x00000000
 8001c04:	3dcccccd 	.word	0x3dcccccd
 8001c08:	3f333333 	.word	0x3f333333
 8001c0c:	2000012c 	.word	0x2000012c
 8001c10:	42a00000 	.word	0x42a00000
 8001c14:	20000198 	.word	0x20000198
 8001c18:	432a0000 	.word	0x432a0000
 8001c1c:	20000204 	.word	0x20000204
 8001c20:	20000270 	.word	0x20000270
 8001c24:	0007a120 	.word	0x0007a120
 8001c28:	20000a50 	.word	0x20000a50
 8001c2c:	20000624 	.word	0x20000624
 8001c30:	20000b80 	.word	0x20000b80
 8001c34:	20000638 	.word	0x20000638
 8001c38:	20000920 	.word	0x20000920
 8001c3c:	2000064c 	.word	0x2000064c
 8001c40:	20000bcc 	.word	0x20000bcc
 8001c44:	20000660 	.word	0x20000660
 8001c48:	200006a4 	.word	0x200006a4
 8001c4c:	20000480 	.word	0x20000480
 8001c50:	20000680 	.word	0x20000680
 8001c54:	2000047c 	.word	0x2000047c
 8001c58:	20000120 	.word	0x20000120
 8001c5c:	20000b34 	.word	0x20000b34
 8001c60:	20000030 	.word	0x20000030
 8001c64:	20000ca8 	.word	0x20000ca8
 8001c68:	2000002c 	.word	0x2000002c
				Traj_Coeff_Cal(&Traj[i], 5, Test_traj_Val[i], Control[i].PositionFeedback, 0);
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4ab8      	ldr	r2, [pc, #736]	; (8001f58 <main+0x6c8>)
 8001c78:	441a      	add	r2, r3
 8001c7a:	49b8      	ldr	r1, [pc, #736]	; (8001f5c <main+0x6cc>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	49b6      	ldr	r1, [pc, #728]	; (8001f60 <main+0x6d0>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	206c      	movs	r0, #108	; 0x6c
 8001c8c:	fb00 f303 	mul.w	r3, r0, r3
 8001c90:	440b      	add	r3, r1
 8001c92:	3328      	adds	r3, #40	; 0x28
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8001f64 <main+0x6d4>
 8001c9c:	eeb0 1a47 	vmov.f32	s2, s14
 8001ca0:	eef0 0a67 	vmov.f32	s1, s15
 8001ca4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f7fe fefc 	bl	8000aa6 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	ddd8      	ble.n	8001c6c <main+0x3dc>
			}
			Test_traj = 0;
 8001cba:	4bab      	ldr	r3, [pc, #684]	; (8001f68 <main+0x6d8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			Traj_Flag = 1;
 8001cc0:	4baa      	ldr	r3, [pc, #680]	; (8001f6c <main+0x6dc>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
		}
		if (Contorl_Flag) {
 8001cc6:	4baa      	ldr	r3, [pc, #680]	; (8001f70 <main+0x6e0>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80f6 	beq.w	8001ebc <main+0x62c>
			/***** Encoder Read *****/

			J1 = EncPulse2Rad_Read(&Encoder[0],1);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	48a8      	ldr	r0, [pc, #672]	; (8001f74 <main+0x6e4>)
 8001cd4:	f7fe fc98 	bl	8000608 <EncPulse2Rad_Read>
 8001cd8:	eef0 7a40 	vmov.f32	s15, s0
 8001cdc:	4ba6      	ldr	r3, [pc, #664]	; (8001f78 <main+0x6e8>)
 8001cde:	edc3 7a00 	vstr	s15, [r3]
			J2 = EncPulse2Rad_Read(&Encoder[1],0);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	48a5      	ldr	r0, [pc, #660]	; (8001f7c <main+0x6ec>)
 8001ce6:	f7fe fc8f 	bl	8000608 <EncPulse2Rad_Read>
 8001cea:	eef0 7a40 	vmov.f32	s15, s0
 8001cee:	4ba4      	ldr	r3, [pc, #656]	; (8001f80 <main+0x6f0>)
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
			J3 = EncPulse2Rad_Read(&Encoder[2],0);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	48a3      	ldr	r0, [pc, #652]	; (8001f84 <main+0x6f4>)
 8001cf8:	f7fe fc86 	bl	8000608 <EncPulse2Rad_Read>
 8001cfc:	eef0 7a40 	vmov.f32	s15, s0
 8001d00:	4ba1      	ldr	r3, [pc, #644]	; (8001f88 <main+0x6f8>)
 8001d02:	edc3 7a00 	vstr	s15, [r3]
			J4 = EncPulse2Rad_Read(&Encoder[3],0);
 8001d06:	2100      	movs	r1, #0
 8001d08:	48a0      	ldr	r0, [pc, #640]	; (8001f8c <main+0x6fc>)
 8001d0a:	f7fe fc7d 	bl	8000608 <EncPulse2Rad_Read>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b9f      	ldr	r3, [pc, #636]	; (8001f90 <main+0x700>)
 8001d14:	edc3 7a00 	vstr	s15, [r3]

			if(Traj_Flag){
 8001d18:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <main+0x6dc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05e      	beq.n	8001dde <main+0x54e>
				float traj_t_set[5];
				traj_t_set[0] = t;
 8001d20:	4b9c      	ldr	r3, [pc, #624]	; (8001f94 <main+0x704>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	607b      	str	r3, [r7, #4]
				traj_t_set[1] = t * t;
 8001d26:	4b9b      	ldr	r3, [pc, #620]	; (8001f94 <main+0x704>)
 8001d28:	ed93 7a00 	vldr	s14, [r3]
 8001d2c:	4b99      	ldr	r3, [pc, #612]	; (8001f94 <main+0x704>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	edc7 7a02 	vstr	s15, [r7, #8]
				traj_t_set[2] = traj_t_set[1] * t;
 8001d3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d3e:	4b95      	ldr	r3, [pc, #596]	; (8001f94 <main+0x704>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d48:	edc7 7a03 	vstr	s15, [r7, #12]
				traj_t_set[3] = traj_t_set[2] * t;
 8001d4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d50:	4b90      	ldr	r3, [pc, #576]	; (8001f94 <main+0x704>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5a:	edc7 7a04 	vstr	s15, [r7, #16]
				traj_t_set[4] = traj_t_set[3] * t;
 8001d5e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d62:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <main+0x704>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6c:	edc7 7a05 	vstr	s15, [r7, #20]
				for (int i = 0 ;i<4;i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	e014      	b.n	8001da0 <main+0x510>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i], &SetPoint_Velocity[i]);
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <main+0x6c8>)
 8001d82:	1898      	adds	r0, r3, r2
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4a83      	ldr	r2, [pc, #524]	; (8001f98 <main+0x708>)
 8001d8a:	441a      	add	r2, r3
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4982      	ldr	r1, [pc, #520]	; (8001f9c <main+0x70c>)
 8001d92:	440b      	add	r3, r1
 8001d94:	1d39      	adds	r1, r7, #4
 8001d96:	f7fe ff12 	bl	8000bbe <TrajFollow>
				for (int i = 0 ;i<4;i++){
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	dde7      	ble.n	8001d76 <main+0x4e6>
				}
				t += 0.01;
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <main+0x704>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001f50 <main+0x6c0>
 8001db4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001db8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dbc:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <main+0x704>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]
				if (t >= Traj[1].T){
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <main+0x6c8>)
 8001dc4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <main+0x704>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d802      	bhi.n	8001dde <main+0x54e>
					Traj_Flag = 0;
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <main+0x6dc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
				}
			}

			CascadeControl(&Control[0], &Kalman[0], J1,SetPoint_Position[0],SetPoint_Velocity[0]);
 8001dde:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <main+0x6e8>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <main+0x708>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <main+0x70c>)
 8001dec:	edd3 6a00 	vldr	s13, [r3]
 8001df0:	eeb0 1a66 	vmov.f32	s2, s13
 8001df4:	eef0 0a47 	vmov.f32	s1, s14
 8001df8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfc:	4968      	ldr	r1, [pc, #416]	; (8001fa0 <main+0x710>)
 8001dfe:	4858      	ldr	r0, [pc, #352]	; (8001f60 <main+0x6d0>)
 8001e00:	f7ff fa6a 	bl	80012d8 <CascadeControl>
			CascadeControl(&Control[1], &Kalman[1], J2,SetPoint_Position[1],SetPoint_Velocity[1]);
 8001e04:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <main+0x6f0>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <main+0x708>)
 8001e0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e10:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <main+0x70c>)
 8001e12:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e16:	eeb0 1a66 	vmov.f32	s2, s13
 8001e1a:	eef0 0a47 	vmov.f32	s1, s14
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	4960      	ldr	r1, [pc, #384]	; (8001fa4 <main+0x714>)
 8001e24:	4860      	ldr	r0, [pc, #384]	; (8001fa8 <main+0x718>)
 8001e26:	f7ff fa57 	bl	80012d8 <CascadeControl>
			CascadeControl(&Control[2], &Kalman[2], J3,SetPoint_Position[2],SetPoint_Velocity[2]);
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <main+0x6f8>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <main+0x708>)
 8001e32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e36:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <main+0x70c>)
 8001e38:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e3c:	eeb0 1a66 	vmov.f32	s2, s13
 8001e40:	eef0 0a47 	vmov.f32	s1, s14
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	4958      	ldr	r1, [pc, #352]	; (8001fac <main+0x71c>)
 8001e4a:	4859      	ldr	r0, [pc, #356]	; (8001fb0 <main+0x720>)
 8001e4c:	f7ff fa44 	bl	80012d8 <CascadeControl>
			CascadeControl(&Control[3], &Kalman[3], J4,SetPoint_Position[3],SetPoint_Velocity[3]);
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <main+0x700>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <main+0x708>)
 8001e58:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <main+0x70c>)
 8001e5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e62:	eeb0 1a66 	vmov.f32	s2, s13
 8001e66:	eef0 0a47 	vmov.f32	s1, s14
 8001e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6e:	4951      	ldr	r1, [pc, #324]	; (8001fb4 <main+0x724>)
 8001e70:	4851      	ldr	r0, [pc, #324]	; (8001fb8 <main+0x728>)
 8001e72:	f7ff fa31 	bl	80012d8 <CascadeControl>

			Step_Driver(&Stepper[0], Control[0].Output);
 8001e76:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <main+0x6d0>)
 8001e78:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	484e      	ldr	r0, [pc, #312]	; (8001fbc <main+0x72c>)
 8001e82:	f7fe fd97 	bl	80009b4 <Step_Driver>
			Step_Driver(&Stepper[1], Control[1].Output);
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <main+0x6d0>)
 8001e88:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	484b      	ldr	r0, [pc, #300]	; (8001fc0 <main+0x730>)
 8001e92:	f7fe fd8f 	bl	80009b4 <Step_Driver>
			Step_Driver(&Stepper[2], Control[2].Output);
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <main+0x6d0>)
 8001e98:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	4848      	ldr	r0, [pc, #288]	; (8001fc4 <main+0x734>)
 8001ea2:	f7fe fd87 	bl	80009b4 <Step_Driver>
			Step_Driver(&Stepper[3], Control[3].Output);
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <main+0x6d0>)
 8001ea8:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	4845      	ldr	r0, [pc, #276]	; (8001fc8 <main+0x738>)
 8001eb2:	f7fe fd7f 	bl	80009b4 <Step_Driver>

			Contorl_Flag = 0;    // Clear Control Flag
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <main+0x6e0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
//		Step_Driver(&Stepper[0],25);

		/* Check Error Before Update Path with root mean */
		/* Before Change Path (Calculate New Traj Via point) */

		if (traj_finish) {
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <main+0x73c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d016      	beq.n	8001ef2 <main+0x662>
			if (Control[0].PositionFeedback > 1.5) {
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <main+0x6d0>)
 8001ec6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001eca:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	dd03      	ble.n	8001ee0 <main+0x650>
				T_Traj = 5;
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <main+0x740>)
 8001eda:	4a3e      	ldr	r2, [pc, #248]	; (8001fd4 <main+0x744>)
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e002      	b.n	8001ee6 <main+0x656>
//				Traj_Coeff_Cal(&Traj[0], 5, 0.5, Control[0].PositionFeedback,
//						Control[0].VelocityFeedback);
			} else {
//				Traj_Coeff_Cal(&Traj[0], 5, 1.6, Control[0].PositionFeedback,
//						Control[0].VelocityFeedback);
				T_Traj = 5;
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <main+0x740>)
 8001ee2:	4a3c      	ldr	r2, [pc, #240]	; (8001fd4 <main+0x744>)
 8001ee4:	601a      	str	r2, [r3, #0]
			}
			traj_finish = 0;
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <main+0x73c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			T_Traj = 5;
 8001eec:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <main+0x740>)
 8001eee:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <main+0x744>)
 8001ef0:	601a      	str	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <main+0x748>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <main+0x674>
			Narwhal_Protocol();
 8001efa:	f000 f9a9 	bl	8002250 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <main+0x748>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10){
 8001f04:	f002 f8d4 	bl	80040b0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <main+0x74c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d904      	bls.n	8001f1e <main+0x68e>
			Software_Timer_100ms = HAL_GetTick();
 8001f14:	f002 f8cc 	bl	80040b0 <HAL_GetTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <main+0x74c>)
 8001f1c:	6013      	str	r3, [r2, #0]
//			Neopixel_Set(&Neopixel, 1, 255, 255, 255);
//			Neopixel_Sent(&Neopixel);
		}
		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8001f1e:	f002 f8c7 	bl	80040b0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <main+0x750>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2e:	f4ff ae1c 	bcc.w	8001b6a <main+0x2da>
			Software_Timer_1s = HAL_GetTick();
 8001f32:	f002 f8bd 	bl	80040b0 <HAL_GetTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <main+0x750>)
 8001f3a:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 							//	read temperature sensor
 8001f3c:	4829      	ldr	r0, [pc, #164]	; (8001fe4 <main+0x754>)
 8001f3e:	f002 fda1 	bl	8004a84 <HAL_ADC_Start_IT>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8001f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f46:	4828      	ldr	r0, [pc, #160]	; (8001fe8 <main+0x758>)
 8001f48:	f006 fff3 	bl	8008f32 <HAL_GPIO_TogglePin>
		if (Test_traj && !Traj_Flag) {
 8001f4c:	e60d      	b.n	8001b6a <main+0x2da>
 8001f4e:	bf00      	nop
 8001f50:	47ae147b 	.word	0x47ae147b
 8001f54:	3f847ae1 	.word	0x3f847ae1
 8001f58:	2000038c 	.word	0x2000038c
 8001f5c:	20000680 	.word	0x20000680
 8001f60:	2000012c 	.word	0x2000012c
 8001f64:	00000000 	.word	0x00000000
 8001f68:	2000002c 	.word	0x2000002c
 8001f6c:	2000047c 	.word	0x2000047c
 8001f70:	20000128 	.word	0x20000128
 8001f74:	200003fc 	.word	0x200003fc
 8001f78:	2000069c 	.word	0x2000069c
 8001f7c:	2000041c 	.word	0x2000041c
 8001f80:	20000678 	.word	0x20000678
 8001f84:	2000043c 	.word	0x2000043c
 8001f88:	200002e0 	.word	0x200002e0
 8001f8c:	2000045c 	.word	0x2000045c
 8001f90:	200002dc 	.word	0x200002dc
 8001f94:	20000120 	.word	0x20000120
 8001f98:	200006a4 	.word	0x200006a4
 8001f9c:	20000480 	.word	0x20000480
 8001fa0:	20000304 	.word	0x20000304
 8001fa4:	20000324 	.word	0x20000324
 8001fa8:	20000198 	.word	0x20000198
 8001fac:	20000344 	.word	0x20000344
 8001fb0:	20000204 	.word	0x20000204
 8001fb4:	20000364 	.word	0x20000364
 8001fb8:	20000270 	.word	0x20000270
 8001fbc:	20000624 	.word	0x20000624
 8001fc0:	20000638 	.word	0x20000638
 8001fc4:	2000064c 	.word	0x2000064c
 8001fc8:	20000660 	.word	0x20000660
 8001fcc:	2000003e 	.word	0x2000003e
 8001fd0:	20000694 	.word	0x20000694
 8001fd4:	40a00000 	.word	0x40a00000
 8001fd8:	20000674 	.word	0x20000674
 8001fdc:	20000690 	.word	0x20000690
 8001fe0:	200002ec 	.word	0x200002ec
 8001fe4:	20000040 	.word	0x20000040
 8001fe8:	58020800 	.word	0x58020800

08001fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b09c      	sub	sp, #112	; 0x70
 8001ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	224c      	movs	r2, #76	; 0x4c
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00f fca8 	bl	8011950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2220      	movs	r2, #32
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00f fca2 	bl	8011950 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800200c:	2002      	movs	r0, #2
 800200e:	f007 f8d3 	bl	80091b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <SystemClock_Config+0xe8>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	4a2e      	ldr	r2, [pc, #184]	; (80020d4 <SystemClock_Config+0xe8>)
 800201c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002020:	6193      	str	r3, [r2, #24]
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <SystemClock_Config+0xe8>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800202e:	bf00      	nop
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <SystemClock_Config+0xe8>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203c:	d1f8      	bne.n	8002030 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800203e:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <SystemClock_Config+0xec>)
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <SystemClock_Config+0xec>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800204e:	2301      	movs	r3, #1
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002058:	2302      	movs	r3, #2
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800205c:	2302      	movs	r3, #2
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002060:	2302      	movs	r3, #2
 8002062:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002064:	232c      	movs	r3, #44	; 0x2c
 8002066:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002068:	2301      	movs	r3, #1
 800206a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002070:	2302      	movs	r3, #2
 8002072:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002074:	230c      	movs	r3, #12
 8002076:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002078:	2300      	movs	r3, #0
 800207a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f007 f8d1 	bl	800922c <HAL_RCC_OscConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002090:	f000 fada 	bl	8002648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002094:	233f      	movs	r3, #63	; 0x3f
 8002096:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002098:	2303      	movs	r3, #3
 800209a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80020a0:	2308      	movs	r3, #8
 80020a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020a4:	2340      	movs	r3, #64	; 0x40
 80020a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020a8:	2340      	movs	r3, #64	; 0x40
 80020aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f007 fc62 	bl	8009984 <HAL_RCC_ClockConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xde>
  {
    Error_Handler();
 80020c6:	f000 fabf 	bl	8002648 <Error_Handler>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3770      	adds	r7, #112	; 0x70
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58024800 	.word	0x58024800
 80020d8:	58024400 	.word	0x58024400

080020dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0ae      	sub	sp, #184	; 0xb8
 80020e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	22b4      	movs	r2, #180	; 0xb4
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00f fc31 	bl	8011950 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <PeriphCommonClock_Config+0x64>)
 80020f0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80020f6:	2310      	movs	r3, #16
 80020f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020fe:	2302      	movs	r3, #2
 8002100:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8002112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002116:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002118:	2301      	movs	r3, #1
 800211a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 800211c:	2308      	movs	r3, #8
 800211e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4618      	mov	r0, r3
 800212a:	f007 ffb7 	bl	800a09c <HAL_RCCEx_PeriphCLKConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002134:	f000 fa88 	bl	8002648 <Error_Handler>
  }
}
 8002138:	bf00      	nop
 800213a:	37b8      	adds	r7, #184	; 0xb8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	00082003 	.word	0x00082003

08002144 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_UART_RxCpltCallback+0x24>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_UART_RxCpltCallback+0x28>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
	}
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000ca8 	.word	0x20000ca8
 800216c:	20000674 	.word	0x20000674

08002170 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800217a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f00b fb2d 	bl	800d7e0 <HAL_TIM_PWM_Stop_DMA>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000490 	.word	0x20000490

08002194 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_ADC_ConvCpltCallback+0x54>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d11c      	bne.n	80021de <HAL_ADC_ConvCpltCallback+0x4a>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_ADC_ConvCpltCallback+0x54>)
 80021a6:	f002 fdad 	bl	8004d04 <HAL_ADC_GetValue>
 80021aa:	60f8      	str	r0, [r7, #12]
		Temperature = Temp_Calibration
				* (float) ((float) ADC_Output - *(unsigned short*) (0x1FF1E820))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_ADC_ConvCpltCallback+0x58>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_ADC_ConvCpltCallback+0x5c>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
				+ 30.0f;
 80021d0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80021d4:	ee77 7a87 	vadd.f32	s15, s15, s14
		Temperature = Temp_Calibration
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_ADC_ConvCpltCallback+0x60>)
 80021da:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000040 	.word	0x20000040
 80021ec:	1ff1e820 	.word	0x1ff1e820
 80021f0:	2000067c 	.word	0x2000067c
 80021f4:	200002e4 	.word	0x200002e4

080021f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
	}
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000b34 	.word	0x20000b34
 8002220:	20000128 	.word	0x20000128

08002224 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	461a      	mov	r2, r3
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <CRC8+0x28>)
 8002238:	f004 f8fe 	bl	8006438 <HAL_CRC_Calculate>
 800223c:	4603      	mov	r3, r0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	b2db      	uxtb	r3, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000b0 	.word	0x200000b0

08002250 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
	uint8_t Feedback[4] = { 0xFF, 0, 0, 0 };
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	617b      	str	r3, [r7, #20]
	if (UART5_rxBuffer[0] == 0xFF) {
 800225a:	4bc5      	ldr	r3, [pc, #788]	; (8002570 <Narwhal_Protocol+0x320>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	f040 81d4 	bne.w	800260c <Narwhal_Protocol+0x3bc>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 8002264:	210d      	movs	r1, #13
 8002266:	48c2      	ldr	r0, [pc, #776]	; (8002570 <Narwhal_Protocol+0x320>)
 8002268:	f7ff ffdc 	bl	8002224 <CRC8>
 800226c:	4603      	mov	r3, r0
 800226e:	76fb      	strb	r3, [r7, #27]
		if (CRC_Cal == UART5_rxBuffer[13]) {
 8002270:	4bbf      	ldr	r3, [pc, #764]	; (8002570 <Narwhal_Protocol+0x320>)
 8002272:	7b5b      	ldrb	r3, [r3, #13]
 8002274:	7efa      	ldrb	r2, [r7, #27]
 8002276:	429a      	cmp	r2, r3
 8002278:	f040 81b6 	bne.w	80025e8 <Narwhal_Protocol+0x398>
			if ((UART5_rxBuffer[1] & 0xF0) == 0xF0) {
 800227c:	4bbc      	ldr	r3, [pc, #752]	; (8002570 <Narwhal_Protocol+0x320>)
 800227e:	785b      	ldrb	r3, [r3, #1]
 8002280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002284:	2bf0      	cmp	r3, #240	; 0xf0
 8002286:	f040 80b8 	bne.w	80023fa <Narwhal_Protocol+0x1aa>
				/* 		Data to MCU Start	*/
				Feedback[1] = 0xFF;
 800228a:	23ff      	movs	r3, #255	; 0xff
 800228c:	757b      	strb	r3, [r7, #21]
				switch (UART5_rxBuffer[1] & 0x0F) {
 800228e:	4bb8      	ldr	r3, [pc, #736]	; (8002570 <Narwhal_Protocol+0x320>)
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	2b0f      	cmp	r3, #15
 8002298:	f200 809b 	bhi.w	80023d2 <Narwhal_Protocol+0x182>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <Narwhal_Protocol+0x54>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022e5 	.word	0x080022e5
 80022a8:	080022eb 	.word	0x080022eb
 80022ac:	080023d3 	.word	0x080023d3
 80022b0:	080023d3 	.word	0x080023d3
 80022b4:	080023d3 	.word	0x080023d3
 80022b8:	080022f1 	.word	0x080022f1
 80022bc:	080023d3 	.word	0x080023d3
 80022c0:	080023d3 	.word	0x080023d3
 80022c4:	080023d3 	.word	0x080023d3
 80022c8:	080023d3 	.word	0x080023d3
 80022cc:	08002355 	.word	0x08002355
 80022d0:	080023bb 	.word	0x080023bb
 80022d4:	080023c1 	.word	0x080023c1
 80022d8:	080023c7 	.word	0x080023c7
 80022dc:	080023d3 	.word	0x080023d3
 80022e0:	080023cd 	.word	0x080023cd
				case 0x00:
					/* Ping */
					Feedback[2] = 0x00;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75bb      	strb	r3, [r7, #22]
					break;
 80022e8:	e077      	b.n	80023da <Narwhal_Protocol+0x18a>
				case 0x01:
					/* Working Mode Set */
					Feedback[2] = 0x01;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75bb      	strb	r3, [r7, #22]
					break;
 80022ee:	e074      	b.n	80023da <Narwhal_Protocol+0x18a>
				case 0x05:
					/* GoHome */
					Feedback[2] = 0x02;
 80022f0:	2302      	movs	r3, #2
 80022f2:	75bb      	strb	r3, [r7, #22]
//					SetPoint_Velocity[0] = 0;
//					SetPoint_Velocity[1] = 0;
//					SetPoint_Velocity[2] = 0;
//					SetPoint_Velocity[3] = 0;

					if (!Traj_Flag) {
 80022f4:	4b9f      	ldr	r3, [pc, #636]	; (8002574 <Narwhal_Protocol+0x324>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d16d      	bne.n	80023d8 <Narwhal_Protocol+0x188>
						t = 0;
 80022fc:	4b9e      	ldr	r3, [pc, #632]	; (8002578 <Narwhal_Protocol+0x328>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
						for (int i = 0; i < 4; i++) {
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e01d      	b.n	8002346 <Narwhal_Protocol+0xf6>
							Traj_Coeff_Cal(&Traj[i], 4, 0,
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4a99      	ldr	r2, [pc, #612]	; (800257c <Narwhal_Protocol+0x32c>)
 8002316:	441a      	add	r2, r3
 8002318:	4999      	ldr	r1, [pc, #612]	; (8002580 <Narwhal_Protocol+0x330>)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	206c      	movs	r0, #108	; 0x6c
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	440b      	add	r3, r1
 8002324:	3328      	adds	r3, #40	; 0x28
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	eddf 1a96 	vldr	s3, [pc, #600]	; 8002584 <Narwhal_Protocol+0x334>
 800232e:	eeb0 1a67 	vmov.f32	s2, s15
 8002332:	eddf 0a94 	vldr	s1, [pc, #592]	; 8002584 <Narwhal_Protocol+0x334>
 8002336:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800233a:	4610      	mov	r0, r2
 800233c:	f7fe fbb3 	bl	8000aa6 <Traj_Coeff_Cal>
						for (int i = 0; i < 4; i++) {
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	3301      	adds	r3, #1
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	2b03      	cmp	r3, #3
 800234a:	ddde      	ble.n	800230a <Narwhal_Protocol+0xba>
									Control[i].PositionFeedback, 0);
						}
						Traj_Flag = 1;
 800234c:	4b89      	ldr	r3, [pc, #548]	; (8002574 <Narwhal_Protocol+0x324>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
					}

					break;
 8002352:	e041      	b.n	80023d8 <Narwhal_Protocol+0x188>
				case 0x0A:
					/* Joint Jog */
					for (int i = 0; i < 4; i++) {
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	e029      	b.n	80023ae <Narwhal_Protocol+0x15e>
						if (!UART5_rxBuffer[2 + (2 * i)]) {
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	3301      	adds	r3, #1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4a83      	ldr	r2, [pc, #524]	; (8002570 <Narwhal_Protocol+0x320>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10f      	bne.n	8002388 <Narwhal_Protocol+0x138>
							JointTrajSet[i] = (float) (UART5_rxBuffer[3
									+ (2 * i)]);
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	3303      	adds	r3, #3
							JointTrajSet[i] = (float) (UART5_rxBuffer[3
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <Narwhal_Protocol+0x320>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	4a83      	ldr	r2, [pc, #524]	; (8002588 <Narwhal_Protocol+0x338>)
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	edc3 7a00 	vstr	s15, [r3]
 8002386:	e00f      	b.n	80023a8 <Narwhal_Protocol+0x158>
						} else {
							JointTrajSet[i] = (float) -(UART5_rxBuffer[3
									+ (2 * i)]);
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	3303      	adds	r3, #3
							JointTrajSet[i] = (float) -(UART5_rxBuffer[3
 800238e:	4a78      	ldr	r2, [pc, #480]	; (8002570 <Narwhal_Protocol+0x320>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	425b      	negs	r3, r3
 8002394:	ee07 3a90 	vmov	s15, r3
 8002398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800239c:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <Narwhal_Protocol+0x338>)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	edc3 7a00 	vstr	s15, [r3]
					for (int i = 0; i < 4; i++) {
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	3301      	adds	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	ddd2      	ble.n	800235a <Narwhal_Protocol+0x10a>
						}
//						float T = 0.5;
//						for (int i = 0; i < 4; i++) {
//
					}
					Feedback[2] = 0x03;
 80023b4:	2303      	movs	r3, #3
 80023b6:	75bb      	strb	r3, [r7, #22]
					break;
 80023b8:	e00f      	b.n	80023da <Narwhal_Protocol+0x18a>
//							Traj_Coeff_Cal_Ds(Traj[4+i], T, TaskTrajSet[i],
//									Control[i].PositionFeedback,
//									Control[i].VelocityFeedback);
//						}
//					}
					Feedback[2] = 0x04;
 80023ba:	2304      	movs	r3, #4
 80023bc:	75bb      	strb	r3, [r7, #22]
					break;
 80023be:	e00c      	b.n	80023da <Narwhal_Protocol+0x18a>
				case 0x0C:
					/* Joint Set */
					Feedback[2] = 0x03;
 80023c0:	2303      	movs	r3, #3
 80023c2:	75bb      	strb	r3, [r7, #22]
					break;
 80023c4:	e009      	b.n	80023da <Narwhal_Protocol+0x18a>
				case 0x0D:
					/* Cartesian Set */
					Feedback[2] = 0x04;
 80023c6:	2304      	movs	r3, #4
 80023c8:	75bb      	strb	r3, [r7, #22]
					break;
 80023ca:	e006      	b.n	80023da <Narwhal_Protocol+0x18a>
				case 0x0F:
					/* Chess Move */
					Feedback[2] = 0x05;
 80023cc:	2305      	movs	r3, #5
 80023ce:	75bb      	strb	r3, [r7, #22]
					break;
 80023d0:	e003      	b.n	80023da <Narwhal_Protocol+0x18a>
				default:
					Feedback[2] = 0xFF;
 80023d2:	23ff      	movs	r3, #255	; 0xff
 80023d4:	75bb      	strb	r3, [r7, #22]
 80023d6:	e000      	b.n	80023da <Narwhal_Protocol+0x18a>
					break;
 80023d8:	bf00      	nop
				}
				Feedback[3] = CRC8(Feedback, 3);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	2103      	movs	r1, #3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff1f 	bl	8002224 <CRC8>
 80023e6:	4603      	mov	r3, r0
 80023e8:	75fb      	strb	r3, [r7, #23]
				HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	2204      	movs	r2, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4866      	ldr	r0, [pc, #408]	; (800258c <Narwhal_Protocol+0x33c>)
 80023f4:	f00c fcc6 	bl	800ed84 <HAL_UART_Transmit_IT>
 80023f8:	e119      	b.n	800262e <Narwhal_Protocol+0x3de>
				/* 		Data to MCU End	*/

			} else if ((UART5_rxBuffer[1] & 0xF0) == 0xA0) {
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <Narwhal_Protocol+0x320>)
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002402:	2ba0      	cmp	r3, #160	; 0xa0
 8002404:	f040 8113 	bne.w	800262e <Narwhal_Protocol+0x3de>
				/* 		Sent Data to Master Start 	*/
				uint8_t Sent[13] = { 0xFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002408:	4b61      	ldr	r3, [pc, #388]	; (8002590 <Narwhal_Protocol+0x340>)
 800240a:	1d3c      	adds	r4, r7, #4
 800240c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800240e:	c407      	stmia	r4!, {r0, r1, r2}
 8002410:	7023      	strb	r3, [r4, #0]
				switch (UART5_rxBuffer[1] & 0x0F) {
 8002412:	4b57      	ldr	r3, [pc, #348]	; (8002570 <Narwhal_Protocol+0x320>)
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	2b0b      	cmp	r3, #11
 800241c:	f200 80d2 	bhi.w	80025c4 <Narwhal_Protocol+0x374>
 8002420:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <Narwhal_Protocol+0x1d8>)
 8002422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002426:	bf00      	nop
 8002428:	08002459 	.word	0x08002459
 800242c:	080024a1 	.word	0x080024a1
 8002430:	080024c5 	.word	0x080024c5
 8002434:	080025c5 	.word	0x080025c5
 8002438:	080025c5 	.word	0x080025c5
 800243c:	080025c5 	.word	0x080025c5
 8002440:	080025c5 	.word	0x080025c5
 8002444:	080025c5 	.word	0x080025c5
 8002448:	080025c5 	.word	0x080025c5
 800244c:	080025c5 	.word	0x080025c5
 8002450:	0800254d 	.word	0x0800254d
 8002454:	080025a1 	.word	0x080025a1
				case 0x00:
					/* System Status */
					Sent[1] = 0xEE;
 8002458:	23ee      	movs	r3, #238	; 0xee
 800245a:	717b      	strb	r3, [r7, #5]
					uint16_t T = Temperature * 1000;
 800245c:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <Narwhal_Protocol+0x344>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002598 <Narwhal_Protocol+0x348>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	833b      	strh	r3, [r7, #24]
					Sent[2] = (uint8_t) ((T >> 8) & 0xFF);
 8002474:	8b3b      	ldrh	r3, [r7, #24]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	b29b      	uxth	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	71bb      	strb	r3, [r7, #6]
					Sent[3] = (uint8_t) (T & 0xFF);
 800247e:	8b3b      	ldrh	r3, [r7, #24]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	71fb      	strb	r3, [r7, #7]
					Sent[4] = CRC8(Sent, 4);
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2104      	movs	r1, #4
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fecb 	bl	8002224 <CRC8>
 800248e:	4603      	mov	r3, r0
 8002490:	723b      	strb	r3, [r7, #8]
					HAL_UART_Transmit_IT(&huart5, Sent, 5);
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2205      	movs	r2, #5
 8002496:	4619      	mov	r1, r3
 8002498:	483c      	ldr	r0, [pc, #240]	; (800258c <Narwhal_Protocol+0x33c>)
 800249a:	f00c fc73 	bl	800ed84 <HAL_UART_Transmit_IT>
					break;
 800249e:	e0c6      	b.n	800262e <Narwhal_Protocol+0x3de>
				case 0x01:
					/* Station Encoder Position */
					Feedback[2] = 0x00;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75bb      	strb	r3, [r7, #22]
					Feedback[3] = CRC8(Feedback, 3);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2103      	movs	r1, #3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff feba 	bl	8002224 <CRC8>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2204      	movs	r2, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4833      	ldr	r0, [pc, #204]	; (800258c <Narwhal_Protocol+0x33c>)
 80024be:	f00c fc61 	bl	800ed84 <HAL_UART_Transmit_IT>
					break;
 80024c2:	e0b4      	b.n	800262e <Narwhal_Protocol+0x3de>
				case 0x02:
					/* Raw Joint Encoder Position */
					Sent[1] = 0xEE;
 80024c4:	23ee      	movs	r3, #238	; 0xee
 80024c6:	717b      	strb	r3, [r7, #5]
					for (int i = 0; i < 4; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e02c      	b.n	8002528 <Narwhal_Protocol+0x2d8>
						Sent[2 + i] = (uint8_t) ((Encoder[i].Position >> 8)
 80024ce:	4a33      	ldr	r2, [pc, #204]	; (800259c <Narwhal_Protocol+0x34c>)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	015b      	lsls	r3, r3, #5
 80024d4:	4413      	add	r3, r2
 80024d6:	330e      	adds	r3, #14
 80024d8:	881b      	ldrh	r3, [r3, #0]
								&& 0xFF);
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
						Sent[2 + i] = (uint8_t) ((Encoder[i].Position >> 8)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3302      	adds	r3, #2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024f4:	440b      	add	r3, r1
 80024f6:	f803 2c24 	strb.w	r2, [r3, #-36]
						Sent[3 + i] = (uint8_t) (Encoder[i].Position && 0xFF);
 80024fa:	4a28      	ldr	r2, [pc, #160]	; (800259c <Narwhal_Protocol+0x34c>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	4413      	add	r3, r2
 8002502:	330e      	adds	r3, #14
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3303      	adds	r3, #3
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800251c:	440b      	add	r3, r1
 800251e:	f803 2c24 	strb.w	r2, [r3, #-36]
					for (int i = 0; i < 4; i++) {
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b03      	cmp	r3, #3
 800252c:	ddcf      	ble.n	80024ce <Narwhal_Protocol+0x27e>
					}
					Sent[12] = CRC8(Feedback, 12);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	210c      	movs	r1, #12
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fe75 	bl	8002224 <CRC8>
 800253a:	4603      	mov	r3, r0
 800253c:	743b      	strb	r3, [r7, #16]
					HAL_UART_Transmit_IT(&huart5, Sent, 13);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	220d      	movs	r2, #13
 8002542:	4619      	mov	r1, r3
 8002544:	4811      	ldr	r0, [pc, #68]	; (800258c <Narwhal_Protocol+0x33c>)
 8002546:	f00c fc1d 	bl	800ed84 <HAL_UART_Transmit_IT>
					break;
 800254a:	e070      	b.n	800262e <Narwhal_Protocol+0x3de>
				case 0x0A:
					/* Joint Space Position */
					Feedback[2] = 0x00;
 800254c:	2300      	movs	r3, #0
 800254e:	75bb      	strb	r3, [r7, #22]
					Feedback[3] = CRC8(Feedback, 3);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2103      	movs	r1, #3
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fe64 	bl	8002224 <CRC8>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2204      	movs	r2, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4808      	ldr	r0, [pc, #32]	; (800258c <Narwhal_Protocol+0x33c>)
 800256a:	f00c fc0b 	bl	800ed84 <HAL_UART_Transmit_IT>
					break;
 800256e:	e05e      	b.n	800262e <Narwhal_Protocol+0x3de>
 8002570:	20000030 	.word	0x20000030
 8002574:	2000047c 	.word	0x2000047c
 8002578:	20000120 	.word	0x20000120
 800257c:	2000038c 	.word	0x2000038c
 8002580:	2000012c 	.word	0x2000012c
 8002584:	00000000 	.word	0x00000000
 8002588:	20000608 	.word	0x20000608
 800258c:	20000ca8 	.word	0x20000ca8
 8002590:	08011978 	.word	0x08011978
 8002594:	200002e4 	.word	0x200002e4
 8002598:	447a0000 	.word	0x447a0000
 800259c:	200003fc 	.word	0x200003fc
				case 0x0B:
					/* Task Space Position */
					Feedback[2] = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75bb      	strb	r3, [r7, #22]
					Feedback[3] = CRC8(Feedback, 3);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2103      	movs	r1, #3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fe3a 	bl	8002224 <CRC8>
 80025b0:	4603      	mov	r3, r0
 80025b2:	75fb      	strb	r3, [r7, #23]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2204      	movs	r2, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4820      	ldr	r0, [pc, #128]	; (8002640 <Narwhal_Protocol+0x3f0>)
 80025be:	f00c fbe1 	bl	800ed84 <HAL_UART_Transmit_IT>
					break;
 80025c2:	e034      	b.n	800262e <Narwhal_Protocol+0x3de>
				default:
					Feedback[2] = 0xFF;
 80025c4:	23ff      	movs	r3, #255	; 0xff
 80025c6:	75bb      	strb	r3, [r7, #22]
					Feedback[3] = CRC8(Feedback, 3);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2103      	movs	r1, #3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fe28 	bl	8002224 <CRC8>
 80025d4:	4603      	mov	r3, r0
 80025d6:	75fb      	strb	r3, [r7, #23]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2204      	movs	r2, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	4817      	ldr	r0, [pc, #92]	; (8002640 <Narwhal_Protocol+0x3f0>)
 80025e2:	f00c fbcf 	bl	800ed84 <HAL_UART_Transmit_IT>
 80025e6:	e022      	b.n	800262e <Narwhal_Protocol+0x3de>
				}
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			Feedback[1] = 0xCC;
 80025e8:	23cc      	movs	r3, #204	; 0xcc
 80025ea:	757b      	strb	r3, [r7, #21]
			Feedback[3] = CRC8(Feedback, 3);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2103      	movs	r1, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fe16 	bl	8002224 <CRC8>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]
			HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2204      	movs	r2, #4
 8002602:	4619      	mov	r1, r3
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <Narwhal_Protocol+0x3f0>)
 8002606:	f00c fbbd 	bl	800ed84 <HAL_UART_Transmit_IT>
 800260a:	e010      	b.n	800262e <Narwhal_Protocol+0x3de>
		}
	} else {
		/*		Header Error	*/
		Feedback[1] = 0xAA;
 800260c:	23aa      	movs	r3, #170	; 0xaa
 800260e:	757b      	strb	r3, [r7, #21]
		Feedback[3] = CRC8(Feedback, 3);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2103      	movs	r1, #3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fe04 	bl	8002224 <CRC8>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2204      	movs	r2, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <Narwhal_Protocol+0x3f0>)
 800262a:	f00c fbab 	bl	800ed84 <HAL_UART_Transmit_IT>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800262e:	220e      	movs	r2, #14
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <Narwhal_Protocol+0x3f4>)
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <Narwhal_Protocol+0x3f0>)
 8002634:	f00c fc4e 	bl	800eed4 <HAL_UART_Receive_IT>
}
 8002638:	bf00      	nop
 800263a:	372c      	adds	r7, #44	; 0x2c
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}
 8002640:	20000ca8 	.word	0x20000ca8
 8002644:	20000030 	.word	0x20000030

08002648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002650:	e7fe      	b.n	8002650 <Error_Handler+0x8>
	...

08002654 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002658:	4b28      	ldr	r3, [pc, #160]	; (80026fc <MX_SPI3_Init+0xa8>)
 800265a:	4a29      	ldr	r2, [pc, #164]	; (8002700 <MX_SPI3_Init+0xac>)
 800265c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002660:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002664:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <MX_SPI3_Init+0xa8>)
 800266e:	2207      	movs	r2, #7
 8002670:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <MX_SPI3_Init+0xa8>)
 800267a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800267e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002682:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002686:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <MX_SPI3_Init+0xa8>)
 800268a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800268e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <MX_SPI3_Init+0xa8>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <MX_SPI3_Init+0xa8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026a4:	221d      	movs	r2, #29
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_SPI3_Init+0xa8>)
 80026e8:	f009 fd6a 	bl	800c1c0 <HAL_SPI_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80026f2:	f7ff ffa9 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200006b4 	.word	0x200006b4
 8002700:	40003c00 	.word	0x40003c00

08002704 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <MX_SPI4_Init+0xa8>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002710:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002714:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800271e:	220f      	movs	r2, #15
 8002720:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002730:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002734:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002738:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800273c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002752:	2200      	movs	r2, #0
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002760:	2200      	movs	r2, #0
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002766:	2200      	movs	r2, #0
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002778:	2200      	movs	r2, #0
 800277a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800277e:	2200      	movs	r2, #0
 8002780:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002784:	2200      	movs	r2, #0
 8002786:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <MX_SPI4_Init+0xa4>)
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002790:	2200      	movs	r2, #0
 8002792:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_SPI4_Init+0xa4>)
 8002796:	f009 fd13 	bl	800c1c0 <HAL_SPI_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80027a0:	f7ff ff52 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000073c 	.word	0x2000073c
 80027ac:	40013400 	.word	0x40013400

080027b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b8      	sub	sp, #224	; 0xe0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	22b4      	movs	r2, #180	; 0xb4
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00f f8bd 	bl	8011950 <memset>
  if(spiHandle->Instance==SPI3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a4b      	ldr	r2, [pc, #300]	; (8002908 <HAL_SPI_MspInit+0x158>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d156      	bne.n	800288e <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80027e6:	2319      	movs	r3, #25
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80027ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80027f0:	2302      	movs	r3, #2
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80027f4:	2302      	movs	r3, #2
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800280a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002810:	f107 0318 	add.w	r3, r7, #24
 8002814:	4618      	mov	r0, r3
 8002816:	f007 fc41 	bl	800a09c <HAL_RCCEx_PeriphCLKConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8002820:	f7ff ff12 	bl	8002648 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_SPI_MspInit+0x15c>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282a:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_SPI_MspInit+0x15c>)
 800282c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_SPI_MspInit+0x15c>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_SPI_MspInit+0x15c>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_SPI_MspInit+0x15c>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_SPI_MspInit+0x15c>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002860:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800287a:	2306      	movs	r3, #6
 800287c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002880:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002884:	4619      	mov	r1, r3
 8002886:	4822      	ldr	r0, [pc, #136]	; (8002910 <HAL_SPI_MspInit+0x160>)
 8002888:	f006 f992 	bl	8008bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800288c:	e038      	b.n	8002900 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_SPI_MspInit+0x164>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d133      	bne.n	8002900 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_SPI_MspInit+0x15c>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_SPI_MspInit+0x15c>)
 80028a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_SPI_MspInit+0x15c>)
 80028aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_SPI_MspInit+0x15c>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <HAL_SPI_MspInit+0x15c>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_SPI_MspInit+0x15c>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 80028d4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80028d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80028ee:	2305      	movs	r3, #5
 80028f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028f8:	4619      	mov	r1, r3
 80028fa:	4807      	ldr	r0, [pc, #28]	; (8002918 <HAL_SPI_MspInit+0x168>)
 80028fc:	f006 f958 	bl	8008bb0 <HAL_GPIO_Init>
}
 8002900:	bf00      	nop
 8002902:	37e0      	adds	r7, #224	; 0xe0
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40003c00 	.word	0x40003c00
 800290c:	58024400 	.word	0x58024400
 8002910:	58020800 	.word	0x58020800
 8002914:	40013400 	.word	0x40013400
 8002918:	58021000 	.word	0x58021000

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_MspInit+0x30>)
 8002924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002928:	4a08      	ldr	r2, [pc, #32]	; (800294c <HAL_MspInit+0x30>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_MspInit+0x30>)
 8002934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	58024400 	.word	0x58024400

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f001 fb74 	bl	8004088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Stream0_IRQHandler+0x10>)
 80029aa:	f004 ff9b 	bl	80078e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000810 	.word	0x20000810

080029b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <USART3_IRQHandler+0x10>)
 80029be:	f00c fadf 	bl	800ef80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000c18 	.word	0x20000c18

080029cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <UART5_IRQHandler+0x10>)
 80029d2:	f00c fad5 	bl	800ef80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000ca8 	.word	0x20000ca8

080029e0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <ADC3_IRQHandler+0x10>)
 80029e6:	f002 f99b 	bl	8004d20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000040 	.word	0x20000040

080029f4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <TIM23_IRQHandler+0x10>)
 80029fa:	f00b f88f 	bl	800db1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000b34 	.word	0x20000b34

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <SystemInit+0xd8>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a33      	ldr	r2, [pc, #204]	; (8002ae0 <SystemInit+0xd8>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <SystemInit+0xdc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d807      	bhi.n	8002a38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a28:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <SystemInit+0xdc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 030f 	bic.w	r3, r3, #15
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <SystemInit+0xdc>)
 8002a32:	f043 0307 	orr.w	r3, r3, #7
 8002a36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <SystemInit+0xe0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <SystemInit+0xe0>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <SystemInit+0xe0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <SystemInit+0xe0>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4926      	ldr	r1, [pc, #152]	; (8002ae8 <SystemInit+0xe0>)
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <SystemInit+0xe4>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <SystemInit+0xdc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <SystemInit+0xdc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 030f 	bic.w	r3, r3, #15
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <SystemInit+0xdc>)
 8002a6c:	f043 0307 	orr.w	r3, r3, #7
 8002a70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <SystemInit+0xe0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <SystemInit+0xe0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <SystemInit+0xe0>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <SystemInit+0xe0>)
 8002a86:	4a1a      	ldr	r2, [pc, #104]	; (8002af0 <SystemInit+0xe8>)
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <SystemInit+0xe0>)
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <SystemInit+0xec>)
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <SystemInit+0xe0>)
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <SystemInit+0xf0>)
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <SystemInit+0xe0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <SystemInit+0xe0>)
 8002a9e:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <SystemInit+0xf0>)
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <SystemInit+0xe0>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <SystemInit+0xe0>)
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <SystemInit+0xf0>)
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <SystemInit+0xe0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <SystemInit+0xe0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <SystemInit+0xe0>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <SystemInit+0xe0>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <SystemInit+0xf4>)
 8002ac8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002acc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SystemInit+0xd8>)
 8002ad0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ad4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00
 8002ae4:	52002000 	.word	0x52002000
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	eaf6ed7f 	.word	0xeaf6ed7f
 8002af0:	02020200 	.word	0x02020200
 8002af4:	01ff0000 	.word	0x01ff0000
 8002af8:	01010280 	.word	0x01010280
 8002afc:	52004000 	.word	0x52004000

08002b00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b098      	sub	sp, #96	; 0x60
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	615a      	str	r2, [r3, #20]
 8002b24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b26:	1d3b      	adds	r3, r7, #4
 8002b28:	2234      	movs	r2, #52	; 0x34
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00e ff0f 	bl	8011950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b34:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <MX_TIM1_Init+0x11c>)
 8002b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b38:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b46:	f240 1257 	movw	r2, #343	; 0x157
 8002b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b58:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b5e:	482e      	ldr	r0, [pc, #184]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b60:	f00a fcca 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002b6a:	f7ff fd6d 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4825      	ldr	r0, [pc, #148]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002b82:	f00b ff55 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b8c:	f7ff fd5c 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b90:	2360      	movs	r3, #96	; 0x60
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4818      	ldr	r0, [pc, #96]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002bb6:	f00b f8d1 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002bc0:	f7ff fd42 	bl	8002648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002bfa:	f00b ffb5 	bl	800eb68 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002c04:	f7ff fd20 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <MX_TIM1_Init+0x118>)
 8002c0a:	f000 febf 	bl	800398c <HAL_TIM_MspPostInit>

}
 8002c0e:	bf00      	nop
 8002c10:	3760      	adds	r7, #96	; 0x60
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000ae8 	.word	0x20000ae8
 8002c1c:	40010000 	.word	0x40010000

08002c20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08e      	sub	sp, #56	; 0x38
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c40:	463b      	mov	r3, r7
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	615a      	str	r2, [r3, #20]
 8002c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c54:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <MX_TIM3_Init+0xec>)
 8002c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c6c:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c72:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c78:	4823      	ldr	r0, [pc, #140]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c7a:	f00a fb60 	bl	800d33e <HAL_TIM_Base_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002c84:	f7ff fce0 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c92:	4619      	mov	r1, r3
 8002c94:	481c      	ldr	r0, [pc, #112]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002c96:	f00b f975 	bl	800df84 <HAL_TIM_ConfigClockSource>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002ca0:	f7ff fcd2 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ca4:	4818      	ldr	r0, [pc, #96]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002ca6:	f00a fc27 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002cb0:	f7ff fcca 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4811      	ldr	r0, [pc, #68]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002cc4:	f00b feb4 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002cce:	f7ff fcbb 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd2:	2360      	movs	r3, #96	; 0x60
 8002cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4807      	ldr	r0, [pc, #28]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002cea:	f00b f837 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002cf4:	f7ff fca8 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cf8:	4803      	ldr	r0, [pc, #12]	; (8002d08 <MX_TIM3_Init+0xe8>)
 8002cfa:	f000 fe47 	bl	800398c <HAL_TIM_MspPostInit>

}
 8002cfe:	bf00      	nop
 8002d00:	3738      	adds	r7, #56	; 0x38
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000a04 	.word	0x20000a04
 8002d0c:	40000400 	.word	0x40000400

08002d10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f00e fe16 	bl	8011950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	463b      	mov	r3, r7
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <MX_TIM4_Init+0xa8>)
 8002d32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d42:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d54:	2303      	movs	r3, #3
 8002d56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480d      	ldr	r0, [pc, #52]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d80:	f00a fe26 	bl	800d9d0 <HAL_TIM_Encoder_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002d8a:	f7ff fc5d 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d96:	463b      	mov	r3, r7
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <MX_TIM4_Init+0xa4>)
 8002d9c:	f00b fe48 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002da6:	f7ff fc4f 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200008d4 	.word	0x200008d4
 8002db8:	40000800 	.word	0x40000800

08002dbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f00e fdc0 	bl	8011950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002ddc:	4a21      	ldr	r2, [pc, #132]	; (8002e64 <MX_TIM5_Init+0xa8>)
 8002dde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002dee:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002df2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dfa:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e00:	2303      	movs	r3, #3
 8002e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480d      	ldr	r0, [pc, #52]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002e2c:	f00a fdd0 	bl	800d9d0 <HAL_TIM_Encoder_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002e36:	f7ff fc07 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e42:	463b      	mov	r3, r7
 8002e44:	4619      	mov	r1, r3
 8002e46:	4806      	ldr	r0, [pc, #24]	; (8002e60 <MX_TIM5_Init+0xa4>)
 8002e48:	f00b fdf2 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002e52:	f7ff fbf9 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	3730      	adds	r7, #48	; 0x30
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200009b8 	.word	0x200009b8
 8002e64:	40000c00 	.word	0x40000c00

08002e68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <MX_TIM6_Init+0x6c>)
 8002e7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e80:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002e84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002e9c:	f00a fa4f 	bl	800d33e <HAL_TIM_Base_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ea6:	f7ff fbcf 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <MX_TIM6_Init+0x68>)
 8002eb8:	f00b fdba 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002ec2:	f7ff fbc1 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000a9c 	.word	0x20000a9c
 8002ed4:	40001000 	.word	0x40001000

08002ed8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00e fd32 	bl	8011950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	463b      	mov	r3, r7
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002ef8:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <MX_TIM8_Init+0xb0>)
 8002efa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f0a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002f0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f22:	2303      	movs	r3, #3
 8002f24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f4e:	f00a fd3f 	bl	800d9d0 <HAL_TIM_Encoder_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002f58:	f7ff fb76 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f68:	463b      	mov	r3, r7
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4805      	ldr	r0, [pc, #20]	; (8002f84 <MX_TIM8_Init+0xac>)
 8002f6e:	f00b fd5f 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002f78:	f7ff fb66 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	3730      	adds	r7, #48	; 0x30
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000888 	.word	0x20000888
 8002f88:	40010400 	.word	0x40010400

08002f8c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fa6:	4a20      	ldr	r2, [pc, #128]	; (8003028 <MX_TIM13_Init+0x9c>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fac:	f240 2225 	movw	r2, #549	; 0x225
 8002fb0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fbe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fc6:	4b17      	ldr	r3, [pc, #92]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fc8:	2280      	movs	r2, #128	; 0x80
 8002fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002fcc:	4815      	ldr	r0, [pc, #84]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fce:	f00a f9b6 	bl	800d33e <HAL_TIM_Base_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002fd8:	f7ff fb36 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002fdc:	4811      	ldr	r0, [pc, #68]	; (8003024 <MX_TIM13_Init+0x98>)
 8002fde:	f00a fa8b 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002fe8:	f7ff fb2e 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fec:	2360      	movs	r3, #96	; 0x60
 8002fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002ff0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	2200      	movs	r2, #0
 8003002:	4619      	mov	r1, r3
 8003004:	4807      	ldr	r0, [pc, #28]	; (8003024 <MX_TIM13_Init+0x98>)
 8003006:	f00a fea9 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8003010:	f7ff fb1a 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003014:	4803      	ldr	r0, [pc, #12]	; (8003024 <MX_TIM13_Init+0x98>)
 8003016:	f000 fcb9 	bl	800398c <HAL_TIM_MspPostInit>

}
 800301a:	bf00      	nop
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000a50 	.word	0x20000a50
 8003028:	40001c00 	.word	0x40001c00

0800302c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
 8003040:	615a      	str	r2, [r3, #20]
 8003042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <MX_TIM14_Init+0x98>)
 8003046:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <MX_TIM14_Init+0x9c>)
 8003048:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_TIM14_Init+0x98>)
 800304c:	f240 2225 	movw	r2, #549	; 0x225
 8003050:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <MX_TIM14_Init+0x98>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_TIM14_Init+0x98>)
 800305a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800305e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <MX_TIM14_Init+0x98>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <MX_TIM14_Init+0x98>)
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800306c:	4815      	ldr	r0, [pc, #84]	; (80030c4 <MX_TIM14_Init+0x98>)
 800306e:	f00a f966 	bl	800d33e <HAL_TIM_Base_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8003078:	f7ff fae6 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800307c:	4811      	ldr	r0, [pc, #68]	; (80030c4 <MX_TIM14_Init+0x98>)
 800307e:	f00a fa3b 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8003088:	f7ff fade 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308c:	2360      	movs	r3, #96	; 0x60
 800308e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8003090:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <MX_TIM14_Init+0x98>)
 80030a6:	f00a fe59 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80030b0:	f7ff faca 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <MX_TIM14_Init+0x98>)
 80030b6:	f000 fc69 	bl	800398c <HAL_TIM_MspPostInit>

}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000b80 	.word	0x20000b80
 80030c8:	40002000 	.word	0x40002000

080030cc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b098      	sub	sp, #96	; 0x60
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	615a      	str	r2, [r3, #20]
 80030f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	2234      	movs	r2, #52	; 0x34
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00e fc29 	bl	8011950 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80030fe:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003100:	4a35      	ldr	r2, [pc, #212]	; (80031d8 <MX_TIM15_Init+0x10c>)
 8003102:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8003104:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003106:	f240 2225 	movw	r2, #549	; 0x225
 800310a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <MX_TIM15_Init+0x108>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003118:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <MX_TIM15_Init+0x108>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800312c:	4829      	ldr	r0, [pc, #164]	; (80031d4 <MX_TIM15_Init+0x108>)
 800312e:	f00a f9e3 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8003138:	f7ff fa86 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003148:	4619      	mov	r1, r3
 800314a:	4822      	ldr	r0, [pc, #136]	; (80031d4 <MX_TIM15_Init+0x108>)
 800314c:	f00b fc70 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8003156:	f7ff fa77 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800315a:	2360      	movs	r3, #96	; 0x60
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 800315e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003164:	2300      	movs	r3, #0
 8003166:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003168:	2300      	movs	r3, #0
 800316a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800317c:	2200      	movs	r2, #0
 800317e:	4619      	mov	r1, r3
 8003180:	4814      	ldr	r0, [pc, #80]	; (80031d4 <MX_TIM15_Init+0x108>)
 8003182:	f00a fdeb 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800318c:	f7ff fa5c 	bl	8002648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <MX_TIM15_Init+0x108>)
 80031b8:	f00b fcd6 	bl	800eb68 <HAL_TIMEx_ConfigBreakDeadTime>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80031c2:	f7ff fa41 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80031c6:	4803      	ldr	r0, [pc, #12]	; (80031d4 <MX_TIM15_Init+0x108>)
 80031c8:	f000 fbe0 	bl	800398c <HAL_TIM_MspPostInit>

}
 80031cc:	bf00      	nop
 80031ce:	3760      	adds	r7, #96	; 0x60
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000920 	.word	0x20000920
 80031d8:	40014000 	.word	0x40014000

080031dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b094      	sub	sp, #80	; 0x50
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031f6:	463b      	mov	r3, r7
 80031f8:	2234      	movs	r2, #52	; 0x34
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00e fba7 	bl	8011950 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003202:	4b32      	ldr	r3, [pc, #200]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003204:	4a32      	ldr	r2, [pc, #200]	; (80032d0 <MX_TIM16_Init+0xf4>)
 8003206:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <MX_TIM16_Init+0xf0>)
 800320a:	f240 2225 	movw	r2, #549	; 0x225
 800320e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003210:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800321c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <MX_TIM16_Init+0xf0>)
 800322c:	2280      	movs	r2, #128	; 0x80
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003230:	4826      	ldr	r0, [pc, #152]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003232:	f00a f884 	bl	800d33e <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800323c:	f7ff fa04 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003240:	4822      	ldr	r0, [pc, #136]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003242:	f00a f959 	bl	800d4f8 <HAL_TIM_PWM_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800324c:	f7ff f9fc 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003250:	2360      	movs	r3, #96	; 0x60
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8003254:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800325a:	2300      	movs	r3, #0
 800325c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800325e:	2300      	movs	r3, #0
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800326e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003272:	2200      	movs	r2, #0
 8003274:	4619      	mov	r1, r3
 8003276:	4815      	ldr	r0, [pc, #84]	; (80032cc <MX_TIM16_Init+0xf0>)
 8003278:	f00a fd70 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8003282:	f7ff f9e1 	bl	8002648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800329a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800329e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80032a8:	463b      	mov	r3, r7
 80032aa:	4619      	mov	r1, r3
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <MX_TIM16_Init+0xf0>)
 80032ae:	f00b fc5b 	bl	800eb68 <HAL_TIMEx_ConfigBreakDeadTime>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80032b8:	f7ff f9c6 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80032bc:	4803      	ldr	r0, [pc, #12]	; (80032cc <MX_TIM16_Init+0xf0>)
 80032be:	f000 fb65 	bl	800398c <HAL_TIM_MspPostInit>

}
 80032c2:	bf00      	nop
 80032c4:	3750      	adds	r7, #80	; 0x50
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000bcc 	.word	0x20000bcc
 80032d0:	40014400 	.word	0x40014400

080032d4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b094      	sub	sp, #80	; 0x50
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80032da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032ee:	463b      	mov	r3, r7
 80032f0:	2234      	movs	r2, #52	; 0x34
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00e fb2b 	bl	8011950 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <MX_TIM17_Init+0xf0>)
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <MX_TIM17_Init+0xf4>)
 80032fe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <MX_TIM17_Init+0xf0>)
 8003302:	f240 2225 	movw	r2, #549	; 0x225
 8003306:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <MX_TIM17_Init+0xf0>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <MX_TIM17_Init+0xf0>)
 8003310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003314:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <MX_TIM17_Init+0xf0>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800331c:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <MX_TIM17_Init+0xf0>)
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003322:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <MX_TIM17_Init+0xf0>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003328:	4826      	ldr	r0, [pc, #152]	; (80033c4 <MX_TIM17_Init+0xf0>)
 800332a:	f00a f808 	bl	800d33e <HAL_TIM_Base_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8003334:	f7ff f988 	bl	8002648 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003338:	4822      	ldr	r0, [pc, #136]	; (80033c4 <MX_TIM17_Init+0xf0>)
 800333a:	f00a f8dd 	bl	800d4f8 <HAL_TIM_PWM_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8003344:	f7ff f980 	bl	8002648 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003348:	2360      	movs	r3, #96	; 0x60
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800334c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003350:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003352:	2300      	movs	r3, #0
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003356:	2300      	movs	r3, #0
 8003358:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800336a:	2200      	movs	r2, #0
 800336c:	4619      	mov	r1, r3
 800336e:	4815      	ldr	r0, [pc, #84]	; (80033c4 <MX_TIM17_Init+0xf0>)
 8003370:	f00a fcf4 	bl	800dd5c <HAL_TIM_PWM_ConfigChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800337a:	f7ff f965 	bl	8002648 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80033a0:	463b      	mov	r3, r7
 80033a2:	4619      	mov	r1, r3
 80033a4:	4807      	ldr	r0, [pc, #28]	; (80033c4 <MX_TIM17_Init+0xf0>)
 80033a6:	f00b fbdf 	bl	800eb68 <HAL_TIMEx_ConfigBreakDeadTime>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80033b0:	f7ff f94a 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80033b4:	4803      	ldr	r0, [pc, #12]	; (80033c4 <MX_TIM17_Init+0xf0>)
 80033b6:	f000 fae9 	bl	800398c <HAL_TIM_MspPostInit>

}
 80033ba:	bf00      	nop
 80033bc:	3750      	adds	r7, #80	; 0x50
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2000096c 	.word	0x2000096c
 80033c8:	40014800 	.word	0x40014800

080033cc <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <MX_TIM23_Init+0x98>)
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <MX_TIM23_Init+0x9c>)
 80033ee:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <MX_TIM23_Init+0x98>)
 80033f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80033f6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <MX_TIM23_Init+0x98>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 10000-1;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <MX_TIM23_Init+0x98>)
 8003400:	f242 720f 	movw	r2, #9999	; 0x270f
 8003404:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <MX_TIM23_Init+0x98>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800340c:	4b15      	ldr	r3, [pc, #84]	; (8003464 <MX_TIM23_Init+0x98>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8003412:	4814      	ldr	r0, [pc, #80]	; (8003464 <MX_TIM23_Init+0x98>)
 8003414:	f009 ff93 	bl	800d33e <HAL_TIM_Base_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800341e:	f7ff f913 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	; (8003464 <MX_TIM23_Init+0x98>)
 8003430:	f00a fda8 	bl	800df84 <HAL_TIM_ConfigClockSource>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800343a:	f7ff f905 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	; (8003464 <MX_TIM23_Init+0x98>)
 800344c:	f00b faf0 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8003456:	f7ff f8f7 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000b34 	.word	0x20000b34
 8003468:	4000e000 	.word	0x4000e000

0800346c <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <MX_TIM24_Init+0x98>)
 800348c:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <MX_TIM24_Init+0x9c>)
 800348e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <MX_TIM24_Init+0x98>)
 8003492:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003496:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <MX_TIM24_Init+0x98>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <MX_TIM24_Init+0x98>)
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <MX_TIM24_Init+0x98>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <MX_TIM24_Init+0x98>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80034b2:	4814      	ldr	r0, [pc, #80]	; (8003504 <MX_TIM24_Init+0x98>)
 80034b4:	f009 ff43 	bl	800d33e <HAL_TIM_Base_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80034be:	f7ff f8c3 	bl	8002648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	4619      	mov	r1, r3
 80034ce:	480d      	ldr	r0, [pc, #52]	; (8003504 <MX_TIM24_Init+0x98>)
 80034d0:	f00a fd58 	bl	800df84 <HAL_TIM_ConfigClockSource>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80034da:	f7ff f8b5 	bl	8002648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4806      	ldr	r0, [pc, #24]	; (8003504 <MX_TIM24_Init+0x98>)
 80034ec:	f00b faa0 	bl	800ea30 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 80034f6:	f7ff f8a7 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80034fa:	bf00      	nop
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200007c4 	.word	0x200007c4
 8003508:	4000e400 	.word	0x4000e400

0800350c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3c      	ldr	r2, [pc, #240]	; (800361c <HAL_TIM_PWM_MspInit+0x110>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d15e      	bne.n	80035ec <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352e:	4b3c      	ldr	r3, [pc, #240]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 8003530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 8003540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 800354e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003552:	4a33      	ldr	r2, [pc, #204]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800355c:	4b30      	ldr	r3, [pc, #192]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 800355e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 800356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4619      	mov	r1, r3
 8003586:	4827      	ldr	r0, [pc, #156]	; (8003624 <HAL_TIM_PWM_MspInit+0x118>)
 8003588:	f005 fb12 	bl	8008bb0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 800358c:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_TIM_PWM_MspInit+0x120>)
 8003590:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 8003594:	220b      	movs	r2, #11
 8003596:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003598:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 800359a:	2240      	movs	r2, #64	; 0x40
 800359c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035aa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035ac:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80035ce:	4816      	ldr	r0, [pc, #88]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035d0:	f003 f8cc 	bl	800676c <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 80035da:	f7ff f835 	bl	8002648 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
 80035e4:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIM_PWM_MspInit+0x11c>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80035ea:	e013      	b.n	8003614 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <HAL_TIM_PWM_MspInit+0x124>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 80035f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035fc:	4a08      	ldr	r2, [pc, #32]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_TIM_PWM_MspInit+0x114>)
 8003608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
}
 8003614:	bf00      	nop
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010000 	.word	0x40010000
 8003620:	58024400 	.word	0x58024400
 8003624:	58020000 	.word	0x58020000
 8003628:	20000810 	.word	0x20000810
 800362c:	40020010 	.word	0x40020010
 8003630:	40014000 	.word	0x40014000

08003634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b090      	sub	sp, #64	; 0x40
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <HAL_TIM_Base_MspInit+0x1bc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d12e      	bne.n	80036b4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365c:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003674:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367a:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003684:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8003692:	2320      	movs	r3, #32
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036a2:	2302      	movs	r3, #2
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 80036a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036aa:	4619      	mov	r1, r3
 80036ac:	4852      	ldr	r0, [pc, #328]	; (80037f8 <HAL_TIM_Base_MspInit+0x1c4>)
 80036ae:	f005 fa7f 	bl	8008bb0 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80036b2:	e099      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM6)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_TIM_Base_MspInit+0x1c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036be:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c4:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036c6:	f043 0310 	orr.w	r3, r3, #16
 80036ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	623b      	str	r3, [r7, #32]
 80036da:	6a3b      	ldr	r3, [r7, #32]
}
 80036dc:	e084      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM13)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a47      	ldr	r2, [pc, #284]	; (8003800 <HAL_TIM_Base_MspInit+0x1cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10f      	bne.n	8003708 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ee:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036f8:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80036fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
}
 8003706:	e06f      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM14)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3d      	ldr	r2, [pc, #244]	; (8003804 <HAL_TIM_Base_MspInit+0x1d0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10f      	bne.n	8003732 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003718:	4a36      	ldr	r2, [pc, #216]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	69bb      	ldr	r3, [r7, #24]
}
 8003730:	e05a      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM16)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_TIM_Base_MspInit+0x1d4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10f      	bne.n	800375c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800374e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
}
 800375a:	e045      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM17)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_TIM_Base_MspInit+0x1d8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10f      	bne.n	8003786 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 800376e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003772:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800377c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]
}
 8003784:	e030      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM23)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <HAL_TIM_Base_MspInit+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d117      	bne.n	80037c0 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003792:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 8003798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80037a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	20a1      	movs	r0, #161	; 0xa1
 80037b4:	f002 fda7 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80037b8:	20a1      	movs	r0, #161	; 0xa1
 80037ba:	f002 fdbe 	bl	800633a <HAL_NVIC_EnableIRQ>
}
 80037be:	e013      	b.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM24)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_TIM_Base_MspInit+0x1e0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80037cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037d0:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80037d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_TIM_Base_MspInit+0x1c0>)
 80037dc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	68bb      	ldr	r3, [r7, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3740      	adds	r7, #64	; 0x40
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40000400 	.word	0x40000400
 80037f4:	58024400 	.word	0x58024400
 80037f8:	58020400 	.word	0x58020400
 80037fc:	40001000 	.word	0x40001000
 8003800:	40001c00 	.word	0x40001c00
 8003804:	40002000 	.word	0x40002000
 8003808:	40014400 	.word	0x40014400
 800380c:	40014800 	.word	0x40014800
 8003810:	4000e000 	.word	0x4000e000
 8003814:	4000e400 	.word	0x4000e400

08003818 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	; 0x38
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a4e      	ldr	r2, [pc, #312]	; (8003970 <HAL_TIM_Encoder_MspInit+0x158>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d12f      	bne.n	800389a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800383a:	4b4e      	ldr	r3, [pc, #312]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800383c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003840:	4a4c      	ldr	r2, [pc, #304]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003858:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	4a45      	ldr	r2, [pc, #276]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003868:	4b42      	ldr	r3, [pc, #264]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8003876:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387c:	2302      	movs	r3, #2
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003888:	2302      	movs	r3, #2
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800388c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003890:	4619      	mov	r1, r3
 8003892:	4839      	ldr	r0, [pc, #228]	; (8003978 <HAL_TIM_Encoder_MspInit+0x160>)
 8003894:	f005 f98c 	bl	8008bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003898:	e066      	b.n	8003968 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM5)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a37      	ldr	r2, [pc, #220]	; (800397c <HAL_TIM_Encoder_MspInit+0x164>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d12e      	bne.n	8003902 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038a4:	4b33      	ldr	r3, [pc, #204]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038aa:	4a32      	ldr	r2, [pc, #200]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d2:	4b28      	ldr	r3, [pc, #160]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 80038d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80038e0:	2303      	movs	r3, #3
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ec:	2300      	movs	r3, #0
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038f0:	2302      	movs	r3, #2
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f8:	4619      	mov	r1, r3
 80038fa:	4821      	ldr	r0, [pc, #132]	; (8003980 <HAL_TIM_Encoder_MspInit+0x168>)
 80038fc:	f005 f958 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003900:	e032      	b.n	8003968 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d12d      	bne.n	8003968 <HAL_TIM_Encoder_MspInit+0x150>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800390e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800392c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003930:	4a10      	ldr	r2, [pc, #64]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_TIM_Encoder_MspInit+0x15c>)
 800393c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8003948:	23c0      	movs	r3, #192	; 0xc0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	2300      	movs	r3, #0
 8003956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003958:	2303      	movs	r3, #3
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003960:	4619      	mov	r1, r3
 8003962:	4809      	ldr	r0, [pc, #36]	; (8003988 <HAL_TIM_Encoder_MspInit+0x170>)
 8003964:	f005 f924 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003968:	bf00      	nop
 800396a:	3738      	adds	r7, #56	; 0x38
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40000800 	.word	0x40000800
 8003974:	58024400 	.word	0x58024400
 8003978:	58020c00 	.word	0x58020c00
 800397c:	40000c00 	.word	0x40000c00
 8003980:	58020000 	.word	0x58020000
 8003984:	40010400 	.word	0x40010400
 8003988:	58020800 	.word	0x58020800

0800398c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08e      	sub	sp, #56	; 0x38
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a83      	ldr	r2, [pc, #524]	; (8003bb8 <HAL_TIM_MspPostInit+0x22c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d120      	bne.n	80039f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	4b83      	ldr	r3, [pc, #524]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b4:	4a81      	ldr	r2, [pc, #516]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 80039c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 80039cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039de:	2301      	movs	r3, #1
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 80039e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e6:	4619      	mov	r1, r3
 80039e8:	4875      	ldr	r0, [pc, #468]	; (8003bc0 <HAL_TIM_MspPostInit+0x234>)
 80039ea:	f005 f8e1 	bl	8008bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80039ee:	e0de      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a73      	ldr	r2, [pc, #460]	; (8003bc4 <HAL_TIM_MspPostInit+0x238>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d11f      	bne.n	8003a3a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fa:	4b70      	ldr	r3, [pc, #448]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a00:	4a6e      	ldr	r2, [pc, #440]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a0a:	4b6c      	ldr	r3, [pc, #432]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8003a18:	2310      	movs	r3, #16
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a30:	4619      	mov	r1, r3
 8003a32:	4865      	ldr	r0, [pc, #404]	; (8003bc8 <HAL_TIM_MspPostInit+0x23c>)
 8003a34:	f005 f8bc 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003a38:	e0b9      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM13)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a63      	ldr	r2, [pc, #396]	; (8003bcc <HAL_TIM_MspPostInit+0x240>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d11f      	bne.n	8003a84 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4a:	4a5c      	ldr	r2, [pc, #368]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003a72:	2309      	movs	r3, #9
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4850      	ldr	r0, [pc, #320]	; (8003bc0 <HAL_TIM_MspPostInit+0x234>)
 8003a7e:	f005 f897 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003a82:	e094      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM14)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a51      	ldr	r2, [pc, #324]	; (8003bd0 <HAL_TIM_MspPostInit+0x244>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d11f      	bne.n	8003ace <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a94:	4a49      	ldr	r2, [pc, #292]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003abc:	2309      	movs	r3, #9
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	483e      	ldr	r0, [pc, #248]	; (8003bc0 <HAL_TIM_MspPostInit+0x234>)
 8003ac8:	f005 f872 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003acc:	e06f      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM15)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <HAL_TIM_MspPostInit+0x248>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d11f      	bne.n	8003b18 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ad8:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ade:	4a37      	ldr	r2, [pc, #220]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003ae0:	f043 0310 	orr.w	r3, r3, #16
 8003ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ae8:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003af6:	2320      	movs	r3, #32
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003b06:	2304      	movs	r3, #4
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4831      	ldr	r0, [pc, #196]	; (8003bd8 <HAL_TIM_MspPostInit+0x24c>)
 8003b12:	f005 f84d 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003b16:	e04a      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM16)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <HAL_TIM_MspPostInit+0x250>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d120      	bne.n	8003b64 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b2a:	f043 0302 	orr.w	r3, r3, #2
 8003b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8003b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003b52:	2301      	movs	r3, #1
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8003b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	481a      	ldr	r0, [pc, #104]	; (8003bc8 <HAL_TIM_MspPostInit+0x23c>)
 8003b5e:	f005 f827 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003b62:	e024      	b.n	8003bae <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM17)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_TIM_MspPostInit+0x254>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d11f      	bne.n	8003bae <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <HAL_TIM_MspPostInit+0x230>)
 8003b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8003b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <HAL_TIM_MspPostInit+0x23c>)
 8003baa:	f005 f801 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003bae:	bf00      	nop
 8003bb0:	3738      	adds	r7, #56	; 0x38
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58020000 	.word	0x58020000
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	58020400 	.word	0x58020400
 8003bcc:	40001c00 	.word	0x40001c00
 8003bd0:	40002000 	.word	0x40002000
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	58021000 	.word	0x58021000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <MX_UART5_Init+0x98>)
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <MX_UART5_Init+0x9c>)
 8003bec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <MX_UART5_Init+0x98>)
 8003bf0:	4a24      	ldr	r2, [pc, #144]	; (8003c84 <MX_UART5_Init+0xa0>)
 8003bf2:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <MX_UART5_Init+0x98>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <MX_UART5_Init+0x98>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c08:	220c      	movs	r2, #12
 8003c0a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c26:	2208      	movs	r2, #8
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c34:	f00b f856 	bl	800ece4 <HAL_UART_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8003c3e:	f7fe fd03 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c42:	2100      	movs	r1, #0
 8003c44:	480d      	ldr	r0, [pc, #52]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c46:	f00d fd94 	bl	8011772 <HAL_UARTEx_SetTxFifoThreshold>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8003c50:	f7fe fcfa 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c54:	2100      	movs	r1, #0
 8003c56:	4809      	ldr	r0, [pc, #36]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c58:	f00d fdc9 	bl	80117ee <HAL_UARTEx_SetRxFifoThreshold>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8003c62:	f7fe fcf1 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003c66:	4805      	ldr	r0, [pc, #20]	; (8003c7c <MX_UART5_Init+0x98>)
 8003c68:	f00d fd4a 	bl	8011700 <HAL_UARTEx_DisableFifoMode>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8003c72:	f7fe fce9 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000ca8 	.word	0x20000ca8
 8003c80:	40005000 	.word	0x40005000
 8003c84:	000f4240 	.word	0x000f4240

08003c88 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003c8e:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <MX_USART1_UART_Init+0x94>)
 8003c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <MX_USART1_UART_Init+0x98>)
 8003c96:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cac:	220c      	movs	r2, #12
 8003cae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cce:	4812      	ldr	r0, [pc, #72]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cd0:	f00b f808 	bl	800ece4 <HAL_UART_Init>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003cda:	f7fe fcb5 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cde:	2100      	movs	r1, #0
 8003ce0:	480d      	ldr	r0, [pc, #52]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003ce2:	f00d fd46 	bl	8011772 <HAL_UARTEx_SetTxFifoThreshold>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003cec:	f7fe fcac 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4809      	ldr	r0, [pc, #36]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003cf4:	f00d fd7b 	bl	80117ee <HAL_UARTEx_SetRxFifoThreshold>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003cfe:	f7fe fca3 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <MX_USART1_UART_Init+0x90>)
 8003d04:	f00d fcfc 	bl	8011700 <HAL_UARTEx_DisableFifoMode>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003d0e:	f7fe fc9b 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000d38 	.word	0x20000d38
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	001e8480 	.word	0x001e8480

08003d24 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d2a:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <MX_USART3_UART_Init+0x94>)
 8003d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d6c:	4811      	ldr	r0, [pc, #68]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d6e:	f00a ffb9 	bl	800ece4 <HAL_UART_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003d78:	f7fe fc66 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	480d      	ldr	r0, [pc, #52]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d80:	f00d fcf7 	bl	8011772 <HAL_UARTEx_SetTxFifoThreshold>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003d8a:	f7fe fc5d 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4808      	ldr	r0, [pc, #32]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003d92:	f00d fd2c 	bl	80117ee <HAL_UARTEx_SetRxFifoThreshold>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003d9c:	f7fe fc54 	bl	8002648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003da0:	4804      	ldr	r0, [pc, #16]	; (8003db4 <MX_USART3_UART_Init+0x90>)
 8003da2:	f00d fcad 	bl	8011700 <HAL_UARTEx_DisableFifoMode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003dac:	f7fe fc4c 	bl	8002648 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000c18 	.word	0x20000c18
 8003db8:	40004800 	.word	0x40004800

08003dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	; 0x38
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_UART_MspInit+0x17c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d137      	bne.n	8003e4e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003de4:	4a55      	ldr	r2, [pc, #340]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dee:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df8:	623b      	str	r3, [r7, #32]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfc:	4b4f      	ldr	r3, [pc, #316]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e02:	4a4e      	ldr	r2, [pc, #312]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003e1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e20:	2302      	movs	r3, #2
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003e2c:	230e      	movs	r3, #14
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e34:	4619      	mov	r1, r3
 8003e36:	4842      	ldr	r0, [pc, #264]	; (8003f40 <HAL_UART_MspInit+0x184>)
 8003e38:	f004 feba 	bl	8008bb0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2035      	movs	r0, #53	; 0x35
 8003e42:	f002 fa60 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003e46:	2035      	movs	r0, #53	; 0x35
 8003e48:	f002 fa77 	bl	800633a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003e4c:	e070      	b.n	8003f30 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_UART_MspInit+0x188>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d12f      	bne.n	8003eb8 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e5e:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e60:	f043 0310 	orr.w	r3, r3, #16
 8003e64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003e94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4823      	ldr	r0, [pc, #140]	; (8003f40 <HAL_UART_MspInit+0x184>)
 8003eb2:	f004 fe7d 	bl	8008bb0 <HAL_GPIO_Init>
}
 8003eb6:	e03b      	b.n	8003f30 <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART3)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_UART_MspInit+0x18c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d136      	bne.n	8003f30 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003ee8:	f043 0308 	orr.w	r3, r3, #8
 8003eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_UART_MspInit+0x180>)
 8003ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f10:	2307      	movs	r3, #7
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f18:	4619      	mov	r1, r3
 8003f1a:	480c      	ldr	r0, [pc, #48]	; (8003f4c <HAL_UART_MspInit+0x190>)
 8003f1c:	f004 fe48 	bl	8008bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f20:	2200      	movs	r2, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	2027      	movs	r0, #39	; 0x27
 8003f26:	f002 f9ee 	bl	8006306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f2a:	2027      	movs	r0, #39	; 0x27
 8003f2c:	f002 fa05 	bl	800633a <HAL_NVIC_EnableIRQ>
}
 8003f30:	bf00      	nop
 8003f32:	3738      	adds	r7, #56	; 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40005000 	.word	0x40005000
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58020400 	.word	0x58020400
 8003f44:	40011000 	.word	0x40011000
 8003f48:	40004800 	.word	0x40004800
 8003f4c:	58020c00 	.word	0x58020c00

08003f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f54:	f7fe fd58 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f5a:	490d      	ldr	r1, [pc, #52]	; (8003f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f60:	e002      	b.n	8003f68 <LoopCopyDataInit>

08003f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f66:	3304      	adds	r3, #4

08003f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f6c:	d3f9      	bcc.n	8003f62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f70:	4c0a      	ldr	r4, [pc, #40]	; (8003f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f74:	e001      	b.n	8003f7a <LoopFillZerobss>

08003f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f78:	3204      	adds	r2, #4

08003f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f7c:	d3fb      	bcc.n	8003f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7e:	f00d fcc3 	bl	8011908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f82:	f7fd fc85 	bl	8001890 <main>
  bx  lr
 8003f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003f94:	080119d8 	.word	0x080119d8
  ldr r2, =_sbss
 8003f98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003f9c:	20000dcc 	.word	0x20000dcc

08003fa0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fa0:	e7fe      	b.n	8003fa0 <ADC_IRQHandler>
	...

08003fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f002 f9a0 	bl	80062f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fb0:	f005 fe9e 	bl	8009cf0 <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_Init+0x68>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	4913      	ldr	r1, [pc, #76]	; (8004010 <HAL_Init+0x6c>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_Init+0x68>)
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_Init+0x6c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <HAL_Init+0x70>)
 8003fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_Init+0x74>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f000 f814 	bl	800401c <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e002      	b.n	8004004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ffe:	f7fe fc8d 	bl	800291c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	58024400 	.word	0x58024400
 8004010:	08011988 	.word	0x08011988
 8004014:	20000004 	.word	0x20000004
 8004018:	20000000 	.word	0x20000000

0800401c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_InitTick+0x60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e021      	b.n	8004074 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_InitTick+0x64>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_InitTick+0x60>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f002 f985 	bl	8006356 <HAL_SYSTICK_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e00e      	b.n	8004074 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b0f      	cmp	r3, #15
 800405a:	d80a      	bhi.n	8004072 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800405c:	2200      	movs	r2, #0
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	f002 f94f 	bl	8006306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_InitTick+0x68>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000000c 	.word	0x2000000c
 8004080:	20000000 	.word	0x20000000
 8004084:	20000008 	.word	0x20000008

08004088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x20>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x24>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4413      	add	r3, r2
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_IncTick+0x24>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	20000dc8 	.word	0x20000dc8

080040b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return uwTick;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_GetTick+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000dc8 	.word	0x20000dc8

080040c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3360      	adds	r3, #96	; 0x60
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <LL_ADC_SetOffset+0x60>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d10b      	bne.n	800416c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800416a:	e00b      	b.n	8004184 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	430b      	orrs	r3, r1
 800417e:	431a      	orrs	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	371c      	adds	r7, #28
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	58026000 	.word	0x58026000

08004194 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3360      	adds	r3, #96	; 0x60
 80041a2:	461a      	mov	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	fa01 f303 	lsl.w	r3, r1, r3
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	611a      	str	r2, [r3, #16]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3360      	adds	r3, #96	; 0x60
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	431a      	orrs	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	601a      	str	r2, [r3, #0]
  }
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	58026000 	.word	0x58026000

08004238 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <LL_ADC_SetOffsetSaturation+0x40>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10e      	bne.n	800426a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3360      	adds	r3, #96	; 0x60
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58026000 	.word	0x58026000

0800427c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4a0c      	ldr	r2, [pc, #48]	; (80042bc <LL_ADC_SetOffsetSign+0x40>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10e      	bne.n	80042ae <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3360      	adds	r3, #96	; 0x60
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	58026000 	.word	0x58026000

080042c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3360      	adds	r3, #96	; 0x60
 80042d0:	461a      	mov	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <LL_ADC_SetOffsetState+0x50>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d108      	bne.n	80042f4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80042f2:	e007      	b.n	8004304 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	601a      	str	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	58026000 	.word	0x58026000

08004314 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3330      	adds	r3, #48	; 0x30
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	4413      	add	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	211f      	movs	r1, #31
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	401a      	ands	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	f003 011f 	and.w	r1, r3, #31
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3314      	adds	r3, #20
 80043c8:	461a      	mov	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0e5b      	lsrs	r3, r3, #25
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	0d1b      	lsrs	r3, r3, #20
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2107      	movs	r1, #7
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	401a      	ands	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	431a      	orrs	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d115      	bne.n	8004450 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0318 	and.w	r3, r3, #24
 800443a:	4914      	ldr	r1, [pc, #80]	; (800448c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800443c:	40d9      	lsrs	r1, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	400b      	ands	r3, r1
 8004442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800444e:	e014      	b.n	800447a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800445c:	43db      	mvns	r3, r3
 800445e:	401a      	ands	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f003 0318 	and.w	r3, r3, #24
 8004466:	4909      	ldr	r1, [pc, #36]	; (800448c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004468:	40d9      	lsrs	r1, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	400b      	ands	r3, r1
 800446e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	58026000 	.word	0x58026000
 800448c:	000fffff 	.word	0x000fffff

08004490 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 031f 	and.w	r3, r3, #31
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6093      	str	r3, [r2, #8]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	5fffffc0 	.word	0x5fffffc0

080044ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004500:	d101      	bne.n	8004506 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <LL_ADC_EnableInternalRegulator+0x24>)
 8004522:	4013      	ands	r3, r2
 8004524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	6fffffc0 	.word	0x6fffffc0

0800453c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004550:	d101      	bne.n	8004556 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <LL_ADC_Enable+0x24>)
 8004572:	4013      	ands	r3, r2
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	7fffffc0 	.word	0x7fffffc0

0800458c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <LL_ADC_Disable+0x24>)
 800459a:	4013      	ands	r3, r2
 800459c:	f043 0202 	orr.w	r2, r3, #2
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	7fffffc0 	.word	0x7fffffc0

080045b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <LL_ADC_IsEnabled+0x18>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <LL_ADC_IsEnabled+0x1a>
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d101      	bne.n	80045f2 <LL_ADC_IsDisableOngoing+0x18>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <LL_ADC_IsDisableOngoing+0x1a>
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <LL_ADC_REG_StartConversion+0x24>)
 800460e:	4013      	ands	r3, r2
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	7fffffc0 	.word	0x7fffffc0

08004628 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d101      	bne.n	8004640 <LL_ADC_REG_IsConversionOngoing+0x18>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b08      	cmp	r3, #8
 8004660:	d101      	bne.n	8004666 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004680:	2300      	movs	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e1ee      	b.n	8004a6c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc f92f 	bl	8000900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff19 	bl	80044ec <LL_ADC_IsDeepPowerDownEnabled>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff feff 	bl	80044c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff34 	bl	800453c <LL_ADC_IsInternalRegulatorEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d114      	bne.n	8004704 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff ff18 	bl	8004514 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046e4:	4b8e      	ldr	r3, [pc, #568]	; (8004920 <HAL_ADC_Init+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	4a8e      	ldr	r2, [pc, #568]	; (8004924 <HAL_ADC_Init+0x2b0>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	099b      	lsrs	r3, r3, #6
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046f6:	e002      	b.n	80046fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f9      	bne.n	80046f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff17 	bl	800453c <LL_ADC_IsInternalRegulatorEnabled>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff77 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 800473a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 8188 	bne.w	8004a5a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8184 	bne.w	8004a5a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004756:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff24 	bl	80045b4 <LL_ADC_IsEnabled>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d136      	bne.n	80047e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6c      	ldr	r2, [pc, #432]	; (8004928 <HAL_ADC_Init+0x2b4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_ADC_Init+0x112>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a6a      	ldr	r2, [pc, #424]	; (800492c <HAL_ADC_Init+0x2b8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d10e      	bne.n	80047a4 <HAL_ADC_Init+0x130>
 8004786:	4868      	ldr	r0, [pc, #416]	; (8004928 <HAL_ADC_Init+0x2b4>)
 8004788:	f7ff ff14 	bl	80045b4 <LL_ADC_IsEnabled>
 800478c:	4604      	mov	r4, r0
 800478e:	4867      	ldr	r0, [pc, #412]	; (800492c <HAL_ADC_Init+0x2b8>)
 8004790:	f7ff ff10 	bl	80045b4 <LL_ADC_IsEnabled>
 8004794:	4603      	mov	r3, r0
 8004796:	4323      	orrs	r3, r4
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_ADC_Init+0x142>
 80047a4:	4862      	ldr	r0, [pc, #392]	; (8004930 <HAL_ADC_Init+0x2bc>)
 80047a6:	f7ff ff05 	bl	80045b4 <LL_ADC_IsEnabled>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d012      	beq.n	80047e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5a      	ldr	r2, [pc, #360]	; (8004928 <HAL_ADC_Init+0x2b4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_ADC_Init+0x15a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_ADC_Init+0x2b8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_Init+0x15e>
 80047ce:	4a59      	ldr	r2, [pc, #356]	; (8004934 <HAL_ADC_Init+0x2c0>)
 80047d0:	e000      	b.n	80047d4 <HAL_ADC_Init+0x160>
 80047d2:	4a59      	ldr	r2, [pc, #356]	; (8004938 <HAL_ADC_Init+0x2c4>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f7ff fc74 	bl	80040c8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_ADC_Init+0x2bc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d129      	bne.n	800483e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7e5b      	ldrb	r3, [r3, #25]
 80047ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80047f4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80047fa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d013      	beq.n	800482c <HAL_ADC_Init+0x1b8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d00d      	beq.n	8004828 <HAL_ADC_Init+0x1b4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b1c      	cmp	r3, #28
 8004812:	d007      	beq.n	8004824 <HAL_ADC_Init+0x1b0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b18      	cmp	r3, #24
 800481a:	d101      	bne.n	8004820 <HAL_ADC_Init+0x1ac>
 800481c:	2318      	movs	r3, #24
 800481e:	e006      	b.n	800482e <HAL_ADC_Init+0x1ba>
 8004820:	2300      	movs	r3, #0
 8004822:	e004      	b.n	800482e <HAL_ADC_Init+0x1ba>
 8004824:	2310      	movs	r3, #16
 8004826:	e002      	b.n	800482e <HAL_ADC_Init+0x1ba>
 8004828:	2308      	movs	r3, #8
 800482a:	e000      	b.n	800482e <HAL_ADC_Init+0x1ba>
 800482c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800482e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004836:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e00e      	b.n	800485c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7e5b      	ldrb	r3, [r3, #25]
 8004842:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004848:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800484e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004856:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d106      	bne.n	8004874 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	3b01      	subs	r3, #1
 800486c:	045b      	lsls	r3, r3, #17
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <HAL_ADC_Init+0x2bc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d115      	bne.n	80048c6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_ADC_Init+0x2c8>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	69b9      	ldr	r1, [r7, #24]
 80048aa:	430b      	orrs	r3, r1
 80048ac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	611a      	str	r2, [r3, #16]
 80048c4:	e009      	b.n	80048da <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <HAL_ADC_Init+0x2cc>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	69b9      	ldr	r1, [r7, #24]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fea2 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 80048e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff feaf 	bl	800464e <LL_ADC_INJ_IsConversionOngoing>
 80048f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 808e 	bne.w	8004a16 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 808a 	bne.w	8004a16 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_ADC_Init+0x2bc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d11b      	bne.n	8004944 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7e1b      	ldrb	r3, [r3, #24]
 8004910:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004918:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e018      	b.n	8004952 <HAL_ADC_Init+0x2de>
 8004920:	20000000 	.word	0x20000000
 8004924:	053e2d63 	.word	0x053e2d63
 8004928:	40022000 	.word	0x40022000
 800492c:	40022100 	.word	0x40022100
 8004930:	58026000 	.word	0x58026000
 8004934:	40022300 	.word	0x40022300
 8004938:	58026300 	.word	0x58026300
 800493c:	fff04007 	.word	0xfff04007
 8004940:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7e1b      	ldrb	r3, [r3, #24]
 8004948:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	4b46      	ldr	r3, [pc, #280]	; (8004a74 <HAL_ADC_Init+0x400>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	69b9      	ldr	r1, [r7, #24]
 8004962:	430b      	orrs	r3, r1
 8004964:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800496c:	2b01      	cmp	r3, #1
 800496e:	d137      	bne.n	80049e0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <HAL_ADC_Init+0x404>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d116      	bne.n	80049ae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	4b3d      	ldr	r3, [pc, #244]	; (8004a7c <HAL_ADC_Init+0x408>)
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004992:	4311      	orrs	r1, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004998:	4311      	orrs	r1, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800499e:	430a      	orrs	r2, r1
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	611a      	str	r2, [r3, #16]
 80049ac:	e020      	b.n	80049f0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <HAL_ADC_Init+0x40c>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049bc:	3a01      	subs	r2, #1
 80049be:	0411      	lsls	r1, r2, #16
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ca:	4311      	orrs	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049d0:	430a      	orrs	r2, r1
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	611a      	str	r2, [r3, #16]
 80049de:	e007      	b.n	80049f0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_ADC_Init+0x404>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d002      	beq.n	8004a16 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 f9e9 	bl	8005de8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10c      	bne.n	8004a38 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f023 010f 	bic.w	r1, r3, #15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
 8004a36:	e007      	b.n	8004a48 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020f 	bic.w	r2, r2, #15
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4c:	f023 0303 	bic.w	r3, r3, #3
 8004a50:	f043 0201 	orr.w	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60
 8004a58:	e007      	b.n	8004a6a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5e:	f043 0210 	orr.w	r2, r3, #16
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3724      	adds	r7, #36	; 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}
 8004a74:	ffffbffc 	.word	0xffffbffc
 8004a78:	58026000 	.word	0x58026000
 8004a7c:	fc00f81f 	.word	0xfc00f81f
 8004a80:	fc00f81e 	.word	0xfc00f81e

08004a84 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a97      	ldr	r2, [pc, #604]	; (8004cf0 <HAL_ADC_Start_IT+0x26c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_ADC_Start_IT+0x1c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a96      	ldr	r2, [pc, #600]	; (8004cf4 <HAL_ADC_Start_IT+0x270>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_Start_IT+0x20>
 8004aa0:	4b95      	ldr	r3, [pc, #596]	; (8004cf8 <HAL_ADC_Start_IT+0x274>)
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADC_Start_IT+0x22>
 8004aa4:	4b95      	ldr	r3, [pc, #596]	; (8004cfc <HAL_ADC_Start_IT+0x278>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fcf2 	bl	8004490 <LL_ADC_GetMultimode>
 8004aac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fdb8 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 810f 	bne.w	8004cde <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_ADC_Start_IT+0x4a>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e10c      	b.n	8004ce8 <HAL_ADC_Start_IT+0x264>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 f89c 	bl	8005c14 <ADC_Enable>
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 80f6 	bne.w	8004cd4 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004aec:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <HAL_ADC_Start_IT+0x27c>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a7d      	ldr	r2, [pc, #500]	; (8004cf4 <HAL_ADC_Start_IT+0x270>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d002      	beq.n	8004b08 <HAL_ADC_Start_IT+0x84>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_ADC_Start_IT+0x86>
 8004b08:	4b79      	ldr	r3, [pc, #484]	; (8004cf0 <HAL_ADC_Start_IT+0x26c>)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d002      	beq.n	8004b18 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d006      	beq.n	8004b3e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b34:	f023 0206 	bic.w	r2, r3, #6
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	665a      	str	r2, [r3, #100]	; 0x64
 8004b3c:	e002      	b.n	8004b44 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	221c      	movs	r2, #28
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 021c 	bic.w	r2, r2, #28
 8004b62:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d108      	bne.n	8004b7e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0208 	orr.w	r2, r2, #8
 8004b7a:	605a      	str	r2, [r3, #4]
          break;
 8004b7c:	e008      	b.n	8004b90 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0204 	orr.w	r2, r2, #4
 8004b8c:	605a      	str	r2, [r3, #4]
          break;
 8004b8e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0210 	orr.w	r2, r2, #16
 8004ba6:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a51      	ldr	r2, [pc, #324]	; (8004cf4 <HAL_ADC_Start_IT+0x270>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d002      	beq.n	8004bb8 <HAL_ADC_Start_IT+0x134>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	e000      	b.n	8004bba <HAL_ADC_Start_IT+0x136>
 8004bb8:	4b4d      	ldr	r3, [pc, #308]	; (8004cf0 <HAL_ADC_Start_IT+0x26c>)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d008      	beq.n	8004bd4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	d002      	beq.n	8004bd4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b09      	cmp	r3, #9
 8004bd2:	d13b      	bne.n	8004c4c <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d02d      	beq.n	8004c3e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d110      	bne.n	8004c1c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0220 	bic.w	r2, r2, #32
 8004c08:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c18:	605a      	str	r2, [r3, #4]
              break;
 8004c1a:	e011      	b.n	8004c40 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0220 	orr.w	r2, r2, #32
 8004c3a:	605a      	str	r2, [r3, #4]
              break;
 8004c3c:	e000      	b.n	8004c40 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8004c3e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fcdb 	bl	8004600 <LL_ADC_REG_StartConversion>
 8004c4a:	e04c      	b.n	8004ce6 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_ADC_Start_IT+0x270>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d002      	beq.n	8004c68 <HAL_ADC_Start_IT+0x1e4>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e000      	b.n	8004c6a <HAL_ADC_Start_IT+0x1e6>
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <HAL_ADC_Start_IT+0x26c>)
 8004c6a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d035      	beq.n	8004ce4 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d110      	bne.n	8004cb2 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0220 	bic.w	r2, r2, #32
 8004c9e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cae:	605a      	str	r2, [r3, #4]
              break;
 8004cb0:	e019      	b.n	8004ce6 <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0220 	orr.w	r2, r2, #32
 8004cd0:	605a      	str	r2, [r3, #4]
              break;
 8004cd2:	e008      	b.n	8004ce6 <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004cdc:	e003      	b.n	8004ce6 <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	75fb      	strb	r3, [r7, #23]
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADC_Start_IT+0x262>
        }
 8004ce4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40022100 	.word	0x40022100
 8004cf8:	40022300 	.word	0x40022300
 8004cfc:	58026300 	.word	0x58026300
 8004d00:	fffff0fe 	.word	0xfffff0fe

08004d04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a87      	ldr	r2, [pc, #540]	; (8004f60 <HAL_ADC_IRQHandler+0x240>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_ADC_IRQHandler+0x30>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a86      	ldr	r2, [pc, #536]	; (8004f64 <HAL_ADC_IRQHandler+0x244>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_IRQHandler+0x34>
 8004d50:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <HAL_ADC_IRQHandler+0x248>)
 8004d52:	e000      	b.n	8004d56 <HAL_ADC_IRQHandler+0x36>
 8004d54:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_ADC_IRQHandler+0x24c>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fb9a 	bl	8004490 <LL_ADC_GetMultimode>
 8004d5c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_ADC_IRQHandler+0x78>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d012      	beq.n	8004d98 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d105      	bne.n	8004d8a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 f9d6 	bl	800613c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2202      	movs	r2, #2
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <HAL_ADC_IRQHandler+0x8c>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8083 	beq.w	8004ebe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d07d      	beq.n	8004ebe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fa98 	bl	8004314 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d062      	beq.n	8004eb0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5d      	ldr	r2, [pc, #372]	; (8004f64 <HAL_ADC_IRQHandler+0x244>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d002      	beq.n	8004dfa <HAL_ADC_IRQHandler+0xda>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	e000      	b.n	8004dfc <HAL_ADC_IRQHandler+0xdc>
 8004dfa:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_ADC_IRQHandler+0x240>)
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d008      	beq.n	8004e16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d002      	beq.n	8004e16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b09      	cmp	r3, #9
 8004e14:	d104      	bne.n	8004e20 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	e00c      	b.n	8004e3a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a4f      	ldr	r2, [pc, #316]	; (8004f64 <HAL_ADC_IRQHandler+0x244>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d002      	beq.n	8004e30 <HAL_ADC_IRQHandler+0x110>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	e000      	b.n	8004e32 <HAL_ADC_IRQHandler+0x112>
 8004e30:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <HAL_ADC_IRQHandler+0x240>)
 8004e32:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d135      	bne.n	8004eb0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d12e      	bne.n	8004eb0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fbe6 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11a      	bne.n	8004e98 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 020c 	bic.w	r2, r2, #12
 8004e70:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d112      	bne.n	8004eb0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	661a      	str	r2, [r3, #96]	; 0x60
 8004e96:	e00b      	b.n	8004eb0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9c:	f043 0210 	orr.w	r2, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fd f96f 	bl	8002194 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	220c      	movs	r2, #12
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <HAL_ADC_IRQHandler+0x1b2>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10b      	bne.n	8004eea <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a0 	beq.w	800501e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 809a 	beq.w	800501e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fa43 	bl	8004392 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004f0c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f9fe 	bl	8004314 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f18:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_ADC_IRQHandler+0x244>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d002      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x20a>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	e000      	b.n	8004f2c <HAL_ADC_IRQHandler+0x20c>
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_ADC_IRQHandler+0x240>)
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d008      	beq.n	8004f46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d002      	beq.n	8004f46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b07      	cmp	r3, #7
 8004f44:	d104      	bne.n	8004f50 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	e014      	b.n	8004f7a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a03      	ldr	r2, [pc, #12]	; (8004f64 <HAL_ADC_IRQHandler+0x244>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00a      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x250>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	e008      	b.n	8004f72 <HAL_ADC_IRQHandler+0x252>
 8004f60:	40022000 	.word	0x40022000
 8004f64:	40022100 	.word	0x40022100
 8004f68:	40022300 	.word	0x40022300
 8004f6c:	58026300 	.word	0x58026300
 8004f70:	4b84      	ldr	r3, [pc, #528]	; (8005184 <HAL_ADC_IRQHandler+0x464>)
 8004f72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d047      	beq.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_ADC_IRQHandler+0x27a>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d03f      	beq.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d13a      	bne.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d133      	bne.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d12e      	bne.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fb49 	bl	800464e <LL_ADC_INJ_IsConversionOngoing>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d112      	bne.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ff6:	e00b      	b.n	8005010 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffc:	f043 0210 	orr.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 f86b 	bl	80060ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2260      	movs	r2, #96	; 0x60
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d011      	beq.n	800504c <HAL_ADC_IRQHandler+0x32c>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8a8 	bl	8005194 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d012      	beq.n	800507c <HAL_ADC_IRQHandler+0x35c>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00d      	beq.n	800507c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005064:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 f851 	bl	8006114 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <HAL_ADC_IRQHandler+0x38c>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 f843 	bl	8006128 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d043      	beq.n	800513e <HAL_ADC_IRQHandler+0x41e>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03e      	beq.n	800513e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
 80050cc:	e021      	b.n	8005112 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2a      	ldr	r2, [pc, #168]	; (8005184 <HAL_ADC_IRQHandler+0x464>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_ADC_IRQHandler+0x3c8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a29      	ldr	r2, [pc, #164]	; (8005188 <HAL_ADC_IRQHandler+0x468>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_IRQHandler+0x3cc>
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <HAL_ADC_IRQHandler+0x46c>)
 80050ea:	e000      	b.n	80050ee <HAL_ADC_IRQHandler+0x3ce>
 80050ec:	4b28      	ldr	r3, [pc, #160]	; (8005190 <HAL_ADC_IRQHandler+0x470>)
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff f9dc 	bl	80044ac <LL_ADC_GetMultiDMATransfer>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80050fa:	2301      	movs	r3, #1
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	e008      	b.n	8005112 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800510e:	2301      	movs	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10e      	bne.n	8005136 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005128:	f043 0202 	orr.w	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f839 	bl	80051a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <HAL_ADC_IRQHandler+0x45a>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005156:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005162:	f043 0208 	orr.w	r2, r3, #8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005172:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 ffc3 	bl	8006100 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800517a:	bf00      	nop
 800517c:	3728      	adds	r7, #40	; 0x28
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40022000 	.word	0x40022000
 8005188:	40022100 	.word	0x40022100
 800518c:	40022300 	.word	0x40022300
 8005190:	58026300 	.word	0x58026300

08005194 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b0b9      	sub	sp, #228	; 0xe4
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051d6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4ab3      	ldr	r2, [pc, #716]	; (80054ac <HAL_ADC_ConfigChannel+0x2f0>)
 80051de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x34>
 80051ea:	2302      	movs	r3, #2
 80051ec:	f000 bcfa 	b.w	8005be4 <HAL_ADC_ConfigChannel+0xa28>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fa13 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 84de 	bne.w	8005bc6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4aa8      	ldr	r2, [pc, #672]	; (80054b0 <HAL_ADC_ConfigChannel+0x2f4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d033      	beq.n	800527c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x76>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0e9b      	lsrs	r3, r3, #26
 8005226:	f003 031f 	and.w	r3, r3, #31
 800522a:	2201      	movs	r2, #1
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	e01d      	b.n	800526e <HAL_ADC_ConfigChannel+0xb2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800524a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800524e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005256:	2320      	movs	r3, #32
 8005258:	e004      	b.n	8005264 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800525a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2201      	movs	r2, #1
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	69d1      	ldr	r1, [r2, #28]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	430b      	orrs	r3, r1
 800527a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	f7ff f856 	bl	800433a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f9c8 	bl	8004628 <LL_ADC_REG_IsConversionOngoing>
 8005298:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff f9d4 	bl	800464e <LL_ADC_INJ_IsConversionOngoing>
 80052a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8270 	bne.w	8005794 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 826b 	bne.w	8005794 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6819      	ldr	r1, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7ff f874 	bl	80043b8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a76      	ldr	r2, [pc, #472]	; (80054b0 <HAL_ADC_ConfigChannel+0x2f4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10d      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052f4:	e032      	b.n	800535c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80052f6:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_ADC_ConfigChannel+0x2f8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005302:	d10b      	bne.n	800531c <HAL_ADC_ConfigChannel+0x160>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	e01d      	b.n	8005358 <HAL_ADC_ConfigChannel+0x19c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x186>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	e00a      	b.n	8005358 <HAL_ADC_ConfigChannel+0x19c>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	089b      	lsrs	r3, r3, #2
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d048      	beq.n	80053f6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6919      	ldr	r1, [r3, #16]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005374:	f7fe fedc 	bl	8004130 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a4c      	ldr	r2, [pc, #304]	; (80054b0 <HAL_ADC_ConfigChannel+0x2f4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d119      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6919      	ldr	r1, [r3, #16]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fe ff74 	bl	800427c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6919      	ldr	r1, [r3, #16]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x1f0>
 80053a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053aa:	e000      	b.n	80053ae <HAL_ADC_ConfigChannel+0x1f2>
 80053ac:	2300      	movs	r3, #0
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fe ff42 	bl	8004238 <LL_ADC_SetOffsetSaturation>
 80053b4:	e1ee      	b.n	8005794 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6919      	ldr	r1, [r3, #16]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d102      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x212>
 80053c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x214>
 80053ce:	2300      	movs	r3, #0
 80053d0:	461a      	mov	r2, r3
 80053d2:	f7fe ff0f 	bl	80041f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6919      	ldr	r1, [r3, #16]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	7e1b      	ldrb	r3, [r3, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d102      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x230>
 80053e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ea:	e000      	b.n	80053ee <HAL_ADC_ConfigChannel+0x232>
 80053ec:	2300      	movs	r3, #0
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fe fee6 	bl	80041c0 <LL_ADC_SetDataRightShift>
 80053f4:	e1ce      	b.n	8005794 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2d      	ldr	r2, [pc, #180]	; (80054b0 <HAL_ADC_ConfigChannel+0x2f4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	f040 8181 	bne.w	8005704 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe fec3 	bl	8004194 <LL_ADC_GetOffsetChannel>
 800540e:	4603      	mov	r3, r0
 8005410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <HAL_ADC_ConfigChannel+0x272>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe feb8 	bl	8004194 <LL_ADC_GetOffsetChannel>
 8005424:	4603      	mov	r3, r0
 8005426:	0e9b      	lsrs	r3, r3, #26
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	e01e      	b.n	800546c <HAL_ADC_ConfigChannel+0x2b0>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fead 	bl	8004194 <LL_ADC_GetOffsetChannel>
 800543a:	4603      	mov	r3, r0
 800543c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005440:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005444:	fa93 f3a3 	rbit	r3, r3
 8005448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800544c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800545c:	2320      	movs	r3, #32
 800545e:	e004      	b.n	800546a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x2c8>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	0e9b      	lsrs	r3, r3, #26
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	e01e      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x306>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005490:	fa93 f3a3 	rbit	r3, r3
 8005494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800549c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80054a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e00a      	b.n	80054c2 <HAL_ADC_ConfigChannel+0x306>
 80054ac:	47ff0000 	.word	0x47ff0000
 80054b0:	58026000 	.word	0x58026000
 80054b4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80054b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d106      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fef6 	bl	80042c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fe5a 	bl	8004194 <LL_ADC_GetOffsetChannel>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x344>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fe4f 	bl	8004194 <LL_ADC_GetOffsetChannel>
 80054f6:	4603      	mov	r3, r0
 80054f8:	0e9b      	lsrs	r3, r3, #26
 80054fa:	f003 021f 	and.w	r2, r3, #31
 80054fe:	e01e      	b.n	800553e <HAL_ADC_ConfigChannel+0x382>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fe44 	bl	8004194 <LL_ADC_GetOffsetChannel>
 800550c:	4603      	mov	r3, r0
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800551e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800552e:	2320      	movs	r3, #32
 8005530:	e004      	b.n	800553c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x39a>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	0e9b      	lsrs	r3, r3, #26
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	e018      	b.n	8005588 <HAL_ADC_ConfigChannel+0x3cc>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800556a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800556e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800557a:	2320      	movs	r3, #32
 800557c:	e004      	b.n	8005588 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800557e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	429a      	cmp	r2, r3
 800558a:	d106      	bne.n	800559a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fe93 	bl	80042c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2102      	movs	r1, #2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fdf7 	bl	8004194 <LL_ADC_GetOffsetChannel>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <HAL_ADC_ConfigChannel+0x40a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2102      	movs	r1, #2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fdec 	bl	8004194 <LL_ADC_GetOffsetChannel>
 80055bc:	4603      	mov	r3, r0
 80055be:	0e9b      	lsrs	r3, r3, #26
 80055c0:	f003 021f 	and.w	r2, r3, #31
 80055c4:	e01e      	b.n	8005604 <HAL_ADC_ConfigChannel+0x448>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fde1 	bl	8004194 <LL_ADC_GetOffsetChannel>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055dc:	fa93 f3a3 	rbit	r3, r3
 80055e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80055e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80055ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80055f4:	2320      	movs	r3, #32
 80055f6:	e004      	b.n	8005602 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80055f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800560c:	2b00      	cmp	r3, #0
 800560e:	d105      	bne.n	800561c <HAL_ADC_ConfigChannel+0x460>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	0e9b      	lsrs	r3, r3, #26
 8005616:	f003 031f 	and.w	r3, r3, #31
 800561a:	e014      	b.n	8005646 <HAL_ADC_ConfigChannel+0x48a>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005622:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005624:	fa93 f3a3 	rbit	r3, r3
 8005628:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800562a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800562c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005630:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005638:	2320      	movs	r3, #32
 800563a:	e004      	b.n	8005646 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800563c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005640:	fab3 f383 	clz	r3, r3
 8005644:	b2db      	uxtb	r3, r3
 8005646:	429a      	cmp	r2, r3
 8005648:	d106      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fe34 	bl	80042c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2103      	movs	r1, #3
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fd98 	bl	8004194 <LL_ADC_GetOffsetChannel>
 8005664:	4603      	mov	r3, r0
 8005666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_ADC_ConfigChannel+0x4c8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2103      	movs	r1, #3
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fd8d 	bl	8004194 <LL_ADC_GetOffsetChannel>
 800567a:	4603      	mov	r3, r0
 800567c:	0e9b      	lsrs	r3, r3, #26
 800567e:	f003 021f 	and.w	r2, r3, #31
 8005682:	e017      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x4f8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2103      	movs	r1, #3
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fd82 	bl	8004194 <LL_ADC_GetOffsetChannel>
 8005690:	4603      	mov	r3, r0
 8005692:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005696:	fa93 f3a3 	rbit	r3, r3
 800569a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800569c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80056a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80056a6:	2320      	movs	r3, #32
 80056a8:	e003      	b.n	80056b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	fab3 f383 	clz	r3, r3
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x510>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0e9b      	lsrs	r3, r3, #26
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	e011      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x534>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80056da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056dc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80056de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80056e4:	2320      	movs	r3, #32
 80056e6:	e003      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80056e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056ea:	fab3 f383 	clz	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d14f      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2103      	movs	r1, #3
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fddf 	bl	80042c0 <LL_ADC_SetOffsetState>
 8005702:	e047      	b.n	8005794 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	069b      	lsls	r3, r3, #26
 8005714:	429a      	cmp	r2, r3
 8005716:	d107      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005726:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800574a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	069b      	lsls	r3, r3, #26
 800575c:	429a      	cmp	r2, r3
 800575e:	d107      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800576e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	069b      	lsls	r3, r3, #26
 8005780:	429a      	cmp	r2, r3
 8005782:	d107      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe ff0b 	bl	80045b4 <LL_ADC_IsEnabled>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 8219 	bne.w	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6819      	ldr	r1, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fe fe2c 	bl	8004410 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4aa1      	ldr	r2, [pc, #644]	; (8005a44 <HAL_ADC_ConfigChannel+0x888>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f040 812e 	bne.w	8005a20 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10b      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x630>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0e9b      	lsrs	r3, r3, #26
 80057da:	3301      	adds	r3, #1
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	bf94      	ite	ls
 80057e4:	2301      	movls	r3, #1
 80057e6:	2300      	movhi	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e019      	b.n	8005820 <HAL_ADC_ConfigChannel+0x664>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f4:	fa93 f3a3 	rbit	r3, r3
 80057f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80057fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80057fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005804:	2320      	movs	r3, #32
 8005806:	e003      	b.n	8005810 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	3301      	adds	r3, #1
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2b09      	cmp	r3, #9
 8005818:	bf94      	ite	ls
 800581a:	2301      	movls	r3, #1
 800581c:	2300      	movhi	r3, #0
 800581e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005820:	2b00      	cmp	r3, #0
 8005822:	d079      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800582c:	2b00      	cmp	r3, #0
 800582e:	d107      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x684>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0e9b      	lsrs	r3, r3, #26
 8005836:	3301      	adds	r3, #1
 8005838:	069b      	lsls	r3, r3, #26
 800583a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800583e:	e015      	b.n	800586c <HAL_ADC_ConfigChannel+0x6b0>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800585c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	3301      	adds	r3, #1
 8005866:	069b      	lsls	r3, r3, #26
 8005868:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_ADC_ConfigChannel+0x6d0>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	0e9b      	lsrs	r3, r3, #26
 800587e:	3301      	adds	r3, #1
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	e017      	b.n	80058bc <HAL_ADC_ConfigChannel+0x700>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800589a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800589e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80058a4:	2320      	movs	r3, #32
 80058a6:	e003      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80058a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058aa:	fab3 f383 	clz	r3, r3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	3301      	adds	r3, #1
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2101      	movs	r1, #1
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	ea42 0103 	orr.w	r1, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x726>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0e9b      	lsrs	r3, r3, #26
 80058d2:	3301      	adds	r3, #1
 80058d4:	f003 021f 	and.w	r2, r3, #31
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	051b      	lsls	r3, r3, #20
 80058e0:	e018      	b.n	8005914 <HAL_ADC_ConfigChannel+0x758>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	fa93 f3a3 	rbit	r3, r3
 80058ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80058fa:	2320      	movs	r3, #32
 80058fc:	e003      	b.n	8005906 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	fab3 f383 	clz	r3, r3
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3301      	adds	r3, #1
 8005908:	f003 021f 	and.w	r2, r3, #31
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005914:	430b      	orrs	r3, r1
 8005916:	e07e      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x778>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	0e9b      	lsrs	r3, r3, #26
 800592a:	3301      	adds	r3, #1
 800592c:	069b      	lsls	r3, r3, #26
 800592e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005932:	e015      	b.n	8005960 <HAL_ADC_ConfigChannel+0x7a4>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	fa93 f3a3 	rbit	r3, r3
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800594c:	2320      	movs	r3, #32
 800594e:	e003      	b.n	8005958 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	fab3 f383 	clz	r3, r3
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3301      	adds	r3, #1
 800595a:	069b      	lsls	r3, r3, #26
 800595c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x7c4>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0e9b      	lsrs	r3, r3, #26
 8005972:	3301      	adds	r3, #1
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2101      	movs	r1, #1
 800597a:	fa01 f303 	lsl.w	r3, r1, r3
 800597e:	e017      	b.n	80059b0 <HAL_ADC_ConfigChannel+0x7f4>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	61bb      	str	r3, [r7, #24]
  return result;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005998:	2320      	movs	r3, #32
 800599a:	e003      	b.n	80059a4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	ea42 0103 	orr.w	r1, r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <HAL_ADC_ConfigChannel+0x820>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	0e9b      	lsrs	r3, r3, #26
 80059c6:	3301      	adds	r3, #1
 80059c8:	f003 021f 	and.w	r2, r3, #31
 80059cc:	4613      	mov	r3, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	4413      	add	r3, r2
 80059d2:	3b1e      	subs	r3, #30
 80059d4:	051b      	lsls	r3, r3, #20
 80059d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059da:	e01b      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x858>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	fa93 f3a3 	rbit	r3, r3
 80059e8:	60fb      	str	r3, [r7, #12]
  return result;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80059f4:	2320      	movs	r3, #32
 80059f6:	e003      	b.n	8005a00 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	3301      	adds	r3, #1
 8005a02:	f003 021f 	and.w	r2, r3, #31
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3b1e      	subs	r3, #30
 8005a0e:	051b      	lsls	r3, r3, #20
 8005a10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a14:	430b      	orrs	r3, r1
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fe fccc 	bl	80043b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f280 80d7 	bge.w	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a06      	ldr	r2, [pc, #24]	; (8005a48 <HAL_ADC_ConfigChannel+0x88c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_ADC_ConfigChannel+0x882>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <HAL_ADC_ConfigChannel+0x890>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d10a      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x898>
 8005a3e:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_ADC_ConfigChannel+0x894>)
 8005a40:	e009      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x89a>
 8005a42:	bf00      	nop
 8005a44:	47ff0000 	.word	0x47ff0000
 8005a48:	40022000 	.word	0x40022000
 8005a4c:	40022100 	.word	0x40022100
 8005a50:	40022300 	.word	0x40022300
 8005a54:	4b65      	ldr	r3, [pc, #404]	; (8005bec <HAL_ADC_ConfigChannel+0xa30>)
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fe fb5c 	bl	8004114 <LL_ADC_GetCommonPathInternalCh>
 8005a5c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a62      	ldr	r2, [pc, #392]	; (8005bf0 <HAL_ADC_ConfigChannel+0xa34>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_ADC_ConfigChannel+0x8b8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a61      	ldr	r2, [pc, #388]	; (8005bf4 <HAL_ADC_ConfigChannel+0xa38>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d10e      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x8d6>
 8005a74:	485e      	ldr	r0, [pc, #376]	; (8005bf0 <HAL_ADC_ConfigChannel+0xa34>)
 8005a76:	f7fe fd9d 	bl	80045b4 <LL_ADC_IsEnabled>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	485d      	ldr	r0, [pc, #372]	; (8005bf4 <HAL_ADC_ConfigChannel+0xa38>)
 8005a7e:	f7fe fd99 	bl	80045b4 <LL_ADC_IsEnabled>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4323      	orrs	r3, r4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e008      	b.n	8005aa4 <HAL_ADC_ConfigChannel+0x8e8>
 8005a92:	4859      	ldr	r0, [pc, #356]	; (8005bf8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005a94:	f7fe fd8e 	bl	80045b4 <LL_ADC_IsEnabled>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8084 	beq.w	8005bb2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a53      	ldr	r2, [pc, #332]	; (8005bfc <HAL_ADC_ConfigChannel+0xa40>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d132      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x95e>
 8005ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d12c      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a4c      	ldr	r2, [pc, #304]	; (8005bf8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f040 8086 	bne.w	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a47      	ldr	r2, [pc, #284]	; (8005bf0 <HAL_ADC_ConfigChannel+0xa34>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x924>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a46      	ldr	r2, [pc, #280]	; (8005bf4 <HAL_ADC_ConfigChannel+0xa38>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x928>
 8005ae0:	4a47      	ldr	r2, [pc, #284]	; (8005c00 <HAL_ADC_ConfigChannel+0xa44>)
 8005ae2:	e000      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x92a>
 8005ae4:	4a41      	ldr	r2, [pc, #260]	; (8005bec <HAL_ADC_ConfigChannel+0xa30>)
 8005ae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe fafc 	bl	80040ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005af6:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <HAL_ADC_ConfigChannel+0xa48>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	099b      	lsrs	r3, r3, #6
 8005afc:	4a42      	ldr	r2, [pc, #264]	; (8005c08 <HAL_ADC_ConfigChannel+0xa4c>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	3301      	adds	r3, #1
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005b0a:	e002      	b.n	8005b12 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f9      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b18:	e05e      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <HAL_ADC_ConfigChannel+0xa50>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d120      	bne.n	8005b66 <HAL_ADC_ConfigChannel+0x9aa>
 8005b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11a      	bne.n	8005b66 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a30      	ldr	r2, [pc, #192]	; (8005bf8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d14e      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <HAL_ADC_ConfigChannel+0xa34>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_ADC_ConfigChannel+0x992>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2a      	ldr	r2, [pc, #168]	; (8005bf4 <HAL_ADC_ConfigChannel+0xa38>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_ADC_ConfigChannel+0x996>
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <HAL_ADC_ConfigChannel+0xa44>)
 8005b50:	e000      	b.n	8005b54 <HAL_ADC_ConfigChannel+0x998>
 8005b52:	4a26      	ldr	r2, [pc, #152]	; (8005bec <HAL_ADC_ConfigChannel+0xa30>)
 8005b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fe fac5 	bl	80040ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b64:	e038      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a29      	ldr	r2, [pc, #164]	; (8005c10 <HAL_ADC_ConfigChannel+0xa54>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d133      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
 8005b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d12d      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_ADC_ConfigChannel+0xa3c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d128      	bne.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_ADC_ConfigChannel+0xa34>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_ADC_ConfigChannel+0x9de>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_ADC_ConfigChannel+0xa38>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_ADC_ConfigChannel+0x9e2>
 8005b9a:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_ADC_ConfigChannel+0xa44>)
 8005b9c:	e000      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x9e4>
 8005b9e:	4a13      	ldr	r2, [pc, #76]	; (8005bec <HAL_ADC_ConfigChannel+0xa30>)
 8005ba0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f7fe fa9f 	bl	80040ee <LL_ADC_SetCommonPathInternalCh>
 8005bb0:	e012      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005bc4:	e008      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005be0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	37e4      	adds	r7, #228	; 0xe4
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd90      	pop	{r4, r7, pc}
 8005bec:	58026300 	.word	0x58026300
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40022100 	.word	0x40022100
 8005bf8:	58026000 	.word	0x58026000
 8005bfc:	c7520000 	.word	0xc7520000
 8005c00:	40022300 	.word	0x40022300
 8005c04:	20000000 	.word	0x20000000
 8005c08:	053e2d63 	.word	0x053e2d63
 8005c0c:	c3210000 	.word	0xc3210000
 8005c10:	cb840000 	.word	0xcb840000

08005c14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fcc7 	bl	80045b4 <LL_ADC_IsEnabled>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d16e      	bne.n	8005d0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	4b38      	ldr	r3, [pc, #224]	; (8005d14 <ADC_Enable+0x100>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e05a      	b.n	8005d0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fc82 	bl	8004564 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005c60:	f7fe fa26 	bl	80040b0 <HAL_GetTick>
 8005c64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <ADC_Enable+0x104>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <ADC_Enable+0x66>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <ADC_Enable+0x108>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <ADC_Enable+0x6a>
 8005c7a:	4b29      	ldr	r3, [pc, #164]	; (8005d20 <ADC_Enable+0x10c>)
 8005c7c:	e000      	b.n	8005c80 <ADC_Enable+0x6c>
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <ADC_Enable+0x110>)
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe fc05 	bl	8004490 <LL_ADC_GetMultimode>
 8005c86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <ADC_Enable+0x108>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d002      	beq.n	8005c98 <ADC_Enable+0x84>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	e000      	b.n	8005c9a <ADC_Enable+0x86>
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <ADC_Enable+0x104>)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d02c      	beq.n	8005cfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d130      	bne.n	8005d0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ca8:	e028      	b.n	8005cfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fc80 	bl	80045b4 <LL_ADC_IsEnabled>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fc50 	bl	8004564 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005cc4:	f7fe f9f4 	bl	80040b0 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d914      	bls.n	8005cfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d00d      	beq.n	8005cfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	f043 0210 	orr.w	r2, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e007      	b.n	8005d0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d1cf      	bne.n	8005caa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	8000003f 	.word	0x8000003f
 8005d18:	40022000 	.word	0x40022000
 8005d1c:	40022100 	.word	0x40022100
 8005d20:	40022300 	.word	0x40022300
 8005d24:	58026300 	.word	0x58026300

08005d28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fc50 	bl	80045da <LL_ADC_IsDisableOngoing>
 8005d3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe fc37 	bl	80045b4 <LL_ADC_IsEnabled>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d047      	beq.n	8005ddc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d144      	bne.n	8005ddc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 030d 	and.w	r3, r3, #13
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10c      	bne.n	8005d7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe fc11 	bl	800458c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d72:	f7fe f99d 	bl	80040b0 <HAL_GetTick>
 8005d76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005d78:	e029      	b.n	8005dce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7e:	f043 0210 	orr.w	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d8a:	f043 0201 	orr.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e023      	b.n	8005dde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d96:	f7fe f98b 	bl	80040b0 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d914      	bls.n	8005dce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db6:	f043 0210 	orr.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc2:	f043 0201 	orr.w	r2, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e007      	b.n	8005dde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1dc      	bne.n	8005d96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6b      	ldr	r2, [pc, #428]	; (8005fa4 <ADC_ConfigureBoostMode+0x1bc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <ADC_ConfigureBoostMode+0x1c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a6a      	ldr	r2, [pc, #424]	; (8005fa8 <ADC_ConfigureBoostMode+0x1c0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d109      	bne.n	8005e18 <ADC_ConfigureBoostMode+0x30>
 8005e04:	4b69      	ldr	r3, [pc, #420]	; (8005fac <ADC_ConfigureBoostMode+0x1c4>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e008      	b.n	8005e2a <ADC_ConfigureBoostMode+0x42>
 8005e18:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <ADC_ConfigureBoostMode+0x1c8>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01c      	beq.n	8005e68 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005e2e:	f004 f8d9 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 8005e32:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e3c:	d010      	beq.n	8005e60 <ADC_ConfigureBoostMode+0x78>
 8005e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e42:	d871      	bhi.n	8005f28 <ADC_ConfigureBoostMode+0x140>
 8005e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e48:	d002      	beq.n	8005e50 <ADC_ConfigureBoostMode+0x68>
 8005e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e4e:	d16b      	bne.n	8005f28 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	60fb      	str	r3, [r7, #12]
        break;
 8005e5e:	e066      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	60fb      	str	r3, [r7, #12]
        break;
 8005e66:	e062      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005e68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e6c:	f005 f810 	bl	800ae90 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e7a:	d051      	beq.n	8005f20 <ADC_ConfigureBoostMode+0x138>
 8005e7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005e80:	d854      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005e82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005e86:	d047      	beq.n	8005f18 <ADC_ConfigureBoostMode+0x130>
 8005e88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005e8c:	d84e      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005e8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005e92:	d03d      	beq.n	8005f10 <ADC_ConfigureBoostMode+0x128>
 8005e94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005e98:	d848      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e9e:	d033      	beq.n	8005f08 <ADC_ConfigureBoostMode+0x120>
 8005ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea4:	d842      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005ea6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eaa:	d029      	beq.n	8005f00 <ADC_ConfigureBoostMode+0x118>
 8005eac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005eb0:	d83c      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005eb2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005eb6:	d01a      	beq.n	8005eee <ADC_ConfigureBoostMode+0x106>
 8005eb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ebc:	d836      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005ebe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ec2:	d014      	beq.n	8005eee <ADC_ConfigureBoostMode+0x106>
 8005ec4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005ec8:	d830      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d00e      	beq.n	8005eee <ADC_ConfigureBoostMode+0x106>
 8005ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed4:	d82a      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005ed6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005eda:	d008      	beq.n	8005eee <ADC_ConfigureBoostMode+0x106>
 8005edc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ee0:	d824      	bhi.n	8005f2c <ADC_ConfigureBoostMode+0x144>
 8005ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee6:	d002      	beq.n	8005eee <ADC_ConfigureBoostMode+0x106>
 8005ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eec:	d11e      	bne.n	8005f2c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	0c9b      	lsrs	r3, r3, #18
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	60fb      	str	r3, [r7, #12]
        break;
 8005efe:	e016      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
        break;
 8005f06:	e012      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	60fb      	str	r3, [r7, #12]
        break;
 8005f0e:	e00e      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	60fb      	str	r3, [r7, #12]
        break;
 8005f16:	e00a      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
        break;
 8005f1e:	e006      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	60fb      	str	r3, [r7, #12]
        break;
 8005f26:	e002      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e000      	b.n	8005f2e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005f2c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <ADC_ConfigureBoostMode+0x1cc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d808      	bhi.n	8005f4e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005f4c:	e025      	b.n	8005f9a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <ADC_ConfigureBoostMode+0x1d0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d80a      	bhi.n	8005f6c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f68:	609a      	str	r2, [r3, #8]
}
 8005f6a:	e016      	b.n	8005f9a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <ADC_ConfigureBoostMode+0x1d4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d80a      	bhi.n	8005f8a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	e007      	b.n	8005f9a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005f98:	609a      	str	r2, [r3, #8]
}
 8005f9a:	bf00      	nop
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	40022000 	.word	0x40022000
 8005fa8:	40022100 	.word	0x40022100
 8005fac:	40022300 	.word	0x40022300
 8005fb0:	58026300 	.word	0x58026300
 8005fb4:	005f5e10 	.word	0x005f5e10
 8005fb8:	00bebc20 	.word	0x00bebc20
 8005fbc:	017d7840 	.word	0x017d7840

08005fc0 <LL_ADC_StartCalibration>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <LL_ADC_StartCalibration+0x38>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	3ffeffc0 	.word	0x3ffeffc0

08005ffc <LL_ADC_IsCalibrationOnGoing>:
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800600c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006010:	d101      	bne.n	8006016 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_ADCEx_Calibration_Start+0x1e>
 800603e:	2302      	movs	r3, #2
 8006040:	e04c      	b.n	80060dc <HAL_ADCEx_Calibration_Start+0xb8>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f7ff fe6c 	bl	8005d28 <ADC_Disable>
 8006050:	4603      	mov	r3, r0
 8006052:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d135      	bne.n	80060c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800605e:	4b21      	ldr	r3, [pc, #132]	; (80060e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006060:	4013      	ands	r3, r2
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff ffa4 	bl	8005fc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006078:	e014      	b.n	80060a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d30d      	bcc.n	80060a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608c:	f023 0312 	bic.w	r3, r3, #18
 8006090:	f043 0210 	orr.w	r2, r3, #16
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e01b      	b.n	80060dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ffa7 	bl	8005ffc <LL_ADC_IsCalibrationOnGoing>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e2      	bne.n	800607a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	f043 0201 	orr.w	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	661a      	str	r2, [r3, #96]	; 0x60
 80060c4:	e005      	b.n	80060d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	f043 0210 	orr.w	r2, r3, #16
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	ffffeefd 	.word	0xffffeefd
 80060e8:	25c3f800 	.word	0x25c3f800

080060ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <__NVIC_SetPriorityGrouping+0x40>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800616c:	4013      	ands	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <__NVIC_SetPriorityGrouping+0x44>)
 800617a:	4313      	orrs	r3, r2
 800617c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800617e:	4a04      	ldr	r2, [pc, #16]	; (8006190 <__NVIC_SetPriorityGrouping+0x40>)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	60d3      	str	r3, [r2, #12]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	e000ed00 	.word	0xe000ed00
 8006194:	05fa0000 	.word	0x05fa0000

08006198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800619c:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <__NVIC_GetPriorityGrouping+0x18>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	f003 0307 	and.w	r3, r3, #7
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	e000ed00 	.word	0xe000ed00

080061b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	db0b      	blt.n	80061de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	f003 021f 	and.w	r2, r3, #31
 80061cc:	4907      	ldr	r1, [pc, #28]	; (80061ec <__NVIC_EnableIRQ+0x38>)
 80061ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	2001      	movs	r0, #1
 80061d6:	fa00 f202 	lsl.w	r2, r0, r2
 80061da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e100 	.word	0xe000e100

080061f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	6039      	str	r1, [r7, #0]
 80061fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db0a      	blt.n	800621a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	490c      	ldr	r1, [pc, #48]	; (800623c <__NVIC_SetPriority+0x4c>)
 800620a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	440b      	add	r3, r1
 8006214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006218:	e00a      	b.n	8006230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4908      	ldr	r1, [pc, #32]	; (8006240 <__NVIC_SetPriority+0x50>)
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	3b04      	subs	r3, #4
 8006228:	0112      	lsls	r2, r2, #4
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	440b      	add	r3, r1
 800622e:	761a      	strb	r2, [r3, #24]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	e000e100 	.word	0xe000e100
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006244:	b480      	push	{r7}
 8006246:	b089      	sub	sp, #36	; 0x24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f1c3 0307 	rsb	r3, r3, #7
 800625e:	2b04      	cmp	r3, #4
 8006260:	bf28      	it	cs
 8006262:	2304      	movcs	r3, #4
 8006264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3304      	adds	r3, #4
 800626a:	2b06      	cmp	r3, #6
 800626c:	d902      	bls.n	8006274 <NVIC_EncodePriority+0x30>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3b03      	subs	r3, #3
 8006272:	e000      	b.n	8006276 <NVIC_EncodePriority+0x32>
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43da      	mvns	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	401a      	ands	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800628c:	f04f 31ff 	mov.w	r1, #4294967295
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	43d9      	mvns	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800629c:	4313      	orrs	r3, r2
         );
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3724      	adds	r7, #36	; 0x24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062bc:	d301      	bcc.n	80062c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062be:	2301      	movs	r3, #1
 80062c0:	e00f      	b.n	80062e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <SysTick_Config+0x40>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062ca:	210f      	movs	r1, #15
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	f7ff ff8e 	bl	80061f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <SysTick_Config+0x40>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062da:	4b04      	ldr	r3, [pc, #16]	; (80062ec <SysTick_Config+0x40>)
 80062dc:	2207      	movs	r2, #7
 80062de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	e000e010 	.word	0xe000e010

080062f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff29 	bl	8006150 <__NVIC_SetPriorityGrouping>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	4603      	mov	r3, r0
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006314:	f7ff ff40 	bl	8006198 <__NVIC_GetPriorityGrouping>
 8006318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f7ff ff90 	bl	8006244 <NVIC_EncodePriority>
 8006324:	4602      	mov	r2, r0
 8006326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff5f 	bl	80061f0 <__NVIC_SetPriority>
}
 8006332:	bf00      	nop
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	4603      	mov	r3, r0
 8006342:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff33 	bl	80061b4 <__NVIC_EnableIRQ>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff ffa4 	bl	80062ac <SysTick_Config>
 8006364:	4603      	mov	r3, r0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e054      	b.n	800642c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7f5b      	ldrb	r3, [r3, #29]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb f836 	bl	8001404 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_CRC_Init+0xc4>)
 80063ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0218 	bic.w	r2, r2, #24
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	e00c      	b.n	80063da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f948 	bl	8006660 <HAL_CRCEx_Polynomial_Set>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e028      	b.n	800642c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	795b      	ldrb	r3, [r3, #5]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	e004      	b.n	80063f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6912      	ldr	r2, [r2, #16]
 80063f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	04c11db7 	.word	0x04c11db7

08006438 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2202      	movs	r2, #2
 800644c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d006      	beq.n	8006474 <HAL_CRC_Calculate+0x3c>
 8006466:	2b03      	cmp	r3, #3
 8006468:	d829      	bhi.n	80064be <HAL_CRC_Calculate+0x86>
 800646a:	2b01      	cmp	r3, #1
 800646c:	d019      	beq.n	80064a2 <HAL_CRC_Calculate+0x6a>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d01e      	beq.n	80064b0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006472:	e024      	b.n	80064be <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e00a      	b.n	8006490 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	441a      	add	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	3301      	adds	r3, #1
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d3f0      	bcc.n	800647a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
      break;
 80064a0:	e00e      	b.n	80064c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f812 	bl	80064d0 <CRC_Handle_8>
 80064ac:	6138      	str	r0, [r7, #16]
      break;
 80064ae:	e007      	b.n	80064c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f899 	bl	80065ec <CRC_Handle_16>
 80064ba:	6138      	str	r0, [r7, #16]
      break;
 80064bc:	e000      	b.n	80064c0 <HAL_CRC_Calculate+0x88>
      break;
 80064be:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80064c6:	693b      	ldr	r3, [r7, #16]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e023      	b.n	800652a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	3301      	adds	r3, #1
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	440b      	add	r3, r1
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80064fc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	3302      	adds	r3, #2
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	440b      	add	r3, r1
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800650c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	3303      	adds	r3, #3
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	440b      	add	r3, r1
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006520:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	429a      	cmp	r2, r3
 8006532:	d3d6      	bcc.n	80064e2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04d      	beq.n	80065da <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	4413      	add	r3, r2
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d116      	bne.n	8006590 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	4413      	add	r3, r2
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	b21a      	sxth	r2, r3
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	3301      	adds	r3, #1
 8006576:	68b9      	ldr	r1, [r7, #8]
 8006578:	440b      	add	r3, r1
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	b21b      	sxth	r3, r3
 800657e:	4313      	orrs	r3, r2
 8006580:	b21b      	sxth	r3, r3
 8006582:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	8b7a      	ldrh	r2, [r7, #26]
 800658e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b03      	cmp	r3, #3
 8006598:	d11f      	bne.n	80065da <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	b21a      	sxth	r2, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	3301      	adds	r3, #1
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	440b      	add	r3, r1
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	b21b      	sxth	r3, r3
 80065b6:	4313      	orrs	r3, r2
 80065b8:	b21b      	sxth	r3, r3
 80065ba:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	8b7a      	ldrh	r2, [r7, #26]
 80065c6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	3302      	adds	r3, #2
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3724      	adds	r7, #36	; 0x24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e013      	b.n	8006626 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	041a      	lsls	r2, r3, #16
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	3302      	adds	r3, #2
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	440b      	add	r3, r1
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3301      	adds	r3, #1
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	429a      	cmp	r2, r3
 800662e:	d3e6      	bcc.n	80065fe <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	4413      	add	r3, r2
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
}
 8006654:	4618      	mov	r0, r3
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006670:	231f      	movs	r3, #31
 8006672:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006674:	bf00      	nop
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1e5a      	subs	r2, r3, #1
 800667a:	613a      	str	r2, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <HAL_CRCEx_Polynomial_Set+0x34>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f003 031f 	and.w	r3, r3, #31
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <HAL_CRCEx_Polynomial_Set+0x16>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b18      	cmp	r3, #24
 8006698:	d846      	bhi.n	8006728 <HAL_CRCEx_Polynomial_Set+0xc8>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	0800672f 	.word	0x0800672f
 80066a4:	08006729 	.word	0x08006729
 80066a8:	08006729 	.word	0x08006729
 80066ac:	08006729 	.word	0x08006729
 80066b0:	08006729 	.word	0x08006729
 80066b4:	08006729 	.word	0x08006729
 80066b8:	08006729 	.word	0x08006729
 80066bc:	08006729 	.word	0x08006729
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	08006729 	.word	0x08006729
 80066c8:	08006729 	.word	0x08006729
 80066cc:	08006729 	.word	0x08006729
 80066d0:	08006729 	.word	0x08006729
 80066d4:	08006729 	.word	0x08006729
 80066d8:	08006729 	.word	0x08006729
 80066dc:	08006729 	.word	0x08006729
 80066e0:	08006711 	.word	0x08006711
 80066e4:	08006729 	.word	0x08006729
 80066e8:	08006729 	.word	0x08006729
 80066ec:	08006729 	.word	0x08006729
 80066f0:	08006729 	.word	0x08006729
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006729 	.word	0x08006729
 80066fc:	08006729 	.word	0x08006729
 8006700:	08006705 	.word	0x08006705
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b06      	cmp	r3, #6
 8006708:	d913      	bls.n	8006732 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800670e:	e010      	b.n	8006732 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b07      	cmp	r3, #7
 8006714:	d90f      	bls.n	8006736 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800671a:	e00c      	b.n	8006736 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d90b      	bls.n	800673a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006726:	e008      	b.n	800673a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	e006      	b.n	800673c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800673a:	bf00      	nop
  }
  if (status == HAL_OK)
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 0118 	bic.w	r1, r3, #24
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006760:	4618      	mov	r0, r3
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006774:	f7fd fc9c 	bl	80040b0 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e314      	b.n	8006dae <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a66      	ldr	r2, [pc, #408]	; (8006924 <HAL_DMA_Init+0x1b8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d04a      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a65      	ldr	r2, [pc, #404]	; (8006928 <HAL_DMA_Init+0x1bc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d045      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a63      	ldr	r2, [pc, #396]	; (800692c <HAL_DMA_Init+0x1c0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d040      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a62      	ldr	r2, [pc, #392]	; (8006930 <HAL_DMA_Init+0x1c4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d03b      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a60      	ldr	r2, [pc, #384]	; (8006934 <HAL_DMA_Init+0x1c8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d036      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a5f      	ldr	r2, [pc, #380]	; (8006938 <HAL_DMA_Init+0x1cc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d031      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5d      	ldr	r2, [pc, #372]	; (800693c <HAL_DMA_Init+0x1d0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d02c      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a5c      	ldr	r2, [pc, #368]	; (8006940 <HAL_DMA_Init+0x1d4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d027      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a5a      	ldr	r2, [pc, #360]	; (8006944 <HAL_DMA_Init+0x1d8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a59      	ldr	r2, [pc, #356]	; (8006948 <HAL_DMA_Init+0x1dc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d01d      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a57      	ldr	r2, [pc, #348]	; (800694c <HAL_DMA_Init+0x1e0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a56      	ldr	r2, [pc, #344]	; (8006950 <HAL_DMA_Init+0x1e4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a54      	ldr	r2, [pc, #336]	; (8006954 <HAL_DMA_Init+0x1e8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a53      	ldr	r2, [pc, #332]	; (8006958 <HAL_DMA_Init+0x1ec>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a51      	ldr	r2, [pc, #324]	; (800695c <HAL_DMA_Init+0x1f0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_DMA_Init+0xb8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a50      	ldr	r2, [pc, #320]	; (8006960 <HAL_DMA_Init+0x1f4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <HAL_DMA_Init+0xbc>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <HAL_DMA_Init+0xbe>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 813c 	beq.w	8006aa8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a37      	ldr	r2, [pc, #220]	; (8006924 <HAL_DMA_Init+0x1b8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d04a      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a36      	ldr	r2, [pc, #216]	; (8006928 <HAL_DMA_Init+0x1bc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d045      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a34      	ldr	r2, [pc, #208]	; (800692c <HAL_DMA_Init+0x1c0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d040      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a33      	ldr	r2, [pc, #204]	; (8006930 <HAL_DMA_Init+0x1c4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d03b      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a31      	ldr	r2, [pc, #196]	; (8006934 <HAL_DMA_Init+0x1c8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d036      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a30      	ldr	r2, [pc, #192]	; (8006938 <HAL_DMA_Init+0x1cc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d031      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2e      	ldr	r2, [pc, #184]	; (800693c <HAL_DMA_Init+0x1d0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d02c      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2d      	ldr	r2, [pc, #180]	; (8006940 <HAL_DMA_Init+0x1d4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d027      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2b      	ldr	r2, [pc, #172]	; (8006944 <HAL_DMA_Init+0x1d8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d022      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2a      	ldr	r2, [pc, #168]	; (8006948 <HAL_DMA_Init+0x1dc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d01d      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a28      	ldr	r2, [pc, #160]	; (800694c <HAL_DMA_Init+0x1e0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d018      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a27      	ldr	r2, [pc, #156]	; (8006950 <HAL_DMA_Init+0x1e4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a25      	ldr	r2, [pc, #148]	; (8006954 <HAL_DMA_Init+0x1e8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00e      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a24      	ldr	r2, [pc, #144]	; (8006958 <HAL_DMA_Init+0x1ec>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d009      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a22      	ldr	r2, [pc, #136]	; (800695c <HAL_DMA_Init+0x1f0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_DMA_Init+0x174>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a21      	ldr	r2, [pc, #132]	; (8006960 <HAL_DMA_Init+0x1f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d108      	bne.n	80068f2 <HAL_DMA_Init+0x186>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	e007      	b.n	8006902 <HAL_DMA_Init+0x196>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0201 	bic.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006902:	e02f      	b.n	8006964 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006904:	f7fd fbd4 	bl	80040b0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b05      	cmp	r3, #5
 8006910:	d928      	bls.n	8006964 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2203      	movs	r2, #3
 800691c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e244      	b.n	8006dae <HAL_DMA_Init+0x642>
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1c8      	bne.n	8006904 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4b84      	ldr	r3, [pc, #528]	; (8006b90 <HAL_DMA_Init+0x424>)
 800697e:	4013      	ands	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800698a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006996:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d107      	bne.n	80069c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	4313      	orrs	r3, r2
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b28      	cmp	r3, #40	; 0x28
 80069ce:	d903      	bls.n	80069d8 <HAL_DMA_Init+0x26c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b2e      	cmp	r3, #46	; 0x2e
 80069d6:	d91f      	bls.n	8006a18 <HAL_DMA_Init+0x2ac>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b3e      	cmp	r3, #62	; 0x3e
 80069de:	d903      	bls.n	80069e8 <HAL_DMA_Init+0x27c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b42      	cmp	r3, #66	; 0x42
 80069e6:	d917      	bls.n	8006a18 <HAL_DMA_Init+0x2ac>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	2b46      	cmp	r3, #70	; 0x46
 80069ee:	d903      	bls.n	80069f8 <HAL_DMA_Init+0x28c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b48      	cmp	r3, #72	; 0x48
 80069f6:	d90f      	bls.n	8006a18 <HAL_DMA_Init+0x2ac>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	2b4e      	cmp	r3, #78	; 0x4e
 80069fe:	d903      	bls.n	8006a08 <HAL_DMA_Init+0x29c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b52      	cmp	r3, #82	; 0x52
 8006a06:	d907      	bls.n	8006a18 <HAL_DMA_Init+0x2ac>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b73      	cmp	r3, #115	; 0x73
 8006a0e:	d905      	bls.n	8006a1c <HAL_DMA_Init+0x2b0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b77      	cmp	r3, #119	; 0x77
 8006a16:	d801      	bhi.n	8006a1c <HAL_DMA_Init+0x2b0>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <HAL_DMA_Init+0x2b2>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a28:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 0307 	bic.w	r3, r3, #7
 8006a40:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d117      	bne.n	8006a84 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 ff18 	bl	800889c <DMA_CheckFifoParam>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e194      	b.n	8006dae <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 fe53 	bl	8008738 <DMA_CalcBaseAndBitshift>
 8006a92:	4603      	mov	r3, r0
 8006a94:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	223f      	movs	r2, #63	; 0x3f
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	609a      	str	r2, [r3, #8]
 8006aa6:	e0ca      	b.n	8006c3e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a39      	ldr	r2, [pc, #228]	; (8006b94 <HAL_DMA_Init+0x428>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d022      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <HAL_DMA_Init+0x42c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01d      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a36      	ldr	r2, [pc, #216]	; (8006b9c <HAL_DMA_Init+0x430>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d018      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a35      	ldr	r2, [pc, #212]	; (8006ba0 <HAL_DMA_Init+0x434>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a33      	ldr	r2, [pc, #204]	; (8006ba4 <HAL_DMA_Init+0x438>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00e      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a32      	ldr	r2, [pc, #200]	; (8006ba8 <HAL_DMA_Init+0x43c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d009      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a30      	ldr	r2, [pc, #192]	; (8006bac <HAL_DMA_Init+0x440>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d004      	beq.n	8006af8 <HAL_DMA_Init+0x38c>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a2f      	ldr	r2, [pc, #188]	; (8006bb0 <HAL_DMA_Init+0x444>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_DMA_Init+0x390>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_DMA_Init+0x392>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8094 	beq.w	8006c2c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <HAL_DMA_Init+0x428>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d021      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <HAL_DMA_Init+0x42c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d01c      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <HAL_DMA_Init+0x430>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d017      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <HAL_DMA_Init+0x434>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d012      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1c      	ldr	r2, [pc, #112]	; (8006ba4 <HAL_DMA_Init+0x438>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00d      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <HAL_DMA_Init+0x43c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d008      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_DMA_Init+0x440>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <HAL_DMA_Init+0x3e6>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <HAL_DMA_Init+0x444>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <HAL_DMA_Init+0x448>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_DMA_Init+0x44c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d102      	bne.n	8006b8a <HAL_DMA_Init+0x41e>
 8006b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b88:	e017      	b.n	8006bba <HAL_DMA_Init+0x44e>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e015      	b.n	8006bba <HAL_DMA_Init+0x44e>
 8006b8e:	bf00      	nop
 8006b90:	fe10803f 	.word	0xfe10803f
 8006b94:	58025408 	.word	0x58025408
 8006b98:	5802541c 	.word	0x5802541c
 8006b9c:	58025430 	.word	0x58025430
 8006ba0:	58025444 	.word	0x58025444
 8006ba4:	58025458 	.word	0x58025458
 8006ba8:	5802546c 	.word	0x5802546c
 8006bac:	58025480 	.word	0x58025480
 8006bb0:	58025494 	.word	0x58025494
 8006bb4:	fffe000f 	.word	0xfffe000f
 8006bb8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68d2      	ldr	r2, [r2, #12]
 8006bbe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006bd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006be0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006be8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b6e      	ldr	r3, [pc, #440]	; (8006db8 <HAL_DMA_Init+0x64c>)
 8006c00:	4413      	add	r3, r2
 8006c02:	4a6e      	ldr	r2, [pc, #440]	; (8006dbc <HAL_DMA_Init+0x650>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	091b      	lsrs	r3, r3, #4
 8006c0a:	009a      	lsls	r2, r3, #2
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fd91 	bl	8008738 <DMA_CalcBaseAndBitshift>
 8006c16:	4603      	mov	r3, r0
 8006c18:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	2201      	movs	r2, #1
 8006c24:	409a      	lsls	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	e008      	b.n	8006c3e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2240      	movs	r2, #64	; 0x40
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2203      	movs	r2, #3
 8006c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0b7      	b.n	8006dae <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a5f      	ldr	r2, [pc, #380]	; (8006dc0 <HAL_DMA_Init+0x654>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d072      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a5d      	ldr	r2, [pc, #372]	; (8006dc4 <HAL_DMA_Init+0x658>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d06d      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a5c      	ldr	r2, [pc, #368]	; (8006dc8 <HAL_DMA_Init+0x65c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d068      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a5a      	ldr	r2, [pc, #360]	; (8006dcc <HAL_DMA_Init+0x660>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d063      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a59      	ldr	r2, [pc, #356]	; (8006dd0 <HAL_DMA_Init+0x664>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d05e      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a57      	ldr	r2, [pc, #348]	; (8006dd4 <HAL_DMA_Init+0x668>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d059      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a56      	ldr	r2, [pc, #344]	; (8006dd8 <HAL_DMA_Init+0x66c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d054      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a54      	ldr	r2, [pc, #336]	; (8006ddc <HAL_DMA_Init+0x670>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d04f      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a53      	ldr	r2, [pc, #332]	; (8006de0 <HAL_DMA_Init+0x674>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d04a      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a51      	ldr	r2, [pc, #324]	; (8006de4 <HAL_DMA_Init+0x678>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d045      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a50      	ldr	r2, [pc, #320]	; (8006de8 <HAL_DMA_Init+0x67c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d040      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a4e      	ldr	r2, [pc, #312]	; (8006dec <HAL_DMA_Init+0x680>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d03b      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4d      	ldr	r2, [pc, #308]	; (8006df0 <HAL_DMA_Init+0x684>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d036      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a4b      	ldr	r2, [pc, #300]	; (8006df4 <HAL_DMA_Init+0x688>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d031      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a4a      	ldr	r2, [pc, #296]	; (8006df8 <HAL_DMA_Init+0x68c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d02c      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a48      	ldr	r2, [pc, #288]	; (8006dfc <HAL_DMA_Init+0x690>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d027      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a47      	ldr	r2, [pc, #284]	; (8006e00 <HAL_DMA_Init+0x694>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a45      	ldr	r2, [pc, #276]	; (8006e04 <HAL_DMA_Init+0x698>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01d      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a44      	ldr	r2, [pc, #272]	; (8006e08 <HAL_DMA_Init+0x69c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a42      	ldr	r2, [pc, #264]	; (8006e0c <HAL_DMA_Init+0x6a0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d013      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a41      	ldr	r2, [pc, #260]	; (8006e10 <HAL_DMA_Init+0x6a4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3f      	ldr	r2, [pc, #252]	; (8006e14 <HAL_DMA_Init+0x6a8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a3e      	ldr	r2, [pc, #248]	; (8006e18 <HAL_DMA_Init+0x6ac>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_DMA_Init+0x5c2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <HAL_DMA_Init+0x6b0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <HAL_DMA_Init+0x5c6>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <HAL_DMA_Init+0x5c8>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d032      	beq.n	8006d9e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fe2b 	bl	8008994 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b80      	cmp	r3, #128	; 0x80
 8006d44:	d102      	bne.n	8006d4c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_DMA_Init+0x620>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b08      	cmp	r3, #8
 8006d70:	d80c      	bhi.n	8006d8c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fea8 	bl	8008ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	e008      	b.n	8006d9e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	a7fdabf8 	.word	0xa7fdabf8
 8006dbc:	cccccccd 	.word	0xcccccccd
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8
 8006e00:	58025408 	.word	0x58025408
 8006e04:	5802541c 	.word	0x5802541c
 8006e08:	58025430 	.word	0x58025430
 8006e0c:	58025444 	.word	0x58025444
 8006e10:	58025458 	.word	0x58025458
 8006e14:	5802546c 	.word	0x5802546c
 8006e18:	58025480 	.word	0x58025480
 8006e1c:	58025494 	.word	0x58025494

08006e20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e28:	f7fd f942 	bl	80040b0 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e2dc      	b.n	80073f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d008      	beq.n	8006e56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e2cd      	b.n	80073f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a76      	ldr	r2, [pc, #472]	; (8007034 <HAL_DMA_Abort+0x214>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d04a      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a74      	ldr	r2, [pc, #464]	; (8007038 <HAL_DMA_Abort+0x218>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d045      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a73      	ldr	r2, [pc, #460]	; (800703c <HAL_DMA_Abort+0x21c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d040      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a71      	ldr	r2, [pc, #452]	; (8007040 <HAL_DMA_Abort+0x220>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d03b      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a70      	ldr	r2, [pc, #448]	; (8007044 <HAL_DMA_Abort+0x224>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d036      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6e      	ldr	r2, [pc, #440]	; (8007048 <HAL_DMA_Abort+0x228>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d031      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a6d      	ldr	r2, [pc, #436]	; (800704c <HAL_DMA_Abort+0x22c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d02c      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6b      	ldr	r2, [pc, #428]	; (8007050 <HAL_DMA_Abort+0x230>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d027      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6a      	ldr	r2, [pc, #424]	; (8007054 <HAL_DMA_Abort+0x234>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d022      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a68      	ldr	r2, [pc, #416]	; (8007058 <HAL_DMA_Abort+0x238>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a67      	ldr	r2, [pc, #412]	; (800705c <HAL_DMA_Abort+0x23c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a65      	ldr	r2, [pc, #404]	; (8007060 <HAL_DMA_Abort+0x240>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a64      	ldr	r2, [pc, #400]	; (8007064 <HAL_DMA_Abort+0x244>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a62      	ldr	r2, [pc, #392]	; (8007068 <HAL_DMA_Abort+0x248>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_DMA_Abort+0x24c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_DMA_Abort+0xd6>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a5f      	ldr	r2, [pc, #380]	; (8007070 <HAL_DMA_Abort+0x250>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d101      	bne.n	8006efa <HAL_DMA_Abort+0xda>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <HAL_DMA_Abort+0xdc>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d013      	beq.n	8006f28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 021e 	bic.w	r2, r2, #30
 8006f0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695a      	ldr	r2, [r3, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	e00a      	b.n	8006f3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 020e 	bic.w	r2, r2, #14
 8006f36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3c      	ldr	r2, [pc, #240]	; (8007034 <HAL_DMA_Abort+0x214>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d072      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a3a      	ldr	r2, [pc, #232]	; (8007038 <HAL_DMA_Abort+0x218>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d06d      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a39      	ldr	r2, [pc, #228]	; (800703c <HAL_DMA_Abort+0x21c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d068      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a37      	ldr	r2, [pc, #220]	; (8007040 <HAL_DMA_Abort+0x220>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d063      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a36      	ldr	r2, [pc, #216]	; (8007044 <HAL_DMA_Abort+0x224>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d05e      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a34      	ldr	r2, [pc, #208]	; (8007048 <HAL_DMA_Abort+0x228>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d059      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a33      	ldr	r2, [pc, #204]	; (800704c <HAL_DMA_Abort+0x22c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d054      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a31      	ldr	r2, [pc, #196]	; (8007050 <HAL_DMA_Abort+0x230>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d04f      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a30      	ldr	r2, [pc, #192]	; (8007054 <HAL_DMA_Abort+0x234>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d04a      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2e      	ldr	r2, [pc, #184]	; (8007058 <HAL_DMA_Abort+0x238>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d045      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2d      	ldr	r2, [pc, #180]	; (800705c <HAL_DMA_Abort+0x23c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d040      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	; (8007060 <HAL_DMA_Abort+0x240>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d03b      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2a      	ldr	r2, [pc, #168]	; (8007064 <HAL_DMA_Abort+0x244>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d036      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a28      	ldr	r2, [pc, #160]	; (8007068 <HAL_DMA_Abort+0x248>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d031      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a27      	ldr	r2, [pc, #156]	; (800706c <HAL_DMA_Abort+0x24c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d02c      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <HAL_DMA_Abort+0x250>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d027      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a24      	ldr	r2, [pc, #144]	; (8007074 <HAL_DMA_Abort+0x254>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d022      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a22      	ldr	r2, [pc, #136]	; (8007078 <HAL_DMA_Abort+0x258>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01d      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a21      	ldr	r2, [pc, #132]	; (800707c <HAL_DMA_Abort+0x25c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d018      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <HAL_DMA_Abort+0x260>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <HAL_DMA_Abort+0x264>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <HAL_DMA_Abort+0x268>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1b      	ldr	r2, [pc, #108]	; (800708c <HAL_DMA_Abort+0x26c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_DMA_Abort+0x20e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_DMA_Abort+0x270>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d132      	bne.n	8007094 <HAL_DMA_Abort+0x274>
 800702e:	2301      	movs	r3, #1
 8007030:	e031      	b.n	8007096 <HAL_DMA_Abort+0x276>
 8007032:	bf00      	nop
 8007034:	40020010 	.word	0x40020010
 8007038:	40020028 	.word	0x40020028
 800703c:	40020040 	.word	0x40020040
 8007040:	40020058 	.word	0x40020058
 8007044:	40020070 	.word	0x40020070
 8007048:	40020088 	.word	0x40020088
 800704c:	400200a0 	.word	0x400200a0
 8007050:	400200b8 	.word	0x400200b8
 8007054:	40020410 	.word	0x40020410
 8007058:	40020428 	.word	0x40020428
 800705c:	40020440 	.word	0x40020440
 8007060:	40020458 	.word	0x40020458
 8007064:	40020470 	.word	0x40020470
 8007068:	40020488 	.word	0x40020488
 800706c:	400204a0 	.word	0x400204a0
 8007070:	400204b8 	.word	0x400204b8
 8007074:	58025408 	.word	0x58025408
 8007078:	5802541c 	.word	0x5802541c
 800707c:	58025430 	.word	0x58025430
 8007080:	58025444 	.word	0x58025444
 8007084:	58025458 	.word	0x58025458
 8007088:	5802546c 	.word	0x5802546c
 800708c:	58025480 	.word	0x58025480
 8007090:	58025494 	.word	0x58025494
 8007094:	2300      	movs	r3, #0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a6d      	ldr	r2, [pc, #436]	; (8007264 <HAL_DMA_Abort+0x444>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d04a      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a6b      	ldr	r2, [pc, #428]	; (8007268 <HAL_DMA_Abort+0x448>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d045      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a6a      	ldr	r2, [pc, #424]	; (800726c <HAL_DMA_Abort+0x44c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d040      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a68      	ldr	r2, [pc, #416]	; (8007270 <HAL_DMA_Abort+0x450>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d03b      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a67      	ldr	r2, [pc, #412]	; (8007274 <HAL_DMA_Abort+0x454>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d036      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a65      	ldr	r2, [pc, #404]	; (8007278 <HAL_DMA_Abort+0x458>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d031      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a64      	ldr	r2, [pc, #400]	; (800727c <HAL_DMA_Abort+0x45c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d02c      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a62      	ldr	r2, [pc, #392]	; (8007280 <HAL_DMA_Abort+0x460>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d027      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a61      	ldr	r2, [pc, #388]	; (8007284 <HAL_DMA_Abort+0x464>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a5f      	ldr	r2, [pc, #380]	; (8007288 <HAL_DMA_Abort+0x468>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a5e      	ldr	r2, [pc, #376]	; (800728c <HAL_DMA_Abort+0x46c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5c      	ldr	r2, [pc, #368]	; (8007290 <HAL_DMA_Abort+0x470>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a5b      	ldr	r2, [pc, #364]	; (8007294 <HAL_DMA_Abort+0x474>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a59      	ldr	r2, [pc, #356]	; (8007298 <HAL_DMA_Abort+0x478>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a58      	ldr	r2, [pc, #352]	; (800729c <HAL_DMA_Abort+0x47c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_DMA_Abort+0x32a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a56      	ldr	r2, [pc, #344]	; (80072a0 <HAL_DMA_Abort+0x480>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <HAL_DMA_Abort+0x33c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0201 	bic.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e007      	b.n	800716c <HAL_DMA_Abort+0x34c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800716c:	e013      	b.n	8007196 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800716e:	f7fc ff9f 	bl	80040b0 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b05      	cmp	r3, #5
 800717a:	d90c      	bls.n	8007196 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2203      	movs	r2, #3
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e12d      	b.n	80073f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2f      	ldr	r2, [pc, #188]	; (8007264 <HAL_DMA_Abort+0x444>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d04a      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2d      	ldr	r2, [pc, #180]	; (8007268 <HAL_DMA_Abort+0x448>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d045      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <HAL_DMA_Abort+0x44c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d040      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2a      	ldr	r2, [pc, #168]	; (8007270 <HAL_DMA_Abort+0x450>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d03b      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a29      	ldr	r2, [pc, #164]	; (8007274 <HAL_DMA_Abort+0x454>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d036      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <HAL_DMA_Abort+0x458>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d031      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <HAL_DMA_Abort+0x45c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d02c      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a24      	ldr	r2, [pc, #144]	; (8007280 <HAL_DMA_Abort+0x460>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d027      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a23      	ldr	r2, [pc, #140]	; (8007284 <HAL_DMA_Abort+0x464>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a21      	ldr	r2, [pc, #132]	; (8007288 <HAL_DMA_Abort+0x468>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01d      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_DMA_Abort+0x46c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <HAL_DMA_Abort+0x470>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1d      	ldr	r2, [pc, #116]	; (8007294 <HAL_DMA_Abort+0x474>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <HAL_DMA_Abort+0x478>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1a      	ldr	r2, [pc, #104]	; (800729c <HAL_DMA_Abort+0x47c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_DMA_Abort+0x422>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <HAL_DMA_Abort+0x480>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <HAL_DMA_Abort+0x426>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <HAL_DMA_Abort+0x428>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02b      	beq.n	80072a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007250:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	223f      	movs	r2, #63	; 0x3f
 800725c:	409a      	lsls	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	609a      	str	r2, [r3, #8]
 8007262:	e02a      	b.n	80072ba <HAL_DMA_Abort+0x49a>
 8007264:	40020010 	.word	0x40020010
 8007268:	40020028 	.word	0x40020028
 800726c:	40020040 	.word	0x40020040
 8007270:	40020058 	.word	0x40020058
 8007274:	40020070 	.word	0x40020070
 8007278:	40020088 	.word	0x40020088
 800727c:	400200a0 	.word	0x400200a0
 8007280:	400200b8 	.word	0x400200b8
 8007284:	40020410 	.word	0x40020410
 8007288:	40020428 	.word	0x40020428
 800728c:	40020440 	.word	0x40020440
 8007290:	40020458 	.word	0x40020458
 8007294:	40020470 	.word	0x40020470
 8007298:	40020488 	.word	0x40020488
 800729c:	400204a0 	.word	0x400204a0
 80072a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	2201      	movs	r2, #1
 80072b4:	409a      	lsls	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a4f      	ldr	r2, [pc, #316]	; (80073fc <HAL_DMA_Abort+0x5dc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d072      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_DMA_Abort+0x5e0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d06d      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a4c      	ldr	r2, [pc, #304]	; (8007404 <HAL_DMA_Abort+0x5e4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d068      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a4a      	ldr	r2, [pc, #296]	; (8007408 <HAL_DMA_Abort+0x5e8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d063      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a49      	ldr	r2, [pc, #292]	; (800740c <HAL_DMA_Abort+0x5ec>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d05e      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a47      	ldr	r2, [pc, #284]	; (8007410 <HAL_DMA_Abort+0x5f0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d059      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <HAL_DMA_Abort+0x5f4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d054      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a44      	ldr	r2, [pc, #272]	; (8007418 <HAL_DMA_Abort+0x5f8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04f      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a43      	ldr	r2, [pc, #268]	; (800741c <HAL_DMA_Abort+0x5fc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d04a      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a41      	ldr	r2, [pc, #260]	; (8007420 <HAL_DMA_Abort+0x600>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d045      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a40      	ldr	r2, [pc, #256]	; (8007424 <HAL_DMA_Abort+0x604>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d040      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a3e      	ldr	r2, [pc, #248]	; (8007428 <HAL_DMA_Abort+0x608>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d03b      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a3d      	ldr	r2, [pc, #244]	; (800742c <HAL_DMA_Abort+0x60c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d036      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3b      	ldr	r2, [pc, #236]	; (8007430 <HAL_DMA_Abort+0x610>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d031      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3a      	ldr	r2, [pc, #232]	; (8007434 <HAL_DMA_Abort+0x614>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d02c      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a38      	ldr	r2, [pc, #224]	; (8007438 <HAL_DMA_Abort+0x618>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d027      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a37      	ldr	r2, [pc, #220]	; (800743c <HAL_DMA_Abort+0x61c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d022      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a35      	ldr	r2, [pc, #212]	; (8007440 <HAL_DMA_Abort+0x620>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01d      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a34      	ldr	r2, [pc, #208]	; (8007444 <HAL_DMA_Abort+0x624>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d018      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a32      	ldr	r2, [pc, #200]	; (8007448 <HAL_DMA_Abort+0x628>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d013      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a31      	ldr	r2, [pc, #196]	; (800744c <HAL_DMA_Abort+0x62c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00e      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2f      	ldr	r2, [pc, #188]	; (8007450 <HAL_DMA_Abort+0x630>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2e      	ldr	r2, [pc, #184]	; (8007454 <HAL_DMA_Abort+0x634>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d004      	beq.n	80073aa <HAL_DMA_Abort+0x58a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <HAL_DMA_Abort+0x638>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <HAL_DMA_Abort+0x58e>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <HAL_DMA_Abort+0x590>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d015      	beq.n	80073e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00c      	beq.n	80073e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
 800743c:	58025408 	.word	0x58025408
 8007440:	5802541c 	.word	0x5802541c
 8007444:	58025430 	.word	0x58025430
 8007448:	58025444 	.word	0x58025444
 800744c:	58025458 	.word	0x58025458
 8007450:	5802546c 	.word	0x5802546c
 8007454:	58025480 	.word	0x58025480
 8007458:	58025494 	.word	0x58025494

0800745c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e205      	b.n	800787a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d004      	beq.n	8007484 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e1fa      	b.n	800787a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a8c      	ldr	r2, [pc, #560]	; (80076bc <HAL_DMA_Abort_IT+0x260>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d04a      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a8b      	ldr	r2, [pc, #556]	; (80076c0 <HAL_DMA_Abort_IT+0x264>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d045      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a89      	ldr	r2, [pc, #548]	; (80076c4 <HAL_DMA_Abort_IT+0x268>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d040      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a88      	ldr	r2, [pc, #544]	; (80076c8 <HAL_DMA_Abort_IT+0x26c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d03b      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a86      	ldr	r2, [pc, #536]	; (80076cc <HAL_DMA_Abort_IT+0x270>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d036      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a85      	ldr	r2, [pc, #532]	; (80076d0 <HAL_DMA_Abort_IT+0x274>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d031      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a83      	ldr	r2, [pc, #524]	; (80076d4 <HAL_DMA_Abort_IT+0x278>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d02c      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a82      	ldr	r2, [pc, #520]	; (80076d8 <HAL_DMA_Abort_IT+0x27c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d027      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a80      	ldr	r2, [pc, #512]	; (80076dc <HAL_DMA_Abort_IT+0x280>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d022      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a7f      	ldr	r2, [pc, #508]	; (80076e0 <HAL_DMA_Abort_IT+0x284>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d01d      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a7d      	ldr	r2, [pc, #500]	; (80076e4 <HAL_DMA_Abort_IT+0x288>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d018      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a7c      	ldr	r2, [pc, #496]	; (80076e8 <HAL_DMA_Abort_IT+0x28c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a7a      	ldr	r2, [pc, #488]	; (80076ec <HAL_DMA_Abort_IT+0x290>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00e      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a79      	ldr	r2, [pc, #484]	; (80076f0 <HAL_DMA_Abort_IT+0x294>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d009      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a77      	ldr	r2, [pc, #476]	; (80076f4 <HAL_DMA_Abort_IT+0x298>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d004      	beq.n	8007524 <HAL_DMA_Abort_IT+0xc8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a76      	ldr	r2, [pc, #472]	; (80076f8 <HAL_DMA_Abort_IT+0x29c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d101      	bne.n	8007528 <HAL_DMA_Abort_IT+0xcc>
 8007524:	2301      	movs	r3, #1
 8007526:	e000      	b.n	800752a <HAL_DMA_Abort_IT+0xce>
 8007528:	2300      	movs	r3, #0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d065      	beq.n	80075fa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a60      	ldr	r2, [pc, #384]	; (80076bc <HAL_DMA_Abort_IT+0x260>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d04a      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a5e      	ldr	r2, [pc, #376]	; (80076c0 <HAL_DMA_Abort_IT+0x264>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d045      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a5d      	ldr	r2, [pc, #372]	; (80076c4 <HAL_DMA_Abort_IT+0x268>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d040      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a5b      	ldr	r2, [pc, #364]	; (80076c8 <HAL_DMA_Abort_IT+0x26c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d03b      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a5a      	ldr	r2, [pc, #360]	; (80076cc <HAL_DMA_Abort_IT+0x270>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d036      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a58      	ldr	r2, [pc, #352]	; (80076d0 <HAL_DMA_Abort_IT+0x274>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d031      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a57      	ldr	r2, [pc, #348]	; (80076d4 <HAL_DMA_Abort_IT+0x278>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d02c      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a55      	ldr	r2, [pc, #340]	; (80076d8 <HAL_DMA_Abort_IT+0x27c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d027      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a54      	ldr	r2, [pc, #336]	; (80076dc <HAL_DMA_Abort_IT+0x280>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d022      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a52      	ldr	r2, [pc, #328]	; (80076e0 <HAL_DMA_Abort_IT+0x284>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01d      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a51      	ldr	r2, [pc, #324]	; (80076e4 <HAL_DMA_Abort_IT+0x288>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a4f      	ldr	r2, [pc, #316]	; (80076e8 <HAL_DMA_Abort_IT+0x28c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a4e      	ldr	r2, [pc, #312]	; (80076ec <HAL_DMA_Abort_IT+0x290>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a4c      	ldr	r2, [pc, #304]	; (80076f0 <HAL_DMA_Abort_IT+0x294>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a4b      	ldr	r2, [pc, #300]	; (80076f4 <HAL_DMA_Abort_IT+0x298>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_DMA_Abort_IT+0x17a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a49      	ldr	r2, [pc, #292]	; (80076f8 <HAL_DMA_Abort_IT+0x29c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d108      	bne.n	80075e8 <HAL_DMA_Abort_IT+0x18c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e147      	b.n	8007878 <HAL_DMA_Abort_IT+0x41c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	e13e      	b.n	8007878 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 020e 	bic.w	r2, r2, #14
 8007608:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <HAL_DMA_Abort_IT+0x260>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d04a      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <HAL_DMA_Abort_IT+0x264>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d045      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <HAL_DMA_Abort_IT+0x268>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d040      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <HAL_DMA_Abort_IT+0x26c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d03b      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a25      	ldr	r2, [pc, #148]	; (80076cc <HAL_DMA_Abort_IT+0x270>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d036      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a23      	ldr	r2, [pc, #140]	; (80076d0 <HAL_DMA_Abort_IT+0x274>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d031      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a22      	ldr	r2, [pc, #136]	; (80076d4 <HAL_DMA_Abort_IT+0x278>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d02c      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <HAL_DMA_Abort_IT+0x27c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d027      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a1f      	ldr	r2, [pc, #124]	; (80076dc <HAL_DMA_Abort_IT+0x280>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d022      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <HAL_DMA_Abort_IT+0x284>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d01d      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <HAL_DMA_Abort_IT+0x288>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d018      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <HAL_DMA_Abort_IT+0x28c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a19      	ldr	r2, [pc, #100]	; (80076ec <HAL_DMA_Abort_IT+0x290>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00e      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <HAL_DMA_Abort_IT+0x294>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d009      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <HAL_DMA_Abort_IT+0x298>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <HAL_DMA_Abort_IT+0x24e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <HAL_DMA_Abort_IT+0x29c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d128      	bne.n	80076fc <HAL_DMA_Abort_IT+0x2a0>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e027      	b.n	800770c <HAL_DMA_Abort_IT+0x2b0>
 80076bc:	40020010 	.word	0x40020010
 80076c0:	40020028 	.word	0x40020028
 80076c4:	40020040 	.word	0x40020040
 80076c8:	40020058 	.word	0x40020058
 80076cc:	40020070 	.word	0x40020070
 80076d0:	40020088 	.word	0x40020088
 80076d4:	400200a0 	.word	0x400200a0
 80076d8:	400200b8 	.word	0x400200b8
 80076dc:	40020410 	.word	0x40020410
 80076e0:	40020428 	.word	0x40020428
 80076e4:	40020440 	.word	0x40020440
 80076e8:	40020458 	.word	0x40020458
 80076ec:	40020470 	.word	0x40020470
 80076f0:	40020488 	.word	0x40020488
 80076f4:	400204a0 	.word	0x400204a0
 80076f8:	400204b8 	.word	0x400204b8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a5c      	ldr	r2, [pc, #368]	; (8007884 <HAL_DMA_Abort_IT+0x428>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d072      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a5b      	ldr	r2, [pc, #364]	; (8007888 <HAL_DMA_Abort_IT+0x42c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d06d      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a59      	ldr	r2, [pc, #356]	; (800788c <HAL_DMA_Abort_IT+0x430>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d068      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a58      	ldr	r2, [pc, #352]	; (8007890 <HAL_DMA_Abort_IT+0x434>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d063      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a56      	ldr	r2, [pc, #344]	; (8007894 <HAL_DMA_Abort_IT+0x438>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d05e      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a55      	ldr	r2, [pc, #340]	; (8007898 <HAL_DMA_Abort_IT+0x43c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d059      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a53      	ldr	r2, [pc, #332]	; (800789c <HAL_DMA_Abort_IT+0x440>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d054      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a52      	ldr	r2, [pc, #328]	; (80078a0 <HAL_DMA_Abort_IT+0x444>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d04f      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a50      	ldr	r2, [pc, #320]	; (80078a4 <HAL_DMA_Abort_IT+0x448>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d04a      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a4f      	ldr	r2, [pc, #316]	; (80078a8 <HAL_DMA_Abort_IT+0x44c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d045      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a4d      	ldr	r2, [pc, #308]	; (80078ac <HAL_DMA_Abort_IT+0x450>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d040      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a4c      	ldr	r2, [pc, #304]	; (80078b0 <HAL_DMA_Abort_IT+0x454>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d03b      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a4a      	ldr	r2, [pc, #296]	; (80078b4 <HAL_DMA_Abort_IT+0x458>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d036      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a49      	ldr	r2, [pc, #292]	; (80078b8 <HAL_DMA_Abort_IT+0x45c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d031      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a47      	ldr	r2, [pc, #284]	; (80078bc <HAL_DMA_Abort_IT+0x460>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d02c      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a46      	ldr	r2, [pc, #280]	; (80078c0 <HAL_DMA_Abort_IT+0x464>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d027      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a44      	ldr	r2, [pc, #272]	; (80078c4 <HAL_DMA_Abort_IT+0x468>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a43      	ldr	r2, [pc, #268]	; (80078c8 <HAL_DMA_Abort_IT+0x46c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d01d      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a41      	ldr	r2, [pc, #260]	; (80078cc <HAL_DMA_Abort_IT+0x470>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a40      	ldr	r2, [pc, #256]	; (80078d0 <HAL_DMA_Abort_IT+0x474>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a3e      	ldr	r2, [pc, #248]	; (80078d4 <HAL_DMA_Abort_IT+0x478>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <HAL_DMA_Abort_IT+0x47c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3b      	ldr	r2, [pc, #236]	; (80078dc <HAL_DMA_Abort_IT+0x480>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_DMA_Abort_IT+0x3a0>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3a      	ldr	r2, [pc, #232]	; (80078e0 <HAL_DMA_Abort_IT+0x484>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d101      	bne.n	8007800 <HAL_DMA_Abort_IT+0x3a4>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <HAL_DMA_Abort_IT+0x3a6>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d028      	beq.n	8007858 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007814:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2201      	movs	r2, #1
 8007826:	409a      	lsls	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007834:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00c      	beq.n	8007858 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800784c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007856:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40020010 	.word	0x40020010
 8007888:	40020028 	.word	0x40020028
 800788c:	40020040 	.word	0x40020040
 8007890:	40020058 	.word	0x40020058
 8007894:	40020070 	.word	0x40020070
 8007898:	40020088 	.word	0x40020088
 800789c:	400200a0 	.word	0x400200a0
 80078a0:	400200b8 	.word	0x400200b8
 80078a4:	40020410 	.word	0x40020410
 80078a8:	40020428 	.word	0x40020428
 80078ac:	40020440 	.word	0x40020440
 80078b0:	40020458 	.word	0x40020458
 80078b4:	40020470 	.word	0x40020470
 80078b8:	40020488 	.word	0x40020488
 80078bc:	400204a0 	.word	0x400204a0
 80078c0:	400204b8 	.word	0x400204b8
 80078c4:	58025408 	.word	0x58025408
 80078c8:	5802541c 	.word	0x5802541c
 80078cc:	58025430 	.word	0x58025430
 80078d0:	58025444 	.word	0x58025444
 80078d4:	58025458 	.word	0x58025458
 80078d8:	5802546c 	.word	0x5802546c
 80078dc:	58025480 	.word	0x58025480
 80078e0:	58025494 	.word	0x58025494

080078e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078f0:	4b67      	ldr	r3, [pc, #412]	; (8007a90 <HAL_DMA_IRQHandler+0x1ac>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a67      	ldr	r2, [pc, #412]	; (8007a94 <HAL_DMA_IRQHandler+0x1b0>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	0a9b      	lsrs	r3, r3, #10
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007902:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a5f      	ldr	r2, [pc, #380]	; (8007a98 <HAL_DMA_IRQHandler+0x1b4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d04a      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a5d      	ldr	r2, [pc, #372]	; (8007a9c <HAL_DMA_IRQHandler+0x1b8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d045      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a5c      	ldr	r2, [pc, #368]	; (8007aa0 <HAL_DMA_IRQHandler+0x1bc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d040      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a5a      	ldr	r2, [pc, #360]	; (8007aa4 <HAL_DMA_IRQHandler+0x1c0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d03b      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a59      	ldr	r2, [pc, #356]	; (8007aa8 <HAL_DMA_IRQHandler+0x1c4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d036      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a57      	ldr	r2, [pc, #348]	; (8007aac <HAL_DMA_IRQHandler+0x1c8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d031      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a56      	ldr	r2, [pc, #344]	; (8007ab0 <HAL_DMA_IRQHandler+0x1cc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d02c      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a54      	ldr	r2, [pc, #336]	; (8007ab4 <HAL_DMA_IRQHandler+0x1d0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d027      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a53      	ldr	r2, [pc, #332]	; (8007ab8 <HAL_DMA_IRQHandler+0x1d4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d022      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a51      	ldr	r2, [pc, #324]	; (8007abc <HAL_DMA_IRQHandler+0x1d8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01d      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a50      	ldr	r2, [pc, #320]	; (8007ac0 <HAL_DMA_IRQHandler+0x1dc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d018      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a4e      	ldr	r2, [pc, #312]	; (8007ac4 <HAL_DMA_IRQHandler+0x1e0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d013      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a4d      	ldr	r2, [pc, #308]	; (8007ac8 <HAL_DMA_IRQHandler+0x1e4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00e      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a4b      	ldr	r2, [pc, #300]	; (8007acc <HAL_DMA_IRQHandler+0x1e8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d009      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a4a      	ldr	r2, [pc, #296]	; (8007ad0 <HAL_DMA_IRQHandler+0x1ec>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d004      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xd2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a48      	ldr	r2, [pc, #288]	; (8007ad4 <HAL_DMA_IRQHandler+0x1f0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d101      	bne.n	80079ba <HAL_DMA_IRQHandler+0xd6>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <HAL_DMA_IRQHandler+0xd8>
 80079ba:	2300      	movs	r3, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 842b 	beq.w	8008218 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2208      	movs	r2, #8
 80079cc:	409a      	lsls	r2, r3
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80a2 	beq.w	8007b1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2e      	ldr	r2, [pc, #184]	; (8007a98 <HAL_DMA_IRQHandler+0x1b4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d04a      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2d      	ldr	r2, [pc, #180]	; (8007a9c <HAL_DMA_IRQHandler+0x1b8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d045      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a2b      	ldr	r2, [pc, #172]	; (8007aa0 <HAL_DMA_IRQHandler+0x1bc>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d040      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <HAL_DMA_IRQHandler+0x1c0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d03b      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a28      	ldr	r2, [pc, #160]	; (8007aa8 <HAL_DMA_IRQHandler+0x1c4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d036      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a27      	ldr	r2, [pc, #156]	; (8007aac <HAL_DMA_IRQHandler+0x1c8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d031      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <HAL_DMA_IRQHandler+0x1cc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02c      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <HAL_DMA_IRQHandler+0x1d0>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d027      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <HAL_DMA_IRQHandler+0x1d4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d022      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a21      	ldr	r2, [pc, #132]	; (8007abc <HAL_DMA_IRQHandler+0x1d8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d01d      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_DMA_IRQHandler+0x1dc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d018      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <HAL_DMA_IRQHandler+0x1e0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <HAL_DMA_IRQHandler+0x1e4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00e      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <HAL_DMA_IRQHandler+0x1e8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d009      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_DMA_IRQHandler+0x1ec>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d004      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x194>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_DMA_IRQHandler+0x1f0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d12f      	bne.n	8007ad8 <HAL_DMA_IRQHandler+0x1f4>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	e02e      	b.n	8007aec <HAL_DMA_IRQHandler+0x208>
 8007a8e:	bf00      	nop
 8007a90:	20000000 	.word	0x20000000
 8007a94:	1b4e81b5 	.word	0x1b4e81b5
 8007a98:	40020010 	.word	0x40020010
 8007a9c:	40020028 	.word	0x40020028
 8007aa0:	40020040 	.word	0x40020040
 8007aa4:	40020058 	.word	0x40020058
 8007aa8:	40020070 	.word	0x40020070
 8007aac:	40020088 	.word	0x40020088
 8007ab0:	400200a0 	.word	0x400200a0
 8007ab4:	400200b8 	.word	0x400200b8
 8007ab8:	40020410 	.word	0x40020410
 8007abc:	40020428 	.word	0x40020428
 8007ac0:	40020440 	.word	0x40020440
 8007ac4:	40020458 	.word	0x40020458
 8007ac8:	40020470 	.word	0x40020470
 8007acc:	40020488 	.word	0x40020488
 8007ad0:	400204a0 	.word	0x400204a0
 8007ad4:	400204b8 	.word	0x400204b8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d015      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0204 	bic.w	r2, r2, #4
 8007afe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	2208      	movs	r2, #8
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b14:	f043 0201 	orr.w	r2, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d06e      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a69      	ldr	r2, [pc, #420]	; (8007cdc <HAL_DMA_IRQHandler+0x3f8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d04a      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a67      	ldr	r2, [pc, #412]	; (8007ce0 <HAL_DMA_IRQHandler+0x3fc>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d045      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a66      	ldr	r2, [pc, #408]	; (8007ce4 <HAL_DMA_IRQHandler+0x400>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d040      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a64      	ldr	r2, [pc, #400]	; (8007ce8 <HAL_DMA_IRQHandler+0x404>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d03b      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a63      	ldr	r2, [pc, #396]	; (8007cec <HAL_DMA_IRQHandler+0x408>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d036      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a61      	ldr	r2, [pc, #388]	; (8007cf0 <HAL_DMA_IRQHandler+0x40c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d031      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a60      	ldr	r2, [pc, #384]	; (8007cf4 <HAL_DMA_IRQHandler+0x410>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d02c      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a5e      	ldr	r2, [pc, #376]	; (8007cf8 <HAL_DMA_IRQHandler+0x414>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d027      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a5d      	ldr	r2, [pc, #372]	; (8007cfc <HAL_DMA_IRQHandler+0x418>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d022      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a5b      	ldr	r2, [pc, #364]	; (8007d00 <HAL_DMA_IRQHandler+0x41c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a5a      	ldr	r2, [pc, #360]	; (8007d04 <HAL_DMA_IRQHandler+0x420>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d018      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a58      	ldr	r2, [pc, #352]	; (8007d08 <HAL_DMA_IRQHandler+0x424>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a57      	ldr	r2, [pc, #348]	; (8007d0c <HAL_DMA_IRQHandler+0x428>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a55      	ldr	r2, [pc, #340]	; (8007d10 <HAL_DMA_IRQHandler+0x42c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d009      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a54      	ldr	r2, [pc, #336]	; (8007d14 <HAL_DMA_IRQHandler+0x430>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d004      	beq.n	8007bd2 <HAL_DMA_IRQHandler+0x2ee>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a52      	ldr	r2, [pc, #328]	; (8007d18 <HAL_DMA_IRQHandler+0x434>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d10a      	bne.n	8007be8 <HAL_DMA_IRQHandler+0x304>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf14      	ite	ne
 8007be0:	2301      	movne	r3, #1
 8007be2:	2300      	moveq	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	e003      	b.n	8007bf0 <HAL_DMA_IRQHandler+0x30c>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00d      	beq.n	8007c10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	409a      	lsls	r2, r3
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	f043 0202 	orr.w	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	2204      	movs	r2, #4
 8007c1a:	409a      	lsls	r2, r3
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 808f 	beq.w	8007d44 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a2c      	ldr	r2, [pc, #176]	; (8007cdc <HAL_DMA_IRQHandler+0x3f8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d04a      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2a      	ldr	r2, [pc, #168]	; (8007ce0 <HAL_DMA_IRQHandler+0x3fc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d045      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a29      	ldr	r2, [pc, #164]	; (8007ce4 <HAL_DMA_IRQHandler+0x400>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d040      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <HAL_DMA_IRQHandler+0x404>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d03b      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a26      	ldr	r2, [pc, #152]	; (8007cec <HAL_DMA_IRQHandler+0x408>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d036      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a24      	ldr	r2, [pc, #144]	; (8007cf0 <HAL_DMA_IRQHandler+0x40c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d031      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a23      	ldr	r2, [pc, #140]	; (8007cf4 <HAL_DMA_IRQHandler+0x410>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d02c      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a21      	ldr	r2, [pc, #132]	; (8007cf8 <HAL_DMA_IRQHandler+0x414>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d027      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a20      	ldr	r2, [pc, #128]	; (8007cfc <HAL_DMA_IRQHandler+0x418>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d022      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <HAL_DMA_IRQHandler+0x41c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d01d      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <HAL_DMA_IRQHandler+0x420>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <HAL_DMA_IRQHandler+0x424>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <HAL_DMA_IRQHandler+0x428>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a18      	ldr	r2, [pc, #96]	; (8007d10 <HAL_DMA_IRQHandler+0x42c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <HAL_DMA_IRQHandler+0x430>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_DMA_IRQHandler+0x3e2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a15      	ldr	r2, [pc, #84]	; (8007d18 <HAL_DMA_IRQHandler+0x434>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d12a      	bne.n	8007d1c <HAL_DMA_IRQHandler+0x438>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf14      	ite	ne
 8007cd4:	2301      	movne	r3, #1
 8007cd6:	2300      	moveq	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e023      	b.n	8007d24 <HAL_DMA_IRQHandler+0x440>
 8007cdc:	40020010 	.word	0x40020010
 8007ce0:	40020028 	.word	0x40020028
 8007ce4:	40020040 	.word	0x40020040
 8007ce8:	40020058 	.word	0x40020058
 8007cec:	40020070 	.word	0x40020070
 8007cf0:	40020088 	.word	0x40020088
 8007cf4:	400200a0 	.word	0x400200a0
 8007cf8:	400200b8 	.word	0x400200b8
 8007cfc:	40020410 	.word	0x40020410
 8007d00:	40020428 	.word	0x40020428
 8007d04:	40020440 	.word	0x40020440
 8007d08:	40020458 	.word	0x40020458
 8007d0c:	40020470 	.word	0x40020470
 8007d10:	40020488 	.word	0x40020488
 8007d14:	400204a0 	.word	0x400204a0
 8007d18:	400204b8 	.word	0x400204b8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	2204      	movs	r2, #4
 8007d32:	409a      	lsls	r2, r3
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	f043 0204 	orr.w	r2, r3, #4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80a6 	beq.w	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a85      	ldr	r2, [pc, #532]	; (8007f74 <HAL_DMA_IRQHandler+0x690>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d04a      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a83      	ldr	r2, [pc, #524]	; (8007f78 <HAL_DMA_IRQHandler+0x694>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d045      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a82      	ldr	r2, [pc, #520]	; (8007f7c <HAL_DMA_IRQHandler+0x698>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d040      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a80      	ldr	r2, [pc, #512]	; (8007f80 <HAL_DMA_IRQHandler+0x69c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d03b      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a7f      	ldr	r2, [pc, #508]	; (8007f84 <HAL_DMA_IRQHandler+0x6a0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d036      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a7d      	ldr	r2, [pc, #500]	; (8007f88 <HAL_DMA_IRQHandler+0x6a4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d031      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a7c      	ldr	r2, [pc, #496]	; (8007f8c <HAL_DMA_IRQHandler+0x6a8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d02c      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a7a      	ldr	r2, [pc, #488]	; (8007f90 <HAL_DMA_IRQHandler+0x6ac>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d027      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a79      	ldr	r2, [pc, #484]	; (8007f94 <HAL_DMA_IRQHandler+0x6b0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a77      	ldr	r2, [pc, #476]	; (8007f98 <HAL_DMA_IRQHandler+0x6b4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01d      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a76      	ldr	r2, [pc, #472]	; (8007f9c <HAL_DMA_IRQHandler+0x6b8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a74      	ldr	r2, [pc, #464]	; (8007fa0 <HAL_DMA_IRQHandler+0x6bc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a73      	ldr	r2, [pc, #460]	; (8007fa4 <HAL_DMA_IRQHandler+0x6c0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a71      	ldr	r2, [pc, #452]	; (8007fa8 <HAL_DMA_IRQHandler+0x6c4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a70      	ldr	r2, [pc, #448]	; (8007fac <HAL_DMA_IRQHandler+0x6c8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x516>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a6e      	ldr	r2, [pc, #440]	; (8007fb0 <HAL_DMA_IRQHandler+0x6cc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d10a      	bne.n	8007e10 <HAL_DMA_IRQHandler+0x52c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bf14      	ite	ne
 8007e08:	2301      	movne	r3, #1
 8007e0a:	2300      	moveq	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	e009      	b.n	8007e24 <HAL_DMA_IRQHandler+0x540>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d03e      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2c:	f003 031f 	and.w	r3, r3, #31
 8007e30:	2210      	movs	r2, #16
 8007e32:	409a      	lsls	r2, r3
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d018      	beq.n	8007e78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d024      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	e01f      	b.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01b      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
 8007e76:	e016      	b.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d107      	bne.n	8007e96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0208 	bic.w	r2, r2, #8
 8007e94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2220      	movs	r2, #32
 8007eb0:	409a      	lsls	r2, r3
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8110 	beq.w	80080dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2c      	ldr	r2, [pc, #176]	; (8007f74 <HAL_DMA_IRQHandler+0x690>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d04a      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a2b      	ldr	r2, [pc, #172]	; (8007f78 <HAL_DMA_IRQHandler+0x694>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d045      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a29      	ldr	r2, [pc, #164]	; (8007f7c <HAL_DMA_IRQHandler+0x698>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d040      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a28      	ldr	r2, [pc, #160]	; (8007f80 <HAL_DMA_IRQHandler+0x69c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d03b      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a26      	ldr	r2, [pc, #152]	; (8007f84 <HAL_DMA_IRQHandler+0x6a0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d036      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a25      	ldr	r2, [pc, #148]	; (8007f88 <HAL_DMA_IRQHandler+0x6a4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d031      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a23      	ldr	r2, [pc, #140]	; (8007f8c <HAL_DMA_IRQHandler+0x6a8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d02c      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a22      	ldr	r2, [pc, #136]	; (8007f90 <HAL_DMA_IRQHandler+0x6ac>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d027      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a20      	ldr	r2, [pc, #128]	; (8007f94 <HAL_DMA_IRQHandler+0x6b0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d022      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1f      	ldr	r2, [pc, #124]	; (8007f98 <HAL_DMA_IRQHandler+0x6b4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d01d      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1d      	ldr	r2, [pc, #116]	; (8007f9c <HAL_DMA_IRQHandler+0x6b8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d018      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_DMA_IRQHandler+0x6bc>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d013      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <HAL_DMA_IRQHandler+0x6c0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00e      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <HAL_DMA_IRQHandler+0x6c4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a17      	ldr	r2, [pc, #92]	; (8007fac <HAL_DMA_IRQHandler+0x6c8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d004      	beq.n	8007f5c <HAL_DMA_IRQHandler+0x678>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <HAL_DMA_IRQHandler+0x6cc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d12b      	bne.n	8007fb4 <HAL_DMA_IRQHandler+0x6d0>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bf14      	ite	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	2300      	moveq	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	e02a      	b.n	8007fc8 <HAL_DMA_IRQHandler+0x6e4>
 8007f72:	bf00      	nop
 8007f74:	40020010 	.word	0x40020010
 8007f78:	40020028 	.word	0x40020028
 8007f7c:	40020040 	.word	0x40020040
 8007f80:	40020058 	.word	0x40020058
 8007f84:	40020070 	.word	0x40020070
 8007f88:	40020088 	.word	0x40020088
 8007f8c:	400200a0 	.word	0x400200a0
 8007f90:	400200b8 	.word	0x400200b8
 8007f94:	40020410 	.word	0x40020410
 8007f98:	40020428 	.word	0x40020428
 8007f9c:	40020440 	.word	0x40020440
 8007fa0:	40020458 	.word	0x40020458
 8007fa4:	40020470 	.word	0x40020470
 8007fa8:	40020488 	.word	0x40020488
 8007fac:	400204a0 	.word	0x400204a0
 8007fb0:	400204b8 	.word	0x400204b8
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8087 	beq.w	80080dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd2:	f003 031f 	and.w	r3, r3, #31
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	409a      	lsls	r2, r3
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d139      	bne.n	800805e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0216 	bic.w	r2, r2, #22
 8007ff8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008008:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <HAL_DMA_IRQHandler+0x736>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0208 	bic.w	r2, r2, #8
 8008028:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	223f      	movs	r2, #63	; 0x3f
 8008034:	409a      	lsls	r2, r3
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 834a 	beq.w	80086e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
          }
          return;
 800805c:	e344      	b.n	80086e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d018      	beq.n	800809e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d108      	bne.n	800808c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02c      	beq.n	80080dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	e027      	b.n	80080dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d023      	beq.n	80080dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
 800809c:	e01e      	b.n	80080dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0210 	bic.w	r2, r2, #16
 80080ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8306 	beq.w	80086f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 8088 	beq.w	8008204 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2204      	movs	r2, #4
 80080f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a7a      	ldr	r2, [pc, #488]	; (80082ec <HAL_DMA_IRQHandler+0xa08>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d04a      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a79      	ldr	r2, [pc, #484]	; (80082f0 <HAL_DMA_IRQHandler+0xa0c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d045      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a77      	ldr	r2, [pc, #476]	; (80082f4 <HAL_DMA_IRQHandler+0xa10>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d040      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a76      	ldr	r2, [pc, #472]	; (80082f8 <HAL_DMA_IRQHandler+0xa14>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d03b      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a74      	ldr	r2, [pc, #464]	; (80082fc <HAL_DMA_IRQHandler+0xa18>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d036      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a73      	ldr	r2, [pc, #460]	; (8008300 <HAL_DMA_IRQHandler+0xa1c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d031      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a71      	ldr	r2, [pc, #452]	; (8008304 <HAL_DMA_IRQHandler+0xa20>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d02c      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a70      	ldr	r2, [pc, #448]	; (8008308 <HAL_DMA_IRQHandler+0xa24>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d027      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a6e      	ldr	r2, [pc, #440]	; (800830c <HAL_DMA_IRQHandler+0xa28>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d022      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a6d      	ldr	r2, [pc, #436]	; (8008310 <HAL_DMA_IRQHandler+0xa2c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d01d      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a6b      	ldr	r2, [pc, #428]	; (8008314 <HAL_DMA_IRQHandler+0xa30>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d018      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a6a      	ldr	r2, [pc, #424]	; (8008318 <HAL_DMA_IRQHandler+0xa34>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a68      	ldr	r2, [pc, #416]	; (800831c <HAL_DMA_IRQHandler+0xa38>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00e      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a67      	ldr	r2, [pc, #412]	; (8008320 <HAL_DMA_IRQHandler+0xa3c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a65      	ldr	r2, [pc, #404]	; (8008324 <HAL_DMA_IRQHandler+0xa40>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_DMA_IRQHandler+0x8b8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a64      	ldr	r2, [pc, #400]	; (8008328 <HAL_DMA_IRQHandler+0xa44>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d108      	bne.n	80081ae <HAL_DMA_IRQHandler+0x8ca>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e007      	b.n	80081be <HAL_DMA_IRQHandler+0x8da>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0201 	bic.w	r2, r2, #1
 80081bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d307      	bcc.n	80081da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1f2      	bne.n	80081be <HAL_DMA_IRQHandler+0x8da>
 80081d8:	e000      	b.n	80081dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d004      	beq.n	80081f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2203      	movs	r2, #3
 80081ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80081f2:	e003      	b.n	80081fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8272 	beq.w	80086f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
 8008216:	e26c      	b.n	80086f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a43      	ldr	r2, [pc, #268]	; (800832c <HAL_DMA_IRQHandler+0xa48>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d022      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a42      	ldr	r2, [pc, #264]	; (8008330 <HAL_DMA_IRQHandler+0xa4c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d01d      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a40      	ldr	r2, [pc, #256]	; (8008334 <HAL_DMA_IRQHandler+0xa50>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d018      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a3f      	ldr	r2, [pc, #252]	; (8008338 <HAL_DMA_IRQHandler+0xa54>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a3d      	ldr	r2, [pc, #244]	; (800833c <HAL_DMA_IRQHandler+0xa58>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00e      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a3c      	ldr	r2, [pc, #240]	; (8008340 <HAL_DMA_IRQHandler+0xa5c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d009      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a3a      	ldr	r2, [pc, #232]	; (8008344 <HAL_DMA_IRQHandler+0xa60>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_DMA_IRQHandler+0x984>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a39      	ldr	r2, [pc, #228]	; (8008348 <HAL_DMA_IRQHandler+0xa64>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d101      	bne.n	800826c <HAL_DMA_IRQHandler+0x988>
 8008268:	2301      	movs	r3, #1
 800826a:	e000      	b.n	800826e <HAL_DMA_IRQHandler+0x98a>
 800826c:	2300      	movs	r3, #0
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 823f 	beq.w	80086f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2204      	movs	r2, #4
 8008286:	409a      	lsls	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80cd 	beq.w	800842c <HAL_DMA_IRQHandler+0xb48>
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80c7 	beq.w	800842c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2204      	movs	r2, #4
 80082a8:	409a      	lsls	r2, r3
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d049      	beq.n	800834c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8210 	beq.w	80086ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082d4:	e20a      	b.n	80086ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 8206 	beq.w	80086ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e8:	e200      	b.n	80086ec <HAL_DMA_IRQHandler+0xe08>
 80082ea:	bf00      	nop
 80082ec:	40020010 	.word	0x40020010
 80082f0:	40020028 	.word	0x40020028
 80082f4:	40020040 	.word	0x40020040
 80082f8:	40020058 	.word	0x40020058
 80082fc:	40020070 	.word	0x40020070
 8008300:	40020088 	.word	0x40020088
 8008304:	400200a0 	.word	0x400200a0
 8008308:	400200b8 	.word	0x400200b8
 800830c:	40020410 	.word	0x40020410
 8008310:	40020428 	.word	0x40020428
 8008314:	40020440 	.word	0x40020440
 8008318:	40020458 	.word	0x40020458
 800831c:	40020470 	.word	0x40020470
 8008320:	40020488 	.word	0x40020488
 8008324:	400204a0 	.word	0x400204a0
 8008328:	400204b8 	.word	0x400204b8
 800832c:	58025408 	.word	0x58025408
 8008330:	5802541c 	.word	0x5802541c
 8008334:	58025430 	.word	0x58025430
 8008338:	58025444 	.word	0x58025444
 800833c:	58025458 	.word	0x58025458
 8008340:	5802546c 	.word	0x5802546c
 8008344:	58025480 	.word	0x58025480
 8008348:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d160      	bne.n	8008418 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a8c      	ldr	r2, [pc, #560]	; (800858c <HAL_DMA_IRQHandler+0xca8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d04a      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a8a      	ldr	r2, [pc, #552]	; (8008590 <HAL_DMA_IRQHandler+0xcac>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d045      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a89      	ldr	r2, [pc, #548]	; (8008594 <HAL_DMA_IRQHandler+0xcb0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d040      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a87      	ldr	r2, [pc, #540]	; (8008598 <HAL_DMA_IRQHandler+0xcb4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d03b      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a86      	ldr	r2, [pc, #536]	; (800859c <HAL_DMA_IRQHandler+0xcb8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d036      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a84      	ldr	r2, [pc, #528]	; (80085a0 <HAL_DMA_IRQHandler+0xcbc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d031      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a83      	ldr	r2, [pc, #524]	; (80085a4 <HAL_DMA_IRQHandler+0xcc0>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d02c      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a81      	ldr	r2, [pc, #516]	; (80085a8 <HAL_DMA_IRQHandler+0xcc4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d027      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a80      	ldr	r2, [pc, #512]	; (80085ac <HAL_DMA_IRQHandler+0xcc8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d022      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a7e      	ldr	r2, [pc, #504]	; (80085b0 <HAL_DMA_IRQHandler+0xccc>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01d      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a7d      	ldr	r2, [pc, #500]	; (80085b4 <HAL_DMA_IRQHandler+0xcd0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d018      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a7b      	ldr	r2, [pc, #492]	; (80085b8 <HAL_DMA_IRQHandler+0xcd4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d013      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a7a      	ldr	r2, [pc, #488]	; (80085bc <HAL_DMA_IRQHandler+0xcd8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00e      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a78      	ldr	r2, [pc, #480]	; (80085c0 <HAL_DMA_IRQHandler+0xcdc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d009      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a77      	ldr	r2, [pc, #476]	; (80085c4 <HAL_DMA_IRQHandler+0xce0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d004      	beq.n	80083f6 <HAL_DMA_IRQHandler+0xb12>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a75      	ldr	r2, [pc, #468]	; (80085c8 <HAL_DMA_IRQHandler+0xce4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d108      	bne.n	8008408 <HAL_DMA_IRQHandler+0xb24>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0208 	bic.w	r2, r2, #8
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e007      	b.n	8008418 <HAL_DMA_IRQHandler+0xb34>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8165 	beq.w	80086ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800842a:	e15f      	b.n	80086ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	2202      	movs	r2, #2
 8008436:	409a      	lsls	r2, r3
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 80c5 	beq.w	80085cc <HAL_DMA_IRQHandler+0xce8>
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80bf 	beq.w	80085cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	2202      	movs	r2, #2
 8008458:	409a      	lsls	r2, r3
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d018      	beq.n	800849a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 813a 	beq.w	80086f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008484:	e134      	b.n	80086f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 8130 	beq.w	80086f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008498:	e12a      	b.n	80086f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d168      	bne.n	8008576 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a38      	ldr	r2, [pc, #224]	; (800858c <HAL_DMA_IRQHandler+0xca8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d04a      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a37      	ldr	r2, [pc, #220]	; (8008590 <HAL_DMA_IRQHandler+0xcac>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d045      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a35      	ldr	r2, [pc, #212]	; (8008594 <HAL_DMA_IRQHandler+0xcb0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d040      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a34      	ldr	r2, [pc, #208]	; (8008598 <HAL_DMA_IRQHandler+0xcb4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d03b      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a32      	ldr	r2, [pc, #200]	; (800859c <HAL_DMA_IRQHandler+0xcb8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d036      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a31      	ldr	r2, [pc, #196]	; (80085a0 <HAL_DMA_IRQHandler+0xcbc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d031      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2f      	ldr	r2, [pc, #188]	; (80085a4 <HAL_DMA_IRQHandler+0xcc0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02c      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a2e      	ldr	r2, [pc, #184]	; (80085a8 <HAL_DMA_IRQHandler+0xcc4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d027      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a2c      	ldr	r2, [pc, #176]	; (80085ac <HAL_DMA_IRQHandler+0xcc8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <HAL_DMA_IRQHandler+0xccc>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01d      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <HAL_DMA_IRQHandler+0xcd0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a28      	ldr	r2, [pc, #160]	; (80085b8 <HAL_DMA_IRQHandler+0xcd4>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a26      	ldr	r2, [pc, #152]	; (80085bc <HAL_DMA_IRQHandler+0xcd8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a25      	ldr	r2, [pc, #148]	; (80085c0 <HAL_DMA_IRQHandler+0xcdc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a23      	ldr	r2, [pc, #140]	; (80085c4 <HAL_DMA_IRQHandler+0xce0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_DMA_IRQHandler+0xc60>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a22      	ldr	r2, [pc, #136]	; (80085c8 <HAL_DMA_IRQHandler+0xce4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <HAL_DMA_IRQHandler+0xc72>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0214 	bic.w	r2, r2, #20
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e007      	b.n	8008566 <HAL_DMA_IRQHandler+0xc82>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 020a 	bic.w	r2, r2, #10
 8008564:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 80b8 	beq.w	80086f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008588:	e0b2      	b.n	80086f0 <HAL_DMA_IRQHandler+0xe0c>
 800858a:	bf00      	nop
 800858c:	40020010 	.word	0x40020010
 8008590:	40020028 	.word	0x40020028
 8008594:	40020040 	.word	0x40020040
 8008598:	40020058 	.word	0x40020058
 800859c:	40020070 	.word	0x40020070
 80085a0:	40020088 	.word	0x40020088
 80085a4:	400200a0 	.word	0x400200a0
 80085a8:	400200b8 	.word	0x400200b8
 80085ac:	40020410 	.word	0x40020410
 80085b0:	40020428 	.word	0x40020428
 80085b4:	40020440 	.word	0x40020440
 80085b8:	40020458 	.word	0x40020458
 80085bc:	40020470 	.word	0x40020470
 80085c0:	40020488 	.word	0x40020488
 80085c4:	400204a0 	.word	0x400204a0
 80085c8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d0:	f003 031f 	and.w	r3, r3, #31
 80085d4:	2208      	movs	r2, #8
 80085d6:	409a      	lsls	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8088 	beq.w	80086f2 <HAL_DMA_IRQHandler+0xe0e>
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8082 	beq.w	80086f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a41      	ldr	r2, [pc, #260]	; (80086f8 <HAL_DMA_IRQHandler+0xe14>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d04a      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a3f      	ldr	r2, [pc, #252]	; (80086fc <HAL_DMA_IRQHandler+0xe18>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d045      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a3e      	ldr	r2, [pc, #248]	; (8008700 <HAL_DMA_IRQHandler+0xe1c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d040      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a3c      	ldr	r2, [pc, #240]	; (8008704 <HAL_DMA_IRQHandler+0xe20>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d03b      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a3b      	ldr	r2, [pc, #236]	; (8008708 <HAL_DMA_IRQHandler+0xe24>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d036      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a39      	ldr	r2, [pc, #228]	; (800870c <HAL_DMA_IRQHandler+0xe28>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d031      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a38      	ldr	r2, [pc, #224]	; (8008710 <HAL_DMA_IRQHandler+0xe2c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d02c      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a36      	ldr	r2, [pc, #216]	; (8008714 <HAL_DMA_IRQHandler+0xe30>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d027      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a35      	ldr	r2, [pc, #212]	; (8008718 <HAL_DMA_IRQHandler+0xe34>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d022      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a33      	ldr	r2, [pc, #204]	; (800871c <HAL_DMA_IRQHandler+0xe38>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01d      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a32      	ldr	r2, [pc, #200]	; (8008720 <HAL_DMA_IRQHandler+0xe3c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d018      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a30      	ldr	r2, [pc, #192]	; (8008724 <HAL_DMA_IRQHandler+0xe40>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a2f      	ldr	r2, [pc, #188]	; (8008728 <HAL_DMA_IRQHandler+0xe44>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d00e      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a2d      	ldr	r2, [pc, #180]	; (800872c <HAL_DMA_IRQHandler+0xe48>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d009      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <HAL_DMA_IRQHandler+0xe4c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d004      	beq.n	800868e <HAL_DMA_IRQHandler+0xdaa>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <HAL_DMA_IRQHandler+0xe50>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d108      	bne.n	80086a0 <HAL_DMA_IRQHandler+0xdbc>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 021c 	bic.w	r2, r2, #28
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e007      	b.n	80086b0 <HAL_DMA_IRQHandler+0xdcc>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 020e 	bic.w	r2, r2, #14
 80086ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	2201      	movs	r2, #1
 80086ba:	409a      	lsls	r2, r3
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	e004      	b.n	80086f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086e8:	bf00      	nop
 80086ea:	e002      	b.n	80086f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086ec:	bf00      	nop
 80086ee:	e000      	b.n	80086f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086f2:	3728      	adds	r7, #40	; 0x28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40020010 	.word	0x40020010
 80086fc:	40020028 	.word	0x40020028
 8008700:	40020040 	.word	0x40020040
 8008704:	40020058 	.word	0x40020058
 8008708:	40020070 	.word	0x40020070
 800870c:	40020088 	.word	0x40020088
 8008710:	400200a0 	.word	0x400200a0
 8008714:	400200b8 	.word	0x400200b8
 8008718:	40020410 	.word	0x40020410
 800871c:	40020428 	.word	0x40020428
 8008720:	40020440 	.word	0x40020440
 8008724:	40020458 	.word	0x40020458
 8008728:	40020470 	.word	0x40020470
 800872c:	40020488 	.word	0x40020488
 8008730:	400204a0 	.word	0x400204a0
 8008734:	400204b8 	.word	0x400204b8

08008738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a42      	ldr	r2, [pc, #264]	; (8008850 <DMA_CalcBaseAndBitshift+0x118>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d04a      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a41      	ldr	r2, [pc, #260]	; (8008854 <DMA_CalcBaseAndBitshift+0x11c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d045      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <DMA_CalcBaseAndBitshift+0x120>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d040      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a3e      	ldr	r2, [pc, #248]	; (800885c <DMA_CalcBaseAndBitshift+0x124>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d03b      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a3c      	ldr	r2, [pc, #240]	; (8008860 <DMA_CalcBaseAndBitshift+0x128>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d036      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a3b      	ldr	r2, [pc, #236]	; (8008864 <DMA_CalcBaseAndBitshift+0x12c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d031      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a39      	ldr	r2, [pc, #228]	; (8008868 <DMA_CalcBaseAndBitshift+0x130>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d02c      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a38      	ldr	r2, [pc, #224]	; (800886c <DMA_CalcBaseAndBitshift+0x134>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d027      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a36      	ldr	r2, [pc, #216]	; (8008870 <DMA_CalcBaseAndBitshift+0x138>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d022      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a35      	ldr	r2, [pc, #212]	; (8008874 <DMA_CalcBaseAndBitshift+0x13c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d01d      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a33      	ldr	r2, [pc, #204]	; (8008878 <DMA_CalcBaseAndBitshift+0x140>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d018      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a32      	ldr	r2, [pc, #200]	; (800887c <DMA_CalcBaseAndBitshift+0x144>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a30      	ldr	r2, [pc, #192]	; (8008880 <DMA_CalcBaseAndBitshift+0x148>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00e      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2f      	ldr	r2, [pc, #188]	; (8008884 <DMA_CalcBaseAndBitshift+0x14c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d009      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <DMA_CalcBaseAndBitshift+0x150>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <DMA_CalcBaseAndBitshift+0xa8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a2c      	ldr	r2, [pc, #176]	; (800888c <DMA_CalcBaseAndBitshift+0x154>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d101      	bne.n	80087e4 <DMA_CalcBaseAndBitshift+0xac>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e000      	b.n	80087e6 <DMA_CalcBaseAndBitshift+0xae>
 80087e4:	2300      	movs	r3, #0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d024      	beq.n	8008834 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	3b10      	subs	r3, #16
 80087f2:	4a27      	ldr	r2, [pc, #156]	; (8008890 <DMA_CalcBaseAndBitshift+0x158>)
 80087f4:	fba2 2303 	umull	r2, r3, r2, r3
 80087f8:	091b      	lsrs	r3, r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	4a24      	ldr	r2, [pc, #144]	; (8008894 <DMA_CalcBaseAndBitshift+0x15c>)
 8008804:	5cd3      	ldrb	r3, [r2, r3]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d908      	bls.n	8008824 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <DMA_CalcBaseAndBitshift+0x160>)
 800881a:	4013      	ands	r3, r2
 800881c:	1d1a      	adds	r2, r3, #4
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	659a      	str	r2, [r3, #88]	; 0x58
 8008822:	e00d      	b.n	8008840 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <DMA_CalcBaseAndBitshift+0x160>)
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6593      	str	r3, [r2, #88]	; 0x58
 8008832:	e005      	b.n	8008840 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	40020010 	.word	0x40020010
 8008854:	40020028 	.word	0x40020028
 8008858:	40020040 	.word	0x40020040
 800885c:	40020058 	.word	0x40020058
 8008860:	40020070 	.word	0x40020070
 8008864:	40020088 	.word	0x40020088
 8008868:	400200a0 	.word	0x400200a0
 800886c:	400200b8 	.word	0x400200b8
 8008870:	40020410 	.word	0x40020410
 8008874:	40020428 	.word	0x40020428
 8008878:	40020440 	.word	0x40020440
 800887c:	40020458 	.word	0x40020458
 8008880:	40020470 	.word	0x40020470
 8008884:	40020488 	.word	0x40020488
 8008888:	400204a0 	.word	0x400204a0
 800888c:	400204b8 	.word	0x400204b8
 8008890:	aaaaaaab 	.word	0xaaaaaaab
 8008894:	08011998 	.word	0x08011998
 8008898:	fffffc00 	.word	0xfffffc00

0800889c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d120      	bne.n	80088f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d858      	bhi.n	800896a <DMA_CheckFifoParam+0xce>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <DMA_CheckFifoParam+0x24>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088e3 	.word	0x080088e3
 80088c8:	080088d1 	.word	0x080088d1
 80088cc:	0800896b 	.word	0x0800896b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d048      	beq.n	800896e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088e0:	e045      	b.n	800896e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088ea:	d142      	bne.n	8008972 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088f0:	e03f      	b.n	8008972 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fa:	d123      	bne.n	8008944 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	2b03      	cmp	r3, #3
 8008902:	d838      	bhi.n	8008976 <DMA_CheckFifoParam+0xda>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <DMA_CheckFifoParam+0x70>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	0800891d 	.word	0x0800891d
 8008910:	08008923 	.word	0x08008923
 8008914:	0800891d 	.word	0x0800891d
 8008918:	08008935 	.word	0x08008935
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
        break;
 8008920:	e030      	b.n	8008984 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d025      	beq.n	800897a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008932:	e022      	b.n	800897a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800893c:	d11f      	bne.n	800897e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008942:	e01c      	b.n	800897e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	2b02      	cmp	r3, #2
 800894a:	d902      	bls.n	8008952 <DMA_CheckFifoParam+0xb6>
 800894c:	2b03      	cmp	r3, #3
 800894e:	d003      	beq.n	8008958 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008950:	e018      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]
        break;
 8008956:	e015      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00e      	beq.n	8008982 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	73fb      	strb	r3, [r7, #15]
    break;
 8008968:	e00b      	b.n	8008982 <DMA_CheckFifoParam+0xe6>
        break;
 800896a:	bf00      	nop
 800896c:	e00a      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        break;
 800896e:	bf00      	nop
 8008970:	e008      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        break;
 8008972:	bf00      	nop
 8008974:	e006      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        break;
 8008976:	bf00      	nop
 8008978:	e004      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        break;
 800897a:	bf00      	nop
 800897c:	e002      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
        break;
 800897e:	bf00      	nop
 8008980:	e000      	b.n	8008984 <DMA_CheckFifoParam+0xe8>
    break;
 8008982:	bf00      	nop
    }
  }

  return status;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a38      	ldr	r2, [pc, #224]	; (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d022      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a36      	ldr	r2, [pc, #216]	; (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d01d      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a35      	ldr	r2, [pc, #212]	; (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d018      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a33      	ldr	r2, [pc, #204]	; (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a32      	ldr	r2, [pc, #200]	; (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00e      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a30      	ldr	r2, [pc, #192]	; (8008a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d009      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a2f      	ldr	r2, [pc, #188]	; (8008aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d004      	beq.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a2d      	ldr	r2, [pc, #180]	; (8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d101      	bne.n	80089f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e000      	b.n	80089f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089f6:	2300      	movs	r3, #0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01a      	beq.n	8008a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	3b08      	subs	r3, #8
 8008a04:	4a28      	ldr	r2, [pc, #160]	; (8008aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	091b      	lsrs	r3, r3, #4
 8008a0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4b26      	ldr	r3, [pc, #152]	; (8008aac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a24      	ldr	r2, [pc, #144]	; (8008ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2201      	movs	r2, #1
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a30:	e024      	b.n	8008a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	3b10      	subs	r3, #16
 8008a3a:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a1c      	ldr	r2, [pc, #112]	; (8008ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d806      	bhi.n	8008a5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4a1b      	ldr	r2, [pc, #108]	; (8008abc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d902      	bls.n	8008a5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3308      	adds	r3, #8
 8008a58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4b18      	ldr	r3, [pc, #96]	; (8008ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a16      	ldr	r2, [pc, #88]	; (8008ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	2201      	movs	r2, #1
 8008a76:	409a      	lsls	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	58025408 	.word	0x58025408
 8008a8c:	5802541c 	.word	0x5802541c
 8008a90:	58025430 	.word	0x58025430
 8008a94:	58025444 	.word	0x58025444
 8008a98:	58025458 	.word	0x58025458
 8008a9c:	5802546c 	.word	0x5802546c
 8008aa0:	58025480 	.word	0x58025480
 8008aa4:	58025494 	.word	0x58025494
 8008aa8:	cccccccd 	.word	0xcccccccd
 8008aac:	16009600 	.word	0x16009600
 8008ab0:	58025880 	.word	0x58025880
 8008ab4:	aaaaaaab 	.word	0xaaaaaaab
 8008ab8:	400204b8 	.word	0x400204b8
 8008abc:	4002040f 	.word	0x4002040f
 8008ac0:	10008200 	.word	0x10008200
 8008ac4:	40020880 	.word	0x40020880

08008ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d04a      	beq.n	8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d847      	bhi.n	8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a25      	ldr	r2, [pc, #148]	; (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d022      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a24      	ldr	r2, [pc, #144]	; (8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d01d      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a22      	ldr	r2, [pc, #136]	; (8008b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d018      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d013      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00e      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1e      	ldr	r2, [pc, #120]	; (8008b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d009      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1c      	ldr	r2, [pc, #112]	; (8008b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1b      	ldr	r2, [pc, #108]	; (8008b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d101      	bne.n	8008b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b50:	671a      	str	r2, [r3, #112]	; 0x70
 8008b52:	e009      	b.n	8008b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4b14      	ldr	r3, [pc, #80]	; (8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a11      	ldr	r2, [pc, #68]	; (8008bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	409a      	lsls	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008b74:	bf00      	nop
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	58025408 	.word	0x58025408
 8008b84:	5802541c 	.word	0x5802541c
 8008b88:	58025430 	.word	0x58025430
 8008b8c:	58025444 	.word	0x58025444
 8008b90:	58025458 	.word	0x58025458
 8008b94:	5802546c 	.word	0x5802546c
 8008b98:	58025480 	.word	0x58025480
 8008b9c:	58025494 	.word	0x58025494
 8008ba0:	1600963f 	.word	0x1600963f
 8008ba4:	58025940 	.word	0x58025940
 8008ba8:	1000823f 	.word	0x1000823f
 8008bac:	40020940 	.word	0x40020940

08008bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bbe:	4b86      	ldr	r3, [pc, #536]	; (8008dd8 <HAL_GPIO_Init+0x228>)
 8008bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bc2:	e18c      	b.n	8008ede <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 817e 	beq.w	8008ed8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d005      	beq.n	8008bf4 <HAL_GPIO_Init+0x44>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d130      	bne.n	8008c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	2203      	movs	r2, #3
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	43db      	mvns	r3, r3
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	4013      	ands	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	43db      	mvns	r3, r3
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	4013      	ands	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	091b      	lsrs	r3, r3, #4
 8008c40:	f003 0201 	and.w	r2, r3, #1
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d017      	beq.n	8008c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	2203      	movs	r2, #3
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43db      	mvns	r3, r3
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	4013      	ands	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d123      	bne.n	8008ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	08da      	lsrs	r2, r3, #3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3208      	adds	r2, #8
 8008ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	220f      	movs	r2, #15
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691a      	ldr	r2, [r3, #16]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	08da      	lsrs	r2, r3, #3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3208      	adds	r2, #8
 8008ce0:	69b9      	ldr	r1, [r7, #24]
 8008ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f003 0203 	and.w	r2, r3, #3
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 80d8 	beq.w	8008ed8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d28:	4b2c      	ldr	r3, [pc, #176]	; (8008ddc <HAL_GPIO_Init+0x22c>)
 8008d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d2e:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <HAL_GPIO_Init+0x22c>)
 8008d30:	f043 0302 	orr.w	r3, r3, #2
 8008d34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d38:	4b28      	ldr	r3, [pc, #160]	; (8008ddc <HAL_GPIO_Init+0x22c>)
 8008d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d46:	4a26      	ldr	r2, [pc, #152]	; (8008de0 <HAL_GPIO_Init+0x230>)
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	089b      	lsrs	r3, r3, #2
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	220f      	movs	r2, #15
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	43db      	mvns	r3, r3
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	4013      	ands	r3, r2
 8008d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a1d      	ldr	r2, [pc, #116]	; (8008de4 <HAL_GPIO_Init+0x234>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d04a      	beq.n	8008e08 <HAL_GPIO_Init+0x258>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a1c      	ldr	r2, [pc, #112]	; (8008de8 <HAL_GPIO_Init+0x238>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d02b      	beq.n	8008dd2 <HAL_GPIO_Init+0x222>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a1b      	ldr	r2, [pc, #108]	; (8008dec <HAL_GPIO_Init+0x23c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d025      	beq.n	8008dce <HAL_GPIO_Init+0x21e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1a      	ldr	r2, [pc, #104]	; (8008df0 <HAL_GPIO_Init+0x240>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01f      	beq.n	8008dca <HAL_GPIO_Init+0x21a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a19      	ldr	r2, [pc, #100]	; (8008df4 <HAL_GPIO_Init+0x244>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d019      	beq.n	8008dc6 <HAL_GPIO_Init+0x216>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <HAL_GPIO_Init+0x248>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <HAL_GPIO_Init+0x212>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <HAL_GPIO_Init+0x24c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00d      	beq.n	8008dbe <HAL_GPIO_Init+0x20e>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a16      	ldr	r2, [pc, #88]	; (8008e00 <HAL_GPIO_Init+0x250>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d007      	beq.n	8008dba <HAL_GPIO_Init+0x20a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <HAL_GPIO_Init+0x254>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d101      	bne.n	8008db6 <HAL_GPIO_Init+0x206>
 8008db2:	2309      	movs	r3, #9
 8008db4:	e029      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008db6:	230a      	movs	r3, #10
 8008db8:	e027      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dba:	2307      	movs	r3, #7
 8008dbc:	e025      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dbe:	2306      	movs	r3, #6
 8008dc0:	e023      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dc2:	2305      	movs	r3, #5
 8008dc4:	e021      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	e01f      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e01d      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e01b      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e019      	b.n	8008e0a <HAL_GPIO_Init+0x25a>
 8008dd6:	bf00      	nop
 8008dd8:	58000080 	.word	0x58000080
 8008ddc:	58024400 	.word	0x58024400
 8008de0:	58000400 	.word	0x58000400
 8008de4:	58020000 	.word	0x58020000
 8008de8:	58020400 	.word	0x58020400
 8008dec:	58020800 	.word	0x58020800
 8008df0:	58020c00 	.word	0x58020c00
 8008df4:	58021000 	.word	0x58021000
 8008df8:	58021400 	.word	0x58021400
 8008dfc:	58021800 	.word	0x58021800
 8008e00:	58021c00 	.word	0x58021c00
 8008e04:	58022400 	.word	0x58022400
 8008e08:	2300      	movs	r3, #0
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	f002 0203 	and.w	r2, r2, #3
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	4093      	lsls	r3, r2
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e1a:	4938      	ldr	r1, [pc, #224]	; (8008efc <HAL_GPIO_Init+0x34c>)
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	089b      	lsrs	r3, r3, #2
 8008e20:	3302      	adds	r3, #2
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	43db      	mvns	r3, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4013      	ands	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	43db      	mvns	r3, r3
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	4013      	ands	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	4013      	ands	r3, r2
 8008e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	43db      	mvns	r3, r3
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	3301      	adds	r3, #1
 8008edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f47f ae6b 	bne.w	8008bc4 <HAL_GPIO_Init+0x14>
  }
}
 8008eee:	bf00      	nop
 8008ef0:	bf00      	nop
 8008ef2:	3724      	adds	r7, #36	; 0x24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	58000400 	.word	0x58000400

08008f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f10:	787b      	ldrb	r3, [r7, #1]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f16:	887a      	ldrh	r2, [r7, #2]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f1c:	e003      	b.n	8008f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f1e:	887b      	ldrh	r3, [r7, #2]
 8008f20:	041a      	lsls	r2, r3, #16
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	619a      	str	r2, [r3, #24]
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f44:	887a      	ldrh	r2, [r7, #2]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4013      	ands	r3, r2
 8008f4a:	041a      	lsls	r2, r3, #16
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	43d9      	mvns	r1, r3
 8008f50:	887b      	ldrh	r3, [r7, #2]
 8008f52:	400b      	ands	r3, r1
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	619a      	str	r2, [r3, #24]
}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e07f      	b.n	800907a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7f8 fc16 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2224      	movs	r2, #36	; 0x24
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d107      	bne.n	8008fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fde:	609a      	str	r2, [r3, #8]
 8008fe0:	e006      	b.n	8008ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d104      	bne.n	8009002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <HAL_I2C_Init+0x11c>)
 800900e:	430b      	orrs	r3, r1
 8009010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	69d9      	ldr	r1, [r3, #28]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1a      	ldr	r2, [r3, #32]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	02008000 	.word	0x02008000

08009088 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b20      	cmp	r3, #32
 800909c:	d138      	bne.n	8009110 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e032      	b.n	8009112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2224      	movs	r2, #36	; 0x24
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0201 	bic.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6819      	ldr	r1, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009110:	2302      	movs	r3, #2
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800911e:	b480      	push	{r7}
 8009120:	b085      	sub	sp, #20
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b20      	cmp	r3, #32
 8009132:	d139      	bne.n	80091a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800913a:	2b01      	cmp	r3, #1
 800913c:	d101      	bne.n	8009142 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800913e:	2302      	movs	r3, #2
 8009140:	e033      	b.n	80091aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2224      	movs	r2, #36	; 0x24
 800914e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009170:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e000      	b.n	80091aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80091a8:	2302      	movs	r3, #2
  }
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
	...

080091b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80091c0:	4b19      	ldr	r3, [pc, #100]	; (8009228 <HAL_PWREx_ConfigSupply+0x70>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d00a      	beq.n	80091e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80091cc:	4b16      	ldr	r3, [pc, #88]	; (8009228 <HAL_PWREx_ConfigSupply+0x70>)
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d001      	beq.n	80091de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e01f      	b.n	800921e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	e01d      	b.n	800921e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80091e2:	4b11      	ldr	r3, [pc, #68]	; (8009228 <HAL_PWREx_ConfigSupply+0x70>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f023 0207 	bic.w	r2, r3, #7
 80091ea:	490f      	ldr	r1, [pc, #60]	; (8009228 <HAL_PWREx_ConfigSupply+0x70>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80091f2:	f7fa ff5d 	bl	80040b0 <HAL_GetTick>
 80091f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80091f8:	e009      	b.n	800920e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80091fa:	f7fa ff59 	bl	80040b0 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009208:	d901      	bls.n	800920e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e007      	b.n	800921e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800920e:	4b06      	ldr	r3, [pc, #24]	; (8009228 <HAL_PWREx_ConfigSupply+0x70>)
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921a:	d1ee      	bne.n	80091fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	58024800 	.word	0x58024800

0800922c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08c      	sub	sp, #48	; 0x30
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e397      	b.n	800996e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 8087 	beq.w	800935a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800924c:	4b9e      	ldr	r3, [pc, #632]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009256:	4b9c      	ldr	r3, [pc, #624]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	2b10      	cmp	r3, #16
 8009260:	d007      	beq.n	8009272 <HAL_RCC_OscConfig+0x46>
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	2b18      	cmp	r3, #24
 8009266:	d110      	bne.n	800928a <HAL_RCC_OscConfig+0x5e>
 8009268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	2b02      	cmp	r3, #2
 8009270:	d10b      	bne.n	800928a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009272:	4b95      	ldr	r3, [pc, #596]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d06c      	beq.n	8009358 <HAL_RCC_OscConfig+0x12c>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d168      	bne.n	8009358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e371      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009292:	d106      	bne.n	80092a2 <HAL_RCC_OscConfig+0x76>
 8009294:	4b8c      	ldr	r3, [pc, #560]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a8b      	ldr	r2, [pc, #556]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800929a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e02e      	b.n	8009300 <HAL_RCC_OscConfig+0xd4>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10c      	bne.n	80092c4 <HAL_RCC_OscConfig+0x98>
 80092aa:	4b87      	ldr	r3, [pc, #540]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a86      	ldr	r2, [pc, #536]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	4b84      	ldr	r3, [pc, #528]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a83      	ldr	r2, [pc, #524]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	e01d      	b.n	8009300 <HAL_RCC_OscConfig+0xd4>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092cc:	d10c      	bne.n	80092e8 <HAL_RCC_OscConfig+0xbc>
 80092ce:	4b7e      	ldr	r3, [pc, #504]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a7d      	ldr	r2, [pc, #500]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4b7b      	ldr	r3, [pc, #492]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a7a      	ldr	r2, [pc, #488]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e00b      	b.n	8009300 <HAL_RCC_OscConfig+0xd4>
 80092e8:	4b77      	ldr	r3, [pc, #476]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a76      	ldr	r2, [pc, #472]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	4b74      	ldr	r3, [pc, #464]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a73      	ldr	r2, [pc, #460]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80092fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d013      	beq.n	8009330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009308:	f7fa fed2 	bl	80040b0 <HAL_GetTick>
 800930c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009310:	f7fa fece 	bl	80040b0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b64      	cmp	r3, #100	; 0x64
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e325      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009322:	4b69      	ldr	r3, [pc, #420]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0f0      	beq.n	8009310 <HAL_RCC_OscConfig+0xe4>
 800932e:	e014      	b.n	800935a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fa febe 	bl	80040b0 <HAL_GetTick>
 8009334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009338:	f7fa feba 	bl	80040b0 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b64      	cmp	r3, #100	; 0x64
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e311      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800934a:	4b5f      	ldr	r3, [pc, #380]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0x10c>
 8009356:	e000      	b.n	800935a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 808a 	beq.w	800947c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009368:	4b57      	ldr	r3, [pc, #348]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009370:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009372:	4b55      	ldr	r3, [pc, #340]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <HAL_RCC_OscConfig+0x162>
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	2b18      	cmp	r3, #24
 8009382:	d137      	bne.n	80093f4 <HAL_RCC_OscConfig+0x1c8>
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d132      	bne.n	80093f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800938e:	4b4e      	ldr	r3, [pc, #312]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_RCC_OscConfig+0x17a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e2e3      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093a6:	4b48      	ldr	r3, [pc, #288]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f023 0219 	bic.w	r2, r3, #25
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	4945      	ldr	r1, [pc, #276]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093b8:	f7fa fe7a 	bl	80040b0 <HAL_GetTick>
 80093bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093be:	e008      	b.n	80093d2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093c0:	f7fa fe76 	bl	80040b0 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e2cd      	b.n	800996e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093d2:	4b3d      	ldr	r3, [pc, #244]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f0      	beq.n	80093c0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093de:	4b3a      	ldr	r3, [pc, #232]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	061b      	lsls	r3, r3, #24
 80093ec:	4936      	ldr	r1, [pc, #216]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093f2:	e043      	b.n	800947c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d026      	beq.n	800944a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093fc:	4b32      	ldr	r3, [pc, #200]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f023 0219 	bic.w	r2, r3, #25
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	492f      	ldr	r1, [pc, #188]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800940a:	4313      	orrs	r3, r2
 800940c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940e:	f7fa fe4f 	bl	80040b0 <HAL_GetTick>
 8009412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009414:	e008      	b.n	8009428 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009416:	f7fa fe4b 	bl	80040b0 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e2a2      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009428:	4b27      	ldr	r3, [pc, #156]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f0      	beq.n	8009416 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009434:	4b24      	ldr	r3, [pc, #144]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	061b      	lsls	r3, r3, #24
 8009442:	4921      	ldr	r1, [pc, #132]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009444:	4313      	orrs	r3, r2
 8009446:	604b      	str	r3, [r1, #4]
 8009448:	e018      	b.n	800947c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800944a:	4b1f      	ldr	r3, [pc, #124]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009456:	f7fa fe2b 	bl	80040b0 <HAL_GetTick>
 800945a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800945c:	e008      	b.n	8009470 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800945e:	f7fa fe27 	bl	80040b0 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e27e      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009470:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1f0      	bne.n	800945e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0310 	and.w	r3, r3, #16
 8009484:	2b00      	cmp	r3, #0
 8009486:	d06d      	beq.n	8009564 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009490:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b08      	cmp	r3, #8
 800949c:	d007      	beq.n	80094ae <HAL_RCC_OscConfig+0x282>
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b18      	cmp	r3, #24
 80094a2:	d11e      	bne.n	80094e2 <HAL_RCC_OscConfig+0x2b6>
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f003 0303 	and.w	r3, r3, #3
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d119      	bne.n	80094e2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <HAL_RCC_OscConfig+0x29c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d008      	beq.n	80094cc <HAL_RCC_OscConfig+0x2a0>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	2b80      	cmp	r3, #128	; 0x80
 80094c0:	d004      	beq.n	80094cc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e253      	b.n	800996e <HAL_RCC_OscConfig+0x742>
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094cc:	4ba3      	ldr	r3, [pc, #652]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	061b      	lsls	r3, r3, #24
 80094da:	49a0      	ldr	r1, [pc, #640]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094e0:	e040      	b.n	8009564 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d023      	beq.n	8009532 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80094ea:	4b9c      	ldr	r3, [pc, #624]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a9b      	ldr	r2, [pc, #620]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80094f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f6:	f7fa fddb 	bl	80040b0 <HAL_GetTick>
 80094fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094fc:	e008      	b.n	8009510 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80094fe:	f7fa fdd7 	bl	80040b0 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b02      	cmp	r3, #2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e22e      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009510:	4b92      	ldr	r3, [pc, #584]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0f0      	beq.n	80094fe <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800951c:	4b8f      	ldr	r3, [pc, #572]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a1b      	ldr	r3, [r3, #32]
 8009528:	061b      	lsls	r3, r3, #24
 800952a:	498c      	ldr	r1, [pc, #560]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800952c:	4313      	orrs	r3, r2
 800952e:	60cb      	str	r3, [r1, #12]
 8009530:	e018      	b.n	8009564 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009532:	4b8a      	ldr	r3, [pc, #552]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a89      	ldr	r2, [pc, #548]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800953c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953e:	f7fa fdb7 	bl	80040b0 <HAL_GetTick>
 8009542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009544:	e008      	b.n	8009558 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009546:	f7fa fdb3 	bl	80040b0 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e20a      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009558:	4b80      	ldr	r3, [pc, #512]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1f0      	bne.n	8009546 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d036      	beq.n	80095de <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d019      	beq.n	80095ac <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009578:	4b78      	ldr	r3, [pc, #480]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800957a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957c:	4a77      	ldr	r2, [pc, #476]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009584:	f7fa fd94 	bl	80040b0 <HAL_GetTick>
 8009588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800958c:	f7fa fd90 	bl	80040b0 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e1e7      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800959e:	4b6f      	ldr	r3, [pc, #444]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a2:	f003 0302 	and.w	r3, r3, #2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0f0      	beq.n	800958c <HAL_RCC_OscConfig+0x360>
 80095aa:	e018      	b.n	80095de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095ac:	4b6b      	ldr	r3, [pc, #428]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b0:	4a6a      	ldr	r2, [pc, #424]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095b2:	f023 0301 	bic.w	r3, r3, #1
 80095b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b8:	f7fa fd7a 	bl	80040b0 <HAL_GetTick>
 80095bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095c0:	f7fa fd76 	bl	80040b0 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e1cd      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80095d2:	4b62      	ldr	r3, [pc, #392]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f0      	bne.n	80095c0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d036      	beq.n	8009658 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d019      	beq.n	8009626 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095f2:	4b5a      	ldr	r3, [pc, #360]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a59      	ldr	r2, [pc, #356]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80095f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095fe:	f7fa fd57 	bl	80040b0 <HAL_GetTick>
 8009602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009604:	e008      	b.n	8009618 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009606:	f7fa fd53 	bl	80040b0 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e1aa      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009618:	4b50      	ldr	r3, [pc, #320]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0f0      	beq.n	8009606 <HAL_RCC_OscConfig+0x3da>
 8009624:	e018      	b.n	8009658 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009626:	4b4d      	ldr	r3, [pc, #308]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a4c      	ldr	r2, [pc, #304]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800962c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009632:	f7fa fd3d 	bl	80040b0 <HAL_GetTick>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009638:	e008      	b.n	800964c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800963a:	f7fa fd39 	bl	80040b0 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d901      	bls.n	800964c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e190      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800964c:	4b43      	ldr	r3, [pc, #268]	; (800975c <HAL_RCC_OscConfig+0x530>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f0      	bne.n	800963a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8085 	beq.w	8009770 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009666:	4b3e      	ldr	r3, [pc, #248]	; (8009760 <HAL_RCC_OscConfig+0x534>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a3d      	ldr	r2, [pc, #244]	; (8009760 <HAL_RCC_OscConfig+0x534>)
 800966c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009672:	f7fa fd1d 	bl	80040b0 <HAL_GetTick>
 8009676:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009678:	e008      	b.n	800968c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800967a:	f7fa fd19 	bl	80040b0 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	2b64      	cmp	r3, #100	; 0x64
 8009686:	d901      	bls.n	800968c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8009688:	2303      	movs	r3, #3
 800968a:	e170      	b.n	800996e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800968c:	4b34      	ldr	r3, [pc, #208]	; (8009760 <HAL_RCC_OscConfig+0x534>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0f0      	beq.n	800967a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d106      	bne.n	80096ae <HAL_RCC_OscConfig+0x482>
 80096a0:	4b2e      	ldr	r3, [pc, #184]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a4:	4a2d      	ldr	r2, [pc, #180]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096a6:	f043 0301 	orr.w	r3, r3, #1
 80096aa:	6713      	str	r3, [r2, #112]	; 0x70
 80096ac:	e02d      	b.n	800970a <HAL_RCC_OscConfig+0x4de>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10c      	bne.n	80096d0 <HAL_RCC_OscConfig+0x4a4>
 80096b6:	4b29      	ldr	r3, [pc, #164]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	4a28      	ldr	r2, [pc, #160]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	6713      	str	r3, [r2, #112]	; 0x70
 80096c2:	4b26      	ldr	r3, [pc, #152]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c6:	4a25      	ldr	r2, [pc, #148]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096c8:	f023 0304 	bic.w	r3, r3, #4
 80096cc:	6713      	str	r3, [r2, #112]	; 0x70
 80096ce:	e01c      	b.n	800970a <HAL_RCC_OscConfig+0x4de>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	2b05      	cmp	r3, #5
 80096d6:	d10c      	bne.n	80096f2 <HAL_RCC_OscConfig+0x4c6>
 80096d8:	4b20      	ldr	r3, [pc, #128]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096dc:	4a1f      	ldr	r2, [pc, #124]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096de:	f043 0304 	orr.w	r3, r3, #4
 80096e2:	6713      	str	r3, [r2, #112]	; 0x70
 80096e4:	4b1d      	ldr	r3, [pc, #116]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e8:	4a1c      	ldr	r2, [pc, #112]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	6713      	str	r3, [r2, #112]	; 0x70
 80096f0:	e00b      	b.n	800970a <HAL_RCC_OscConfig+0x4de>
 80096f2:	4b1a      	ldr	r3, [pc, #104]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4a19      	ldr	r2, [pc, #100]	; (800975c <HAL_RCC_OscConfig+0x530>)
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	6713      	str	r3, [r2, #112]	; 0x70
 80096fe:	4b17      	ldr	r3, [pc, #92]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	4a16      	ldr	r2, [pc, #88]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d015      	beq.n	800973e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009712:	f7fa fccd 	bl	80040b0 <HAL_GetTick>
 8009716:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009718:	e00a      	b.n	8009730 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7fa fcc9 	bl	80040b0 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d901      	bls.n	8009730 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e11e      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <HAL_RCC_OscConfig+0x530>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0ee      	beq.n	800971a <HAL_RCC_OscConfig+0x4ee>
 800973c:	e018      	b.n	8009770 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973e:	f7fa fcb7 	bl	80040b0 <HAL_GetTick>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009744:	e00e      	b.n	8009764 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009746:	f7fa fcb3 	bl	80040b0 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	4293      	cmp	r3, r2
 8009756:	d905      	bls.n	8009764 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e108      	b.n	800996e <HAL_RCC_OscConfig+0x742>
 800975c:	58024400 	.word	0x58024400
 8009760:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009764:	4b84      	ldr	r3, [pc, #528]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1ea      	bne.n	8009746 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80f9 	beq.w	800996c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800977a:	4b7f      	ldr	r3, [pc, #508]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009782:	2b18      	cmp	r3, #24
 8009784:	f000 80b4 	beq.w	80098f0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	2b02      	cmp	r3, #2
 800978e:	f040 8095 	bne.w	80098bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009792:	4b79      	ldr	r3, [pc, #484]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a78      	ldr	r2, [pc, #480]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800979c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800979e:	f7fa fc87 	bl	80040b0 <HAL_GetTick>
 80097a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097a4:	e008      	b.n	80097b8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097a6:	f7fa fc83 	bl	80040b0 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d901      	bls.n	80097b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e0da      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097b8:	4b6f      	ldr	r3, [pc, #444]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1f0      	bne.n	80097a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097c4:	4b6c      	ldr	r3, [pc, #432]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80097c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097c8:	4b6c      	ldr	r3, [pc, #432]	; (800997c <HAL_RCC_OscConfig+0x750>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097d4:	0112      	lsls	r2, r2, #4
 80097d6:	430a      	orrs	r2, r1
 80097d8:	4967      	ldr	r1, [pc, #412]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	628b      	str	r3, [r1, #40]	; 0x28
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	3b01      	subs	r3, #1
 80097e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ec:	3b01      	subs	r3, #1
 80097ee:	025b      	lsls	r3, r3, #9
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	3b01      	subs	r3, #1
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	3b01      	subs	r3, #1
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800980e:	495a      	ldr	r1, [pc, #360]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009810:	4313      	orrs	r3, r2
 8009812:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009814:	4b58      	ldr	r3, [pc, #352]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	4a57      	ldr	r2, [pc, #348]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800981a:	f023 0301 	bic.w	r3, r3, #1
 800981e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009820:	4b55      	ldr	r3, [pc, #340]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009824:	4b56      	ldr	r3, [pc, #344]	; (8009980 <HAL_RCC_OscConfig+0x754>)
 8009826:	4013      	ands	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800982c:	00d2      	lsls	r2, r2, #3
 800982e:	4952      	ldr	r1, [pc, #328]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009830:	4313      	orrs	r3, r2
 8009832:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009834:	4b50      	ldr	r3, [pc, #320]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	f023 020c 	bic.w	r2, r3, #12
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	494d      	ldr	r1, [pc, #308]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009842:	4313      	orrs	r3, r2
 8009844:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009846:	4b4c      	ldr	r3, [pc, #304]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984a:	f023 0202 	bic.w	r2, r3, #2
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	4949      	ldr	r1, [pc, #292]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009854:	4313      	orrs	r3, r2
 8009856:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009858:	4b47      	ldr	r3, [pc, #284]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a46      	ldr	r2, [pc, #280]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800985e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009864:	4b44      	ldr	r3, [pc, #272]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	4a43      	ldr	r2, [pc, #268]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800986a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800986e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009870:	4b41      	ldr	r3, [pc, #260]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	4a40      	ldr	r2, [pc, #256]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800987a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800987c:	4b3e      	ldr	r3, [pc, #248]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	4a3d      	ldr	r2, [pc, #244]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 8009882:	f043 0301 	orr.w	r3, r3, #1
 8009886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009888:	4b3b      	ldr	r3, [pc, #236]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a3a      	ldr	r2, [pc, #232]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 800988e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009894:	f7fa fc0c 	bl	80040b0 <HAL_GetTick>
 8009898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800989a:	e008      	b.n	80098ae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800989c:	f7fa fc08 	bl	80040b0 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d901      	bls.n	80098ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e05f      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098ae:	4b32      	ldr	r3, [pc, #200]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f0      	beq.n	800989c <HAL_RCC_OscConfig+0x670>
 80098ba:	e057      	b.n	800996c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098bc:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a2d      	ldr	r2, [pc, #180]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7fa fbf2 	bl	80040b0 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098d0:	f7fa fbee 	bl	80040b0 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e045      	b.n	800996e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098e2:	4b25      	ldr	r3, [pc, #148]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f0      	bne.n	80098d0 <HAL_RCC_OscConfig+0x6a4>
 80098ee:	e03d      	b.n	800996c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80098f0:	4b21      	ldr	r3, [pc, #132]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098f6:	4b20      	ldr	r3, [pc, #128]	; (8009978 <HAL_RCC_OscConfig+0x74c>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	2b01      	cmp	r3, #1
 8009902:	d031      	beq.n	8009968 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	f003 0203 	and.w	r2, r3, #3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800990e:	429a      	cmp	r2, r3
 8009910:	d12a      	bne.n	8009968 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	091b      	lsrs	r3, r3, #4
 8009916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800991e:	429a      	cmp	r2, r3
 8009920:	d122      	bne.n	8009968 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800992e:	429a      	cmp	r2, r3
 8009930:	d11a      	bne.n	8009968 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	0a5b      	lsrs	r3, r3, #9
 8009936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009940:	429a      	cmp	r2, r3
 8009942:	d111      	bne.n	8009968 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009952:	429a      	cmp	r2, r3
 8009954:	d108      	bne.n	8009968 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	0e1b      	lsrs	r3, r3, #24
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009962:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d001      	beq.n	800996c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3730      	adds	r7, #48	; 0x30
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	fffffc0c 	.word	0xfffffc0c
 8009980:	ffff0007 	.word	0xffff0007

08009984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e19c      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009998:	4b8a      	ldr	r3, [pc, #552]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d910      	bls.n	80099c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099a6:	4b87      	ldr	r3, [pc, #540]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f023 020f 	bic.w	r2, r3, #15
 80099ae:	4985      	ldr	r1, [pc, #532]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099b6:	4b83      	ldr	r3, [pc, #524]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d001      	beq.n	80099c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e184      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d010      	beq.n	80099f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	4b7b      	ldr	r3, [pc, #492]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d908      	bls.n	80099f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099e4:	4b78      	ldr	r3, [pc, #480]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	4975      	ldr	r1, [pc, #468]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0308 	and.w	r3, r3, #8
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d010      	beq.n	8009a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695a      	ldr	r2, [r3, #20]
 8009a06:	4b70      	ldr	r3, [pc, #448]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d908      	bls.n	8009a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a12:	4b6d      	ldr	r3, [pc, #436]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	496a      	ldr	r1, [pc, #424]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0310 	and.w	r3, r3, #16
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d010      	beq.n	8009a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699a      	ldr	r2, [r3, #24]
 8009a34:	4b64      	ldr	r3, [pc, #400]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d908      	bls.n	8009a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a40:	4b61      	ldr	r3, [pc, #388]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	495e      	ldr	r1, [pc, #376]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0320 	and.w	r3, r3, #32
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d010      	beq.n	8009a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69da      	ldr	r2, [r3, #28]
 8009a62:	4b59      	ldr	r3, [pc, #356]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d908      	bls.n	8009a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a6e:	4b56      	ldr	r3, [pc, #344]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	4953      	ldr	r1, [pc, #332]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d010      	beq.n	8009aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	4b4d      	ldr	r3, [pc, #308]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d908      	bls.n	8009aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a9c:	4b4a      	ldr	r3, [pc, #296]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	f023 020f 	bic.w	r2, r3, #15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	4947      	ldr	r1, [pc, #284]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d055      	beq.n	8009b66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009aba:	4b43      	ldr	r3, [pc, #268]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	4940      	ldr	r1, [pc, #256]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d107      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ad4:	4b3c      	ldr	r3, [pc, #240]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d121      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0f6      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d107      	bne.n	8009afc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aec:	4b36      	ldr	r3, [pc, #216]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d115      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e0ea      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d107      	bne.n	8009b14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b04:	4b30      	ldr	r3, [pc, #192]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d109      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0de      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b14:	4b2c      	ldr	r3, [pc, #176]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e0d6      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b24:	4b28      	ldr	r3, [pc, #160]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f023 0207 	bic.w	r2, r3, #7
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4925      	ldr	r1, [pc, #148]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b36:	f7fa fabb 	bl	80040b0 <HAL_GetTick>
 8009b3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b3c:	e00a      	b.n	8009b54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b3e:	f7fa fab7 	bl	80040b0 <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e0be      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b54:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d1eb      	bne.n	8009b3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d010      	beq.n	8009b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d208      	bcs.n	8009b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b82:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	f023 020f 	bic.w	r2, r3, #15
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	490e      	ldr	r1, [pc, #56]	; (8009bc8 <HAL_RCC_ClockConfig+0x244>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 030f 	and.w	r3, r3, #15
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d214      	bcs.n	8009bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ba2:	4b08      	ldr	r3, [pc, #32]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f023 020f 	bic.w	r2, r3, #15
 8009baa:	4906      	ldr	r1, [pc, #24]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bb2:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <HAL_RCC_ClockConfig+0x240>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e086      	b.n	8009cd2 <HAL_RCC_ClockConfig+0x34e>
 8009bc4:	52002000 	.word	0x52002000
 8009bc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d010      	beq.n	8009bfa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	4b3f      	ldr	r3, [pc, #252]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d208      	bcs.n	8009bfa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009be8:	4b3c      	ldr	r3, [pc, #240]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	4939      	ldr	r1, [pc, #228]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0308 	and.w	r3, r3, #8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d010      	beq.n	8009c28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695a      	ldr	r2, [r3, #20]
 8009c0a:	4b34      	ldr	r3, [pc, #208]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d208      	bcs.n	8009c28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c16:	4b31      	ldr	r3, [pc, #196]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	492e      	ldr	r1, [pc, #184]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d010      	beq.n	8009c56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	4b28      	ldr	r3, [pc, #160]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d208      	bcs.n	8009c56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c44:	4b25      	ldr	r3, [pc, #148]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	4922      	ldr	r1, [pc, #136]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d010      	beq.n	8009c84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69da      	ldr	r2, [r3, #28]
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d208      	bcs.n	8009c84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009c72:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	4917      	ldr	r1, [pc, #92]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c84:	f000 f834 	bl	8009cf0 <HAL_RCC_GetSysClockFreq>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	0a1b      	lsrs	r3, r3, #8
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	4912      	ldr	r1, [pc, #72]	; (8009ce0 <HAL_RCC_ClockConfig+0x35c>)
 8009c96:	5ccb      	ldrb	r3, [r1, r3]
 8009c98:	f003 031f 	and.w	r3, r3, #31
 8009c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <HAL_RCC_ClockConfig+0x358>)
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	4a0d      	ldr	r2, [pc, #52]	; (8009ce0 <HAL_RCC_ClockConfig+0x35c>)
 8009cac:	5cd3      	ldrb	r3, [r2, r3]
 8009cae:	f003 031f 	and.w	r3, r3, #31
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb8:	4a0a      	ldr	r2, [pc, #40]	; (8009ce4 <HAL_RCC_ClockConfig+0x360>)
 8009cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cbc:	4a0a      	ldr	r2, [pc, #40]	; (8009ce8 <HAL_RCC_ClockConfig+0x364>)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009cc2:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <HAL_RCC_ClockConfig+0x368>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa f9a8 	bl	800401c <HAL_InitTick>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	08011988 	.word	0x08011988
 8009ce4:	20000004 	.word	0x20000004
 8009ce8:	20000000 	.word	0x20000000
 8009cec:	20000008 	.word	0x20000008

08009cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b089      	sub	sp, #36	; 0x24
 8009cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cf6:	4bb3      	ldr	r3, [pc, #716]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cfe:	2b18      	cmp	r3, #24
 8009d00:	f200 8155 	bhi.w	8009fae <HAL_RCC_GetSysClockFreq+0x2be>
 8009d04:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d71 	.word	0x08009d71
 8009d10:	08009faf 	.word	0x08009faf
 8009d14:	08009faf 	.word	0x08009faf
 8009d18:	08009faf 	.word	0x08009faf
 8009d1c:	08009faf 	.word	0x08009faf
 8009d20:	08009faf 	.word	0x08009faf
 8009d24:	08009faf 	.word	0x08009faf
 8009d28:	08009faf 	.word	0x08009faf
 8009d2c:	08009d97 	.word	0x08009d97
 8009d30:	08009faf 	.word	0x08009faf
 8009d34:	08009faf 	.word	0x08009faf
 8009d38:	08009faf 	.word	0x08009faf
 8009d3c:	08009faf 	.word	0x08009faf
 8009d40:	08009faf 	.word	0x08009faf
 8009d44:	08009faf 	.word	0x08009faf
 8009d48:	08009faf 	.word	0x08009faf
 8009d4c:	08009d9d 	.word	0x08009d9d
 8009d50:	08009faf 	.word	0x08009faf
 8009d54:	08009faf 	.word	0x08009faf
 8009d58:	08009faf 	.word	0x08009faf
 8009d5c:	08009faf 	.word	0x08009faf
 8009d60:	08009faf 	.word	0x08009faf
 8009d64:	08009faf 	.word	0x08009faf
 8009d68:	08009faf 	.word	0x08009faf
 8009d6c:	08009da3 	.word	0x08009da3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d70:	4b94      	ldr	r3, [pc, #592]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0320 	and.w	r3, r3, #32
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d7c:	4b91      	ldr	r3, [pc, #580]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	08db      	lsrs	r3, r3, #3
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	4a90      	ldr	r2, [pc, #576]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d88:	fa22 f303 	lsr.w	r3, r2, r3
 8009d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009d8e:	e111      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d90:	4b8d      	ldr	r3, [pc, #564]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d92:	61bb      	str	r3, [r7, #24]
    break;
 8009d94:	e10e      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009d96:	4b8d      	ldr	r3, [pc, #564]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d98:	61bb      	str	r3, [r7, #24]
    break;
 8009d9a:	e10b      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009d9c:	4b8c      	ldr	r3, [pc, #560]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009d9e:	61bb      	str	r3, [r7, #24]
    break;
 8009da0:	e108      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009da2:	4b88      	ldr	r3, [pc, #544]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da6:	f003 0303 	and.w	r3, r3, #3
 8009daa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009dac:	4b85      	ldr	r3, [pc, #532]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	091b      	lsrs	r3, r3, #4
 8009db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009db6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009db8:	4b82      	ldr	r3, [pc, #520]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009dc2:	4b80      	ldr	r3, [pc, #512]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc6:	08db      	lsrs	r3, r3, #3
 8009dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	fb02 f303 	mul.w	r3, r2, r3
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80e1 	beq.w	8009fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	f000 8083 	beq.w	8009ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	f200 80a1 	bhi.w	8009f38 <HAL_RCC_GetSysClockFreq+0x248>
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_RCC_GetSysClockFreq+0x114>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d056      	beq.n	8009eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e02:	e099      	b.n	8009f38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e04:	4b6f      	ldr	r3, [pc, #444]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0320 	and.w	r3, r3, #32
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d02d      	beq.n	8009e6c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e10:	4b6c      	ldr	r3, [pc, #432]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	08db      	lsrs	r3, r3, #3
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	4a6b      	ldr	r2, [pc, #428]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e20:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	ee07 3a90 	vmov	s15, r3
 8009e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3a:	4b62      	ldr	r3, [pc, #392]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009e6a:	e087      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e76:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e7e:	4b51      	ldr	r3, [pc, #324]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e92:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eae:	e065      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec2:	4b40      	ldr	r3, [pc, #256]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ef2:	e043      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f06:	4b2f      	ldr	r3, [pc, #188]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f36:	e021      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f4a:	4b1e      	ldr	r3, [pc, #120]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009f7c:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f80:	0a5b      	lsrs	r3, r3, #9
 8009f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f86:	3301      	adds	r3, #1
 8009f88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa0:	ee17 3a90 	vmov	r3, s15
 8009fa4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009fa6:	e005      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61bb      	str	r3, [r7, #24]
    break;
 8009fac:	e002      	b.n	8009fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009fae:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fb0:	61bb      	str	r3, [r7, #24]
    break;
 8009fb2:	bf00      	nop
  }

  return sysclockfreq;
 8009fb4:	69bb      	ldr	r3, [r7, #24]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	03d09000 	.word	0x03d09000
 8009fcc:	003d0900 	.word	0x003d0900
 8009fd0:	017d7840 	.word	0x017d7840
 8009fd4:	46000000 	.word	0x46000000
 8009fd8:	4c742400 	.word	0x4c742400
 8009fdc:	4a742400 	.word	0x4a742400
 8009fe0:	4bbebc20 	.word	0x4bbebc20

08009fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009fea:	f7ff fe81 	bl	8009cf0 <HAL_RCC_GetSysClockFreq>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b10      	ldr	r3, [pc, #64]	; (800a034 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	0a1b      	lsrs	r3, r3, #8
 8009ff6:	f003 030f 	and.w	r3, r3, #15
 8009ffa:	490f      	ldr	r1, [pc, #60]	; (800a038 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ffc:	5ccb      	ldrb	r3, [r1, r3]
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	fa22 f303 	lsr.w	r3, r2, r3
 800a006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a008:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <HAL_RCC_GetHCLKFreq+0x50>)
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	4a09      	ldr	r2, [pc, #36]	; (800a038 <HAL_RCC_GetHCLKFreq+0x54>)
 800a012:	5cd3      	ldrb	r3, [r2, r3]
 800a014:	f003 031f 	and.w	r3, r3, #31
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	4a07      	ldr	r2, [pc, #28]	; (800a03c <HAL_RCC_GetHCLKFreq+0x58>)
 800a020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a022:	4a07      	ldr	r2, [pc, #28]	; (800a040 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <HAL_RCC_GetHCLKFreq+0x58>)
 800a02a:	681b      	ldr	r3, [r3, #0]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	58024400 	.word	0x58024400
 800a038:	08011988 	.word	0x08011988
 800a03c:	20000004 	.word	0x20000004
 800a040:	20000000 	.word	0x20000000

0800a044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a048:	f7ff ffcc 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 800a04c:	4602      	mov	r2, r0
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	091b      	lsrs	r3, r3, #4
 800a054:	f003 0307 	and.w	r3, r3, #7
 800a058:	4904      	ldr	r1, [pc, #16]	; (800a06c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a05a:	5ccb      	ldrb	r3, [r1, r3]
 800a05c:	f003 031f 	and.w	r3, r3, #31
 800a060:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a064:	4618      	mov	r0, r3
 800a066:	bd80      	pop	{r7, pc}
 800a068:	58024400 	.word	0x58024400
 800a06c:	08011988 	.word	0x08011988

0800a070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a074:	f7ff ffb6 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 800a078:	4602      	mov	r2, r0
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	0a1b      	lsrs	r3, r3, #8
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	4904      	ldr	r1, [pc, #16]	; (800a098 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a086:	5ccb      	ldrb	r3, [r1, r3]
 800a088:	f003 031f 	and.w	r3, r3, #31
 800a08c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a090:	4618      	mov	r0, r3
 800a092:	bd80      	pop	{r7, pc}
 800a094:	58024400 	.word	0x58024400
 800a098:	08011988 	.word	0x08011988

0800a09c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d03f      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0c0:	d02a      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a0c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0c6:	d824      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a0c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0cc:	d018      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a0ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0d2:	d81e      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a0d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0dc:	d007      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a0de:	e018      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e0:	4bab      	ldr	r3, [pc, #684]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4aaa      	ldr	r2, [pc, #680]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0ec:	e015      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	2102      	movs	r1, #2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f001 feff 	bl	800bef8 <RCCEx_PLL2_Config>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0fe:	e00c      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3324      	adds	r3, #36	; 0x24
 800a104:	2102      	movs	r1, #2
 800a106:	4618      	mov	r0, r3
 800a108:	f001 ffa8 	bl	800c05c <RCCEx_PLL3_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a110:	e003      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	75fb      	strb	r3, [r7, #23]
      break;
 800a116:	e000      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d109      	bne.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a120:	4b9b      	ldr	r3, [pc, #620]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12c:	4998      	ldr	r1, [pc, #608]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	650b      	str	r3, [r1, #80]	; 0x50
 800a132:	e001      	b.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a140:	2b00      	cmp	r3, #0
 800a142:	d03d      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d826      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a14c:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a152:	bf00      	nop
 800a154:	0800a169 	.word	0x0800a169
 800a158:	0800a177 	.word	0x0800a177
 800a15c:	0800a189 	.word	0x0800a189
 800a160:	0800a1a1 	.word	0x0800a1a1
 800a164:	0800a1a1 	.word	0x0800a1a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a168:	4b89      	ldr	r3, [pc, #548]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	4a88      	ldr	r2, [pc, #544]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a16e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a174:	e015      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3304      	adds	r3, #4
 800a17a:	2100      	movs	r1, #0
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 febb 	bl	800bef8 <RCCEx_PLL2_Config>
 800a182:	4603      	mov	r3, r0
 800a184:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a186:	e00c      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3324      	adds	r3, #36	; 0x24
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 ff64 	bl	800c05c <RCCEx_PLL3_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a198:	e003      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	75fb      	strb	r3, [r7, #23]
      break;
 800a19e:	e000      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a1a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1a8:	4b79      	ldr	r3, [pc, #484]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ac:	f023 0207 	bic.w	r2, r3, #7
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b4:	4976      	ldr	r1, [pc, #472]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	650b      	str	r3, [r1, #80]	; 0x50
 800a1ba:	e001      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d051      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a1d6:	d036      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a1d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a1dc:	d830      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a1de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1e2:	d032      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a1e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1e8:	d82a      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a1ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1ee:	d02e      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a1f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1f4:	d824      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a1f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1fa:	d018      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a1fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a200:	d81e      	bhi.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a20a:	d007      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a20c:	e018      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a20e:	4b60      	ldr	r3, [pc, #384]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a5f      	ldr	r2, [pc, #380]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a21a:	e019      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3304      	adds	r3, #4
 800a220:	2100      	movs	r1, #0
 800a222:	4618      	mov	r0, r3
 800a224:	f001 fe68 	bl	800bef8 <RCCEx_PLL2_Config>
 800a228:	4603      	mov	r3, r0
 800a22a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a22c:	e010      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3324      	adds	r3, #36	; 0x24
 800a232:	2100      	movs	r1, #0
 800a234:	4618      	mov	r0, r3
 800a236:	f001 ff11 	bl	800c05c <RCCEx_PLL3_Config>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a23e:	e007      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	75fb      	strb	r3, [r7, #23]
      break;
 800a244:	e004      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a246:	bf00      	nop
 800a248:	e002      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a24e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10a      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a256:	4b4e      	ldr	r3, [pc, #312]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a264:	494a      	ldr	r1, [pc, #296]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a266:	4313      	orrs	r3, r2
 800a268:	658b      	str	r3, [r1, #88]	; 0x58
 800a26a:	e001      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d051      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a282:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a286:	d036      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a288:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a28c:	d830      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a28e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a292:	d032      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a298:	d82a      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a29a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a29e:	d02e      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a2a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2a4:	d824      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2aa:	d018      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b0:	d81e      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a2b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2ba:	d007      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a2bc:	e018      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2be:	4b34      	ldr	r3, [pc, #208]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4a33      	ldr	r2, [pc, #204]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2ca:	e019      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 fe10 	bl	800bef8 <RCCEx_PLL2_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a2dc:	e010      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3324      	adds	r3, #36	; 0x24
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 feb9 	bl	800c05c <RCCEx_PLL3_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2ee:	e007      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e004      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a2f6:	bf00      	nop
 800a2f8:	e002      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a2fa:	bf00      	nop
 800a2fc:	e000      	b.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a2fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a306:	4b22      	ldr	r3, [pc, #136]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a30a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a314:	491e      	ldr	r1, [pc, #120]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a316:	4313      	orrs	r3, r2
 800a318:	658b      	str	r3, [r1, #88]	; 0x58
 800a31a:	e001      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d035      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a330:	2b30      	cmp	r3, #48	; 0x30
 800a332:	d01c      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a334:	2b30      	cmp	r3, #48	; 0x30
 800a336:	d817      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d00c      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d813      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d016      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800a344:	2b10      	cmp	r3, #16
 800a346:	d10f      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a348:	4b11      	ldr	r3, [pc, #68]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4a10      	ldr	r2, [pc, #64]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a354:	e00e      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3304      	adds	r3, #4
 800a35a:	2102      	movs	r1, #2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fdcb 	bl	800bef8 <RCCEx_PLL2_Config>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a366:	e005      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]
      break;
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a372:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10c      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a386:	4902      	ldr	r1, [pc, #8]	; (800a390 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a38c:	e004      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	7dfb      	ldrb	r3, [r7, #23]
 800a396:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d047      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ac:	d030      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a3ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3b2:	d82a      	bhi.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a3b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3b8:	d02c      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a3ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3be:	d824      	bhi.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a3c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c4:	d018      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ca:	d81e      	bhi.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a3d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d4:	d007      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a3d6:	e018      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d8:	4bac      	ldr	r3, [pc, #688]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	4aab      	ldr	r2, [pc, #684]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a3de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a3e4:	e017      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 fd83 	bl	800bef8 <RCCEx_PLL2_Config>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a3f6:	e00e      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3324      	adds	r3, #36	; 0x24
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f001 fe2c 	bl	800c05c <RCCEx_PLL3_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a408:	e005      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	75fb      	strb	r3, [r7, #23]
      break;
 800a40e:	e002      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a410:	bf00      	nop
 800a412:	e000      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a414:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d109      	bne.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a41c:	4b9b      	ldr	r3, [pc, #620]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a420:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a428:	4998      	ldr	r1, [pc, #608]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	650b      	str	r3, [r1, #80]	; 0x50
 800a42e:	e001      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d049      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a448:	d02e      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a44a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a44e:	d828      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a454:	d02a      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a45a:	d822      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a45c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a460:	d026      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a466:	d81c      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a46c:	d010      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a46e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a472:	d816      	bhi.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01d      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a47c:	d111      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3304      	adds	r3, #4
 800a482:	2101      	movs	r1, #1
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fd37 	bl	800bef8 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a48e:	e012      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3324      	adds	r3, #36	; 0x24
 800a494:	2101      	movs	r1, #1
 800a496:	4618      	mov	r0, r3
 800a498:	f001 fde0 	bl	800c05c <RCCEx_PLL3_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a4a0:	e009      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a6:	e006      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4a8:	bf00      	nop
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4ac:	bf00      	nop
 800a4ae:	e002      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d109      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4bc:	4b73      	ldr	r3, [pc, #460]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c8:	4970      	ldr	r1, [pc, #448]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	650b      	str	r3, [r1, #80]	; 0x50
 800a4ce:	e001      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d0:	7dfb      	ldrb	r3, [r7, #23]
 800a4d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d04b      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4ea:	d02e      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a4ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4f0:	d828      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f6:	d02a      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4fc:	d822      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a4fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a502:	d026      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a508:	d81c      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a50a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50e:	d010      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a514:	d816      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d01d      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51e:	d111      	bne.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3304      	adds	r3, #4
 800a524:	2101      	movs	r1, #1
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fce6 	bl	800bef8 <RCCEx_PLL2_Config>
 800a52c:	4603      	mov	r3, r0
 800a52e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a530:	e012      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	3324      	adds	r3, #36	; 0x24
 800a536:	2101      	movs	r1, #1
 800a538:	4618      	mov	r0, r3
 800a53a:	f001 fd8f 	bl	800c05c <RCCEx_PLL3_Config>
 800a53e:	4603      	mov	r3, r0
 800a540:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a542:	e009      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	75fb      	strb	r3, [r7, #23]
      break;
 800a548:	e006      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a54a:	bf00      	nop
 800a54c:	e004      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a54e:	bf00      	nop
 800a550:	e002      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a552:	bf00      	nop
 800a554:	e000      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a556:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a55e:	4b4b      	ldr	r3, [pc, #300]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a562:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a56c:	4947      	ldr	r1, [pc, #284]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	658b      	str	r3, [r1, #88]	; 0x58
 800a572:	e001      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d02f      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a58c:	d00e      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a58e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a592:	d814      	bhi.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d015      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a59c:	d10f      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a59e:	4b3b      	ldr	r3, [pc, #236]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	4a3a      	ldr	r2, [pc, #232]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5aa:	e00c      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f001 fca0 	bl	800bef8 <RCCEx_PLL2_Config>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5bc:	e003      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c2:	e000      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a5c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a5cc:	4b2f      	ldr	r3, [pc, #188]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5d8:	492c      	ldr	r1, [pc, #176]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	650b      	str	r3, [r1, #80]	; 0x50
 800a5de:	e001      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d032      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d81b      	bhi.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a5f8:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fe:	bf00      	nop
 800a600:	0800a637 	.word	0x0800a637
 800a604:	0800a611 	.word	0x0800a611
 800a608:	0800a61f 	.word	0x0800a61f
 800a60c:	0800a637 	.word	0x0800a637
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a610:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4a1d      	ldr	r2, [pc, #116]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a61a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a61c:	e00c      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3304      	adds	r3, #4
 800a622:	2102      	movs	r1, #2
 800a624:	4618      	mov	r0, r3
 800a626:	f001 fc67 	bl	800bef8 <RCCEx_PLL2_Config>
 800a62a:	4603      	mov	r3, r0
 800a62c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a62e:	e003      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	75fb      	strb	r3, [r7, #23]
      break;
 800a634:	e000      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a636:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a63e:	4b13      	ldr	r3, [pc, #76]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	f023 0203 	bic.w	r2, r3, #3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	4910      	ldr	r1, [pc, #64]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a64c:	4313      	orrs	r3, r2
 800a64e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a650:	e001      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 808a 	beq.w	800a778 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a09      	ldr	r2, [pc, #36]	; (800a690 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a66a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a66e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a670:	f7f9 fd1e 	bl	80040b0 <HAL_GetTick>
 800a674:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a676:	e00d      	b.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a678:	f7f9 fd1a 	bl	80040b0 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	2b64      	cmp	r3, #100	; 0x64
 800a684:	d906      	bls.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	75fb      	strb	r3, [r7, #23]
        break;
 800a68a:	e009      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a68c:	58024400 	.word	0x58024400
 800a690:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a694:	4bb9      	ldr	r3, [pc, #740]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0eb      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d166      	bne.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a6a6:	4bb6      	ldr	r3, [pc, #728]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6b0:	4053      	eors	r3, r2
 800a6b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d013      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6ba:	4bb1      	ldr	r3, [pc, #708]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6c4:	4bae      	ldr	r3, [pc, #696]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c8:	4aad      	ldr	r2, [pc, #692]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6d0:	4bab      	ldr	r3, [pc, #684]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d4:	4aaa      	ldr	r2, [pc, #680]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a6dc:	4aa8      	ldr	r2, [pc, #672]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ec:	d115      	bne.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ee:	f7f9 fcdf 	bl	80040b0 <HAL_GetTick>
 800a6f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6f4:	e00b      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6f6:	f7f9 fcdb 	bl	80040b0 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	f241 3288 	movw	r2, #5000	; 0x1388
 800a704:	4293      	cmp	r3, r2
 800a706:	d902      	bls.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	75fb      	strb	r3, [r7, #23]
            break;
 800a70c:	e005      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a70e:	4b9c      	ldr	r3, [pc, #624]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0ed      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d126      	bne.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a72a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a72e:	d10d      	bne.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800a730:	4b93      	ldr	r3, [pc, #588]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a73e:	0919      	lsrs	r1, r3, #4
 800a740:	4b90      	ldr	r3, [pc, #576]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a742:	400b      	ands	r3, r1
 800a744:	498e      	ldr	r1, [pc, #568]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a746:	4313      	orrs	r3, r2
 800a748:	610b      	str	r3, [r1, #16]
 800a74a:	e005      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a74c:	4b8c      	ldr	r3, [pc, #560]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	4a8b      	ldr	r2, [pc, #556]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a752:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a756:	6113      	str	r3, [r2, #16]
 800a758:	4b89      	ldr	r3, [pc, #548]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a75a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a766:	4986      	ldr	r1, [pc, #536]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	670b      	str	r3, [r1, #112]	; 0x70
 800a76c:	e004      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	75bb      	strb	r3, [r7, #22]
 800a772:	e001      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	2b00      	cmp	r3, #0
 800a782:	d07e      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a788:	2b28      	cmp	r3, #40	; 0x28
 800a78a:	d867      	bhi.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800a78c:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800a78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a792:	bf00      	nop
 800a794:	0800a863 	.word	0x0800a863
 800a798:	0800a85d 	.word	0x0800a85d
 800a79c:	0800a85d 	.word	0x0800a85d
 800a7a0:	0800a85d 	.word	0x0800a85d
 800a7a4:	0800a85d 	.word	0x0800a85d
 800a7a8:	0800a85d 	.word	0x0800a85d
 800a7ac:	0800a85d 	.word	0x0800a85d
 800a7b0:	0800a85d 	.word	0x0800a85d
 800a7b4:	0800a839 	.word	0x0800a839
 800a7b8:	0800a85d 	.word	0x0800a85d
 800a7bc:	0800a85d 	.word	0x0800a85d
 800a7c0:	0800a85d 	.word	0x0800a85d
 800a7c4:	0800a85d 	.word	0x0800a85d
 800a7c8:	0800a85d 	.word	0x0800a85d
 800a7cc:	0800a85d 	.word	0x0800a85d
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a84b 	.word	0x0800a84b
 800a7d8:	0800a85d 	.word	0x0800a85d
 800a7dc:	0800a85d 	.word	0x0800a85d
 800a7e0:	0800a85d 	.word	0x0800a85d
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a85d 	.word	0x0800a85d
 800a7ec:	0800a85d 	.word	0x0800a85d
 800a7f0:	0800a85d 	.word	0x0800a85d
 800a7f4:	0800a863 	.word	0x0800a863
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a85d 	.word	0x0800a85d
 800a800:	0800a85d 	.word	0x0800a85d
 800a804:	0800a85d 	.word	0x0800a85d
 800a808:	0800a85d 	.word	0x0800a85d
 800a80c:	0800a85d 	.word	0x0800a85d
 800a810:	0800a85d 	.word	0x0800a85d
 800a814:	0800a863 	.word	0x0800a863
 800a818:	0800a85d 	.word	0x0800a85d
 800a81c:	0800a85d 	.word	0x0800a85d
 800a820:	0800a85d 	.word	0x0800a85d
 800a824:	0800a85d 	.word	0x0800a85d
 800a828:	0800a85d 	.word	0x0800a85d
 800a82c:	0800a85d 	.word	0x0800a85d
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	0800a863 	.word	0x0800a863
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3304      	adds	r3, #4
 800a83c:	2101      	movs	r1, #1
 800a83e:	4618      	mov	r0, r3
 800a840:	f001 fb5a 	bl	800bef8 <RCCEx_PLL2_Config>
 800a844:	4603      	mov	r3, r0
 800a846:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a848:	e00c      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3324      	adds	r3, #36	; 0x24
 800a84e:	2101      	movs	r1, #1
 800a850:	4618      	mov	r0, r3
 800a852:	f001 fc03 	bl	800c05c <RCCEx_PLL3_Config>
 800a856:	4603      	mov	r3, r0
 800a858:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a85a:	e003      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	75fb      	strb	r3, [r7, #23]
      break;
 800a860:	e000      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800a862:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a86a:	4b45      	ldr	r3, [pc, #276]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a876:	4942      	ldr	r1, [pc, #264]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	654b      	str	r3, [r1, #84]	; 0x54
 800a87c:	e001      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0302 	and.w	r3, r3, #2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d037      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	2b05      	cmp	r3, #5
 800a894:	d820      	bhi.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8df 	.word	0x0800a8df
 800a8a0:	0800a8b5 	.word	0x0800a8b5
 800a8a4:	0800a8c7 	.word	0x0800a8c7
 800a8a8:	0800a8df 	.word	0x0800a8df
 800a8ac:	0800a8df 	.word	0x0800a8df
 800a8b0:	0800a8df 	.word	0x0800a8df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 fb1c 	bl	800bef8 <RCCEx_PLL2_Config>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a8c4:	e00c      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3324      	adds	r3, #36	; 0x24
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f001 fbc5 	bl	800c05c <RCCEx_PLL3_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a8d6:	e003      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	75fb      	strb	r3, [r7, #23]
      break;
 800a8dc:	e000      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800a8de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8e6:	4b26      	ldr	r3, [pc, #152]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ea:	f023 0207 	bic.w	r2, r3, #7
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	4923      	ldr	r1, [pc, #140]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	654b      	str	r3, [r1, #84]	; 0x54
 800a8f8:	e001      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0304 	and.w	r3, r3, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	d040      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a910:	2b05      	cmp	r3, #5
 800a912:	d821      	bhi.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a914:	a201      	add	r2, pc, #4	; (adr r2, 800a91c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a91a:	bf00      	nop
 800a91c:	0800a95f 	.word	0x0800a95f
 800a920:	0800a935 	.word	0x0800a935
 800a924:	0800a947 	.word	0x0800a947
 800a928:	0800a95f 	.word	0x0800a95f
 800a92c:	0800a95f 	.word	0x0800a95f
 800a930:	0800a95f 	.word	0x0800a95f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3304      	adds	r3, #4
 800a938:	2101      	movs	r1, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 fadc 	bl	800bef8 <RCCEx_PLL2_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a944:	e00c      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3324      	adds	r3, #36	; 0x24
 800a94a:	2101      	movs	r1, #1
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 fb85 	bl	800c05c <RCCEx_PLL3_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a956:	e003      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	75fb      	strb	r3, [r7, #23]
      break;
 800a95c:	e000      	b.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a95e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d110      	bne.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a966:	4b06      	ldr	r3, [pc, #24]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a96a:	f023 0207 	bic.w	r2, r3, #7
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a974:	4902      	ldr	r1, [pc, #8]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a976:	4313      	orrs	r3, r2
 800a978:	658b      	str	r3, [r1, #88]	; 0x58
 800a97a:	e007      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a97c:	58024800 	.word	0x58024800
 800a980:	58024400 	.word	0x58024400
 800a984:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0320 	and.w	r3, r3, #32
 800a994:	2b00      	cmp	r3, #0
 800a996:	d04b      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9a2:	d02e      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a9a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9a8:	d828      	bhi.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ae:	d02a      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a9b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b4:	d822      	bhi.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a9b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ba:	d026      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a9bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9c0:	d81c      	bhi.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a9c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c6:	d010      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a9c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9cc:	d816      	bhi.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d01d      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a9d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9d6:	d111      	bne.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 fa8a 	bl	800bef8 <RCCEx_PLL2_Config>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a9e8:	e012      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3324      	adds	r3, #36	; 0x24
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f001 fb33 	bl	800c05c <RCCEx_PLL3_Config>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a9fa:	e009      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	75fb      	strb	r3, [r7, #23]
      break;
 800aa00:	e006      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800aa02:	bf00      	nop
 800aa04:	e004      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800aa06:	bf00      	nop
 800aa08:	e002      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800aa0a:	bf00      	nop
 800aa0c:	e000      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800aa0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa16:	4bb2      	ldr	r3, [pc, #712]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa24:	49ae      	ldr	r1, [pc, #696]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aa26:	4313      	orrs	r3, r2
 800aa28:	654b      	str	r3, [r1, #84]	; 0x54
 800aa2a:	e001      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d04b      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa46:	d02e      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800aa48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa4c:	d828      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa52:	d02a      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800aa54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa58:	d822      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa5e:	d026      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800aa60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa64:	d81c      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa6a:	d010      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800aa6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa70:	d816      	bhi.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d01d      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800aa76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa7a:	d111      	bne.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	2100      	movs	r1, #0
 800aa82:	4618      	mov	r0, r3
 800aa84:	f001 fa38 	bl	800bef8 <RCCEx_PLL2_Config>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aa8c:	e012      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3324      	adds	r3, #36	; 0x24
 800aa92:	2102      	movs	r1, #2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 fae1 	bl	800c05c <RCCEx_PLL3_Config>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aa9e:	e009      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa4:	e006      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aaa6:	bf00      	nop
 800aaa8:	e004      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aaaa:	bf00      	nop
 800aaac:	e002      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aaae:	bf00      	nop
 800aab0:	e000      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaba:	4b89      	ldr	r3, [pc, #548]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aabe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aac8:	4985      	ldr	r1, [pc, #532]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	658b      	str	r3, [r1, #88]	; 0x58
 800aace:	e001      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d04b      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aae6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aaea:	d02e      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800aaec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aaf0:	d828      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aaf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf6:	d02a      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800aaf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aafc:	d822      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aafe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab02:	d026      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ab04:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab08:	d81c      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ab0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab0e:	d010      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800ab10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab14:	d816      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d01d      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800ab1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab1e:	d111      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 f9e6 	bl	800bef8 <RCCEx_PLL2_Config>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab30:	e012      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3324      	adds	r3, #36	; 0x24
 800ab36:	2102      	movs	r1, #2
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 fa8f 	bl	800c05c <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab42:	e009      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]
      break;
 800ab48:	e006      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ab4a:	bf00      	nop
 800ab4c:	e004      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ab4e:	bf00      	nop
 800ab50:	e002      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ab52:	bf00      	nop
 800ab54:	e000      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ab56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab5e:	4b60      	ldr	r3, [pc, #384]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab6c:	495c      	ldr	r1, [pc, #368]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	658b      	str	r3, [r1, #88]	; 0x58
 800ab72:	e001      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0308 	and.w	r3, r3, #8
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d018      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8c:	d10a      	bne.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3324      	adds	r3, #36	; 0x24
 800ab92:	2102      	movs	r1, #2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 fa61 	bl	800c05c <RCCEx_PLL3_Config>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aba4:	4b4e      	ldr	r3, [pc, #312]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abb0:	494b      	ldr	r1, [pc, #300]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0310 	and.w	r3, r3, #16
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d01a      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abcc:	d10a      	bne.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3324      	adds	r3, #36	; 0x24
 800abd2:	2102      	movs	r1, #2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fa41 	bl	800c05c <RCCEx_PLL3_Config>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abe4:	4b3e      	ldr	r3, [pc, #248]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800abe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf2:	493b      	ldr	r1, [pc, #236]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800abf4:	4313      	orrs	r3, r2
 800abf6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d034      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac0e:	d01d      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ac10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac14:	d817      	bhi.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ac1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac1e:	d009      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac20:	e011      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	3304      	adds	r3, #4
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 f965 	bl	800bef8 <RCCEx_PLL2_Config>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac32:	e00c      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3324      	adds	r3, #36	; 0x24
 800ac38:	2102      	movs	r1, #2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 fa0e 	bl	800c05c <RCCEx_PLL3_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac44:	e003      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	75fb      	strb	r3, [r7, #23]
      break;
 800ac4a:	e000      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ac4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac54:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac62:	491f      	ldr	r1, [pc, #124]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	658b      	str	r3, [r1, #88]	; 0x58
 800ac68:	e001      	b.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d036      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac84:	d01c      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ac86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac8a:	d816      	bhi.n	800acba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ac8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac90:	d003      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ac92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac96:	d007      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ac98:	e00f      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9a:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a10      	ldr	r2, [pc, #64]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800aca6:	e00c      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3324      	adds	r3, #36	; 0x24
 800acac:	2101      	movs	r1, #1
 800acae:	4618      	mov	r0, r3
 800acb0:	f001 f9d4 	bl	800c05c <RCCEx_PLL3_Config>
 800acb4:	4603      	mov	r3, r0
 800acb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800acb8:	e003      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	75fb      	strb	r3, [r7, #23]
      break;
 800acbe:	e000      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800acc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10d      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acc8:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800acca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800accc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acd6:	4902      	ldr	r1, [pc, #8]	; (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	654b      	str	r3, [r1, #84]	; 0x54
 800acdc:	e004      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800acde:	bf00      	nop
 800ace0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d029      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800acfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad00:	d007      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ad02:	e00f      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad04:	4b61      	ldr	r3, [pc, #388]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	4a60      	ldr	r2, [pc, #384]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad10:	e00b      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3304      	adds	r3, #4
 800ad16:	2102      	movs	r1, #2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 f8ed 	bl	800bef8 <RCCEx_PLL2_Config>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad22:	e002      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	75fb      	strb	r3, [r7, #23]
      break;
 800ad28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad30:	4b56      	ldr	r3, [pc, #344]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3c:	4953      	ldr	r1, [pc, #332]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad42:	e001      	b.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00a      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3324      	adds	r3, #36	; 0x24
 800ad58:	2102      	movs	r1, #2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f001 f97e 	bl	800c05c <RCCEx_PLL3_Config>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d030      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad7e:	d017      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ad80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad84:	d811      	bhi.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ad86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad8a:	d013      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800ad8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad90:	d80b      	bhi.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d010      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9a:	d106      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9c:	4b3b      	ldr	r3, [pc, #236]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4a3a      	ldr	r2, [pc, #232]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ada2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ada8:	e007      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	75fb      	strb	r3, [r7, #23]
      break;
 800adae:	e004      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800adb0:	bf00      	nop
 800adb2:	e002      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800adb4:	bf00      	nop
 800adb6:	e000      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800adb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d109      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adc0:	4b32      	ldr	r3, [pc, #200]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adcc:	492f      	ldr	r1, [pc, #188]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adce:	4313      	orrs	r3, r2
 800add0:	654b      	str	r3, [r1, #84]	; 0x54
 800add2:	e001      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ade4:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ade6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf0:	4926      	ldr	r1, [pc, #152]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d008      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae02:	4b22      	ldr	r3, [pc, #136]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae0e:	491f      	ldr	r1, [pc, #124]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00d      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae20:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	4a19      	ldr	r2, [pc, #100]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae2a:	6113      	str	r3, [r2, #16]
 800ae2c:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae36:	4915      	ldr	r1, [pc, #84]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da08      	bge.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae44:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae48:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	490e      	ldr	r1, [pc, #56]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae62:	4b0a      	ldr	r3, [pc, #40]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae70:	4906      	ldr	r1, [pc, #24]	; (800ae8c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ae76:	7dbb      	ldrb	r3, [r7, #22]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	e000      	b.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	58024400 	.word	0x58024400

0800ae90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b090      	sub	sp, #64	; 0x40
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae9e:	f040 8089 	bne.w	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800aea2:	4b95      	ldr	r3, [pc, #596]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	633b      	str	r3, [r7, #48]	; 0x30
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d87d      	bhi.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800aeb2:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800aecd 	.word	0x0800aecd
 800aebc:	0800aef1 	.word	0x0800aef1
 800aec0:	0800af15 	.word	0x0800af15
 800aec4:	0800afa9 	.word	0x0800afa9
 800aec8:	0800af39 	.word	0x0800af39

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aecc:	4b8a      	ldr	r3, [pc, #552]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aed8:	d107      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 feb8 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aee8:	e3ed      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeee:	e3ea      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aef0:	4b81      	ldr	r3, [pc, #516]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aefc:	d107      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefe:	f107 0318 	add.w	r3, r7, #24
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fbfe 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af0c:	e3db      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af12:	e3d8      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af14:	4b78      	ldr	r3, [pc, #480]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af20:	d107      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af22:	f107 030c 	add.w	r3, r7, #12
 800af26:	4618      	mov	r0, r3
 800af28:	f000 fd40 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af30:	e3c9      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af36:	e3c6      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af38:	4b6f      	ldr	r3, [pc, #444]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af42:	4b6d      	ldr	r3, [pc, #436]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0304 	and.w	r3, r3, #4
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	d10c      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800af4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af50:	2b00      	cmp	r3, #0
 800af52:	d109      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af54:	4b68      	ldr	r3, [pc, #416]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	08db      	lsrs	r3, r3, #3
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	4a67      	ldr	r2, [pc, #412]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af66:	e01e      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af68:	4b63      	ldr	r3, [pc, #396]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af74:	d106      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800af76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af7c:	d102      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af7e:	4b60      	ldr	r3, [pc, #384]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af82:	e010      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af84:	4b5c      	ldr	r3, [pc, #368]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af90:	d106      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af98:	d102      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af9a:	4b5a      	ldr	r3, [pc, #360]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9e:	e002      	b.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800afa4:	e38f      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800afa6:	e38e      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800afa8:	4b57      	ldr	r3, [pc, #348]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800afaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afac:	e38b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afb2:	e388      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afba:	f040 80a7 	bne.w	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800afbe:	4b4e      	ldr	r3, [pc, #312]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800afc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800afc6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afce:	d054      	beq.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afd6:	f200 808b 	bhi.w	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afe0:	f000 8083 	beq.w	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afea:	f200 8081 	bhi.w	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aff4:	d02f      	beq.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affc:	d878      	bhi.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	2b00      	cmp	r3, #0
 800b002:	d004      	beq.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b00a:	d012      	beq.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800b00c:	e070      	b.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b00e:	4b3a      	ldr	r3, [pc, #232]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b01a:	d107      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b01c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fe17 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b02a:	e34c      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b030:	e349      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b032:	4b31      	ldr	r3, [pc, #196]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b03a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b03e:	d107      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b040:	f107 0318 	add.w	r3, r7, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f000 fb5d 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b04e:	e33a      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b054:	e337      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b056:	4b28      	ldr	r3, [pc, #160]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b062:	d107      	bne.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b064:	f107 030c 	add.w	r3, r7, #12
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fc9f 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b072:	e328      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b078:	e325      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b07a:	4b1f      	ldr	r3, [pc, #124]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b07e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b082:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b084:	4b1c      	ldr	r3, [pc, #112]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d10c      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	2b00      	cmp	r3, #0
 800b094:	d109      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b096:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	4a16      	ldr	r2, [pc, #88]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a8:	e01e      	b.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0aa:	4b13      	ldr	r3, [pc, #76]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b6:	d106      	bne.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0be:	d102      	bne.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c4:	e010      	b.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0d2:	d106      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800b0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0da:	d102      	bne.n	800b0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0e0:	e002      	b.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b0e6:	e2ee      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b0e8:	e2ed      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0ea:	4b07      	ldr	r3, [pc, #28]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0ee:	e2ea      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0f4:	e2e7      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	003d0900 	.word	0x003d0900
 800b104:	017d7840 	.word	0x017d7840
 800b108:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b112:	f040 809c 	bne.w	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b116:	4b9e      	ldr	r3, [pc, #632]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b11e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b126:	d054      	beq.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b12e:	f200 808b 	bhi.w	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b138:	f000 8083 	beq.w	800b242 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b142:	f200 8081 	bhi.w	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b14c:	d02f      	beq.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b154:	d878      	bhi.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b162:	d012      	beq.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b164:	e070      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b166:	4b8a      	ldr	r3, [pc, #552]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b172:	d107      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fd6b 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b182:	e2a0      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b188:	e29d      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b18a:	4b81      	ldr	r3, [pc, #516]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b196:	d107      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b198:	f107 0318 	add.w	r3, r7, #24
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 fab1 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b1a6:	e28e      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1ac:	e28b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1ae:	4b78      	ldr	r3, [pc, #480]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ba:	d107      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1bc:	f107 030c 	add.w	r3, r7, #12
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 fbf3 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1ca:	e27c      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d0:	e279      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1d2:	4b6f      	ldr	r3, [pc, #444]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1dc:	4b6c      	ldr	r3, [pc, #432]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d10c      	bne.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1ee:	4b68      	ldr	r3, [pc, #416]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	08db      	lsrs	r3, r3, #3
 800b1f4:	f003 0303 	and.w	r3, r3, #3
 800b1f8:	4a66      	ldr	r2, [pc, #408]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b1fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b200:	e01e      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b202:	4b63      	ldr	r3, [pc, #396]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20e:	d106      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800b210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b216:	d102      	bne.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b218:	4b5f      	ldr	r3, [pc, #380]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b21c:	e010      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b21e:	4b5c      	ldr	r3, [pc, #368]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b22a:	d106      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b232:	d102      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b234:	4b59      	ldr	r3, [pc, #356]	; (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b238:	e002      	b.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b23e:	e242      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b240:	e241      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b242:	4b57      	ldr	r3, [pc, #348]	; (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b246:	e23e      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b24c:	e23b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b254:	f040 80a6 	bne.w	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b258:	4b4d      	ldr	r3, [pc, #308]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b25c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b260:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b268:	d054      	beq.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b270:	f200 808b 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b27a:	f000 8083 	beq.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800b27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b280:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b284:	f200 8081 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b28e:	d02f      	beq.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800b290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b296:	d878      	bhi.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a4:	d012      	beq.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800b2a6:	e070      	b.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2a8:	4b39      	ldr	r3, [pc, #228]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b4:	d107      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fcca 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2c4:	e1ff      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ca:	e1fc      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2cc:	4b30      	ldr	r3, [pc, #192]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d8:	d107      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2da:	f107 0318 	add.w	r3, r7, #24
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 fa10 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2e8:	e1ed      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ee:	e1ea      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2f0:	4b27      	ldr	r3, [pc, #156]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2fc:	d107      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2fe:	f107 030c 	add.w	r3, r7, #12
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fb52 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b30c:	e1db      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b312:	e1d8      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b314:	4b1e      	ldr	r3, [pc, #120]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b31e:	4b1c      	ldr	r3, [pc, #112]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0304 	and.w	r3, r3, #4
 800b326:	2b04      	cmp	r3, #4
 800b328:	d10c      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800b32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b330:	4b17      	ldr	r3, [pc, #92]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	08db      	lsrs	r3, r3, #3
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	4a16      	ldr	r2, [pc, #88]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b33c:	fa22 f303 	lsr.w	r3, r2, r3
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b342:	e01e      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b344:	4b12      	ldr	r3, [pc, #72]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b34c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b350:	d106      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b358:	d102      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b35a:	4b0f      	ldr	r3, [pc, #60]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b35e:	e010      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b360:	4b0b      	ldr	r3, [pc, #44]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b36c:	d106      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b374:	d102      	bne.n	800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b376:	4b09      	ldr	r3, [pc, #36]	; (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b37a:	e002      	b.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b380:	e1a1      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b382:	e1a0      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b388:	e19d      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b38e:	e19a      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b390:	58024400 	.word	0x58024400
 800b394:	03d09000 	.word	0x03d09000
 800b398:	003d0900 	.word	0x003d0900
 800b39c:	017d7840 	.word	0x017d7840
 800b3a0:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b3aa:	d173      	bne.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b3ac:	4b9a      	ldr	r3, [pc, #616]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b3b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3bc:	d02f      	beq.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3c4:	d863      	bhi.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d2:	d012      	beq.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800b3d4:	e05b      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3d6:	4b90      	ldr	r3, [pc, #576]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e4:	f107 0318 	add.w	r3, r7, #24
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f98b 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3f2:	e168      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3f8:	e165      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3fa:	4b87      	ldr	r3, [pc, #540]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b406:	d107      	bne.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b408:	f107 030c 	add.w	r3, r7, #12
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 facd 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b416:	e156      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b41c:	e153      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b41e:	4b7e      	ldr	r3, [pc, #504]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b426:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b428:	4b7b      	ldr	r3, [pc, #492]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0304 	and.w	r3, r3, #4
 800b430:	2b04      	cmp	r3, #4
 800b432:	d10c      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800b434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b436:	2b00      	cmp	r3, #0
 800b438:	d109      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b43a:	4b77      	ldr	r3, [pc, #476]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	08db      	lsrs	r3, r3, #3
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	4a75      	ldr	r2, [pc, #468]	; (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b446:	fa22 f303 	lsr.w	r3, r2, r3
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b44c:	e01e      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b44e:	4b72      	ldr	r3, [pc, #456]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b45a:	d106      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b462:	d102      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b464:	4b6e      	ldr	r3, [pc, #440]	; (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b468:	e010      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b46a:	4b6b      	ldr	r3, [pc, #428]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b472:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b476:	d106      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47e:	d102      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b480:	4b68      	ldr	r3, [pc, #416]	; (800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b484:	e002      	b.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b48a:	e11c      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b48c:	e11b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b492:	e118      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b49a:	d133      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b49c:	4b5e      	ldr	r3, [pc, #376]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b49e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b2:	d012      	beq.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800b4b4:	e023      	b.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4b6:	4b58      	ldr	r3, [pc, #352]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4c2:	d107      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fbc3 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4d2:	e0f8      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d8:	e0f5      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4da:	4b4f      	ldr	r3, [pc, #316]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4e6:	d107      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e8:	f107 0318 	add.w	r3, r7, #24
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 f909 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4f6:	e0e6      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fc:	e0e3      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b502:	e0e0      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b50a:	f040 808d 	bne.w	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b50e:	4b42      	ldr	r3, [pc, #264]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b512:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b516:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b51e:	d06b      	beq.n	800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b526:	d874      	bhi.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b52e:	d056      	beq.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b536:	d86c      	bhi.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b53e:	d03b      	beq.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800b540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b546:	d864      	bhi.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54e:	d021      	beq.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b556:	d85c      	bhi.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800b55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b564:	d004      	beq.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800b566:	e054      	b.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b568:	f000 f8b6 	bl	800b6d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b56c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b56e:	e0aa      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b570:	4b29      	ldr	r3, [pc, #164]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b57c:	d107      	bne.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b57e:	f107 0318 	add.w	r3, r7, #24
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f8be 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b58c:	e09b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b592:	e098      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b594:	4b20      	ldr	r3, [pc, #128]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a0:	d107      	bne.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a2:	f107 030c 	add.w	r3, r7, #12
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fa00 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5b0:	e089      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b6:	e086      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5b8:	4b17      	ldr	r3, [pc, #92]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0304 	and.w	r3, r3, #4
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	d109      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5c4:	4b14      	ldr	r3, [pc, #80]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	08db      	lsrs	r3, r3, #3
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	4a13      	ldr	r2, [pc, #76]	; (800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5d6:	e076      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5dc:	e073      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5de:	4b0e      	ldr	r3, [pc, #56]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ea:	d102      	bne.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800b5ec:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5f0:	e069      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f6:	e066      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5f8:	4b07      	ldr	r3, [pc, #28]	; (800b618 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b604:	d102      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800b606:	4b07      	ldr	r3, [pc, #28]	; (800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b608:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b60a:	e05c      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b610:	e059      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b616:	e056      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b618:	58024400 	.word	0x58024400
 800b61c:	03d09000 	.word	0x03d09000
 800b620:	003d0900 	.word	0x003d0900
 800b624:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62e:	d148      	bne.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b630:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b638:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b640:	d02a      	beq.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b648:	d838      	bhi.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d004      	beq.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b656:	d00d      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800b658:	e030      	b.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b65a:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b666:	d102      	bne.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800b668:	4b1a      	ldr	r3, [pc, #104]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b66c:	e02b      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b672:	e028      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b674:	4b16      	ldr	r3, [pc, #88]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b680:	d107      	bne.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b686:	4618      	mov	r0, r3
 800b688:	f000 fae4 	bl	800bc54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b690:	e019      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b696:	e016      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6a4:	d107      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a6:	f107 0318 	add.w	r3, r7, #24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f82a 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6b4:	e007      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ba:	e004      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c0:	e001      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3740      	adds	r7, #64	; 0x40
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	58024400 	.word	0x58024400
 800b6d4:	017d7840 	.word	0x017d7840

0800b6d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b6dc:	f7fe fc82 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	091b      	lsrs	r3, r3, #4
 800b6e8:	f003 0307 	and.w	r3, r3, #7
 800b6ec:	4904      	ldr	r1, [pc, #16]	; (800b700 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b6ee:	5ccb      	ldrb	r3, [r1, r3]
 800b6f0:	f003 031f 	and.w	r3, r3, #31
 800b6f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	58024400 	.word	0x58024400
 800b700:	08011988 	.word	0x08011988

0800b704 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b704:	b480      	push	{r7}
 800b706:	b089      	sub	sp, #36	; 0x24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b70c:	4ba1      	ldr	r3, [pc, #644]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b716:	4b9f      	ldr	r3, [pc, #636]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71a:	0b1b      	lsrs	r3, r3, #12
 800b71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b720:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b722:	4b9c      	ldr	r3, [pc, #624]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	091b      	lsrs	r3, r3, #4
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b72e:	4b99      	ldr	r3, [pc, #612]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b732:	08db      	lsrs	r3, r3, #3
 800b734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	fb02 f303 	mul.w	r3, r2, r3
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f000 8111 	beq.w	800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b02      	cmp	r3, #2
 800b756:	f000 8083 	beq.w	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	f200 80a1 	bhi.w	800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d056      	beq.n	800b81c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b76e:	e099      	b.n	800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b770:	4b88      	ldr	r3, [pc, #544]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d02d      	beq.n	800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b77c:	4b85      	ldr	r3, [pc, #532]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	08db      	lsrs	r3, r3, #3
 800b782:	f003 0303 	and.w	r3, r3, #3
 800b786:	4a84      	ldr	r2, [pc, #528]	; (800b998 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b788:	fa22 f303 	lsr.w	r3, r2, r3
 800b78c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a6:	4b7b      	ldr	r3, [pc, #492]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7d6:	e087      	b.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b6a      	ldr	r3, [pc, #424]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b81a:	e065      	b.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82e:	4b59      	ldr	r3, [pc, #356]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b842:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b85e:	e043      	b.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	ee07 3a90 	vmov	s15, r3
 800b866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b872:	4b48      	ldr	r3, [pc, #288]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b882:	ed97 6a03 	vldr	s12, [r7, #12]
 800b886:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b89e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8a2:	e021      	b.n	800b8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8b6:	4b37      	ldr	r3, [pc, #220]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8be:	ee07 3a90 	vmov	s15, r3
 800b8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b8e8:	4b2a      	ldr	r3, [pc, #168]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ec:	0a5b      	lsrs	r3, r3, #9
 800b8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b902:	edd7 6a07 	vldr	s13, [r7, #28]
 800b906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b90e:	ee17 2a90 	vmov	r2, s15
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b916:	4b1f      	ldr	r3, [pc, #124]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	0c1b      	lsrs	r3, r3, #16
 800b91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b920:	ee07 3a90 	vmov	s15, r3
 800b924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b92c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b930:	edd7 6a07 	vldr	s13, [r7, #28]
 800b934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93c:	ee17 2a90 	vmov	r2, s15
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b944:	4b13      	ldr	r3, [pc, #76]	; (800b994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b948:	0e1b      	lsrs	r3, r3, #24
 800b94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b95e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96a:	ee17 2a90 	vmov	r2, s15
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b972:	e008      	b.n	800b986 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	609a      	str	r2, [r3, #8]
}
 800b986:	bf00      	nop
 800b988:	3724      	adds	r7, #36	; 0x24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	58024400 	.word	0x58024400
 800b998:	03d09000 	.word	0x03d09000
 800b99c:	46000000 	.word	0x46000000
 800b9a0:	4c742400 	.word	0x4c742400
 800b9a4:	4a742400 	.word	0x4a742400
 800b9a8:	4bbebc20 	.word	0x4bbebc20

0800b9ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b089      	sub	sp, #36	; 0x24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9b4:	4ba1      	ldr	r3, [pc, #644]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b9be:	4b9f      	ldr	r3, [pc, #636]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c2:	0d1b      	lsrs	r3, r3, #20
 800b9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b9ca:	4b9c      	ldr	r3, [pc, #624]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ce:	0a1b      	lsrs	r3, r3, #8
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b9d6:	4b99      	ldr	r3, [pc, #612]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	fb02 f303 	mul.w	r3, r2, r3
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 8111 	beq.w	800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	f000 8083 	beq.w	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	f200 80a1 	bhi.w	800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d056      	beq.n	800bac4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba16:	e099      	b.n	800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba18:	4b88      	ldr	r3, [pc, #544]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 0320 	and.w	r3, r3, #32
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d02d      	beq.n	800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba24:	4b85      	ldr	r3, [pc, #532]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	08db      	lsrs	r3, r3, #3
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	4a84      	ldr	r2, [pc, #528]	; (800bc40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba30:	fa22 f303 	lsr.w	r3, r2, r3
 800ba34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	ee07 3a90 	vmov	s15, r3
 800ba3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba4e:	4b7b      	ldr	r3, [pc, #492]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba7e:	e087      	b.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	ee07 3a90 	vmov	s15, r3
 800ba86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba92:	4b6a      	ldr	r3, [pc, #424]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac2:	e065      	b.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bace:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad6:	4b59      	ldr	r3, [pc, #356]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb06:	e043      	b.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1a:	4b48      	ldr	r3, [pc, #288]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb4a:	e021      	b.n	800bb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b37      	ldr	r3, [pc, #220]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb90:	4b2a      	ldr	r3, [pc, #168]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	0a5b      	lsrs	r3, r3, #9
 800bb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb9a:	ee07 3a90 	vmov	s15, r3
 800bb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbb6:	ee17 2a90 	vmov	r2, s15
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bbbe:	4b1f      	ldr	r3, [pc, #124]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	0c1b      	lsrs	r3, r3, #16
 800bbc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe4:	ee17 2a90 	vmov	r2, s15
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bbec:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf0:	0e1b      	lsrs	r3, r3, #24
 800bbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc12:	ee17 2a90 	vmov	r2, s15
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc1a:	e008      	b.n	800bc2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	609a      	str	r2, [r3, #8]
}
 800bc2e:	bf00      	nop
 800bc30:	3724      	adds	r7, #36	; 0x24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	58024400 	.word	0x58024400
 800bc40:	03d09000 	.word	0x03d09000
 800bc44:	46000000 	.word	0x46000000
 800bc48:	4c742400 	.word	0x4c742400
 800bc4c:	4a742400 	.word	0x4a742400
 800bc50:	4bbebc20 	.word	0x4bbebc20

0800bc54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b089      	sub	sp, #36	; 0x24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc5c:	4ba0      	ldr	r3, [pc, #640]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc60:	f003 0303 	and.w	r3, r3, #3
 800bc64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bc66:	4b9e      	ldr	r3, [pc, #632]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6a:	091b      	lsrs	r3, r3, #4
 800bc6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc72:	4b9b      	ldr	r3, [pc, #620]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc76:	f003 0301 	and.w	r3, r3, #1
 800bc7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bc7c:	4b98      	ldr	r3, [pc, #608]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc80:	08db      	lsrs	r3, r3, #3
 800bc82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	fb02 f303 	mul.w	r3, r2, r3
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 8111 	beq.w	800bec2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	f000 8083 	beq.w	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	f200 80a1 	bhi.w	800bdf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d056      	beq.n	800bd6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bcbc:	e099      	b.n	800bdf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcbe:	4b88      	ldr	r3, [pc, #544]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d02d      	beq.n	800bd26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcca:	4b85      	ldr	r3, [pc, #532]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	08db      	lsrs	r3, r3, #3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	4a83      	ldr	r2, [pc, #524]	; (800bee4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bcd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcda:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf4:	4b7a      	ldr	r3, [pc, #488]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfc:	ee07 3a90 	vmov	s15, r3
 800bd00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd08:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd24:	e087      	b.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800beec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd38:	4b69      	ldr	r3, [pc, #420]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd48:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd68:	e065      	b.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bef0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7c:	4b58      	ldr	r3, [pc, #352]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd90:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdac:	e043      	b.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bef4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bdbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc0:	4b47      	ldr	r3, [pc, #284]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bde4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdf0:	e021      	b.n	800be36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800beec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be04:	4b36      	ldr	r3, [pc, #216]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0c:	ee07 3a90 	vmov	s15, r3
 800be10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be14:	ed97 6a03 	vldr	s12, [r7, #12]
 800be18:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bee8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800be36:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3a:	0a5b      	lsrs	r3, r3, #9
 800be3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be40:	ee07 3a90 	vmov	s15, r3
 800be44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be50:	edd7 6a07 	vldr	s13, [r7, #28]
 800be54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be5c:	ee17 2a90 	vmov	r2, s15
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800be64:	4b1e      	ldr	r3, [pc, #120]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be68:	0c1b      	lsrs	r3, r3, #16
 800be6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be8a:	ee17 2a90 	vmov	r2, s15
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be92:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be96:	0e1b      	lsrs	r3, r3, #24
 800be98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be9c:	ee07 3a90 	vmov	s15, r3
 800bea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beac:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb8:	ee17 2a90 	vmov	r2, s15
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bec0:	e008      	b.n	800bed4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	609a      	str	r2, [r3, #8]
}
 800bed4:	bf00      	nop
 800bed6:	3724      	adds	r7, #36	; 0x24
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	58024400 	.word	0x58024400
 800bee4:	03d09000 	.word	0x03d09000
 800bee8:	46000000 	.word	0x46000000
 800beec:	4c742400 	.word	0x4c742400
 800bef0:	4a742400 	.word	0x4a742400
 800bef4:	4bbebc20 	.word	0x4bbebc20

0800bef8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf06:	4b53      	ldr	r3, [pc, #332]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d101      	bne.n	800bf16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e099      	b.n	800c04a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf16:	4b4f      	ldr	r3, [pc, #316]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a4e      	ldr	r2, [pc, #312]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf22:	f7f8 f8c5 	bl	80040b0 <HAL_GetTick>
 800bf26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf28:	e008      	b.n	800bf3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf2a:	f7f8 f8c1 	bl	80040b0 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d901      	bls.n	800bf3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e086      	b.n	800c04a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf3c:	4b45      	ldr	r3, [pc, #276]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1f0      	bne.n	800bf2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf48:	4b42      	ldr	r3, [pc, #264]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	031b      	lsls	r3, r3, #12
 800bf56:	493f      	ldr	r1, [pc, #252]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	025b      	lsls	r3, r3, #9
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	431a      	orrs	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	041b      	lsls	r3, r3, #16
 800bf7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	061b      	lsls	r3, r3, #24
 800bf88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf8c:	4931      	ldr	r1, [pc, #196]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf92:	4b30      	ldr	r3, [pc, #192]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	492d      	ldr	r1, [pc, #180]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bfa4:	4b2b      	ldr	r3, [pc, #172]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa8:	f023 0220 	bic.w	r2, r3, #32
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	4928      	ldr	r1, [pc, #160]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bfb6:	4b27      	ldr	r3, [pc, #156]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	4a26      	ldr	r2, [pc, #152]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfbc:	f023 0310 	bic.w	r3, r3, #16
 800bfc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bfc2:	4b24      	ldr	r3, [pc, #144]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfc6:	4b24      	ldr	r3, [pc, #144]	; (800c058 <RCCEx_PLL2_Config+0x160>)
 800bfc8:	4013      	ands	r3, r2
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	69d2      	ldr	r2, [r2, #28]
 800bfce:	00d2      	lsls	r2, r2, #3
 800bfd0:	4920      	ldr	r1, [pc, #128]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bfd6:	4b1f      	ldr	r3, [pc, #124]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	4a1e      	ldr	r2, [pc, #120]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfdc:	f043 0310 	orr.w	r3, r3, #16
 800bfe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d106      	bne.n	800bff6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bfe8:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	4a19      	ldr	r2, [pc, #100]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bfee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bff4:	e00f      	b.n	800c016 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d106      	bne.n	800c00a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bffc:	4b15      	ldr	r3, [pc, #84]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	4a14      	ldr	r2, [pc, #80]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c006:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c008:	e005      	b.n	800c016 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c00a:	4b12      	ldr	r3, [pc, #72]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	4a11      	ldr	r2, [pc, #68]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c016:	4b0f      	ldr	r3, [pc, #60]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a0e      	ldr	r2, [pc, #56]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c01c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c022:	f7f8 f845 	bl	80040b0 <HAL_GetTick>
 800c026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c028:	e008      	b.n	800c03c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c02a:	f7f8 f841 	bl	80040b0 <HAL_GetTick>
 800c02e:	4602      	mov	r2, r0
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	2b02      	cmp	r3, #2
 800c036:	d901      	bls.n	800c03c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e006      	b.n	800c04a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <RCCEx_PLL2_Config+0x15c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d0f0      	beq.n	800c02a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	58024400 	.word	0x58024400
 800c058:	ffff0007 	.word	0xffff0007

0800c05c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c06a:	4b53      	ldr	r3, [pc, #332]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d101      	bne.n	800c07a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e099      	b.n	800c1ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c07a:	4b4f      	ldr	r3, [pc, #316]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a4e      	ldr	r2, [pc, #312]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c086:	f7f8 f813 	bl	80040b0 <HAL_GetTick>
 800c08a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c08c:	e008      	b.n	800c0a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c08e:	f7f8 f80f 	bl	80040b0 <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d901      	bls.n	800c0a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e086      	b.n	800c1ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0a0:	4b45      	ldr	r3, [pc, #276]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1f0      	bne.n	800c08e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c0ac:	4b42      	ldr	r3, [pc, #264]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	051b      	lsls	r3, r3, #20
 800c0ba:	493f      	ldr	r1, [pc, #252]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	628b      	str	r3, [r1, #40]	; 0x28
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	025b      	lsls	r3, r3, #9
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	041b      	lsls	r3, r3, #16
 800c0de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c0e2:	431a      	orrs	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	061b      	lsls	r3, r3, #24
 800c0ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c0f0:	4931      	ldr	r1, [pc, #196]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c0f6:	4b30      	ldr	r3, [pc, #192]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	492d      	ldr	r1, [pc, #180]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c104:	4313      	orrs	r3, r2
 800c106:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c108:	4b2b      	ldr	r3, [pc, #172]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	4928      	ldr	r1, [pc, #160]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c116:	4313      	orrs	r3, r2
 800c118:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c11a:	4b27      	ldr	r3, [pc, #156]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	4a26      	ldr	r2, [pc, #152]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c126:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c12a:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <RCCEx_PLL3_Config+0x160>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	69d2      	ldr	r2, [r2, #28]
 800c132:	00d2      	lsls	r2, r2, #3
 800c134:	4920      	ldr	r1, [pc, #128]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c136:	4313      	orrs	r3, r2
 800c138:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c13a:	4b1f      	ldr	r3, [pc, #124]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13e:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d106      	bne.n	800c15a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c14c:	4b1a      	ldr	r3, [pc, #104]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	4a19      	ldr	r2, [pc, #100]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c156:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c158:	e00f      	b.n	800c17a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d106      	bne.n	800c16e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c160:	4b15      	ldr	r3, [pc, #84]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c164:	4a14      	ldr	r2, [pc, #80]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c16a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c16c:	e005      	b.n	800c17a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c16e:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	4a11      	ldr	r2, [pc, #68]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c178:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c17a:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a0e      	ldr	r2, [pc, #56]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c186:	f7f7 ff93 	bl	80040b0 <HAL_GetTick>
 800c18a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c18c:	e008      	b.n	800c1a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c18e:	f7f7 ff8f 	bl	80040b0 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d901      	bls.n	800c1a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e006      	b.n	800c1ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1a0:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d0f0      	beq.n	800c18e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	58024400 	.word	0x58024400
 800c1bc:	ffff0007 	.word	0xffff0007

0800c1c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e0f1      	b.n	800c3b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a78      	ldr	r2, [pc, #480]	; (800c3c0 <HAL_SPI_Init+0x200>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d00f      	beq.n	800c202 <HAL_SPI_Init+0x42>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a77      	ldr	r2, [pc, #476]	; (800c3c4 <HAL_SPI_Init+0x204>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d00a      	beq.n	800c202 <HAL_SPI_Init+0x42>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a75      	ldr	r2, [pc, #468]	; (800c3c8 <HAL_SPI_Init+0x208>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d005      	beq.n	800c202 <HAL_SPI_Init+0x42>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	2b0f      	cmp	r3, #15
 800c1fc:	d901      	bls.n	800c202 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e0d9      	b.n	800c3b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f001 f880 	bl	800d308 <SPI_GetPacketSize>
 800c208:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a6c      	ldr	r2, [pc, #432]	; (800c3c0 <HAL_SPI_Init+0x200>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00c      	beq.n	800c22e <HAL_SPI_Init+0x6e>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a6a      	ldr	r2, [pc, #424]	; (800c3c4 <HAL_SPI_Init+0x204>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d007      	beq.n	800c22e <HAL_SPI_Init+0x6e>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a69      	ldr	r2, [pc, #420]	; (800c3c8 <HAL_SPI_Init+0x208>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d002      	beq.n	800c22e <HAL_SPI_Init+0x6e>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b08      	cmp	r3, #8
 800c22c:	d811      	bhi.n	800c252 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c232:	4a63      	ldr	r2, [pc, #396]	; (800c3c0 <HAL_SPI_Init+0x200>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d009      	beq.n	800c24c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a61      	ldr	r2, [pc, #388]	; (800c3c4 <HAL_SPI_Init+0x204>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d004      	beq.n	800c24c <HAL_SPI_Init+0x8c>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a60      	ldr	r2, [pc, #384]	; (800c3c8 <HAL_SPI_Init+0x208>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d104      	bne.n	800c256 <HAL_SPI_Init+0x96>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b10      	cmp	r3, #16
 800c250:	d901      	bls.n	800c256 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e0af      	b.n	800c3b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7f6 faa0 	bl	80027b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f022 0201 	bic.w	r2, r2, #1
 800c286:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c292:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c29c:	d119      	bne.n	800c2d2 <HAL_SPI_Init+0x112>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c2a6:	d103      	bne.n	800c2b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d008      	beq.n	800c2c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10c      	bne.n	800c2d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c2bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2c0:	d107      	bne.n	800c2d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69da      	ldr	r2, [r3, #28]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2e4:	ea42 0103 	orr.w	r1, r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68da      	ldr	r2, [r3, #12]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	430a      	orrs	r2, r1
 800c2f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c302:	431a      	orrs	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	431a      	orrs	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	431a      	orrs	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	431a      	orrs	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a1b      	ldr	r3, [r3, #32]
 800c31a:	431a      	orrs	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	431a      	orrs	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c326:	431a      	orrs	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	431a      	orrs	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c332:	ea42 0103 	orr.w	r1, r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	430a      	orrs	r2, r1
 800c340:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d113      	bne.n	800c372 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c35c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c370:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0201 	bic.w	r2, r2, #1
 800c380:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	40013000 	.word	0x40013000
 800c3c4:	40003800 	.word	0x40003800
 800c3c8:	40003c00 	.word	0x40003c00

0800c3cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3320      	adds	r3, #32
 800c3e2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d101      	bne.n	800c3f6 <HAL_SPI_Transmit+0x2a>
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e1d7      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3fe:	f7f7 fe57 	bl	80040b0 <HAL_GetTick>
 800c402:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d007      	beq.n	800c420 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c410:	2302      	movs	r3, #2
 800c412:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c41c:	7efb      	ldrb	r3, [r7, #27]
 800c41e:	e1c2      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <HAL_SPI_Transmit+0x60>
 800c426:	88fb      	ldrh	r3, [r7, #6]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d107      	bne.n	800c43c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c438:	7efb      	ldrb	r3, [r7, #27]
 800c43a:	e1b4      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2203      	movs	r2, #3
 800c440:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	88fa      	ldrh	r2, [r7, #6]
 800c456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	88fa      	ldrh	r2, [r7, #6]
 800c45e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2200      	movs	r2, #0
 800c466:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c48c:	d107      	bne.n	800c49e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c49c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	4b96      	ldr	r3, [pc, #600]	; (800c700 <HAL_SPI_Transmit+0x334>)
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	88f9      	ldrh	r1, [r7, #6]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	6812      	ldr	r2, [r2, #0]
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f042 0201 	orr.w	r2, r2, #1
 800c4c0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4ca:	d107      	bne.n	800c4dc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b0f      	cmp	r3, #15
 800c4e2:	d947      	bls.n	800c574 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c4e4:	e03f      	b.n	800c566 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	f003 0302 	and.w	r3, r3, #2
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d114      	bne.n	800c51e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6812      	ldr	r2, [r2, #0]
 800c4fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c504:	1d1a      	adds	r2, r3, #4
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c510:	b29b      	uxth	r3, r3
 800c512:	3b01      	subs	r3, #1
 800c514:	b29a      	uxth	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c51c:	e023      	b.n	800c566 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c51e:	f7f7 fdc7 	bl	80040b0 <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d803      	bhi.n	800c536 <HAL_SPI_Transmit+0x16a>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c534:	d102      	bne.n	800c53c <HAL_SPI_Transmit+0x170>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d114      	bne.n	800c566 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 fe15 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c550:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e11f      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1b9      	bne.n	800c4e6 <HAL_SPI_Transmit+0x11a>
 800c572:	e0f2      	b.n	800c75a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	2b07      	cmp	r3, #7
 800c57a:	f240 80e7 	bls.w	800c74c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c57e:	e05d      	b.n	800c63c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	d132      	bne.n	800c5f4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c594:	b29b      	uxth	r3, r3
 800c596:	2b01      	cmp	r3, #1
 800c598:	d918      	bls.n	800c5cc <HAL_SPI_Transmit+0x200>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d014      	beq.n	800c5cc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6812      	ldr	r2, [r2, #0]
 800c5ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5b2:	1d1a      	adds	r2, r3, #4
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	3b02      	subs	r3, #2
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c5ca:	e037      	b.n	800c63c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5d0:	881a      	ldrh	r2, [r3, #0]
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5da:	1c9a      	adds	r2, r3, #2
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c5f2:	e023      	b.n	800c63c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5f4:	f7f7 fd5c 	bl	80040b0 <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d803      	bhi.n	800c60c <HAL_SPI_Transmit+0x240>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60a:	d102      	bne.n	800c612 <HAL_SPI_Transmit+0x246>
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d114      	bne.n	800c63c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 fdaa 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2201      	movs	r2, #1
 800c634:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c638:	2303      	movs	r3, #3
 800c63a:	e0b4      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c642:	b29b      	uxth	r3, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	d19b      	bne.n	800c580 <HAL_SPI_Transmit+0x1b4>
 800c648:	e087      	b.n	800c75a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b02      	cmp	r3, #2
 800c656:	d155      	bne.n	800c704 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c65e:	b29b      	uxth	r3, r3
 800c660:	2b03      	cmp	r3, #3
 800c662:	d918      	bls.n	800c696 <HAL_SPI_Transmit+0x2ca>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c668:	2b40      	cmp	r3, #64	; 0x40
 800c66a:	d914      	bls.n	800c696 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6812      	ldr	r2, [r2, #0]
 800c676:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c67c:	1d1a      	adds	r2, r3, #4
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3b04      	subs	r3, #4
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c694:	e05a      	b.n	800c74c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d917      	bls.n	800c6d2 <HAL_SPI_Transmit+0x306>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d013      	beq.n	800c6d2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ae:	881a      	ldrh	r2, [r3, #0]
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b8:	1c9a      	adds	r2, r3, #2
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3b02      	subs	r3, #2
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c6d0:	e03c      	b.n	800c74c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3320      	adds	r3, #32
 800c6dc:	7812      	ldrb	r2, [r2, #0]
 800c6de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6e4:	1c5a      	adds	r2, r3, #1
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c6fc:	e026      	b.n	800c74c <HAL_SPI_Transmit+0x380>
 800c6fe:	bf00      	nop
 800c700:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c704:	f7f7 fcd4 	bl	80040b0 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	429a      	cmp	r2, r3
 800c712:	d803      	bhi.n	800c71c <HAL_SPI_Transmit+0x350>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d102      	bne.n	800c722 <HAL_SPI_Transmit+0x356>
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d114      	bne.n	800c74c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 fd22 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c736:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e02c      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c752:	b29b      	uxth	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	f47f af78 	bne.w	800c64a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2200      	movs	r2, #0
 800c762:	2108      	movs	r1, #8
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fda1 	bl	800d2ac <SPI_WaitOnFlagUntilTimeout>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d007      	beq.n	800c780 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c776:	f043 0220 	orr.w	r2, r3, #32
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fcf3 	bl	800d16c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c7a4:	7efb      	ldrb	r3, [r7, #27]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3720      	adds	r7, #32
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop

0800c7b0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b08a      	sub	sp, #40	; 0x28
 800c7b4:	af02      	add	r7, sp, #8
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3330      	adds	r3, #48	; 0x30
 800c7ca:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7d4:	d112      	bne.n	800c7fc <HAL_SPI_Receive+0x4c>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10e      	bne.n	800c7fc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2204      	movs	r2, #4
 800c7e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c7e6:	88fa      	ldrh	r2, [r7, #6]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	68b9      	ldr	r1, [r7, #8]
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f000 f9ce 	bl	800cb94 <HAL_SPI_TransmitReceive>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	e1c7      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <HAL_SPI_Receive+0x5a>
 800c806:	2302      	movs	r3, #2
 800c808:	e1c0      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c812:	f7f7 fc4d 	bl	80040b0 <HAL_GetTick>
 800c816:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b01      	cmp	r3, #1
 800c822:	d007      	beq.n	800c834 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c824:	2302      	movs	r3, #2
 800c826:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c830:	7ffb      	ldrb	r3, [r7, #31]
 800c832:	e1ab      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <HAL_SPI_Receive+0x90>
 800c83a:	88fb      	ldrh	r3, [r7, #6]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d107      	bne.n	800c850 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c84c:	7ffb      	ldrb	r3, [r7, #31]
 800c84e:	e19d      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2204      	movs	r2, #4
 800c854:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	88fa      	ldrh	r2, [r7, #6]
 800c86a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	88fa      	ldrh	r2, [r7, #6]
 800c872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c8a0:	d107      	bne.n	800c8b2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	4b94      	ldr	r3, [pc, #592]	; (800cb0c <HAL_SPI_Receive+0x35c>)
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	88f9      	ldrh	r1, [r7, #6]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	430b      	orrs	r3, r1
 800c8c4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f042 0201 	orr.w	r2, r2, #1
 800c8d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c8de:	d107      	bne.n	800c8f0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	2b0f      	cmp	r3, #15
 800c8f6:	d948      	bls.n	800c98a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c8f8:	e040      	b.n	800c97c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	695a      	ldr	r2, [r3, #20]
 800c900:	f248 0308 	movw	r3, #32776	; 0x8008
 800c904:	4013      	ands	r3, r2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d014      	beq.n	800c934 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c914:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c91a:	1d1a      	adds	r2, r3, #4
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c926:	b29b      	uxth	r3, r3
 800c928:	3b01      	subs	r3, #1
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c932:	e023      	b.n	800c97c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c934:	f7f7 fbbc 	bl	80040b0 <HAL_GetTick>
 800c938:	4602      	mov	r2, r0
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	429a      	cmp	r2, r3
 800c942:	d803      	bhi.n	800c94c <HAL_SPI_Receive+0x19c>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d102      	bne.n	800c952 <HAL_SPI_Receive+0x1a2>
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d114      	bne.n	800c97c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 fc0a 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e107      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c982:	b29b      	uxth	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1b8      	bne.n	800c8fa <HAL_SPI_Receive+0x14a>
 800c988:	e0ed      	b.n	800cb66 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	2b07      	cmp	r3, #7
 800c990:	f240 80e2 	bls.w	800cb58 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c994:	e05b      	b.n	800ca4e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d030      	beq.n	800ca06 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d014      	beq.n	800c9dc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c9bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c2:	1d1a      	adds	r2, r3, #4
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	3b02      	subs	r3, #2
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9da:	e038      	b.n	800ca4e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9e0:	69ba      	ldr	r2, [r7, #24]
 800c9e2:	8812      	ldrh	r2, [r2, #0]
 800c9e4:	b292      	uxth	r2, r2
 800c9e6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ec:	1c9a      	adds	r2, r3, #2
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca04:	e023      	b.n	800ca4e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca06:	f7f7 fb53 	bl	80040b0 <HAL_GetTick>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d803      	bhi.n	800ca1e <HAL_SPI_Receive+0x26e>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1c:	d102      	bne.n	800ca24 <HAL_SPI_Receive+0x274>
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d114      	bne.n	800ca4e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 fba1 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e09e      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d19d      	bne.n	800c996 <HAL_SPI_Receive+0x1e6>
 800ca5a:	e084      	b.n	800cb66 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d052      	beq.n	800cb10 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d014      	beq.n	800caa2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca82:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca88:	1d1a      	adds	r2, r3, #4
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	3b04      	subs	r3, #4
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800caa0:	e05a      	b.n	800cb58 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800caac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab0:	d914      	bls.n	800cadc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	8812      	ldrh	r2, [r2, #0]
 800caba:	b292      	uxth	r2, r2
 800cabc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cac2:	1c9a      	adds	r2, r3, #2
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b02      	subs	r3, #2
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cada:	e03d      	b.n	800cb58 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cae8:	7812      	ldrb	r2, [r2, #0]
 800caea:	b2d2      	uxtb	r2, r2
 800caec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb0a:	e025      	b.n	800cb58 <HAL_SPI_Receive+0x3a8>
 800cb0c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb10:	f7f7 face 	bl	80040b0 <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d803      	bhi.n	800cb28 <HAL_SPI_Receive+0x378>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb26:	d102      	bne.n	800cb2e <HAL_SPI_Receive+0x37e>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d114      	bne.n	800cb58 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 fb1c 	bl	800d16c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cb54:	2303      	movs	r3, #3
 800cb56:	e019      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f47f af7b 	bne.w	800ca5c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f000 fb00 	bl	800d16c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e000      	b.n	800cb8c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08e      	sub	sp, #56	; 0x38
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3320      	adds	r3, #32
 800cbae:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3330      	adds	r3, #48	; 0x30
 800cbb6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d101      	bne.n	800cbc6 <HAL_SPI_TransmitReceive+0x32>
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	e2ce      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbce:	f7f7 fa6f 	bl	80040b0 <HAL_GetTick>
 800cbd2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800cbd4:	887b      	ldrh	r3, [r7, #2]
 800cbd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800cbd8:	887b      	ldrh	r3, [r7, #2]
 800cbda:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cbe2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cbea:	7efb      	ldrb	r3, [r7, #27]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d014      	beq.n	800cc1a <HAL_SPI_TransmitReceive+0x86>
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbf6:	d106      	bne.n	800cc06 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800cc00:	7efb      	ldrb	r3, [r7, #27]
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d009      	beq.n	800cc1a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800cc06:	2302      	movs	r3, #2
 800cc08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cc14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc18:	e2a4      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d005      	beq.n	800cc2c <HAL_SPI_TransmitReceive+0x98>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <HAL_SPI_TransmitReceive+0x98>
 800cc26:	887b      	ldrh	r3, [r7, #2]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d109      	bne.n	800cc40 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cc3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc3e:	e291      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d003      	beq.n	800cc54 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2205      	movs	r2, #5
 800cc50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2200      	movs	r2, #0
 800cc58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	887a      	ldrh	r2, [r7, #2]
 800cc66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	887a      	ldrh	r2, [r7, #2]
 800cc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	887a      	ldrh	r2, [r7, #2]
 800cc7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	887a      	ldrh	r2, [r7, #2]
 800cc84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	4b9f      	ldr	r3, [pc, #636]	; (800cf18 <HAL_SPI_TransmitReceive+0x384>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	8879      	ldrh	r1, [r7, #2]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	6812      	ldr	r2, [r2, #0]
 800cca4:	430b      	orrs	r3, r1
 800cca6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccc0:	d107      	bne.n	800ccd2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	2b0f      	cmp	r3, #15
 800ccd8:	d970      	bls.n	800cdbc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ccda:	e068      	b.n	800cdae <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d11a      	bne.n	800cd20 <HAL_SPI_TransmitReceive+0x18c>
 800ccea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d017      	beq.n	800cd20 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd00:	1d1a      	adds	r2, r3, #4
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	3b01      	subs	r3, #1
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	695a      	ldr	r2, [r3, #20]
 800cd26:	f248 0308 	movw	r3, #32776	; 0x8008
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d01a      	beq.n	800cd66 <HAL_SPI_TransmitReceive+0x1d2>
 800cd30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d017      	beq.n	800cd66 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cd40:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd46:	1d1a      	adds	r2, r3, #4
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	3b01      	subs	r3, #1
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd64:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd66:	f7f7 f9a3 	bl	80040b0 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d803      	bhi.n	800cd7e <HAL_SPI_TransmitReceive+0x1ea>
 800cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7c:	d102      	bne.n	800cd84 <HAL_SPI_TransmitReceive+0x1f0>
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d114      	bne.n	800cdae <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f9f1 	bl	800d16c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e1da      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d193      	bne.n	800ccdc <HAL_SPI_TransmitReceive+0x148>
 800cdb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d190      	bne.n	800ccdc <HAL_SPI_TransmitReceive+0x148>
 800cdba:	e1ac      	b.n	800d116 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	2b07      	cmp	r3, #7
 800cdc2:	f240 81a0 	bls.w	800d106 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdc6:	e0a9      	b.n	800cf1c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d139      	bne.n	800ce4a <HAL_SPI_TransmitReceive+0x2b6>
 800cdd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d036      	beq.n	800ce4a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d91c      	bls.n	800ce1c <HAL_SPI_TransmitReceive+0x288>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d018      	beq.n	800ce1c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6812      	ldr	r2, [r2, #0]
 800cdf4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdfa:	1d1a      	adds	r2, r3, #4
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	3b02      	subs	r3, #2
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ce1a:	e016      	b.n	800ce4a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce20:	881a      	ldrh	r2, [r3, #0]
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce2a:	1c9a      	adds	r2, r3, #2
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce48:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d03a      	beq.n	800cece <HAL_SPI_TransmitReceive+0x33a>
 800ce58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d037      	beq.n	800cece <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	695b      	ldr	r3, [r3, #20]
 800ce64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d018      	beq.n	800ce9e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce76:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce7c:	1d1a      	adds	r2, r3, #4
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	3b02      	subs	r3, #2
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ce9c:	e017      	b.n	800cece <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cea2:	6a3a      	ldr	r2, [r7, #32]
 800cea4:	8812      	ldrh	r2, [r2, #0]
 800cea6:	b292      	uxth	r2, r2
 800cea8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceae:	1c9a      	adds	r2, r3, #2
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	3b01      	subs	r3, #1
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cecc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cece:	f7f7 f8ef 	bl	80040b0 <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d803      	bhi.n	800cee6 <HAL_SPI_TransmitReceive+0x352>
 800cede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee4:	d102      	bne.n	800ceec <HAL_SPI_TransmitReceive+0x358>
 800cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d117      	bne.n	800cf1c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f000 f93d 	bl	800d16c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e126      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
 800cf16:	bf00      	nop
 800cf18:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f47f af52 	bne.w	800cdc8 <HAL_SPI_TransmitReceive+0x234>
 800cf24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f47f af4e 	bne.w	800cdc8 <HAL_SPI_TransmitReceive+0x234>
 800cf2c:	e0f3      	b.n	800d116 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	f003 0302 	and.w	r3, r3, #2
 800cf38:	2b02      	cmp	r3, #2
 800cf3a:	d15a      	bne.n	800cff2 <HAL_SPI_TransmitReceive+0x45e>
 800cf3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d057      	beq.n	800cff2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cf42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d91c      	bls.n	800cf82 <HAL_SPI_TransmitReceive+0x3ee>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4c:	2b40      	cmp	r3, #64	; 0x40
 800cf4e:	d918      	bls.n	800cf82 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	3b04      	subs	r3, #4
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf80:	e037      	b.n	800cff2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d91b      	bls.n	800cfc0 <HAL_SPI_TransmitReceive+0x42c>
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d017      	beq.n	800cfc0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf94:	881a      	ldrh	r2, [r3, #0]
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9e:	1c9a      	adds	r2, r3, #2
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	3b02      	subs	r3, #2
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cfbe:	e018      	b.n	800cff2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3320      	adds	r3, #32
 800cfca:	7812      	ldrb	r2, [r2, #0]
 800cfcc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfd2:	1c5a      	adds	r2, r3, #1
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	695b      	ldr	r3, [r3, #20]
 800cff8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d05e      	beq.n	800d0be <HAL_SPI_TransmitReceive+0x52a>
 800d000:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d002:	2b00      	cmp	r3, #0
 800d004:	d05b      	beq.n	800d0be <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	695b      	ldr	r3, [r3, #20]
 800d00c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d018      	beq.n	800d046 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d01c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d01e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d024:	1d1a      	adds	r2, r3, #4
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d030:	b29b      	uxth	r3, r3
 800d032:	3b04      	subs	r3, #4
 800d034:	b29a      	uxth	r2, r3
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d044:	e03b      	b.n	800d0be <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d054:	d918      	bls.n	800d088 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d05a:	6a3a      	ldr	r2, [r7, #32]
 800d05c:	8812      	ldrh	r2, [r2, #0]
 800d05e:	b292      	uxth	r2, r2
 800d060:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d066:	1c9a      	adds	r2, r3, #2
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d072:	b29b      	uxth	r3, r3
 800d074:	3b02      	subs	r3, #2
 800d076:	b29a      	uxth	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d084:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d086:	e01a      	b.n	800d0be <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d094:	7812      	ldrb	r2, [r2, #0]
 800d096:	b2d2      	uxtb	r2, r2
 800d098:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0be:	f7f6 fff7 	bl	80040b0 <HAL_GetTick>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d803      	bhi.n	800d0d6 <HAL_SPI_TransmitReceive+0x542>
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d4:	d102      	bne.n	800d0dc <HAL_SPI_TransmitReceive+0x548>
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d114      	bne.n	800d106 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 f845 	bl	800d16c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e02e      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f47f af10 	bne.w	800cf2e <HAL_SPI_TransmitReceive+0x39a>
 800d10e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	f47f af0c 	bne.w	800cf2e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	2200      	movs	r2, #0
 800d11e:	2108      	movs	r1, #8
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 f8c3 	bl	800d2ac <SPI_WaitOnFlagUntilTimeout>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d007      	beq.n	800d13c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d132:	f043 0220 	orr.w	r2, r3, #32
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 f815 	bl	800d16c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e001      	b.n	800d164 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d164:	4618      	mov	r0, r3
 800d166:	3730      	adds	r7, #48	; 0x30
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	699a      	ldr	r2, [r3, #24]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0208 	orr.w	r2, r2, #8
 800d18a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	699a      	ldr	r2, [r3, #24]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f042 0210 	orr.w	r2, r2, #16
 800d19a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f022 0201 	bic.w	r2, r2, #1
 800d1aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6919      	ldr	r1, [r3, #16]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	4b3c      	ldr	r3, [pc, #240]	; (800d2a8 <SPI_CloseTransfer+0x13c>)
 800d1b8:	400b      	ands	r3, r1
 800d1ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689a      	ldr	r2, [r3, #8]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d1ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b04      	cmp	r3, #4
 800d1d6:	d014      	beq.n	800d202 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f003 0320 	and.w	r3, r3, #32
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00f      	beq.n	800d202 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	699a      	ldr	r2, [r3, #24]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f042 0220 	orr.w	r2, r2, #32
 800d200:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d014      	beq.n	800d238 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00f      	beq.n	800d238 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d21e:	f043 0204 	orr.w	r2, r3, #4
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d236:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00f      	beq.n	800d262 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d248:	f043 0201 	orr.w	r2, r3, #1
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d260:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00f      	beq.n	800d28c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d272:	f043 0208 	orr.w	r2, r3, #8
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	699a      	ldr	r2, [r3, #24]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d28a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d29c:	bf00      	nop
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr
 800d2a8:	fffffc90 	.word	0xfffffc90

0800d2ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d2bc:	e010      	b.n	800d2e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2be:	f7f6 fef7 	bl	80040b0 <HAL_GetTick>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d803      	bhi.n	800d2d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d4:	d102      	bne.n	800d2dc <SPI_WaitOnFlagUntilTimeout+0x30>
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d2dc:	2303      	movs	r3, #3
 800d2de:	e00f      	b.n	800d300 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	695a      	ldr	r2, [r3, #20]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	bf0c      	ite	eq
 800d2f0:	2301      	moveq	r3, #1
 800d2f2:	2300      	movne	r3, #0
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d0df      	beq.n	800d2be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d314:	095b      	lsrs	r3, r3, #5
 800d316:	3301      	adds	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	3301      	adds	r3, #1
 800d320:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	3307      	adds	r3, #7
 800d326:	08db      	lsrs	r3, r3, #3
 800d328:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d332:	4618      	mov	r0, r3
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	e049      	b.n	800d3e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7f6 f965 	bl	8003634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3304      	adds	r3, #4
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	f000 ff17 	bl	800e1b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d001      	beq.n	800d404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d400:	2301      	movs	r3, #1
 800d402:	e05e      	b.n	800d4c2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2202      	movs	r2, #2
 800d408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f042 0201 	orr.w	r2, r2, #1
 800d41a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a2b      	ldr	r2, [pc, #172]	; (800d4d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d02c      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d42e:	d027      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a27      	ldr	r2, [pc, #156]	; (800d4d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d022      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a26      	ldr	r2, [pc, #152]	; (800d4d8 <HAL_TIM_Base_Start_IT+0xec>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d01d      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a24      	ldr	r2, [pc, #144]	; (800d4dc <HAL_TIM_Base_Start_IT+0xf0>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d018      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a23      	ldr	r2, [pc, #140]	; (800d4e0 <HAL_TIM_Base_Start_IT+0xf4>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d013      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a21      	ldr	r2, [pc, #132]	; (800d4e4 <HAL_TIM_Base_Start_IT+0xf8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d00e      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a20      	ldr	r2, [pc, #128]	; (800d4e8 <HAL_TIM_Base_Start_IT+0xfc>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d009      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <HAL_TIM_Base_Start_IT+0x100>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d004      	beq.n	800d480 <HAL_TIM_Base_Start_IT+0x94>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a1d      	ldr	r2, [pc, #116]	; (800d4f0 <HAL_TIM_Base_Start_IT+0x104>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d115      	bne.n	800d4ac <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	4b1b      	ldr	r3, [pc, #108]	; (800d4f4 <HAL_TIM_Base_Start_IT+0x108>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b06      	cmp	r3, #6
 800d490:	d015      	beq.n	800d4be <HAL_TIM_Base_Start_IT+0xd2>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d498:	d011      	beq.n	800d4be <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0201 	orr.w	r2, r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4aa:	e008      	b.n	800d4be <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0201 	orr.w	r2, r2, #1
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	e000      	b.n	800d4c0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	40010000 	.word	0x40010000
 800d4d4:	40000400 	.word	0x40000400
 800d4d8:	40000800 	.word	0x40000800
 800d4dc:	40000c00 	.word	0x40000c00
 800d4e0:	40010400 	.word	0x40010400
 800d4e4:	40001800 	.word	0x40001800
 800d4e8:	40014000 	.word	0x40014000
 800d4ec:	4000e000 	.word	0x4000e000
 800d4f0:	4000e400 	.word	0x4000e400
 800d4f4:	00010007 	.word	0x00010007

0800d4f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e049      	b.n	800d59e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d106      	bne.n	800d524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7f5 fff4 	bl	800350c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2202      	movs	r2, #2
 800d528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3304      	adds	r3, #4
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	f000 fe3a 	bl	800e1b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
	...

0800d5a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d109      	bne.n	800d5cc <HAL_TIM_PWM_Start+0x24>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	bf14      	ite	ne
 800d5c4:	2301      	movne	r3, #1
 800d5c6:	2300      	moveq	r3, #0
 800d5c8:	b2db      	uxtb	r3, r3
 800d5ca:	e03c      	b.n	800d646 <HAL_TIM_PWM_Start+0x9e>
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d109      	bne.n	800d5e6 <HAL_TIM_PWM_Start+0x3e>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	bf14      	ite	ne
 800d5de:	2301      	movne	r3, #1
 800d5e0:	2300      	moveq	r3, #0
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	e02f      	b.n	800d646 <HAL_TIM_PWM_Start+0x9e>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d109      	bne.n	800d600 <HAL_TIM_PWM_Start+0x58>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	bf14      	ite	ne
 800d5f8:	2301      	movne	r3, #1
 800d5fa:	2300      	moveq	r3, #0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	e022      	b.n	800d646 <HAL_TIM_PWM_Start+0x9e>
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b0c      	cmp	r3, #12
 800d604:	d109      	bne.n	800d61a <HAL_TIM_PWM_Start+0x72>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b01      	cmp	r3, #1
 800d610:	bf14      	ite	ne
 800d612:	2301      	movne	r3, #1
 800d614:	2300      	moveq	r3, #0
 800d616:	b2db      	uxtb	r3, r3
 800d618:	e015      	b.n	800d646 <HAL_TIM_PWM_Start+0x9e>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b10      	cmp	r3, #16
 800d61e:	d109      	bne.n	800d634 <HAL_TIM_PWM_Start+0x8c>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b01      	cmp	r3, #1
 800d62a:	bf14      	ite	ne
 800d62c:	2301      	movne	r3, #1
 800d62e:	2300      	moveq	r3, #0
 800d630:	b2db      	uxtb	r3, r3
 800d632:	e008      	b.n	800d646 <HAL_TIM_PWM_Start+0x9e>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	bf14      	ite	ne
 800d640:	2301      	movne	r3, #1
 800d642:	2300      	moveq	r3, #0
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e0ab      	b.n	800d7a6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d104      	bne.n	800d65e <HAL_TIM_PWM_Start+0xb6>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d65c:	e023      	b.n	800d6a6 <HAL_TIM_PWM_Start+0xfe>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b04      	cmp	r3, #4
 800d662:	d104      	bne.n	800d66e <HAL_TIM_PWM_Start+0xc6>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2202      	movs	r2, #2
 800d668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d66c:	e01b      	b.n	800d6a6 <HAL_TIM_PWM_Start+0xfe>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b08      	cmp	r3, #8
 800d672:	d104      	bne.n	800d67e <HAL_TIM_PWM_Start+0xd6>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d67c:	e013      	b.n	800d6a6 <HAL_TIM_PWM_Start+0xfe>
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b0c      	cmp	r3, #12
 800d682:	d104      	bne.n	800d68e <HAL_TIM_PWM_Start+0xe6>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d68c:	e00b      	b.n	800d6a6 <HAL_TIM_PWM_Start+0xfe>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b10      	cmp	r3, #16
 800d692:	d104      	bne.n	800d69e <HAL_TIM_PWM_Start+0xf6>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d69c:	e003      	b.n	800d6a6 <HAL_TIM_PWM_Start+0xfe>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f001 f998 	bl	800e9e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a3d      	ldr	r2, [pc, #244]	; (800d7b0 <HAL_TIM_PWM_Start+0x208>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d013      	beq.n	800d6e6 <HAL_TIM_PWM_Start+0x13e>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a3c      	ldr	r2, [pc, #240]	; (800d7b4 <HAL_TIM_PWM_Start+0x20c>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d00e      	beq.n	800d6e6 <HAL_TIM_PWM_Start+0x13e>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a3a      	ldr	r2, [pc, #232]	; (800d7b8 <HAL_TIM_PWM_Start+0x210>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d009      	beq.n	800d6e6 <HAL_TIM_PWM_Start+0x13e>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a39      	ldr	r2, [pc, #228]	; (800d7bc <HAL_TIM_PWM_Start+0x214>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d004      	beq.n	800d6e6 <HAL_TIM_PWM_Start+0x13e>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a37      	ldr	r2, [pc, #220]	; (800d7c0 <HAL_TIM_PWM_Start+0x218>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d101      	bne.n	800d6ea <HAL_TIM_PWM_Start+0x142>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e000      	b.n	800d6ec <HAL_TIM_PWM_Start+0x144>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a2a      	ldr	r2, [pc, #168]	; (800d7b0 <HAL_TIM_PWM_Start+0x208>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d02c      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d712:	d027      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a2a      	ldr	r2, [pc, #168]	; (800d7c4 <HAL_TIM_PWM_Start+0x21c>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d022      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a29      	ldr	r2, [pc, #164]	; (800d7c8 <HAL_TIM_PWM_Start+0x220>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d01d      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a27      	ldr	r2, [pc, #156]	; (800d7cc <HAL_TIM_PWM_Start+0x224>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d018      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a1f      	ldr	r2, [pc, #124]	; (800d7b4 <HAL_TIM_PWM_Start+0x20c>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d013      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a23      	ldr	r2, [pc, #140]	; (800d7d0 <HAL_TIM_PWM_Start+0x228>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d00e      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a1b      	ldr	r2, [pc, #108]	; (800d7b8 <HAL_TIM_PWM_Start+0x210>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d009      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a1f      	ldr	r2, [pc, #124]	; (800d7d4 <HAL_TIM_PWM_Start+0x22c>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d004      	beq.n	800d764 <HAL_TIM_PWM_Start+0x1bc>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a1e      	ldr	r2, [pc, #120]	; (800d7d8 <HAL_TIM_PWM_Start+0x230>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d115      	bne.n	800d790 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689a      	ldr	r2, [r3, #8]
 800d76a:	4b1c      	ldr	r3, [pc, #112]	; (800d7dc <HAL_TIM_PWM_Start+0x234>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2b06      	cmp	r3, #6
 800d774:	d015      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x1fa>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d77c:	d011      	beq.n	800d7a2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f042 0201 	orr.w	r2, r2, #1
 800d78c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d78e:	e008      	b.n	800d7a2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f042 0201 	orr.w	r2, r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e000      	b.n	800d7a4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	40010000 	.word	0x40010000
 800d7b4:	40010400 	.word	0x40010400
 800d7b8:	40014000 	.word	0x40014000
 800d7bc:	40014400 	.word	0x40014400
 800d7c0:	40014800 	.word	0x40014800
 800d7c4:	40000400 	.word	0x40000400
 800d7c8:	40000800 	.word	0x40000800
 800d7cc:	40000c00 	.word	0x40000c00
 800d7d0:	40001800 	.word	0x40001800
 800d7d4:	4000e000 	.word	0x4000e000
 800d7d8:	4000e400 	.word	0x4000e400
 800d7dc:	00010007 	.word	0x00010007

0800d7e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	73fb      	strb	r3, [r7, #15]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b0c      	cmp	r3, #12
 800d7f2:	d855      	bhi.n	800d8a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800d7f4:	a201      	add	r2, pc, #4	; (adr r2, 800d7fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800d7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fa:	bf00      	nop
 800d7fc:	0800d831 	.word	0x0800d831
 800d800:	0800d8a1 	.word	0x0800d8a1
 800d804:	0800d8a1 	.word	0x0800d8a1
 800d808:	0800d8a1 	.word	0x0800d8a1
 800d80c:	0800d84d 	.word	0x0800d84d
 800d810:	0800d8a1 	.word	0x0800d8a1
 800d814:	0800d8a1 	.word	0x0800d8a1
 800d818:	0800d8a1 	.word	0x0800d8a1
 800d81c:	0800d869 	.word	0x0800d869
 800d820:	0800d8a1 	.word	0x0800d8a1
 800d824:	0800d8a1 	.word	0x0800d8a1
 800d828:	0800d8a1 	.word	0x0800d8a1
 800d82c:	0800d885 	.word	0x0800d885
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68da      	ldr	r2, [r3, #12]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d83e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	4618      	mov	r0, r3
 800d846:	f7f9 fe09 	bl	800745c <HAL_DMA_Abort_IT>
      break;
 800d84a:	e02c      	b.n	800d8a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d85a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d860:	4618      	mov	r0, r3
 800d862:	f7f9 fdfb 	bl	800745c <HAL_DMA_Abort_IT>
      break;
 800d866:	e01e      	b.n	800d8a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68da      	ldr	r2, [r3, #12]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7f9 fded 	bl	800745c <HAL_DMA_Abort_IT>
      break;
 800d882:	e010      	b.n	800d8a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d892:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d898:	4618      	mov	r0, r3
 800d89a:	f7f9 fddf 	bl	800745c <HAL_DMA_Abort_IT>
      break;
 800d89e:	e002      	b.n	800d8a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f040 8081 	bne.w	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	6839      	ldr	r1, [r7, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f001 f894 	bl	800e9e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a3e      	ldr	r2, [pc, #248]	; (800d9bc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d013      	beq.n	800d8ee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a3d      	ldr	r2, [pc, #244]	; (800d9c0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d00e      	beq.n	800d8ee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a3b      	ldr	r2, [pc, #236]	; (800d9c4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d009      	beq.n	800d8ee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a3a      	ldr	r2, [pc, #232]	; (800d9c8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d004      	beq.n	800d8ee <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a38      	ldr	r2, [pc, #224]	; (800d9cc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d101      	bne.n	800d8f2 <HAL_TIM_PWM_Stop_DMA+0x112>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d017      	beq.n	800d928 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800d902:	4013      	ands	r3, r2
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10f      	bne.n	800d928 <HAL_TIM_PWM_Stop_DMA+0x148>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	6a1a      	ldr	r2, [r3, #32]
 800d90e:	f240 4344 	movw	r3, #1092	; 0x444
 800d912:	4013      	ands	r3, r2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d107      	bne.n	800d928 <HAL_TIM_PWM_Stop_DMA+0x148>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d926:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6a1a      	ldr	r2, [r3, #32]
 800d92e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d932:	4013      	ands	r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10f      	bne.n	800d958 <HAL_TIM_PWM_Stop_DMA+0x178>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6a1a      	ldr	r2, [r3, #32]
 800d93e:	f240 4344 	movw	r3, #1092	; 0x444
 800d942:	4013      	ands	r3, r2
 800d944:	2b00      	cmp	r3, #0
 800d946:	d107      	bne.n	800d958 <HAL_TIM_PWM_Stop_DMA+0x178>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f022 0201 	bic.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d104      	bne.n	800d968 <HAL_TIM_PWM_Stop_DMA+0x188>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d966:	e023      	b.n	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b04      	cmp	r3, #4
 800d96c:	d104      	bne.n	800d978 <HAL_TIM_PWM_Stop_DMA+0x198>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d976:	e01b      	b.n	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	2b08      	cmp	r3, #8
 800d97c:	d104      	bne.n	800d988 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d986:	e013      	b.n	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b0c      	cmp	r3, #12
 800d98c:	d104      	bne.n	800d998 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d996:	e00b      	b.n	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b10      	cmp	r3, #16
 800d99c:	d104      	bne.n	800d9a8 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9a6:	e003      	b.n	800d9b0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	40010000 	.word	0x40010000
 800d9c0:	40010400 	.word	0x40010400
 800d9c4:	40014000 	.word	0x40014000
 800d9c8:	40014400 	.word	0x40014400
 800d9cc:	40014800 	.word	0x40014800

0800d9d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d101      	bne.n	800d9e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e08f      	b.n	800db04 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d106      	bne.n	800d9fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7f5 ff0d 	bl	8003818 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2202      	movs	r2, #2
 800da02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	6899      	ldr	r1, [r3, #8]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	4b3e      	ldr	r3, [pc, #248]	; (800db0c <HAL_TIM_Encoder_Init+0x13c>)
 800da12:	400b      	ands	r3, r1
 800da14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3304      	adds	r3, #4
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f000 fbc5 	bl	800e1b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6a1b      	ldr	r3, [r3, #32]
 800da3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	4313      	orrs	r3, r2
 800da46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	4b31      	ldr	r3, [pc, #196]	; (800db10 <HAL_TIM_Encoder_Init+0x140>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	021b      	lsls	r3, r3, #8
 800da5a:	4313      	orrs	r3, r2
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	4313      	orrs	r3, r2
 800da60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4b2b      	ldr	r3, [pc, #172]	; (800db14 <HAL_TIM_Encoder_Init+0x144>)
 800da66:	4013      	ands	r3, r2
 800da68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	4b2a      	ldr	r3, [pc, #168]	; (800db18 <HAL_TIM_Encoder_Init+0x148>)
 800da6e:	4013      	ands	r3, r2
 800da70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	69db      	ldr	r3, [r3, #28]
 800da7a:	021b      	lsls	r3, r3, #8
 800da7c:	4313      	orrs	r3, r2
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	4313      	orrs	r3, r2
 800da82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	691b      	ldr	r3, [r3, #16]
 800da88:	011a      	lsls	r2, r3, #4
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	031b      	lsls	r3, r3, #12
 800da90:	4313      	orrs	r3, r2
 800da92:	693a      	ldr	r2, [r7, #16]
 800da94:	4313      	orrs	r3, r2
 800da96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800da9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800daa6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	011b      	lsls	r3, r3, #4
 800dab2:	4313      	orrs	r3, r2
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	697a      	ldr	r2, [r7, #20]
 800dac0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	fffebff8 	.word	0xfffebff8
 800db10:	fffffcfc 	.word	0xfffffcfc
 800db14:	fffff3f3 	.word	0xfffff3f3
 800db18:	ffff0f0f 	.word	0xffff0f0f

0800db1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	691b      	ldr	r3, [r3, #16]
 800db2a:	f003 0302 	and.w	r3, r3, #2
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d122      	bne.n	800db78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f003 0302 	and.w	r3, r3, #2
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d11b      	bne.n	800db78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f06f 0202 	mvn.w	r2, #2
 800db48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2201      	movs	r2, #1
 800db4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	f003 0303 	and.w	r3, r3, #3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d003      	beq.n	800db66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f000 fb12 	bl	800e188 <HAL_TIM_IC_CaptureCallback>
 800db64:	e005      	b.n	800db72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fb04 	bl	800e174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7f4 faff 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	f003 0304 	and.w	r3, r3, #4
 800db82:	2b04      	cmp	r3, #4
 800db84:	d122      	bne.n	800dbcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	f003 0304 	and.w	r3, r3, #4
 800db90:	2b04      	cmp	r3, #4
 800db92:	d11b      	bne.n	800dbcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f06f 0204 	mvn.w	r2, #4
 800db9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2202      	movs	r2, #2
 800dba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fae8 	bl	800e188 <HAL_TIM_IC_CaptureCallback>
 800dbb8:	e005      	b.n	800dbc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fada 	bl	800e174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7f4 fad5 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	f003 0308 	and.w	r3, r3, #8
 800dbd6:	2b08      	cmp	r3, #8
 800dbd8:	d122      	bne.n	800dc20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	f003 0308 	and.w	r3, r3, #8
 800dbe4:	2b08      	cmp	r3, #8
 800dbe6:	d11b      	bne.n	800dc20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f06f 0208 	mvn.w	r2, #8
 800dbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2204      	movs	r2, #4
 800dbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	f003 0303 	and.w	r3, r3, #3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fabe 	bl	800e188 <HAL_TIM_IC_CaptureCallback>
 800dc0c:	e005      	b.n	800dc1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fab0 	bl	800e174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7f4 faab 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	f003 0310 	and.w	r3, r3, #16
 800dc2a:	2b10      	cmp	r3, #16
 800dc2c:	d122      	bne.n	800dc74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	f003 0310 	and.w	r3, r3, #16
 800dc38:	2b10      	cmp	r3, #16
 800dc3a:	d11b      	bne.n	800dc74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f06f 0210 	mvn.w	r2, #16
 800dc44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2208      	movs	r2, #8
 800dc4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fa94 	bl	800e188 <HAL_TIM_IC_CaptureCallback>
 800dc60:	e005      	b.n	800dc6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fa86 	bl	800e174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7f4 fa81 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	f003 0301 	and.w	r3, r3, #1
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d10e      	bne.n	800dca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d107      	bne.n	800dca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f06f 0201 	mvn.w	r2, #1
 800dc98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7f4 faac 	bl	80021f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcaa:	2b80      	cmp	r3, #128	; 0x80
 800dcac:	d10e      	bne.n	800dccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcb8:	2b80      	cmp	r3, #128	; 0x80
 800dcba:	d107      	bne.n	800dccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dcc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fff8 	bl	800ecbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcda:	d10e      	bne.n	800dcfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dce6:	2b80      	cmp	r3, #128	; 0x80
 800dce8:	d107      	bne.n	800dcfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dcf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 ffeb 	bl	800ecd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd04:	2b40      	cmp	r3, #64	; 0x40
 800dd06:	d10e      	bne.n	800dd26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd12:	2b40      	cmp	r3, #64	; 0x40
 800dd14:	d107      	bne.n	800dd26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fa3b 	bl	800e19c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	f003 0320 	and.w	r3, r3, #32
 800dd30:	2b20      	cmp	r3, #32
 800dd32:	d10e      	bne.n	800dd52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	f003 0320 	and.w	r3, r3, #32
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	d107      	bne.n	800dd52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f06f 0220 	mvn.w	r2, #32
 800dd4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 ffab 	bl	800eca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd52:	bf00      	nop
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d101      	bne.n	800dd7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd76:	2302      	movs	r3, #2
 800dd78:	e0ff      	b.n	800df7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b14      	cmp	r3, #20
 800dd86:	f200 80f0 	bhi.w	800df6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd8a:	a201      	add	r2, pc, #4	; (adr r2, 800dd90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd90:	0800dde5 	.word	0x0800dde5
 800dd94:	0800df6b 	.word	0x0800df6b
 800dd98:	0800df6b 	.word	0x0800df6b
 800dd9c:	0800df6b 	.word	0x0800df6b
 800dda0:	0800de25 	.word	0x0800de25
 800dda4:	0800df6b 	.word	0x0800df6b
 800dda8:	0800df6b 	.word	0x0800df6b
 800ddac:	0800df6b 	.word	0x0800df6b
 800ddb0:	0800de67 	.word	0x0800de67
 800ddb4:	0800df6b 	.word	0x0800df6b
 800ddb8:	0800df6b 	.word	0x0800df6b
 800ddbc:	0800df6b 	.word	0x0800df6b
 800ddc0:	0800dea7 	.word	0x0800dea7
 800ddc4:	0800df6b 	.word	0x0800df6b
 800ddc8:	0800df6b 	.word	0x0800df6b
 800ddcc:	0800df6b 	.word	0x0800df6b
 800ddd0:	0800dee9 	.word	0x0800dee9
 800ddd4:	0800df6b 	.word	0x0800df6b
 800ddd8:	0800df6b 	.word	0x0800df6b
 800dddc:	0800df6b 	.word	0x0800df6b
 800dde0:	0800df29 	.word	0x0800df29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	4618      	mov	r0, r3
 800ddec:	f000 fa86 	bl	800e2fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	699a      	ldr	r2, [r3, #24]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f042 0208 	orr.w	r2, r2, #8
 800ddfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	699a      	ldr	r2, [r3, #24]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f022 0204 	bic.w	r2, r2, #4
 800de0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6999      	ldr	r1, [r3, #24]
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	619a      	str	r2, [r3, #24]
      break;
 800de22:	e0a5      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68b9      	ldr	r1, [r7, #8]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 faf6 	bl	800e41c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	699a      	ldr	r2, [r3, #24]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	699a      	ldr	r2, [r3, #24]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6999      	ldr	r1, [r3, #24]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	021a      	lsls	r2, r3, #8
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	430a      	orrs	r2, r1
 800de62:	619a      	str	r2, [r3, #24]
      break;
 800de64:	e084      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	68b9      	ldr	r1, [r7, #8]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 fb5f 	bl	800e530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69da      	ldr	r2, [r3, #28]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f042 0208 	orr.w	r2, r2, #8
 800de80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	69da      	ldr	r2, [r3, #28]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f022 0204 	bic.w	r2, r2, #4
 800de90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69d9      	ldr	r1, [r3, #28]
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	691a      	ldr	r2, [r3, #16]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	430a      	orrs	r2, r1
 800dea2:	61da      	str	r2, [r3, #28]
      break;
 800dea4:	e064      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68b9      	ldr	r1, [r7, #8]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fbc7 	bl	800e640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	69da      	ldr	r2, [r3, #28]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	69da      	ldr	r2, [r3, #28]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ded0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	69d9      	ldr	r1, [r3, #28]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	021a      	lsls	r2, r3, #8
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	430a      	orrs	r2, r1
 800dee4:	61da      	str	r2, [r3, #28]
      break;
 800dee6:	e043      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	68b9      	ldr	r1, [r7, #8]
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fc10 	bl	800e714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f042 0208 	orr.w	r2, r2, #8
 800df02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f022 0204 	bic.w	r2, r2, #4
 800df12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	691a      	ldr	r2, [r3, #16]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	430a      	orrs	r2, r1
 800df24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800df26:	e023      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68b9      	ldr	r1, [r7, #8]
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fc54 	bl	800e7dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	021a      	lsls	r2, r3, #8
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	430a      	orrs	r2, r1
 800df66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800df68:	e002      	b.n	800df70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	75fb      	strb	r3, [r7, #23]
      break;
 800df6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df78:	7dfb      	ldrb	r3, [r7, #23]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3718      	adds	r7, #24
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop

0800df84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df8e:	2300      	movs	r3, #0
 800df90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d101      	bne.n	800dfa0 <HAL_TIM_ConfigClockSource+0x1c>
 800df9c:	2302      	movs	r3, #2
 800df9e:	e0dc      	b.n	800e15a <HAL_TIM_ConfigClockSource+0x1d6>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2202      	movs	r2, #2
 800dfac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	4b6a      	ldr	r3, [pc, #424]	; (800e164 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dfc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a64      	ldr	r2, [pc, #400]	; (800e168 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	f000 80a9 	beq.w	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800dfdc:	4a62      	ldr	r2, [pc, #392]	; (800e168 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	f200 80ae 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe4:	4a61      	ldr	r2, [pc, #388]	; (800e16c <HAL_TIM_ConfigClockSource+0x1e8>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	f000 80a1 	beq.w	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800dfec:	4a5f      	ldr	r2, [pc, #380]	; (800e16c <HAL_TIM_ConfigClockSource+0x1e8>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	f200 80a6 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff4:	4a5e      	ldr	r2, [pc, #376]	; (800e170 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	f000 8099 	beq.w	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800dffc:	4a5c      	ldr	r2, [pc, #368]	; (800e170 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	f200 809e 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e004:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e008:	f000 8091 	beq.w	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e00c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e010:	f200 8096 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e018:	f000 8089 	beq.w	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e020:	f200 808e 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e028:	d03e      	beq.n	800e0a8 <HAL_TIM_ConfigClockSource+0x124>
 800e02a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e02e:	f200 8087 	bhi.w	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e036:	f000 8086 	beq.w	800e146 <HAL_TIM_ConfigClockSource+0x1c2>
 800e03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e03e:	d87f      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e040:	2b70      	cmp	r3, #112	; 0x70
 800e042:	d01a      	beq.n	800e07a <HAL_TIM_ConfigClockSource+0xf6>
 800e044:	2b70      	cmp	r3, #112	; 0x70
 800e046:	d87b      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e048:	2b60      	cmp	r3, #96	; 0x60
 800e04a:	d050      	beq.n	800e0ee <HAL_TIM_ConfigClockSource+0x16a>
 800e04c:	2b60      	cmp	r3, #96	; 0x60
 800e04e:	d877      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e050:	2b50      	cmp	r3, #80	; 0x50
 800e052:	d03c      	beq.n	800e0ce <HAL_TIM_ConfigClockSource+0x14a>
 800e054:	2b50      	cmp	r3, #80	; 0x50
 800e056:	d873      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e058:	2b40      	cmp	r3, #64	; 0x40
 800e05a:	d058      	beq.n	800e10e <HAL_TIM_ConfigClockSource+0x18a>
 800e05c:	2b40      	cmp	r3, #64	; 0x40
 800e05e:	d86f      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e060:	2b30      	cmp	r3, #48	; 0x30
 800e062:	d064      	beq.n	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e064:	2b30      	cmp	r3, #48	; 0x30
 800e066:	d86b      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e068:	2b20      	cmp	r3, #32
 800e06a:	d060      	beq.n	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	d867      	bhi.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
 800e070:	2b00      	cmp	r3, #0
 800e072:	d05c      	beq.n	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e074:	2b10      	cmp	r3, #16
 800e076:	d05a      	beq.n	800e12e <HAL_TIM_ConfigClockSource+0x1aa>
 800e078:	e062      	b.n	800e140 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6818      	ldr	r0, [r3, #0]
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	6899      	ldr	r1, [r3, #8]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	f000 fc8b 	bl	800e9a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e09c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	609a      	str	r2, [r3, #8]
      break;
 800e0a6:	e04f      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	6899      	ldr	r1, [r3, #8]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	f000 fc74 	bl	800e9a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	689a      	ldr	r2, [r3, #8]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0ca:	609a      	str	r2, [r3, #8]
      break;
 800e0cc:	e03c      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6818      	ldr	r0, [r3, #0]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6859      	ldr	r1, [r3, #4]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	f000 fbe4 	bl	800e8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2150      	movs	r1, #80	; 0x50
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 fc3e 	bl	800e968 <TIM_ITRx_SetConfig>
      break;
 800e0ec:	e02c      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	6859      	ldr	r1, [r3, #4]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f000 fc03 	bl	800e906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2160      	movs	r1, #96	; 0x60
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fc2e 	bl	800e968 <TIM_ITRx_SetConfig>
      break;
 800e10c:	e01c      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	6859      	ldr	r1, [r3, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	461a      	mov	r2, r3
 800e11c:	f000 fbc4 	bl	800e8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2140      	movs	r1, #64	; 0x40
 800e126:	4618      	mov	r0, r3
 800e128:	f000 fc1e 	bl	800e968 <TIM_ITRx_SetConfig>
      break;
 800e12c:	e00c      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4619      	mov	r1, r3
 800e138:	4610      	mov	r0, r2
 800e13a:	f000 fc15 	bl	800e968 <TIM_ITRx_SetConfig>
      break;
 800e13e:	e003      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	73fb      	strb	r3, [r7, #15]
      break;
 800e144:	e000      	b.n	800e148 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e158:	7bfb      	ldrb	r3, [r7, #15]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	ffceff88 	.word	0xffceff88
 800e168:	00100040 	.word	0x00100040
 800e16c:	00100030 	.word	0x00100030
 800e170:	00100020 	.word	0x00100020

0800e174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4a44      	ldr	r2, [pc, #272]	; (800e2d4 <TIM_Base_SetConfig+0x124>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d013      	beq.n	800e1f0 <TIM_Base_SetConfig+0x40>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1ce:	d00f      	beq.n	800e1f0 <TIM_Base_SetConfig+0x40>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4a41      	ldr	r2, [pc, #260]	; (800e2d8 <TIM_Base_SetConfig+0x128>)
 800e1d4:	4293      	cmp	r3, r2
 800e1d6:	d00b      	beq.n	800e1f0 <TIM_Base_SetConfig+0x40>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a40      	ldr	r2, [pc, #256]	; (800e2dc <TIM_Base_SetConfig+0x12c>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d007      	beq.n	800e1f0 <TIM_Base_SetConfig+0x40>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	4a3f      	ldr	r2, [pc, #252]	; (800e2e0 <TIM_Base_SetConfig+0x130>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d003      	beq.n	800e1f0 <TIM_Base_SetConfig+0x40>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4a3e      	ldr	r2, [pc, #248]	; (800e2e4 <TIM_Base_SetConfig+0x134>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d108      	bne.n	800e202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	4313      	orrs	r3, r2
 800e200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a33      	ldr	r2, [pc, #204]	; (800e2d4 <TIM_Base_SetConfig+0x124>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d027      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e210:	d023      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a30      	ldr	r2, [pc, #192]	; (800e2d8 <TIM_Base_SetConfig+0x128>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d01f      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a2f      	ldr	r2, [pc, #188]	; (800e2dc <TIM_Base_SetConfig+0x12c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d01b      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4a2e      	ldr	r2, [pc, #184]	; (800e2e0 <TIM_Base_SetConfig+0x130>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d017      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4a2d      	ldr	r2, [pc, #180]	; (800e2e4 <TIM_Base_SetConfig+0x134>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d013      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	4a2c      	ldr	r2, [pc, #176]	; (800e2e8 <TIM_Base_SetConfig+0x138>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d00f      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4a2b      	ldr	r2, [pc, #172]	; (800e2ec <TIM_Base_SetConfig+0x13c>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d00b      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	4a2a      	ldr	r2, [pc, #168]	; (800e2f0 <TIM_Base_SetConfig+0x140>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d007      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a29      	ldr	r2, [pc, #164]	; (800e2f4 <TIM_Base_SetConfig+0x144>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d003      	beq.n	800e25a <TIM_Base_SetConfig+0xaa>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4a28      	ldr	r2, [pc, #160]	; (800e2f8 <TIM_Base_SetConfig+0x148>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d108      	bne.n	800e26c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	4313      	orrs	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	695b      	ldr	r3, [r3, #20]
 800e276:	4313      	orrs	r3, r2
 800e278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	689a      	ldr	r2, [r3, #8]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a10      	ldr	r2, [pc, #64]	; (800e2d4 <TIM_Base_SetConfig+0x124>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d00f      	beq.n	800e2b8 <TIM_Base_SetConfig+0x108>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a12      	ldr	r2, [pc, #72]	; (800e2e4 <TIM_Base_SetConfig+0x134>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d00b      	beq.n	800e2b8 <TIM_Base_SetConfig+0x108>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a11      	ldr	r2, [pc, #68]	; (800e2e8 <TIM_Base_SetConfig+0x138>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d007      	beq.n	800e2b8 <TIM_Base_SetConfig+0x108>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a10      	ldr	r2, [pc, #64]	; (800e2ec <TIM_Base_SetConfig+0x13c>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d003      	beq.n	800e2b8 <TIM_Base_SetConfig+0x108>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a0f      	ldr	r2, [pc, #60]	; (800e2f0 <TIM_Base_SetConfig+0x140>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d103      	bne.n	800e2c0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	691a      	ldr	r2, [r3, #16]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	615a      	str	r2, [r3, #20]
}
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	40010000 	.word	0x40010000
 800e2d8:	40000400 	.word	0x40000400
 800e2dc:	40000800 	.word	0x40000800
 800e2e0:	40000c00 	.word	0x40000c00
 800e2e4:	40010400 	.word	0x40010400
 800e2e8:	40014000 	.word	0x40014000
 800e2ec:	40014400 	.word	0x40014400
 800e2f0:	40014800 	.word	0x40014800
 800e2f4:	4000e000 	.word	0x4000e000
 800e2f8:	4000e400 	.word	0x4000e400

0800e2fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b087      	sub	sp, #28
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a1b      	ldr	r3, [r3, #32]
 800e30a:	f023 0201 	bic.w	r2, r3, #1
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6a1b      	ldr	r3, [r3, #32]
 800e316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	4b37      	ldr	r3, [pc, #220]	; (800e404 <TIM_OC1_SetConfig+0x108>)
 800e328:	4013      	ands	r3, r2
 800e32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f023 0303 	bic.w	r3, r3, #3
 800e332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f023 0302 	bic.w	r3, r3, #2
 800e344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	4313      	orrs	r3, r2
 800e34e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a2d      	ldr	r2, [pc, #180]	; (800e408 <TIM_OC1_SetConfig+0x10c>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d00f      	beq.n	800e378 <TIM_OC1_SetConfig+0x7c>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	4a2c      	ldr	r2, [pc, #176]	; (800e40c <TIM_OC1_SetConfig+0x110>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d00b      	beq.n	800e378 <TIM_OC1_SetConfig+0x7c>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a2b      	ldr	r2, [pc, #172]	; (800e410 <TIM_OC1_SetConfig+0x114>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d007      	beq.n	800e378 <TIM_OC1_SetConfig+0x7c>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a2a      	ldr	r2, [pc, #168]	; (800e414 <TIM_OC1_SetConfig+0x118>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d003      	beq.n	800e378 <TIM_OC1_SetConfig+0x7c>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a29      	ldr	r2, [pc, #164]	; (800e418 <TIM_OC1_SetConfig+0x11c>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d10c      	bne.n	800e392 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	f023 0308 	bic.w	r3, r3, #8
 800e37e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	4313      	orrs	r3, r2
 800e388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	f023 0304 	bic.w	r3, r3, #4
 800e390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a1c      	ldr	r2, [pc, #112]	; (800e408 <TIM_OC1_SetConfig+0x10c>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d00f      	beq.n	800e3ba <TIM_OC1_SetConfig+0xbe>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a1b      	ldr	r2, [pc, #108]	; (800e40c <TIM_OC1_SetConfig+0x110>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d00b      	beq.n	800e3ba <TIM_OC1_SetConfig+0xbe>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a1a      	ldr	r2, [pc, #104]	; (800e410 <TIM_OC1_SetConfig+0x114>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d007      	beq.n	800e3ba <TIM_OC1_SetConfig+0xbe>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a19      	ldr	r2, [pc, #100]	; (800e414 <TIM_OC1_SetConfig+0x118>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d003      	beq.n	800e3ba <TIM_OC1_SetConfig+0xbe>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a18      	ldr	r2, [pc, #96]	; (800e418 <TIM_OC1_SetConfig+0x11c>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d111      	bne.n	800e3de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	695b      	ldr	r3, [r3, #20]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	621a      	str	r2, [r3, #32]
}
 800e3f8:	bf00      	nop
 800e3fa:	371c      	adds	r7, #28
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	fffeff8f 	.word	0xfffeff8f
 800e408:	40010000 	.word	0x40010000
 800e40c:	40010400 	.word	0x40010400
 800e410:	40014000 	.word	0x40014000
 800e414:	40014400 	.word	0x40014400
 800e418:	40014800 	.word	0x40014800

0800e41c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b087      	sub	sp, #28
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	f023 0210 	bic.w	r2, r3, #16
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a1b      	ldr	r3, [r3, #32]
 800e436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	699b      	ldr	r3, [r3, #24]
 800e442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	4b34      	ldr	r3, [pc, #208]	; (800e518 <TIM_OC2_SetConfig+0xfc>)
 800e448:	4013      	ands	r3, r2
 800e44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	021b      	lsls	r3, r3, #8
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	f023 0320 	bic.w	r3, r3, #32
 800e466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	011b      	lsls	r3, r3, #4
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	4313      	orrs	r3, r2
 800e472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a29      	ldr	r2, [pc, #164]	; (800e51c <TIM_OC2_SetConfig+0x100>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d003      	beq.n	800e484 <TIM_OC2_SetConfig+0x68>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	4a28      	ldr	r2, [pc, #160]	; (800e520 <TIM_OC2_SetConfig+0x104>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d10d      	bne.n	800e4a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e48a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	011b      	lsls	r3, r3, #4
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	4313      	orrs	r3, r2
 800e496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e49e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a1e      	ldr	r2, [pc, #120]	; (800e51c <TIM_OC2_SetConfig+0x100>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00f      	beq.n	800e4c8 <TIM_OC2_SetConfig+0xac>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a1d      	ldr	r2, [pc, #116]	; (800e520 <TIM_OC2_SetConfig+0x104>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d00b      	beq.n	800e4c8 <TIM_OC2_SetConfig+0xac>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a1c      	ldr	r2, [pc, #112]	; (800e524 <TIM_OC2_SetConfig+0x108>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d007      	beq.n	800e4c8 <TIM_OC2_SetConfig+0xac>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a1b      	ldr	r2, [pc, #108]	; (800e528 <TIM_OC2_SetConfig+0x10c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d003      	beq.n	800e4c8 <TIM_OC2_SetConfig+0xac>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a1a      	ldr	r2, [pc, #104]	; (800e52c <TIM_OC2_SetConfig+0x110>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d113      	bne.n	800e4f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	695b      	ldr	r3, [r3, #20]
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	693a      	ldr	r2, [r7, #16]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	68fa      	ldr	r2, [r7, #12]
 800e4fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	621a      	str	r2, [r3, #32]
}
 800e50a:	bf00      	nop
 800e50c:	371c      	adds	r7, #28
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	feff8fff 	.word	0xfeff8fff
 800e51c:	40010000 	.word	0x40010000
 800e520:	40010400 	.word	0x40010400
 800e524:	40014000 	.word	0x40014000
 800e528:	40014400 	.word	0x40014400
 800e52c:	40014800 	.word	0x40014800

0800e530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e530:	b480      	push	{r7}
 800e532:	b087      	sub	sp, #28
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a1b      	ldr	r3, [r3, #32]
 800e53e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	69db      	ldr	r3, [r3, #28]
 800e556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	4b33      	ldr	r3, [pc, #204]	; (800e628 <TIM_OC3_SetConfig+0xf8>)
 800e55c:	4013      	ands	r3, r2
 800e55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	4313      	orrs	r3, r2
 800e570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	021b      	lsls	r3, r3, #8
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	4313      	orrs	r3, r2
 800e584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a28      	ldr	r2, [pc, #160]	; (800e62c <TIM_OC3_SetConfig+0xfc>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d003      	beq.n	800e596 <TIM_OC3_SetConfig+0x66>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a27      	ldr	r2, [pc, #156]	; (800e630 <TIM_OC3_SetConfig+0x100>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d10d      	bne.n	800e5b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e59c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e5b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	; (800e62c <TIM_OC3_SetConfig+0xfc>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d00f      	beq.n	800e5da <TIM_OC3_SetConfig+0xaa>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a1c      	ldr	r2, [pc, #112]	; (800e630 <TIM_OC3_SetConfig+0x100>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d00b      	beq.n	800e5da <TIM_OC3_SetConfig+0xaa>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a1b      	ldr	r2, [pc, #108]	; (800e634 <TIM_OC3_SetConfig+0x104>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d007      	beq.n	800e5da <TIM_OC3_SetConfig+0xaa>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a1a      	ldr	r2, [pc, #104]	; (800e638 <TIM_OC3_SetConfig+0x108>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d003      	beq.n	800e5da <TIM_OC3_SetConfig+0xaa>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a19      	ldr	r2, [pc, #100]	; (800e63c <TIM_OC3_SetConfig+0x10c>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d113      	bne.n	800e602 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	695b      	ldr	r3, [r3, #20]
 800e5ee:	011b      	lsls	r3, r3, #4
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	011b      	lsls	r3, r3, #4
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	685a      	ldr	r2, [r3, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	621a      	str	r2, [r3, #32]
}
 800e61c:	bf00      	nop
 800e61e:	371c      	adds	r7, #28
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr
 800e628:	fffeff8f 	.word	0xfffeff8f
 800e62c:	40010000 	.word	0x40010000
 800e630:	40010400 	.word	0x40010400
 800e634:	40014000 	.word	0x40014000
 800e638:	40014400 	.word	0x40014400
 800e63c:	40014800 	.word	0x40014800

0800e640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e640:	b480      	push	{r7}
 800e642:	b087      	sub	sp, #28
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	69db      	ldr	r3, [r3, #28]
 800e666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	4b24      	ldr	r3, [pc, #144]	; (800e6fc <TIM_OC4_SetConfig+0xbc>)
 800e66c:	4013      	ands	r3, r2
 800e66e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	021b      	lsls	r3, r3, #8
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	4313      	orrs	r3, r2
 800e682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e68a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	031b      	lsls	r3, r3, #12
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	4313      	orrs	r3, r2
 800e696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a19      	ldr	r2, [pc, #100]	; (800e700 <TIM_OC4_SetConfig+0xc0>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d00f      	beq.n	800e6c0 <TIM_OC4_SetConfig+0x80>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4a18      	ldr	r2, [pc, #96]	; (800e704 <TIM_OC4_SetConfig+0xc4>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d00b      	beq.n	800e6c0 <TIM_OC4_SetConfig+0x80>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4a17      	ldr	r2, [pc, #92]	; (800e708 <TIM_OC4_SetConfig+0xc8>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d007      	beq.n	800e6c0 <TIM_OC4_SetConfig+0x80>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a16      	ldr	r2, [pc, #88]	; (800e70c <TIM_OC4_SetConfig+0xcc>)
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d003      	beq.n	800e6c0 <TIM_OC4_SetConfig+0x80>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a15      	ldr	r2, [pc, #84]	; (800e710 <TIM_OC4_SetConfig+0xd0>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d109      	bne.n	800e6d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	019b      	lsls	r3, r3, #6
 800e6ce:	697a      	ldr	r2, [r7, #20]
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685a      	ldr	r2, [r3, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	621a      	str	r2, [r3, #32]
}
 800e6ee:	bf00      	nop
 800e6f0:	371c      	adds	r7, #28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	feff8fff 	.word	0xfeff8fff
 800e700:	40010000 	.word	0x40010000
 800e704:	40010400 	.word	0x40010400
 800e708:	40014000 	.word	0x40014000
 800e70c:	40014400 	.word	0x40014400
 800e710:	40014800 	.word	0x40014800

0800e714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e714:	b480      	push	{r7}
 800e716:	b087      	sub	sp, #28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	4b21      	ldr	r3, [pc, #132]	; (800e7c4 <TIM_OC5_SetConfig+0xb0>)
 800e740:	4013      	ands	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	041b      	lsls	r3, r3, #16
 800e75c:	693a      	ldr	r2, [r7, #16]
 800e75e:	4313      	orrs	r3, r2
 800e760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4a18      	ldr	r2, [pc, #96]	; (800e7c8 <TIM_OC5_SetConfig+0xb4>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d00f      	beq.n	800e78a <TIM_OC5_SetConfig+0x76>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a17      	ldr	r2, [pc, #92]	; (800e7cc <TIM_OC5_SetConfig+0xb8>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d00b      	beq.n	800e78a <TIM_OC5_SetConfig+0x76>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a16      	ldr	r2, [pc, #88]	; (800e7d0 <TIM_OC5_SetConfig+0xbc>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d007      	beq.n	800e78a <TIM_OC5_SetConfig+0x76>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a15      	ldr	r2, [pc, #84]	; (800e7d4 <TIM_OC5_SetConfig+0xc0>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d003      	beq.n	800e78a <TIM_OC5_SetConfig+0x76>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a14      	ldr	r2, [pc, #80]	; (800e7d8 <TIM_OC5_SetConfig+0xc4>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d109      	bne.n	800e79e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e790:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	021b      	lsls	r3, r3, #8
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	621a      	str	r2, [r3, #32]
}
 800e7b8:	bf00      	nop
 800e7ba:	371c      	adds	r7, #28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	fffeff8f 	.word	0xfffeff8f
 800e7c8:	40010000 	.word	0x40010000
 800e7cc:	40010400 	.word	0x40010400
 800e7d0:	40014000 	.word	0x40014000
 800e7d4:	40014400 	.word	0x40014400
 800e7d8:	40014800 	.word	0x40014800

0800e7dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4b22      	ldr	r3, [pc, #136]	; (800e890 <TIM_OC6_SetConfig+0xb4>)
 800e808:	4013      	ands	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4313      	orrs	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e81e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	051b      	lsls	r3, r3, #20
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	4313      	orrs	r3, r2
 800e82a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a19      	ldr	r2, [pc, #100]	; (800e894 <TIM_OC6_SetConfig+0xb8>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d00f      	beq.n	800e854 <TIM_OC6_SetConfig+0x78>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a18      	ldr	r2, [pc, #96]	; (800e898 <TIM_OC6_SetConfig+0xbc>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d00b      	beq.n	800e854 <TIM_OC6_SetConfig+0x78>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a17      	ldr	r2, [pc, #92]	; (800e89c <TIM_OC6_SetConfig+0xc0>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d007      	beq.n	800e854 <TIM_OC6_SetConfig+0x78>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a16      	ldr	r2, [pc, #88]	; (800e8a0 <TIM_OC6_SetConfig+0xc4>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d003      	beq.n	800e854 <TIM_OC6_SetConfig+0x78>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a15      	ldr	r2, [pc, #84]	; (800e8a4 <TIM_OC6_SetConfig+0xc8>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d109      	bne.n	800e868 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e85a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	029b      	lsls	r3, r3, #10
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	4313      	orrs	r3, r2
 800e866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	685a      	ldr	r2, [r3, #4]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	621a      	str	r2, [r3, #32]
}
 800e882:	bf00      	nop
 800e884:	371c      	adds	r7, #28
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	feff8fff 	.word	0xfeff8fff
 800e894:	40010000 	.word	0x40010000
 800e898:	40010400 	.word	0x40010400
 800e89c:	40014000 	.word	0x40014000
 800e8a0:	40014400 	.word	0x40014400
 800e8a4:	40014800 	.word	0x40014800

0800e8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6a1b      	ldr	r3, [r3, #32]
 800e8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	f023 0201 	bic.w	r2, r3, #1
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	011b      	lsls	r3, r3, #4
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f023 030a 	bic.w	r3, r3, #10
 800e8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e8e6:	697a      	ldr	r2, [r7, #20]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	621a      	str	r2, [r3, #32]
}
 800e8fa:	bf00      	nop
 800e8fc:	371c      	adds	r7, #28
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr

0800e906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e906:	b480      	push	{r7}
 800e908:	b087      	sub	sp, #28
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	f023 0210 	bic.w	r2, r3, #16
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6a1b      	ldr	r3, [r3, #32]
 800e928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	031b      	lsls	r3, r3, #12
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	4313      	orrs	r3, r2
 800e93a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	693a      	ldr	r2, [r7, #16]
 800e958:	621a      	str	r2, [r3, #32]
}
 800e95a:	bf00      	nop
 800e95c:	371c      	adds	r7, #28
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr
	...

0800e968 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4b09      	ldr	r3, [pc, #36]	; (800e9a0 <TIM_ITRx_SetConfig+0x38>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	4313      	orrs	r3, r2
 800e986:	f043 0307 	orr.w	r3, r3, #7
 800e98a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	609a      	str	r2, [r3, #8]
}
 800e992:	bf00      	nop
 800e994:	3714      	adds	r7, #20
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	ffcfff8f 	.word	0xffcfff8f

0800e9a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	021a      	lsls	r2, r3, #8
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	431a      	orrs	r2, r3
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	697a      	ldr	r2, [r7, #20]
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	697a      	ldr	r2, [r7, #20]
 800e9d6:	609a      	str	r2, [r3, #8]
}
 800e9d8:	bf00      	nop
 800e9da:	371c      	adds	r7, #28
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	f003 031f 	and.w	r3, r3, #31
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e9fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6a1a      	ldr	r2, [r3, #32]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	43db      	mvns	r3, r3
 800ea06:	401a      	ands	r2, r3
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6a1a      	ldr	r2, [r3, #32]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	f003 031f 	and.w	r3, r3, #31
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	fa01 f303 	lsl.w	r3, r1, r3
 800ea1c:	431a      	orrs	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	621a      	str	r2, [r3, #32]
}
 800ea22:	bf00      	nop
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
	...

0800ea30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d101      	bne.n	800ea48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea44:	2302      	movs	r3, #2
 800ea46:	e077      	b.n	800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2202      	movs	r2, #2
 800ea54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a35      	ldr	r2, [pc, #212]	; (800eb44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d004      	beq.n	800ea7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a34      	ldr	r2, [pc, #208]	; (800eb48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d108      	bne.n	800ea8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ea82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a25      	ldr	r2, [pc, #148]	; (800eb44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d02c      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaba:	d027      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a22      	ldr	r2, [pc, #136]	; (800eb4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d022      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a21      	ldr	r2, [pc, #132]	; (800eb50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d01d      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a1f      	ldr	r2, [pc, #124]	; (800eb54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d018      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a1a      	ldr	r2, [pc, #104]	; (800eb48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d013      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a1b      	ldr	r2, [pc, #108]	; (800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d00e      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	4a1a      	ldr	r2, [pc, #104]	; (800eb5c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d009      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a18      	ldr	r2, [pc, #96]	; (800eb60 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d004      	beq.n	800eb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a17      	ldr	r2, [pc, #92]	; (800eb64 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d10c      	bne.n	800eb26 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2201      	movs	r2, #1
 800eb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3714      	adds	r7, #20
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr
 800eb44:	40010000 	.word	0x40010000
 800eb48:	40010400 	.word	0x40010400
 800eb4c:	40000400 	.word	0x40000400
 800eb50:	40000800 	.word	0x40000800
 800eb54:	40000c00 	.word	0x40000c00
 800eb58:	40001800 	.word	0x40001800
 800eb5c:	40014000 	.word	0x40014000
 800eb60:	4000e000 	.word	0x4000e000
 800eb64:	4000e400 	.word	0x4000e400

0800eb68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb72:	2300      	movs	r3, #0
 800eb74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d101      	bne.n	800eb84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb80:	2302      	movs	r3, #2
 800eb82:	e087      	b.n	800ec94 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	4313      	orrs	r3, r2
 800eb98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebea:	4313      	orrs	r3, r2
 800ebec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	041b      	lsls	r3, r3, #16
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a27      	ldr	r2, [pc, #156]	; (800eca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d004      	beq.n	800ec12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a25      	ldr	r2, [pc, #148]	; (800eca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d106      	bne.n	800ec20 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a1e      	ldr	r2, [pc, #120]	; (800eca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d004      	beq.n	800ec34 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a1d      	ldr	r2, [pc, #116]	; (800eca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d126      	bne.n	800ec82 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3e:	051b      	lsls	r3, r3, #20
 800ec40:	4313      	orrs	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	6a1b      	ldr	r3, [r3, #32]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a0e      	ldr	r2, [pc, #56]	; (800eca0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d004      	beq.n	800ec74 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a0d      	ldr	r2, [pc, #52]	; (800eca4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d106      	bne.n	800ec82 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68fa      	ldr	r2, [r7, #12]
 800ec88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	40010000 	.word	0x40010000
 800eca4:	40010400 	.word	0x40010400

0800eca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ecc4:	bf00      	nop
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d101      	bne.n	800ecf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e042      	b.n	800ed7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7f5 f857 	bl	8003dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2224      	movs	r2, #36	; 0x24
 800ed12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f022 0201 	bic.w	r2, r2, #1
 800ed24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fce8 	bl	800f6fc <UART_SetConfig>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d101      	bne.n	800ed36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	e022      	b.n	800ed7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d002      	beq.n	800ed44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f001 fb3a 	bl	80103b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	685a      	ldr	r2, [r3, #4]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	689a      	ldr	r2, [r3, #8]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f042 0201 	orr.w	r2, r2, #1
 800ed72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 fbc1 	bl	80104fc <UART_CheckIdleState>
 800ed7a:	4603      	mov	r3, r0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b091      	sub	sp, #68	; 0x44
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed98:	2b20      	cmp	r3, #32
 800ed9a:	f040 808c 	bne.w	800eeb6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <HAL_UART_Transmit_IT+0x26>
 800eda4:	88fb      	ldrh	r3, [r7, #6]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e084      	b.n	800eeb8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d101      	bne.n	800edbc <HAL_UART_Transmit_IT+0x38>
 800edb8:	2302      	movs	r3, #2
 800edba:	e07d      	b.n	800eeb8 <HAL_UART_Transmit_IT+0x134>
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	68ba      	ldr	r2, [r7, #8]
 800edc8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	88fa      	ldrh	r2, [r7, #6]
 800edce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	88fa      	ldrh	r2, [r7, #6]
 800edd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2221      	movs	r2, #33	; 0x21
 800edec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edf8:	d12e      	bne.n	800ee58 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee02:	d107      	bne.n	800ee14 <HAL_UART_Transmit_IT+0x90>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	691b      	ldr	r3, [r3, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d103      	bne.n	800ee14 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4a2d      	ldr	r2, [pc, #180]	; (800eec4 <HAL_UART_Transmit_IT+0x140>)
 800ee10:	675a      	str	r2, [r3, #116]	; 0x74
 800ee12:	e002      	b.n	800ee1a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4a2c      	ldr	r2, [pc, #176]	; (800eec8 <HAL_UART_Transmit_IT+0x144>)
 800ee18:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ee38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3308      	adds	r3, #8
 800ee40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee42:	637a      	str	r2, [r7, #52]	; 0x34
 800ee44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee4a:	e841 2300 	strex	r3, r2, [r1]
 800ee4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1e5      	bne.n	800ee22 <HAL_UART_Transmit_IT+0x9e>
 800ee56:	e02c      	b.n	800eeb2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee60:	d107      	bne.n	800ee72 <HAL_UART_Transmit_IT+0xee>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d103      	bne.n	800ee72 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	4a17      	ldr	r2, [pc, #92]	; (800eecc <HAL_UART_Transmit_IT+0x148>)
 800ee6e:	675a      	str	r2, [r3, #116]	; 0x74
 800ee70:	e002      	b.n	800ee78 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4a16      	ldr	r2, [pc, #88]	; (800eed0 <HAL_UART_Transmit_IT+0x14c>)
 800ee76:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	e853 3f00 	ldrex	r3, [r3]
 800ee8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee9e:	623b      	str	r3, [r7, #32]
 800eea0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea2:	69f9      	ldr	r1, [r7, #28]
 800eea4:	6a3a      	ldr	r2, [r7, #32]
 800eea6:	e841 2300 	strex	r3, r2, [r1]
 800eeaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1e6      	bne.n	800ee80 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e000      	b.n	800eeb8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800eeb6:	2302      	movs	r3, #2
  }
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3744      	adds	r7, #68	; 0x44
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	08010ccb 	.word	0x08010ccb
 800eec8:	08010beb 	.word	0x08010beb
 800eecc:	08010b29 	.word	0x08010b29
 800eed0:	08010a71 	.word	0x08010a71

0800eed4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08a      	sub	sp, #40	; 0x28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	4613      	mov	r3, r2
 800eee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eee8:	2b20      	cmp	r3, #32
 800eeea:	d142      	bne.n	800ef72 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <HAL_UART_Receive_IT+0x24>
 800eef2:	88fb      	ldrh	r3, [r7, #6]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d101      	bne.n	800eefc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
 800eefa:	e03b      	b.n	800ef74 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	d101      	bne.n	800ef0a <HAL_UART_Receive_IT+0x36>
 800ef06:	2302      	movs	r3, #2
 800ef08:	e034      	b.n	800ef74 <HAL_UART_Receive_IT+0xa0>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2200      	movs	r2, #0
 800ef16:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a17      	ldr	r2, [pc, #92]	; (800ef7c <HAL_UART_Receive_IT+0xa8>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d01f      	beq.n	800ef62 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d018      	beq.n	800ef62 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	e853 3f00 	ldrex	r3, [r3]
 800ef3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ef44:	627b      	str	r3, [r7, #36]	; 0x24
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	623b      	str	r3, [r7, #32]
 800ef50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef52:	69f9      	ldr	r1, [r7, #28]
 800ef54:	6a3a      	ldr	r2, [r7, #32]
 800ef56:	e841 2300 	strex	r3, r2, [r1]
 800ef5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1e6      	bne.n	800ef30 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ef62:	88fb      	ldrh	r3, [r7, #6]
 800ef64:	461a      	mov	r2, r3
 800ef66:	68b9      	ldr	r1, [r7, #8]
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f001 fbdb 	bl	8010724 <UART_Start_Receive_IT>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	e000      	b.n	800ef74 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ef72:	2302      	movs	r3, #2
  }
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3728      	adds	r7, #40	; 0x28
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	58000c00 	.word	0x58000c00

0800ef80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b0ba      	sub	sp, #232	; 0xe8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800efa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800efaa:	f640 030f 	movw	r3, #2063	; 0x80f
 800efae:	4013      	ands	r3, r2
 800efb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800efb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d11b      	bne.n	800eff4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800efbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efc0:	f003 0320 	and.w	r3, r3, #32
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d015      	beq.n	800eff4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800efc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efcc:	f003 0320 	and.w	r3, r3, #32
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d105      	bne.n	800efe0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800efd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d009      	beq.n	800eff4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f000 835a 	beq.w	800f69e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	4798      	blx	r3
      }
      return;
 800eff2:	e354      	b.n	800f69e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 811f 	beq.w	800f23c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800effe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f002:	4b8b      	ldr	r3, [pc, #556]	; (800f230 <HAL_UART_IRQHandler+0x2b0>)
 800f004:	4013      	ands	r3, r2
 800f006:	2b00      	cmp	r3, #0
 800f008:	d106      	bne.n	800f018 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f00a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f00e:	4b89      	ldr	r3, [pc, #548]	; (800f234 <HAL_UART_IRQHandler+0x2b4>)
 800f010:	4013      	ands	r3, r2
 800f012:	2b00      	cmp	r3, #0
 800f014:	f000 8112 	beq.w	800f23c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f01c:	f003 0301 	and.w	r3, r3, #1
 800f020:	2b00      	cmp	r3, #0
 800f022:	d011      	beq.n	800f048 <HAL_UART_IRQHandler+0xc8>
 800f024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00b      	beq.n	800f048 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2201      	movs	r2, #1
 800f036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f03e:	f043 0201 	orr.w	r2, r3, #1
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d011      	beq.n	800f078 <HAL_UART_IRQHandler+0xf8>
 800f054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00b      	beq.n	800f078 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2202      	movs	r2, #2
 800f066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f06e:	f043 0204 	orr.w	r2, r3, #4
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f07c:	f003 0304 	and.w	r3, r3, #4
 800f080:	2b00      	cmp	r3, #0
 800f082:	d011      	beq.n	800f0a8 <HAL_UART_IRQHandler+0x128>
 800f084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00b      	beq.n	800f0a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2204      	movs	r2, #4
 800f096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f09e:	f043 0202 	orr.w	r2, r3, #2
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0ac:	f003 0308 	and.w	r3, r3, #8
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d017      	beq.n	800f0e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0b8:	f003 0320 	and.w	r3, r3, #32
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d105      	bne.n	800f0cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f0c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f0c4:	4b5a      	ldr	r3, [pc, #360]	; (800f230 <HAL_UART_IRQHandler+0x2b0>)
 800f0c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00b      	beq.n	800f0e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2208      	movs	r2, #8
 800f0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0da:	f043 0208 	orr.w	r2, r3, #8
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d012      	beq.n	800f116 <HAL_UART_IRQHandler+0x196>
 800f0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00c      	beq.n	800f116 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f10c:	f043 0220 	orr.w	r2, r3, #32
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 82c0 	beq.w	800f6a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f126:	f003 0320 	and.w	r3, r3, #32
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d013      	beq.n	800f156 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f132:	f003 0320 	and.w	r3, r3, #32
 800f136:	2b00      	cmp	r3, #0
 800f138:	d105      	bne.n	800f146 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d003      	beq.n	800f156 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f15c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	689b      	ldr	r3, [r3, #8]
 800f166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f16a:	2b40      	cmp	r3, #64	; 0x40
 800f16c:	d005      	beq.n	800f17a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f16e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f172:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f176:	2b00      	cmp	r3, #0
 800f178:	d04f      	beq.n	800f21a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f001 fbfc 	bl	8010978 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18a:	2b40      	cmp	r3, #64	; 0x40
 800f18c:	d141      	bne.n	800f212 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3308      	adds	r3, #8
 800f194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f19c:	e853 3f00 	ldrex	r3, [r3]
 800f1a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f1a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f1ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f1be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f1c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f1ca:	e841 2300 	strex	r3, r2, [r1]
 800f1ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f1d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1d9      	bne.n	800f18e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d013      	beq.n	800f20a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1e6:	4a14      	ldr	r2, [pc, #80]	; (800f238 <HAL_UART_IRQHandler+0x2b8>)
 800f1e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f8 f934 	bl	800745c <HAL_DMA_Abort_IT>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d017      	beq.n	800f22a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f204:	4610      	mov	r0, r2
 800f206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f208:	e00f      	b.n	800f22a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fa60 	bl	800f6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f210:	e00b      	b.n	800f22a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fa5c 	bl	800f6d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f218:	e007      	b.n	800f22a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fa58 	bl	800f6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f228:	e23b      	b.n	800f6a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f22a:	bf00      	nop
    return;
 800f22c:	e239      	b.n	800f6a2 <HAL_UART_IRQHandler+0x722>
 800f22e:	bf00      	nop
 800f230:	10000001 	.word	0x10000001
 800f234:	04000120 	.word	0x04000120
 800f238:	08010a45 	.word	0x08010a45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f240:	2b01      	cmp	r3, #1
 800f242:	f040 81ce 	bne.w	800f5e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f24a:	f003 0310 	and.w	r3, r3, #16
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f000 81c7 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f258:	f003 0310 	and.w	r3, r3, #16
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 81c0 	beq.w	800f5e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2210      	movs	r2, #16
 800f268:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f274:	2b40      	cmp	r3, #64	; 0x40
 800f276:	f040 813b 	bne.w	800f4f0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a8b      	ldr	r2, [pc, #556]	; (800f4b0 <HAL_UART_IRQHandler+0x530>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d059      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a89      	ldr	r2, [pc, #548]	; (800f4b4 <HAL_UART_IRQHandler+0x534>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d053      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a87      	ldr	r2, [pc, #540]	; (800f4b8 <HAL_UART_IRQHandler+0x538>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d04d      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a85      	ldr	r2, [pc, #532]	; (800f4bc <HAL_UART_IRQHandler+0x53c>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d047      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a83      	ldr	r2, [pc, #524]	; (800f4c0 <HAL_UART_IRQHandler+0x540>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d041      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a81      	ldr	r2, [pc, #516]	; (800f4c4 <HAL_UART_IRQHandler+0x544>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d03b      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	4a7f      	ldr	r2, [pc, #508]	; (800f4c8 <HAL_UART_IRQHandler+0x548>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d035      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a7d      	ldr	r2, [pc, #500]	; (800f4cc <HAL_UART_IRQHandler+0x54c>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d02f      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a7b      	ldr	r2, [pc, #492]	; (800f4d0 <HAL_UART_IRQHandler+0x550>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d029      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a79      	ldr	r2, [pc, #484]	; (800f4d4 <HAL_UART_IRQHandler+0x554>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d023      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a77      	ldr	r2, [pc, #476]	; (800f4d8 <HAL_UART_IRQHandler+0x558>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d01d      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4a75      	ldr	r2, [pc, #468]	; (800f4dc <HAL_UART_IRQHandler+0x55c>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d017      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a73      	ldr	r2, [pc, #460]	; (800f4e0 <HAL_UART_IRQHandler+0x560>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d011      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a71      	ldr	r2, [pc, #452]	; (800f4e4 <HAL_UART_IRQHandler+0x564>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d00b      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a6f      	ldr	r2, [pc, #444]	; (800f4e8 <HAL_UART_IRQHandler+0x568>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d005      	beq.n	800f33a <HAL_UART_IRQHandler+0x3ba>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a6d      	ldr	r2, [pc, #436]	; (800f4ec <HAL_UART_IRQHandler+0x56c>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d105      	bne.n	800f346 <HAL_UART_IRQHandler+0x3c6>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	b29b      	uxth	r3, r3
 800f344:	e004      	b.n	800f350 <HAL_UART_IRQHandler+0x3d0>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f358:	2b00      	cmp	r3, #0
 800f35a:	f000 81a4 	beq.w	800f6a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f368:	429a      	cmp	r2, r3
 800f36a:	f080 819c 	bcs.w	800f6a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f37c:	69db      	ldr	r3, [r3, #28]
 800f37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f382:	f000 8086 	beq.w	800f492 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f392:	e853 3f00 	ldrex	r3, [r3]
 800f396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f39e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f3b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f3bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f3c0:	e841 2300 	strex	r3, r2, [r1]
 800f3c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f3c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1da      	bne.n	800f386 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3da:	e853 3f00 	ldrex	r3, [r3]
 800f3de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f3e2:	f023 0301 	bic.w	r3, r3, #1
 800f3e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3308      	adds	r3, #8
 800f3f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f3f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f3f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f3fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f400:	e841 2300 	strex	r3, r2, [r1]
 800f404:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1e1      	bne.n	800f3d0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	3308      	adds	r3, #8
 800f412:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f416:	e853 3f00 	ldrex	r3, [r3]
 800f41a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f41e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f430:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f432:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f434:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f436:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f438:	e841 2300 	strex	r3, r2, [r1]
 800f43c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1e3      	bne.n	800f40c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2220      	movs	r2, #32
 800f448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f45a:	e853 3f00 	ldrex	r3, [r3]
 800f45e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f462:	f023 0310 	bic.w	r3, r3, #16
 800f466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	461a      	mov	r2, r3
 800f470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f474:	65bb      	str	r3, [r7, #88]	; 0x58
 800f476:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f47a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f47c:	e841 2300 	strex	r3, r2, [r1]
 800f480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1e4      	bne.n	800f452 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7f7 fcc7 	bl	8006e20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f91c 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f4ac:	e0fb      	b.n	800f6a6 <HAL_UART_IRQHandler+0x726>
 800f4ae:	bf00      	nop
 800f4b0:	40020010 	.word	0x40020010
 800f4b4:	40020028 	.word	0x40020028
 800f4b8:	40020040 	.word	0x40020040
 800f4bc:	40020058 	.word	0x40020058
 800f4c0:	40020070 	.word	0x40020070
 800f4c4:	40020088 	.word	0x40020088
 800f4c8:	400200a0 	.word	0x400200a0
 800f4cc:	400200b8 	.word	0x400200b8
 800f4d0:	40020410 	.word	0x40020410
 800f4d4:	40020428 	.word	0x40020428
 800f4d8:	40020440 	.word	0x40020440
 800f4dc:	40020458 	.word	0x40020458
 800f4e0:	40020470 	.word	0x40020470
 800f4e4:	40020488 	.word	0x40020488
 800f4e8:	400204a0 	.word	0x400204a0
 800f4ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 80cc 	beq.w	800f6aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f512:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f516:	2b00      	cmp	r3, #0
 800f518:	f000 80c7 	beq.w	800f6aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f524:	e853 3f00 	ldrex	r3, [r3]
 800f528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	461a      	mov	r2, r3
 800f53a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f53e:	647b      	str	r3, [r7, #68]	; 0x44
 800f540:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f546:	e841 2300 	strex	r3, r2, [r1]
 800f54a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1e4      	bne.n	800f51c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	3308      	adds	r3, #8
 800f558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	e853 3f00 	ldrex	r3, [r3]
 800f560:	623b      	str	r3, [r7, #32]
   return(result);
 800f562:	6a3a      	ldr	r2, [r7, #32]
 800f564:	4b54      	ldr	r3, [pc, #336]	; (800f6b8 <HAL_UART_IRQHandler+0x738>)
 800f566:	4013      	ands	r3, r2
 800f568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	3308      	adds	r3, #8
 800f572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f576:	633a      	str	r2, [r7, #48]	; 0x30
 800f578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e3      	bne.n	800f552 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2220      	movs	r2, #32
 800f58e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	e853 3f00 	ldrex	r3, [r3]
 800f5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f023 0310 	bic.w	r3, r3, #16
 800f5b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f5c0:	61fb      	str	r3, [r7, #28]
 800f5c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c4:	69b9      	ldr	r1, [r7, #24]
 800f5c6:	69fa      	ldr	r2, [r7, #28]
 800f5c8:	e841 2300 	strex	r3, r2, [r1]
 800f5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1e4      	bne.n	800f59e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f5d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f882 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f5e0:	e063      	b.n	800f6aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f5e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00e      	beq.n	800f60c <HAL_UART_IRQHandler+0x68c>
 800f5ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d008      	beq.n	800f60c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f602:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f002 f85d 	bl	80116c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f60a:	e051      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f614:	2b00      	cmp	r3, #0
 800f616:	d014      	beq.n	800f642 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f620:	2b00      	cmp	r3, #0
 800f622:	d105      	bne.n	800f630 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d008      	beq.n	800f642 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f634:	2b00      	cmp	r3, #0
 800f636:	d03a      	beq.n	800f6ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	4798      	blx	r3
    }
    return;
 800f640:	e035      	b.n	800f6ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d009      	beq.n	800f662 <HAL_UART_IRQHandler+0x6e2>
 800f64e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f656:	2b00      	cmp	r3, #0
 800f658:	d003      	beq.n	800f662 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f001 fbaa 	bl	8010db4 <UART_EndTransmit_IT>
    return;
 800f660:	e026      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d009      	beq.n	800f682 <HAL_UART_IRQHandler+0x702>
 800f66e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f672:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f676:	2b00      	cmp	r3, #0
 800f678:	d003      	beq.n	800f682 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f002 f836 	bl	80116ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f680:	e016      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d010      	beq.n	800f6b0 <HAL_UART_IRQHandler+0x730>
 800f68e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f692:	2b00      	cmp	r3, #0
 800f694:	da0c      	bge.n	800f6b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f002 f81e 	bl	80116d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f69c:	e008      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
      return;
 800f69e:	bf00      	nop
 800f6a0:	e006      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
    return;
 800f6a2:	bf00      	nop
 800f6a4:	e004      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
      return;
 800f6a6:	bf00      	nop
 800f6a8:	e002      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
      return;
 800f6aa:	bf00      	nop
 800f6ac:	e000      	b.n	800f6b0 <HAL_UART_IRQHandler+0x730>
    return;
 800f6ae:	bf00      	nop
  }
}
 800f6b0:	37e8      	adds	r7, #232	; 0xe8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	effffffe 	.word	0xeffffffe

0800f6bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6fc:	b5b0      	push	{r4, r5, r7, lr}
 800f6fe:	b08e      	sub	sp, #56	; 0x38
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f704:	2300      	movs	r3, #0
 800f706:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	689a      	ldr	r2, [r3, #8]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	431a      	orrs	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	431a      	orrs	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69db      	ldr	r3, [r3, #28]
 800f71e:	4313      	orrs	r3, r2
 800f720:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	4bbf      	ldr	r3, [pc, #764]	; (800fa28 <UART_SetConfig+0x32c>)
 800f72a:	4013      	ands	r3, r2
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	6812      	ldr	r2, [r2, #0]
 800f730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f732:	430b      	orrs	r3, r1
 800f734:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68da      	ldr	r2, [r3, #12]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	430a      	orrs	r2, r1
 800f74a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	699b      	ldr	r3, [r3, #24]
 800f750:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4ab5      	ldr	r2, [pc, #724]	; (800fa2c <UART_SetConfig+0x330>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d004      	beq.n	800f766 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6a1b      	ldr	r3, [r3, #32]
 800f760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f762:	4313      	orrs	r3, r2
 800f764:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	689a      	ldr	r2, [r3, #8]
 800f76c:	4bb0      	ldr	r3, [pc, #704]	; (800fa30 <UART_SetConfig+0x334>)
 800f76e:	4013      	ands	r3, r2
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	6812      	ldr	r2, [r2, #0]
 800f774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f776:	430b      	orrs	r3, r1
 800f778:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f780:	f023 010f 	bic.w	r1, r3, #15
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4aa7      	ldr	r2, [pc, #668]	; (800fa34 <UART_SetConfig+0x338>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d176      	bne.n	800f888 <UART_SetConfig+0x18c>
 800f79a:	4ba7      	ldr	r3, [pc, #668]	; (800fa38 <UART_SetConfig+0x33c>)
 800f79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f79e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7a2:	2b28      	cmp	r3, #40	; 0x28
 800f7a4:	d86c      	bhi.n	800f880 <UART_SetConfig+0x184>
 800f7a6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <UART_SetConfig+0xb0>)
 800f7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ac:	0800f851 	.word	0x0800f851
 800f7b0:	0800f881 	.word	0x0800f881
 800f7b4:	0800f881 	.word	0x0800f881
 800f7b8:	0800f881 	.word	0x0800f881
 800f7bc:	0800f881 	.word	0x0800f881
 800f7c0:	0800f881 	.word	0x0800f881
 800f7c4:	0800f881 	.word	0x0800f881
 800f7c8:	0800f881 	.word	0x0800f881
 800f7cc:	0800f859 	.word	0x0800f859
 800f7d0:	0800f881 	.word	0x0800f881
 800f7d4:	0800f881 	.word	0x0800f881
 800f7d8:	0800f881 	.word	0x0800f881
 800f7dc:	0800f881 	.word	0x0800f881
 800f7e0:	0800f881 	.word	0x0800f881
 800f7e4:	0800f881 	.word	0x0800f881
 800f7e8:	0800f881 	.word	0x0800f881
 800f7ec:	0800f861 	.word	0x0800f861
 800f7f0:	0800f881 	.word	0x0800f881
 800f7f4:	0800f881 	.word	0x0800f881
 800f7f8:	0800f881 	.word	0x0800f881
 800f7fc:	0800f881 	.word	0x0800f881
 800f800:	0800f881 	.word	0x0800f881
 800f804:	0800f881 	.word	0x0800f881
 800f808:	0800f881 	.word	0x0800f881
 800f80c:	0800f869 	.word	0x0800f869
 800f810:	0800f881 	.word	0x0800f881
 800f814:	0800f881 	.word	0x0800f881
 800f818:	0800f881 	.word	0x0800f881
 800f81c:	0800f881 	.word	0x0800f881
 800f820:	0800f881 	.word	0x0800f881
 800f824:	0800f881 	.word	0x0800f881
 800f828:	0800f881 	.word	0x0800f881
 800f82c:	0800f871 	.word	0x0800f871
 800f830:	0800f881 	.word	0x0800f881
 800f834:	0800f881 	.word	0x0800f881
 800f838:	0800f881 	.word	0x0800f881
 800f83c:	0800f881 	.word	0x0800f881
 800f840:	0800f881 	.word	0x0800f881
 800f844:	0800f881 	.word	0x0800f881
 800f848:	0800f881 	.word	0x0800f881
 800f84c:	0800f879 	.word	0x0800f879
 800f850:	2301      	movs	r3, #1
 800f852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f856:	e326      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f858:	2304      	movs	r3, #4
 800f85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f85e:	e322      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f860:	2308      	movs	r3, #8
 800f862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f866:	e31e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f868:	2310      	movs	r3, #16
 800f86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f86e:	e31a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f870:	2320      	movs	r3, #32
 800f872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f876:	e316      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f878:	2340      	movs	r3, #64	; 0x40
 800f87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f87e:	e312      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f880:	2380      	movs	r3, #128	; 0x80
 800f882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f886:	e30e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a6b      	ldr	r2, [pc, #428]	; (800fa3c <UART_SetConfig+0x340>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d130      	bne.n	800f8f4 <UART_SetConfig+0x1f8>
 800f892:	4b69      	ldr	r3, [pc, #420]	; (800fa38 <UART_SetConfig+0x33c>)
 800f894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f896:	f003 0307 	and.w	r3, r3, #7
 800f89a:	2b05      	cmp	r3, #5
 800f89c:	d826      	bhi.n	800f8ec <UART_SetConfig+0x1f0>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <UART_SetConfig+0x1a8>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f8bd 	.word	0x0800f8bd
 800f8a8:	0800f8c5 	.word	0x0800f8c5
 800f8ac:	0800f8cd 	.word	0x0800f8cd
 800f8b0:	0800f8d5 	.word	0x0800f8d5
 800f8b4:	0800f8dd 	.word	0x0800f8dd
 800f8b8:	0800f8e5 	.word	0x0800f8e5
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8c2:	e2f0      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8c4:	2304      	movs	r3, #4
 800f8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ca:	e2ec      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8cc:	2308      	movs	r3, #8
 800f8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8d2:	e2e8      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8d4:	2310      	movs	r3, #16
 800f8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8da:	e2e4      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8dc:	2320      	movs	r3, #32
 800f8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8e2:	e2e0      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8e4:	2340      	movs	r3, #64	; 0x40
 800f8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ea:	e2dc      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8ec:	2380      	movs	r3, #128	; 0x80
 800f8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8f2:	e2d8      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a51      	ldr	r2, [pc, #324]	; (800fa40 <UART_SetConfig+0x344>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d130      	bne.n	800f960 <UART_SetConfig+0x264>
 800f8fe:	4b4e      	ldr	r3, [pc, #312]	; (800fa38 <UART_SetConfig+0x33c>)
 800f900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f902:	f003 0307 	and.w	r3, r3, #7
 800f906:	2b05      	cmp	r3, #5
 800f908:	d826      	bhi.n	800f958 <UART_SetConfig+0x25c>
 800f90a:	a201      	add	r2, pc, #4	; (adr r2, 800f910 <UART_SetConfig+0x214>)
 800f90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f910:	0800f929 	.word	0x0800f929
 800f914:	0800f931 	.word	0x0800f931
 800f918:	0800f939 	.word	0x0800f939
 800f91c:	0800f941 	.word	0x0800f941
 800f920:	0800f949 	.word	0x0800f949
 800f924:	0800f951 	.word	0x0800f951
 800f928:	2300      	movs	r3, #0
 800f92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f92e:	e2ba      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f930:	2304      	movs	r3, #4
 800f932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f936:	e2b6      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f938:	2308      	movs	r3, #8
 800f93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f93e:	e2b2      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f940:	2310      	movs	r3, #16
 800f942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f946:	e2ae      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f948:	2320      	movs	r3, #32
 800f94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f94e:	e2aa      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f950:	2340      	movs	r3, #64	; 0x40
 800f952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f956:	e2a6      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f958:	2380      	movs	r3, #128	; 0x80
 800f95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f95e:	e2a2      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4a37      	ldr	r2, [pc, #220]	; (800fa44 <UART_SetConfig+0x348>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d130      	bne.n	800f9cc <UART_SetConfig+0x2d0>
 800f96a:	4b33      	ldr	r3, [pc, #204]	; (800fa38 <UART_SetConfig+0x33c>)
 800f96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f96e:	f003 0307 	and.w	r3, r3, #7
 800f972:	2b05      	cmp	r3, #5
 800f974:	d826      	bhi.n	800f9c4 <UART_SetConfig+0x2c8>
 800f976:	a201      	add	r2, pc, #4	; (adr r2, 800f97c <UART_SetConfig+0x280>)
 800f978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97c:	0800f995 	.word	0x0800f995
 800f980:	0800f99d 	.word	0x0800f99d
 800f984:	0800f9a5 	.word	0x0800f9a5
 800f988:	0800f9ad 	.word	0x0800f9ad
 800f98c:	0800f9b5 	.word	0x0800f9b5
 800f990:	0800f9bd 	.word	0x0800f9bd
 800f994:	2300      	movs	r3, #0
 800f996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f99a:	e284      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f99c:	2304      	movs	r3, #4
 800f99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9a2:	e280      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9a4:	2308      	movs	r3, #8
 800f9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9aa:	e27c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9ac:	2310      	movs	r3, #16
 800f9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9b2:	e278      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9b4:	2320      	movs	r3, #32
 800f9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ba:	e274      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9bc:	2340      	movs	r3, #64	; 0x40
 800f9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9c2:	e270      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9c4:	2380      	movs	r3, #128	; 0x80
 800f9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f9ca:	e26c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a1d      	ldr	r2, [pc, #116]	; (800fa48 <UART_SetConfig+0x34c>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d142      	bne.n	800fa5c <UART_SetConfig+0x360>
 800f9d6:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <UART_SetConfig+0x33c>)
 800f9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9da:	f003 0307 	and.w	r3, r3, #7
 800f9de:	2b05      	cmp	r3, #5
 800f9e0:	d838      	bhi.n	800fa54 <UART_SetConfig+0x358>
 800f9e2:	a201      	add	r2, pc, #4	; (adr r2, 800f9e8 <UART_SetConfig+0x2ec>)
 800f9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e8:	0800fa01 	.word	0x0800fa01
 800f9ec:	0800fa09 	.word	0x0800fa09
 800f9f0:	0800fa11 	.word	0x0800fa11
 800f9f4:	0800fa19 	.word	0x0800fa19
 800f9f8:	0800fa21 	.word	0x0800fa21
 800f9fc:	0800fa4d 	.word	0x0800fa4d
 800fa00:	2300      	movs	r3, #0
 800fa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa06:	e24e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa08:	2304      	movs	r3, #4
 800fa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa0e:	e24a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa10:	2308      	movs	r3, #8
 800fa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa16:	e246      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa18:	2310      	movs	r3, #16
 800fa1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa1e:	e242      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa20:	2320      	movs	r3, #32
 800fa22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa26:	e23e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa28:	cfff69f3 	.word	0xcfff69f3
 800fa2c:	58000c00 	.word	0x58000c00
 800fa30:	11fff4ff 	.word	0x11fff4ff
 800fa34:	40011000 	.word	0x40011000
 800fa38:	58024400 	.word	0x58024400
 800fa3c:	40004400 	.word	0x40004400
 800fa40:	40004800 	.word	0x40004800
 800fa44:	40004c00 	.word	0x40004c00
 800fa48:	40005000 	.word	0x40005000
 800fa4c:	2340      	movs	r3, #64	; 0x40
 800fa4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa52:	e228      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa54:	2380      	movs	r3, #128	; 0x80
 800fa56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa5a:	e224      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4ab1      	ldr	r2, [pc, #708]	; (800fd28 <UART_SetConfig+0x62c>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d176      	bne.n	800fb54 <UART_SetConfig+0x458>
 800fa66:	4bb1      	ldr	r3, [pc, #708]	; (800fd2c <UART_SetConfig+0x630>)
 800fa68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa6e:	2b28      	cmp	r3, #40	; 0x28
 800fa70:	d86c      	bhi.n	800fb4c <UART_SetConfig+0x450>
 800fa72:	a201      	add	r2, pc, #4	; (adr r2, 800fa78 <UART_SetConfig+0x37c>)
 800fa74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa78:	0800fb1d 	.word	0x0800fb1d
 800fa7c:	0800fb4d 	.word	0x0800fb4d
 800fa80:	0800fb4d 	.word	0x0800fb4d
 800fa84:	0800fb4d 	.word	0x0800fb4d
 800fa88:	0800fb4d 	.word	0x0800fb4d
 800fa8c:	0800fb4d 	.word	0x0800fb4d
 800fa90:	0800fb4d 	.word	0x0800fb4d
 800fa94:	0800fb4d 	.word	0x0800fb4d
 800fa98:	0800fb25 	.word	0x0800fb25
 800fa9c:	0800fb4d 	.word	0x0800fb4d
 800faa0:	0800fb4d 	.word	0x0800fb4d
 800faa4:	0800fb4d 	.word	0x0800fb4d
 800faa8:	0800fb4d 	.word	0x0800fb4d
 800faac:	0800fb4d 	.word	0x0800fb4d
 800fab0:	0800fb4d 	.word	0x0800fb4d
 800fab4:	0800fb4d 	.word	0x0800fb4d
 800fab8:	0800fb2d 	.word	0x0800fb2d
 800fabc:	0800fb4d 	.word	0x0800fb4d
 800fac0:	0800fb4d 	.word	0x0800fb4d
 800fac4:	0800fb4d 	.word	0x0800fb4d
 800fac8:	0800fb4d 	.word	0x0800fb4d
 800facc:	0800fb4d 	.word	0x0800fb4d
 800fad0:	0800fb4d 	.word	0x0800fb4d
 800fad4:	0800fb4d 	.word	0x0800fb4d
 800fad8:	0800fb35 	.word	0x0800fb35
 800fadc:	0800fb4d 	.word	0x0800fb4d
 800fae0:	0800fb4d 	.word	0x0800fb4d
 800fae4:	0800fb4d 	.word	0x0800fb4d
 800fae8:	0800fb4d 	.word	0x0800fb4d
 800faec:	0800fb4d 	.word	0x0800fb4d
 800faf0:	0800fb4d 	.word	0x0800fb4d
 800faf4:	0800fb4d 	.word	0x0800fb4d
 800faf8:	0800fb3d 	.word	0x0800fb3d
 800fafc:	0800fb4d 	.word	0x0800fb4d
 800fb00:	0800fb4d 	.word	0x0800fb4d
 800fb04:	0800fb4d 	.word	0x0800fb4d
 800fb08:	0800fb4d 	.word	0x0800fb4d
 800fb0c:	0800fb4d 	.word	0x0800fb4d
 800fb10:	0800fb4d 	.word	0x0800fb4d
 800fb14:	0800fb4d 	.word	0x0800fb4d
 800fb18:	0800fb45 	.word	0x0800fb45
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb22:	e1c0      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb24:	2304      	movs	r3, #4
 800fb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb2a:	e1bc      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb2c:	2308      	movs	r3, #8
 800fb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb32:	e1b8      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb34:	2310      	movs	r3, #16
 800fb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb3a:	e1b4      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb3c:	2320      	movs	r3, #32
 800fb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb42:	e1b0      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb44:	2340      	movs	r3, #64	; 0x40
 800fb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb4a:	e1ac      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb4c:	2380      	movs	r3, #128	; 0x80
 800fb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb52:	e1a8      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a75      	ldr	r2, [pc, #468]	; (800fd30 <UART_SetConfig+0x634>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d130      	bne.n	800fbc0 <UART_SetConfig+0x4c4>
 800fb5e:	4b73      	ldr	r3, [pc, #460]	; (800fd2c <UART_SetConfig+0x630>)
 800fb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b05      	cmp	r3, #5
 800fb68:	d826      	bhi.n	800fbb8 <UART_SetConfig+0x4bc>
 800fb6a:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <UART_SetConfig+0x474>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fb89 	.word	0x0800fb89
 800fb74:	0800fb91 	.word	0x0800fb91
 800fb78:	0800fb99 	.word	0x0800fb99
 800fb7c:	0800fba1 	.word	0x0800fba1
 800fb80:	0800fba9 	.word	0x0800fba9
 800fb84:	0800fbb1 	.word	0x0800fbb1
 800fb88:	2300      	movs	r3, #0
 800fb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb8e:	e18a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb90:	2304      	movs	r3, #4
 800fb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb96:	e186      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fb98:	2308      	movs	r3, #8
 800fb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb9e:	e182      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fba0:	2310      	movs	r3, #16
 800fba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba6:	e17e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fba8:	2320      	movs	r3, #32
 800fbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbae:	e17a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fbb0:	2340      	movs	r3, #64	; 0x40
 800fbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbb6:	e176      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fbb8:	2380      	movs	r3, #128	; 0x80
 800fbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbbe:	e172      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a5b      	ldr	r2, [pc, #364]	; (800fd34 <UART_SetConfig+0x638>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d130      	bne.n	800fc2c <UART_SetConfig+0x530>
 800fbca:	4b58      	ldr	r3, [pc, #352]	; (800fd2c <UART_SetConfig+0x630>)
 800fbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbce:	f003 0307 	and.w	r3, r3, #7
 800fbd2:	2b05      	cmp	r3, #5
 800fbd4:	d826      	bhi.n	800fc24 <UART_SetConfig+0x528>
 800fbd6:	a201      	add	r2, pc, #4	; (adr r2, 800fbdc <UART_SetConfig+0x4e0>)
 800fbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbdc:	0800fbf5 	.word	0x0800fbf5
 800fbe0:	0800fbfd 	.word	0x0800fbfd
 800fbe4:	0800fc05 	.word	0x0800fc05
 800fbe8:	0800fc0d 	.word	0x0800fc0d
 800fbec:	0800fc15 	.word	0x0800fc15
 800fbf0:	0800fc1d 	.word	0x0800fc1d
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbfa:	e154      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fbfc:	2304      	movs	r3, #4
 800fbfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc02:	e150      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc04:	2308      	movs	r3, #8
 800fc06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc0a:	e14c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc0c:	2310      	movs	r3, #16
 800fc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc12:	e148      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc14:	2320      	movs	r3, #32
 800fc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc1a:	e144      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc1c:	2340      	movs	r3, #64	; 0x40
 800fc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc22:	e140      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc24:	2380      	movs	r3, #128	; 0x80
 800fc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc2a:	e13c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a41      	ldr	r2, [pc, #260]	; (800fd38 <UART_SetConfig+0x63c>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	f040 8082 	bne.w	800fd3c <UART_SetConfig+0x640>
 800fc38:	4b3c      	ldr	r3, [pc, #240]	; (800fd2c <UART_SetConfig+0x630>)
 800fc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc40:	2b28      	cmp	r3, #40	; 0x28
 800fc42:	d86d      	bhi.n	800fd20 <UART_SetConfig+0x624>
 800fc44:	a201      	add	r2, pc, #4	; (adr r2, 800fc4c <UART_SetConfig+0x550>)
 800fc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4a:	bf00      	nop
 800fc4c:	0800fcf1 	.word	0x0800fcf1
 800fc50:	0800fd21 	.word	0x0800fd21
 800fc54:	0800fd21 	.word	0x0800fd21
 800fc58:	0800fd21 	.word	0x0800fd21
 800fc5c:	0800fd21 	.word	0x0800fd21
 800fc60:	0800fd21 	.word	0x0800fd21
 800fc64:	0800fd21 	.word	0x0800fd21
 800fc68:	0800fd21 	.word	0x0800fd21
 800fc6c:	0800fcf9 	.word	0x0800fcf9
 800fc70:	0800fd21 	.word	0x0800fd21
 800fc74:	0800fd21 	.word	0x0800fd21
 800fc78:	0800fd21 	.word	0x0800fd21
 800fc7c:	0800fd21 	.word	0x0800fd21
 800fc80:	0800fd21 	.word	0x0800fd21
 800fc84:	0800fd21 	.word	0x0800fd21
 800fc88:	0800fd21 	.word	0x0800fd21
 800fc8c:	0800fd01 	.word	0x0800fd01
 800fc90:	0800fd21 	.word	0x0800fd21
 800fc94:	0800fd21 	.word	0x0800fd21
 800fc98:	0800fd21 	.word	0x0800fd21
 800fc9c:	0800fd21 	.word	0x0800fd21
 800fca0:	0800fd21 	.word	0x0800fd21
 800fca4:	0800fd21 	.word	0x0800fd21
 800fca8:	0800fd21 	.word	0x0800fd21
 800fcac:	0800fd09 	.word	0x0800fd09
 800fcb0:	0800fd21 	.word	0x0800fd21
 800fcb4:	0800fd21 	.word	0x0800fd21
 800fcb8:	0800fd21 	.word	0x0800fd21
 800fcbc:	0800fd21 	.word	0x0800fd21
 800fcc0:	0800fd21 	.word	0x0800fd21
 800fcc4:	0800fd21 	.word	0x0800fd21
 800fcc8:	0800fd21 	.word	0x0800fd21
 800fccc:	0800fd11 	.word	0x0800fd11
 800fcd0:	0800fd21 	.word	0x0800fd21
 800fcd4:	0800fd21 	.word	0x0800fd21
 800fcd8:	0800fd21 	.word	0x0800fd21
 800fcdc:	0800fd21 	.word	0x0800fd21
 800fce0:	0800fd21 	.word	0x0800fd21
 800fce4:	0800fd21 	.word	0x0800fd21
 800fce8:	0800fd21 	.word	0x0800fd21
 800fcec:	0800fd19 	.word	0x0800fd19
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcf6:	e0d6      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fcf8:	2304      	movs	r3, #4
 800fcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fcfe:	e0d2      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd00:	2308      	movs	r3, #8
 800fd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd06:	e0ce      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd08:	2310      	movs	r3, #16
 800fd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd0e:	e0ca      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd10:	2320      	movs	r3, #32
 800fd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd16:	e0c6      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd18:	2340      	movs	r3, #64	; 0x40
 800fd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd1e:	e0c2      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd20:	2380      	movs	r3, #128	; 0x80
 800fd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd26:	e0be      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fd28:	40011400 	.word	0x40011400
 800fd2c:	58024400 	.word	0x58024400
 800fd30:	40007800 	.word	0x40007800
 800fd34:	40007c00 	.word	0x40007c00
 800fd38:	40011800 	.word	0x40011800
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4aad      	ldr	r2, [pc, #692]	; (800fff8 <UART_SetConfig+0x8fc>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d176      	bne.n	800fe34 <UART_SetConfig+0x738>
 800fd46:	4bad      	ldr	r3, [pc, #692]	; (800fffc <UART_SetConfig+0x900>)
 800fd48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd4e:	2b28      	cmp	r3, #40	; 0x28
 800fd50:	d86c      	bhi.n	800fe2c <UART_SetConfig+0x730>
 800fd52:	a201      	add	r2, pc, #4	; (adr r2, 800fd58 <UART_SetConfig+0x65c>)
 800fd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd58:	0800fdfd 	.word	0x0800fdfd
 800fd5c:	0800fe2d 	.word	0x0800fe2d
 800fd60:	0800fe2d 	.word	0x0800fe2d
 800fd64:	0800fe2d 	.word	0x0800fe2d
 800fd68:	0800fe2d 	.word	0x0800fe2d
 800fd6c:	0800fe2d 	.word	0x0800fe2d
 800fd70:	0800fe2d 	.word	0x0800fe2d
 800fd74:	0800fe2d 	.word	0x0800fe2d
 800fd78:	0800fe05 	.word	0x0800fe05
 800fd7c:	0800fe2d 	.word	0x0800fe2d
 800fd80:	0800fe2d 	.word	0x0800fe2d
 800fd84:	0800fe2d 	.word	0x0800fe2d
 800fd88:	0800fe2d 	.word	0x0800fe2d
 800fd8c:	0800fe2d 	.word	0x0800fe2d
 800fd90:	0800fe2d 	.word	0x0800fe2d
 800fd94:	0800fe2d 	.word	0x0800fe2d
 800fd98:	0800fe0d 	.word	0x0800fe0d
 800fd9c:	0800fe2d 	.word	0x0800fe2d
 800fda0:	0800fe2d 	.word	0x0800fe2d
 800fda4:	0800fe2d 	.word	0x0800fe2d
 800fda8:	0800fe2d 	.word	0x0800fe2d
 800fdac:	0800fe2d 	.word	0x0800fe2d
 800fdb0:	0800fe2d 	.word	0x0800fe2d
 800fdb4:	0800fe2d 	.word	0x0800fe2d
 800fdb8:	0800fe15 	.word	0x0800fe15
 800fdbc:	0800fe2d 	.word	0x0800fe2d
 800fdc0:	0800fe2d 	.word	0x0800fe2d
 800fdc4:	0800fe2d 	.word	0x0800fe2d
 800fdc8:	0800fe2d 	.word	0x0800fe2d
 800fdcc:	0800fe2d 	.word	0x0800fe2d
 800fdd0:	0800fe2d 	.word	0x0800fe2d
 800fdd4:	0800fe2d 	.word	0x0800fe2d
 800fdd8:	0800fe1d 	.word	0x0800fe1d
 800fddc:	0800fe2d 	.word	0x0800fe2d
 800fde0:	0800fe2d 	.word	0x0800fe2d
 800fde4:	0800fe2d 	.word	0x0800fe2d
 800fde8:	0800fe2d 	.word	0x0800fe2d
 800fdec:	0800fe2d 	.word	0x0800fe2d
 800fdf0:	0800fe2d 	.word	0x0800fe2d
 800fdf4:	0800fe2d 	.word	0x0800fe2d
 800fdf8:	0800fe25 	.word	0x0800fe25
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe02:	e050      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe04:	2304      	movs	r3, #4
 800fe06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe0a:	e04c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe0c:	2308      	movs	r3, #8
 800fe0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe12:	e048      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe14:	2310      	movs	r3, #16
 800fe16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe1a:	e044      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe1c:	2320      	movs	r3, #32
 800fe1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe22:	e040      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe24:	2340      	movs	r3, #64	; 0x40
 800fe26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe2a:	e03c      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe2c:	2380      	movs	r3, #128	; 0x80
 800fe2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe32:	e038      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a71      	ldr	r2, [pc, #452]	; (8010000 <UART_SetConfig+0x904>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d130      	bne.n	800fea0 <UART_SetConfig+0x7a4>
 800fe3e:	4b6f      	ldr	r3, [pc, #444]	; (800fffc <UART_SetConfig+0x900>)
 800fe40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe42:	f003 0307 	and.w	r3, r3, #7
 800fe46:	2b05      	cmp	r3, #5
 800fe48:	d826      	bhi.n	800fe98 <UART_SetConfig+0x79c>
 800fe4a:	a201      	add	r2, pc, #4	; (adr r2, 800fe50 <UART_SetConfig+0x754>)
 800fe4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe50:	0800fe69 	.word	0x0800fe69
 800fe54:	0800fe71 	.word	0x0800fe71
 800fe58:	0800fe79 	.word	0x0800fe79
 800fe5c:	0800fe81 	.word	0x0800fe81
 800fe60:	0800fe89 	.word	0x0800fe89
 800fe64:	0800fe91 	.word	0x0800fe91
 800fe68:	2302      	movs	r3, #2
 800fe6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe6e:	e01a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe70:	2304      	movs	r3, #4
 800fe72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe76:	e016      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe78:	2308      	movs	r3, #8
 800fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe7e:	e012      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe80:	2310      	movs	r3, #16
 800fe82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe86:	e00e      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe88:	2320      	movs	r3, #32
 800fe8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe8e:	e00a      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe90:	2340      	movs	r3, #64	; 0x40
 800fe92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe96:	e006      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fe98:	2380      	movs	r3, #128	; 0x80
 800fe9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe9e:	e002      	b.n	800fea6 <UART_SetConfig+0x7aa>
 800fea0:	2380      	movs	r3, #128	; 0x80
 800fea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a55      	ldr	r2, [pc, #340]	; (8010000 <UART_SetConfig+0x904>)
 800feac:	4293      	cmp	r3, r2
 800feae:	f040 80f0 	bne.w	8010092 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800feb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800feb6:	2b20      	cmp	r3, #32
 800feb8:	dc46      	bgt.n	800ff48 <UART_SetConfig+0x84c>
 800feba:	2b02      	cmp	r3, #2
 800febc:	db75      	blt.n	800ffaa <UART_SetConfig+0x8ae>
 800febe:	3b02      	subs	r3, #2
 800fec0:	2b1e      	cmp	r3, #30
 800fec2:	d872      	bhi.n	800ffaa <UART_SetConfig+0x8ae>
 800fec4:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <UART_SetConfig+0x7d0>)
 800fec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feca:	bf00      	nop
 800fecc:	0800ff4f 	.word	0x0800ff4f
 800fed0:	0800ffab 	.word	0x0800ffab
 800fed4:	0800ff57 	.word	0x0800ff57
 800fed8:	0800ffab 	.word	0x0800ffab
 800fedc:	0800ffab 	.word	0x0800ffab
 800fee0:	0800ffab 	.word	0x0800ffab
 800fee4:	0800ff67 	.word	0x0800ff67
 800fee8:	0800ffab 	.word	0x0800ffab
 800feec:	0800ffab 	.word	0x0800ffab
 800fef0:	0800ffab 	.word	0x0800ffab
 800fef4:	0800ffab 	.word	0x0800ffab
 800fef8:	0800ffab 	.word	0x0800ffab
 800fefc:	0800ffab 	.word	0x0800ffab
 800ff00:	0800ffab 	.word	0x0800ffab
 800ff04:	0800ff77 	.word	0x0800ff77
 800ff08:	0800ffab 	.word	0x0800ffab
 800ff0c:	0800ffab 	.word	0x0800ffab
 800ff10:	0800ffab 	.word	0x0800ffab
 800ff14:	0800ffab 	.word	0x0800ffab
 800ff18:	0800ffab 	.word	0x0800ffab
 800ff1c:	0800ffab 	.word	0x0800ffab
 800ff20:	0800ffab 	.word	0x0800ffab
 800ff24:	0800ffab 	.word	0x0800ffab
 800ff28:	0800ffab 	.word	0x0800ffab
 800ff2c:	0800ffab 	.word	0x0800ffab
 800ff30:	0800ffab 	.word	0x0800ffab
 800ff34:	0800ffab 	.word	0x0800ffab
 800ff38:	0800ffab 	.word	0x0800ffab
 800ff3c:	0800ffab 	.word	0x0800ffab
 800ff40:	0800ffab 	.word	0x0800ffab
 800ff44:	0800ff9d 	.word	0x0800ff9d
 800ff48:	2b40      	cmp	r3, #64	; 0x40
 800ff4a:	d02a      	beq.n	800ffa2 <UART_SetConfig+0x8a6>
 800ff4c:	e02d      	b.n	800ffaa <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff4e:	f7fb fbc3 	bl	800b6d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ff52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ff54:	e02f      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff56:	f107 0314 	add.w	r3, r7, #20
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fb fbd2 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff64:	e027      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff66:	f107 0308 	add.w	r3, r7, #8
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fb fd1e 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff74:	e01f      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff76:	4b21      	ldr	r3, [pc, #132]	; (800fffc <UART_SetConfig+0x900>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f003 0320 	and.w	r3, r3, #32
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d009      	beq.n	800ff96 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff82:	4b1e      	ldr	r3, [pc, #120]	; (800fffc <UART_SetConfig+0x900>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	08db      	lsrs	r3, r3, #3
 800ff88:	f003 0303 	and.w	r3, r3, #3
 800ff8c:	4a1d      	ldr	r2, [pc, #116]	; (8010004 <UART_SetConfig+0x908>)
 800ff8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff94:	e00f      	b.n	800ffb6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800ff96:	4b1b      	ldr	r3, [pc, #108]	; (8010004 <UART_SetConfig+0x908>)
 800ff98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff9a:	e00c      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff9c:	4b1a      	ldr	r3, [pc, #104]	; (8010008 <UART_SetConfig+0x90c>)
 800ff9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffa0:	e009      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffa8:	e005      	b.n	800ffb6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ffb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ffb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 81e6 	beq.w	801038a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc2:	4a12      	ldr	r2, [pc, #72]	; (801000c <UART_SetConfig+0x910>)
 800ffc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffc8:	461a      	mov	r2, r3
 800ffca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffd0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	685a      	ldr	r2, [r3, #4]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	4413      	add	r3, r2
 800ffdc:	6a3a      	ldr	r2, [r7, #32]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d305      	bcc.n	800ffee <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffe8:	6a3a      	ldr	r2, [r7, #32]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d910      	bls.n	8010010 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ffee:	2301      	movs	r3, #1
 800fff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fff4:	e1c9      	b.n	801038a <UART_SetConfig+0xc8e>
 800fff6:	bf00      	nop
 800fff8:	40011c00 	.word	0x40011c00
 800fffc:	58024400 	.word	0x58024400
 8010000:	58000c00 	.word	0x58000c00
 8010004:	03d09000 	.word	0x03d09000
 8010008:	003d0900 	.word	0x003d0900
 801000c:	080119a0 	.word	0x080119a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010012:	4618      	mov	r0, r3
 8010014:	f04f 0100 	mov.w	r1, #0
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001c:	4ac1      	ldr	r2, [pc, #772]	; (8010324 <UART_SetConfig+0xc28>)
 801001e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010022:	b29a      	uxth	r2, r3
 8010024:	f04f 0300 	mov.w	r3, #0
 8010028:	f7f0 f972 	bl	8000310 <__aeabi_uldivmod>
 801002c:	4602      	mov	r2, r0
 801002e:	460b      	mov	r3, r1
 8010030:	4610      	mov	r0, r2
 8010032:	4619      	mov	r1, r3
 8010034:	f04f 0200 	mov.w	r2, #0
 8010038:	f04f 0300 	mov.w	r3, #0
 801003c:	020b      	lsls	r3, r1, #8
 801003e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010042:	0202      	lsls	r2, r0, #8
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	6849      	ldr	r1, [r1, #4]
 8010048:	0849      	lsrs	r1, r1, #1
 801004a:	4608      	mov	r0, r1
 801004c:	f04f 0100 	mov.w	r1, #0
 8010050:	1814      	adds	r4, r2, r0
 8010052:	eb43 0501 	adc.w	r5, r3, r1
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	461a      	mov	r2, r3
 801005c:	f04f 0300 	mov.w	r3, #0
 8010060:	4620      	mov	r0, r4
 8010062:	4629      	mov	r1, r5
 8010064:	f7f0 f954 	bl	8000310 <__aeabi_uldivmod>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	4613      	mov	r3, r2
 801006e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010076:	d308      	bcc.n	801008a <UART_SetConfig+0x98e>
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801007e:	d204      	bcs.n	801008a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010086:	60da      	str	r2, [r3, #12]
 8010088:	e17f      	b.n	801038a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 801008a:	2301      	movs	r3, #1
 801008c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010090:	e17b      	b.n	801038a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	69db      	ldr	r3, [r3, #28]
 8010096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801009a:	f040 80bd 	bne.w	8010218 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 801009e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100a2:	2b20      	cmp	r3, #32
 80100a4:	dc48      	bgt.n	8010138 <UART_SetConfig+0xa3c>
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	db7b      	blt.n	80101a2 <UART_SetConfig+0xaa6>
 80100aa:	2b20      	cmp	r3, #32
 80100ac:	d879      	bhi.n	80101a2 <UART_SetConfig+0xaa6>
 80100ae:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <UART_SetConfig+0x9b8>)
 80100b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b4:	0801013f 	.word	0x0801013f
 80100b8:	08010147 	.word	0x08010147
 80100bc:	080101a3 	.word	0x080101a3
 80100c0:	080101a3 	.word	0x080101a3
 80100c4:	0801014f 	.word	0x0801014f
 80100c8:	080101a3 	.word	0x080101a3
 80100cc:	080101a3 	.word	0x080101a3
 80100d0:	080101a3 	.word	0x080101a3
 80100d4:	0801015f 	.word	0x0801015f
 80100d8:	080101a3 	.word	0x080101a3
 80100dc:	080101a3 	.word	0x080101a3
 80100e0:	080101a3 	.word	0x080101a3
 80100e4:	080101a3 	.word	0x080101a3
 80100e8:	080101a3 	.word	0x080101a3
 80100ec:	080101a3 	.word	0x080101a3
 80100f0:	080101a3 	.word	0x080101a3
 80100f4:	0801016f 	.word	0x0801016f
 80100f8:	080101a3 	.word	0x080101a3
 80100fc:	080101a3 	.word	0x080101a3
 8010100:	080101a3 	.word	0x080101a3
 8010104:	080101a3 	.word	0x080101a3
 8010108:	080101a3 	.word	0x080101a3
 801010c:	080101a3 	.word	0x080101a3
 8010110:	080101a3 	.word	0x080101a3
 8010114:	080101a3 	.word	0x080101a3
 8010118:	080101a3 	.word	0x080101a3
 801011c:	080101a3 	.word	0x080101a3
 8010120:	080101a3 	.word	0x080101a3
 8010124:	080101a3 	.word	0x080101a3
 8010128:	080101a3 	.word	0x080101a3
 801012c:	080101a3 	.word	0x080101a3
 8010130:	080101a3 	.word	0x080101a3
 8010134:	08010195 	.word	0x08010195
 8010138:	2b40      	cmp	r3, #64	; 0x40
 801013a:	d02e      	beq.n	801019a <UART_SetConfig+0xa9e>
 801013c:	e031      	b.n	80101a2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801013e:	f7f9 ff81 	bl	800a044 <HAL_RCC_GetPCLK1Freq>
 8010142:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010144:	e033      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010146:	f7f9 ff93 	bl	800a070 <HAL_RCC_GetPCLK2Freq>
 801014a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801014c:	e02f      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801014e:	f107 0314 	add.w	r3, r7, #20
 8010152:	4618      	mov	r0, r3
 8010154:	f7fb fad6 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801015c:	e027      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801015e:	f107 0308 	add.w	r3, r7, #8
 8010162:	4618      	mov	r0, r3
 8010164:	f7fb fc22 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801016c:	e01f      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801016e:	4b6e      	ldr	r3, [pc, #440]	; (8010328 <UART_SetConfig+0xc2c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f003 0320 	and.w	r3, r3, #32
 8010176:	2b00      	cmp	r3, #0
 8010178:	d009      	beq.n	801018e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801017a:	4b6b      	ldr	r3, [pc, #428]	; (8010328 <UART_SetConfig+0xc2c>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	08db      	lsrs	r3, r3, #3
 8010180:	f003 0303 	and.w	r3, r3, #3
 8010184:	4a69      	ldr	r2, [pc, #420]	; (801032c <UART_SetConfig+0xc30>)
 8010186:	fa22 f303 	lsr.w	r3, r2, r3
 801018a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801018c:	e00f      	b.n	80101ae <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 801018e:	4b67      	ldr	r3, [pc, #412]	; (801032c <UART_SetConfig+0xc30>)
 8010190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010192:	e00c      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010194:	4b66      	ldr	r3, [pc, #408]	; (8010330 <UART_SetConfig+0xc34>)
 8010196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010198:	e009      	b.n	80101ae <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801019a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801019e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101a0:	e005      	b.n	80101ae <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80101a2:	2300      	movs	r3, #0
 80101a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80101a6:	2301      	movs	r3, #1
 80101a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80101ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 80ea 	beq.w	801038a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ba:	4a5a      	ldr	r2, [pc, #360]	; (8010324 <UART_SetConfig+0xc28>)
 80101bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101c0:	461a      	mov	r2, r3
 80101c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80101c8:	005a      	lsls	r2, r3, #1
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	085b      	lsrs	r3, r3, #1
 80101d0:	441a      	add	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80101da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101de:	2b0f      	cmp	r3, #15
 80101e0:	d916      	bls.n	8010210 <UART_SetConfig+0xb14>
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101e8:	d212      	bcs.n	8010210 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	f023 030f 	bic.w	r3, r3, #15
 80101f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f6:	085b      	lsrs	r3, r3, #1
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	f003 0307 	and.w	r3, r3, #7
 80101fe:	b29a      	uxth	r2, r3
 8010200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010202:	4313      	orrs	r3, r2
 8010204:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801020c:	60da      	str	r2, [r3, #12]
 801020e:	e0bc      	b.n	801038a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010210:	2301      	movs	r3, #1
 8010212:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010216:	e0b8      	b.n	801038a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801021c:	2b20      	cmp	r3, #32
 801021e:	dc4b      	bgt.n	80102b8 <UART_SetConfig+0xbbc>
 8010220:	2b00      	cmp	r3, #0
 8010222:	f2c0 8087 	blt.w	8010334 <UART_SetConfig+0xc38>
 8010226:	2b20      	cmp	r3, #32
 8010228:	f200 8084 	bhi.w	8010334 <UART_SetConfig+0xc38>
 801022c:	a201      	add	r2, pc, #4	; (adr r2, 8010234 <UART_SetConfig+0xb38>)
 801022e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010232:	bf00      	nop
 8010234:	080102bf 	.word	0x080102bf
 8010238:	080102c7 	.word	0x080102c7
 801023c:	08010335 	.word	0x08010335
 8010240:	08010335 	.word	0x08010335
 8010244:	080102cf 	.word	0x080102cf
 8010248:	08010335 	.word	0x08010335
 801024c:	08010335 	.word	0x08010335
 8010250:	08010335 	.word	0x08010335
 8010254:	080102df 	.word	0x080102df
 8010258:	08010335 	.word	0x08010335
 801025c:	08010335 	.word	0x08010335
 8010260:	08010335 	.word	0x08010335
 8010264:	08010335 	.word	0x08010335
 8010268:	08010335 	.word	0x08010335
 801026c:	08010335 	.word	0x08010335
 8010270:	08010335 	.word	0x08010335
 8010274:	080102ef 	.word	0x080102ef
 8010278:	08010335 	.word	0x08010335
 801027c:	08010335 	.word	0x08010335
 8010280:	08010335 	.word	0x08010335
 8010284:	08010335 	.word	0x08010335
 8010288:	08010335 	.word	0x08010335
 801028c:	08010335 	.word	0x08010335
 8010290:	08010335 	.word	0x08010335
 8010294:	08010335 	.word	0x08010335
 8010298:	08010335 	.word	0x08010335
 801029c:	08010335 	.word	0x08010335
 80102a0:	08010335 	.word	0x08010335
 80102a4:	08010335 	.word	0x08010335
 80102a8:	08010335 	.word	0x08010335
 80102ac:	08010335 	.word	0x08010335
 80102b0:	08010335 	.word	0x08010335
 80102b4:	08010315 	.word	0x08010315
 80102b8:	2b40      	cmp	r3, #64	; 0x40
 80102ba:	d02e      	beq.n	801031a <UART_SetConfig+0xc1e>
 80102bc:	e03a      	b.n	8010334 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102be:	f7f9 fec1 	bl	800a044 <HAL_RCC_GetPCLK1Freq>
 80102c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80102c4:	e03c      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102c6:	f7f9 fed3 	bl	800a070 <HAL_RCC_GetPCLK2Freq>
 80102ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80102cc:	e038      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102ce:	f107 0314 	add.w	r3, r7, #20
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fb fa16 	bl	800b704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102dc:	e030      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102de:	f107 0308 	add.w	r3, r7, #8
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fb fb62 	bl	800b9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102ec:	e028      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102ee:	4b0e      	ldr	r3, [pc, #56]	; (8010328 <UART_SetConfig+0xc2c>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f003 0320 	and.w	r3, r3, #32
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d009      	beq.n	801030e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102fa:	4b0b      	ldr	r3, [pc, #44]	; (8010328 <UART_SetConfig+0xc2c>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	08db      	lsrs	r3, r3, #3
 8010300:	f003 0303 	and.w	r3, r3, #3
 8010304:	4a09      	ldr	r2, [pc, #36]	; (801032c <UART_SetConfig+0xc30>)
 8010306:	fa22 f303 	lsr.w	r3, r2, r3
 801030a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801030c:	e018      	b.n	8010340 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 801030e:	4b07      	ldr	r3, [pc, #28]	; (801032c <UART_SetConfig+0xc30>)
 8010310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010312:	e015      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010314:	4b06      	ldr	r3, [pc, #24]	; (8010330 <UART_SetConfig+0xc34>)
 8010316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010318:	e012      	b.n	8010340 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801031a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801031e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010320:	e00e      	b.n	8010340 <UART_SetConfig+0xc44>
 8010322:	bf00      	nop
 8010324:	080119a0 	.word	0x080119a0
 8010328:	58024400 	.word	0x58024400
 801032c:	03d09000 	.word	0x03d09000
 8010330:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010334:	2300      	movs	r3, #0
 8010336:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010338:	2301      	movs	r3, #1
 801033a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801033e:	bf00      	nop
    }

    if (pclk != 0U)
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	2b00      	cmp	r3, #0
 8010344:	d021      	beq.n	801038a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034a:	4a1a      	ldr	r2, [pc, #104]	; (80103b4 <UART_SetConfig+0xcb8>)
 801034c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010350:	461a      	mov	r2, r3
 8010352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010354:	fbb3 f2f2 	udiv	r2, r3, r2
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	085b      	lsrs	r3, r3, #1
 801035e:	441a      	add	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	fbb2 f3f3 	udiv	r3, r2, r3
 8010368:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801036a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801036c:	2b0f      	cmp	r3, #15
 801036e:	d909      	bls.n	8010384 <UART_SetConfig+0xc88>
 8010370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010376:	d205      	bcs.n	8010384 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	60da      	str	r2, [r3, #12]
 8010382:	e002      	b.n	801038a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8010384:	2301      	movs	r3, #1
 8010386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2201      	movs	r2, #1
 801038e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2201      	movs	r2, #1
 8010396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80103a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3738      	adds	r7, #56	; 0x38
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bdb0      	pop	{r4, r5, r7, pc}
 80103b2:	bf00      	nop
 80103b4:	080119a0 	.word	0x080119a0

080103b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c4:	f003 0301 	and.w	r3, r3, #1
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00a      	beq.n	80103e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	430a      	orrs	r2, r1
 80103e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e6:	f003 0302 	and.w	r3, r3, #2
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00a      	beq.n	8010404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	430a      	orrs	r2, r1
 8010402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d00a      	beq.n	8010426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	430a      	orrs	r2, r1
 8010424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801042a:	f003 0308 	and.w	r3, r3, #8
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00a      	beq.n	8010448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	430a      	orrs	r2, r1
 8010446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00a      	beq.n	801046a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	430a      	orrs	r2, r1
 8010468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801046e:	f003 0320 	and.w	r3, r3, #32
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00a      	beq.n	801048c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	430a      	orrs	r2, r1
 801048a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010494:	2b00      	cmp	r3, #0
 8010496:	d01a      	beq.n	80104ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	430a      	orrs	r2, r1
 80104ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104b6:	d10a      	bne.n	80104ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	430a      	orrs	r2, r1
 80104cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00a      	beq.n	80104f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	430a      	orrs	r2, r1
 80104ee:	605a      	str	r2, [r3, #4]
  }
}
 80104f0:	bf00      	nop
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af02      	add	r7, sp, #8
 8010502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801050c:	f7f3 fdd0 	bl	80040b0 <HAL_GetTick>
 8010510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f003 0308 	and.w	r3, r3, #8
 801051c:	2b08      	cmp	r3, #8
 801051e:	d10e      	bne.n	801053e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2200      	movs	r2, #0
 801052a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f82f 	bl	8010592 <UART_WaitOnFlagUntilTimeout>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801053a:	2303      	movs	r3, #3
 801053c:	e025      	b.n	801058a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f003 0304 	and.w	r3, r3, #4
 8010548:	2b04      	cmp	r3, #4
 801054a:	d10e      	bne.n	801056a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801054c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 f819 	bl	8010592 <UART_WaitOnFlagUntilTimeout>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010566:	2303      	movs	r3, #3
 8010568:	e00f      	b.n	801058a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2220      	movs	r2, #32
 801056e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2220      	movs	r2, #32
 8010576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b09c      	sub	sp, #112	; 0x70
 8010596:	af00      	add	r7, sp, #0
 8010598:	60f8      	str	r0, [r7, #12]
 801059a:	60b9      	str	r1, [r7, #8]
 801059c:	603b      	str	r3, [r7, #0]
 801059e:	4613      	mov	r3, r2
 80105a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105a2:	e0a9      	b.n	80106f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105aa:	f000 80a5 	beq.w	80106f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105ae:	f7f3 fd7f 	bl	80040b0 <HAL_GetTick>
 80105b2:	4602      	mov	r2, r0
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d302      	bcc.n	80105c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80105be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d140      	bne.n	8010646 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80105d8:	667b      	str	r3, [r7, #100]	; 0x64
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80105f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e6      	bne.n	80105c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010608:	f023 0301 	bic.w	r3, r3, #1
 801060c:	663b      	str	r3, [r7, #96]	; 0x60
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3308      	adds	r3, #8
 8010614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010616:	64ba      	str	r2, [r7, #72]	; 0x48
 8010618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801061c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e5      	bne.n	80105f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2220      	movs	r2, #32
 801062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2220      	movs	r2, #32
 8010636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010642:	2303      	movs	r3, #3
 8010644:	e069      	b.n	801071a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f003 0304 	and.w	r3, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	d051      	beq.n	80106f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	69db      	ldr	r3, [r3, #28]
 801065a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801065e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010662:	d149      	bne.n	80106f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801066c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	461a      	mov	r2, r3
 801068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
 801068e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010694:	e841 2300 	strex	r3, r2, [r1]
 8010698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1e6      	bne.n	801066e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3308      	adds	r3, #8
 80106a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	e853 3f00 	ldrex	r3, [r3]
 80106ae:	613b      	str	r3, [r7, #16]
   return(result);
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	f023 0301 	bic.w	r3, r3, #1
 80106b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3308      	adds	r3, #8
 80106be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106c0:	623a      	str	r2, [r7, #32]
 80106c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c4:	69f9      	ldr	r1, [r7, #28]
 80106c6:	6a3a      	ldr	r2, [r7, #32]
 80106c8:	e841 2300 	strex	r3, r2, [r1]
 80106cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1e5      	bne.n	80106a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2220      	movs	r2, #32
 80106d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2220      	movs	r2, #32
 80106e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2220      	movs	r2, #32
 80106e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2200      	movs	r2, #0
 80106f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80106f4:	2303      	movs	r3, #3
 80106f6:	e010      	b.n	801071a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	69da      	ldr	r2, [r3, #28]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	4013      	ands	r3, r2
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	429a      	cmp	r2, r3
 8010706:	bf0c      	ite	eq
 8010708:	2301      	moveq	r3, #1
 801070a:	2300      	movne	r3, #0
 801070c:	b2db      	uxtb	r3, r3
 801070e:	461a      	mov	r2, r3
 8010710:	79fb      	ldrb	r3, [r7, #7]
 8010712:	429a      	cmp	r2, r3
 8010714:	f43f af46 	beq.w	80105a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3770      	adds	r7, #112	; 0x70
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
	...

08010724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010724:	b480      	push	{r7}
 8010726:	b0a3      	sub	sp, #140	; 0x8c
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	4613      	mov	r3, r2
 8010730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	88fa      	ldrh	r2, [r7, #6]
 801073c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	88fa      	ldrh	r2, [r7, #6]
 8010744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2200      	movs	r2, #0
 801074c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	689b      	ldr	r3, [r3, #8]
 8010752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010756:	d10e      	bne.n	8010776 <UART_Start_Receive_IT+0x52>
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d105      	bne.n	801076c <UART_Start_Receive_IT+0x48>
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801076a:	e02d      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	22ff      	movs	r2, #255	; 0xff
 8010770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010774:	e028      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	689b      	ldr	r3, [r3, #8]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d10d      	bne.n	801079a <UART_Start_Receive_IT+0x76>
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d104      	bne.n	8010790 <UART_Start_Receive_IT+0x6c>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	22ff      	movs	r2, #255	; 0xff
 801078a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801078e:	e01b      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	227f      	movs	r2, #127	; 0x7f
 8010794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010798:	e016      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107a2:	d10d      	bne.n	80107c0 <UART_Start_Receive_IT+0x9c>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	691b      	ldr	r3, [r3, #16]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d104      	bne.n	80107b6 <UART_Start_Receive_IT+0x92>
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	227f      	movs	r2, #127	; 0x7f
 80107b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107b4:	e008      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	223f      	movs	r2, #63	; 0x3f
 80107ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107be:	e003      	b.n	80107c8 <UART_Start_Receive_IT+0xa4>
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2200      	movs	r2, #0
 80107c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2200      	movs	r2, #0
 80107cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2222      	movs	r2, #34	; 0x22
 80107d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3308      	adds	r3, #8
 80107de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107e2:	e853 3f00 	ldrex	r3, [r3]
 80107e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80107e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	3308      	adds	r3, #8
 80107f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80107fc:	673a      	str	r2, [r7, #112]	; 0x70
 80107fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010800:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010802:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010804:	e841 2300 	strex	r3, r2, [r1]
 8010808:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801080a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1e3      	bne.n	80107d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010818:	d153      	bne.n	80108c2 <UART_Start_Receive_IT+0x19e>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010820:	88fa      	ldrh	r2, [r7, #6]
 8010822:	429a      	cmp	r2, r3
 8010824:	d34d      	bcc.n	80108c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	689b      	ldr	r3, [r3, #8]
 801082a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801082e:	d107      	bne.n	8010840 <UART_Start_Receive_IT+0x11c>
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	4a4b      	ldr	r2, [pc, #300]	; (8010968 <UART_Start_Receive_IT+0x244>)
 801083c:	671a      	str	r2, [r3, #112]	; 0x70
 801083e:	e002      	b.n	8010846 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	4a4a      	ldr	r2, [pc, #296]	; (801096c <UART_Start_Receive_IT+0x248>)
 8010844:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d01a      	beq.n	801088c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801085e:	e853 3f00 	ldrex	r3, [r3]
 8010862:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801086a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010878:	65fb      	str	r3, [r7, #92]	; 0x5c
 801087a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801087e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010880:	e841 2300 	strex	r3, r2, [r1]
 8010884:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1e4      	bne.n	8010856 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3308      	adds	r3, #8
 8010892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010896:	e853 3f00 	ldrex	r3, [r3]
 801089a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	3308      	adds	r3, #8
 80108aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80108ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80108ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108b4:	e841 2300 	strex	r3, r2, [r1]
 80108b8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80108ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d1e5      	bne.n	801088c <UART_Start_Receive_IT+0x168>
 80108c0:	e04a      	b.n	8010958 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ca:	d107      	bne.n	80108dc <UART_Start_Receive_IT+0x1b8>
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d103      	bne.n	80108dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4a26      	ldr	r2, [pc, #152]	; (8010970 <UART_Start_Receive_IT+0x24c>)
 80108d8:	671a      	str	r2, [r3, #112]	; 0x70
 80108da:	e002      	b.n	80108e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	4a25      	ldr	r2, [pc, #148]	; (8010974 <UART_Start_Receive_IT+0x250>)
 80108e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	691b      	ldr	r3, [r3, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d019      	beq.n	8010926 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	e853 3f00 	ldrex	r3, [r3]
 80108fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010902:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010906:	677b      	str	r3, [r7, #116]	; 0x74
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	461a      	mov	r2, r3
 801090e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010910:	637b      	str	r3, [r7, #52]	; 0x34
 8010912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010918:	e841 2300 	strex	r3, r2, [r1]
 801091c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1e6      	bne.n	80108f2 <UART_Start_Receive_IT+0x1ce>
 8010924:	e018      	b.n	8010958 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	e853 3f00 	ldrex	r3, [r3]
 8010932:	613b      	str	r3, [r7, #16]
   return(result);
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f043 0320 	orr.w	r3, r3, #32
 801093a:	67bb      	str	r3, [r7, #120]	; 0x78
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	461a      	mov	r2, r3
 8010942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010944:	623b      	str	r3, [r7, #32]
 8010946:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010948:	69f9      	ldr	r1, [r7, #28]
 801094a:	6a3a      	ldr	r2, [r7, #32]
 801094c:	e841 2300 	strex	r3, r2, [r1]
 8010950:	61bb      	str	r3, [r7, #24]
   return(result);
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1e6      	bne.n	8010926 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8010958:	2300      	movs	r3, #0
}
 801095a:	4618      	mov	r0, r3
 801095c:	378c      	adds	r7, #140	; 0x8c
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	080113c5 	.word	0x080113c5
 801096c:	080110cd 	.word	0x080110cd
 8010970:	08010f6b 	.word	0x08010f6b
 8010974:	08010e0b 	.word	0x08010e0b

08010978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010978:	b480      	push	{r7}
 801097a:	b095      	sub	sp, #84	; 0x54
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010988:	e853 3f00 	ldrex	r3, [r3]
 801098c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	461a      	mov	r2, r3
 801099c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801099e:	643b      	str	r3, [r7, #64]	; 0x40
 80109a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109a6:	e841 2300 	strex	r3, r2, [r1]
 80109aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1e6      	bne.n	8010980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3308      	adds	r3, #8
 80109b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	e853 3f00 	ldrex	r3, [r3]
 80109c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80109c2:	69fa      	ldr	r2, [r7, #28]
 80109c4:	4b1e      	ldr	r3, [pc, #120]	; (8010a40 <UART_EndRxTransfer+0xc8>)
 80109c6:	4013      	ands	r3, r2
 80109c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	3308      	adds	r3, #8
 80109d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109da:	e841 2300 	strex	r3, r2, [r1]
 80109de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1e5      	bne.n	80109b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d118      	bne.n	8010a20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	e853 3f00 	ldrex	r3, [r3]
 80109fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	f023 0310 	bic.w	r3, r3, #16
 8010a02:	647b      	str	r3, [r7, #68]	; 0x44
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a0c:	61bb      	str	r3, [r7, #24]
 8010a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a10:	6979      	ldr	r1, [r7, #20]
 8010a12:	69ba      	ldr	r2, [r7, #24]
 8010a14:	e841 2300 	strex	r3, r2, [r1]
 8010a18:	613b      	str	r3, [r7, #16]
   return(result);
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1e6      	bne.n	80109ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2220      	movs	r2, #32
 8010a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010a34:	bf00      	nop
 8010a36:	3754      	adds	r7, #84	; 0x54
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	effffffe 	.word	0xeffffffe

08010a44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	2200      	movs	r2, #0
 8010a56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f7fe fe34 	bl	800f6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a68:	bf00      	nop
 8010a6a:	3710      	adds	r7, #16
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b08f      	sub	sp, #60	; 0x3c
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a7e:	2b21      	cmp	r3, #33	; 0x21
 8010a80:	d14c      	bne.n	8010b1c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d132      	bne.n	8010af4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a94:	6a3b      	ldr	r3, [r7, #32]
 8010a96:	e853 3f00 	ldrex	r3, [r3]
 8010a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010aae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ab4:	e841 2300 	strex	r3, r2, [r1]
 8010ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d1e6      	bne.n	8010a8e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	e853 3f00 	ldrex	r3, [r3]
 8010acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	461a      	mov	r2, r3
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	61bb      	str	r3, [r7, #24]
 8010ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ae2:	6979      	ldr	r1, [r7, #20]
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	e841 2300 	strex	r3, r2, [r1]
 8010aea:	613b      	str	r3, [r7, #16]
   return(result);
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1e6      	bne.n	8010ac0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010af2:	e013      	b.n	8010b1c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010af8:	781a      	ldrb	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b04:	1c5a      	adds	r2, r3, #1
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	3b01      	subs	r3, #1
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010b1c:	bf00      	nop
 8010b1e:	373c      	adds	r7, #60	; 0x3c
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b091      	sub	sp, #68	; 0x44
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b36:	2b21      	cmp	r3, #33	; 0x21
 8010b38:	d151      	bne.n	8010bde <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d132      	bne.n	8010bac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4e:	e853 3f00 	ldrex	r3, [r3]
 8010b52:	623b      	str	r3, [r7, #32]
   return(result);
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	461a      	mov	r2, r3
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	633b      	str	r3, [r7, #48]	; 0x30
 8010b66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b6c:	e841 2300 	strex	r3, r2, [r1]
 8010b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1e6      	bne.n	8010b46 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	e853 3f00 	ldrex	r3, [r3]
 8010b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	461a      	mov	r2, r3
 8010b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b96:	61fb      	str	r3, [r7, #28]
 8010b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9a:	69b9      	ldr	r1, [r7, #24]
 8010b9c:	69fa      	ldr	r2, [r7, #28]
 8010b9e:	e841 2300 	strex	r3, r2, [r1]
 8010ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1e6      	bne.n	8010b78 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010baa:	e018      	b.n	8010bde <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb4:	881b      	ldrh	r3, [r3, #0]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010bc0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bc6:	1c9a      	adds	r2, r3, #2
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010bde:	bf00      	nop
 8010be0:	3744      	adds	r7, #68	; 0x44
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b091      	sub	sp, #68	; 0x44
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bf8:	2b21      	cmp	r3, #33	; 0x21
 8010bfa:	d160      	bne.n	8010cbe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010c04:	e057      	b.n	8010cb6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d133      	bne.n	8010c7a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3308      	adds	r3, #8
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	e853 3f00 	ldrex	r3, [r3]
 8010c20:	623b      	str	r3, [r7, #32]
   return(result);
 8010c22:	6a3b      	ldr	r3, [r7, #32]
 8010c24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c32:	633a      	str	r2, [r7, #48]	; 0x30
 8010c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3a:	e841 2300 	strex	r3, r2, [r1]
 8010c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1e5      	bne.n	8010c12 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	e853 3f00 	ldrex	r3, [r3]
 8010c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	461a      	mov	r2, r3
 8010c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c64:	61fb      	str	r3, [r7, #28]
 8010c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c68:	69b9      	ldr	r1, [r7, #24]
 8010c6a:	69fa      	ldr	r2, [r7, #28]
 8010c6c:	e841 2300 	strex	r3, r2, [r1]
 8010c70:	617b      	str	r3, [r7, #20]
   return(result);
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d1e6      	bne.n	8010c46 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010c78:	e021      	b.n	8010cbe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	69db      	ldr	r3, [r3, #28]
 8010c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d013      	beq.n	8010cb0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c8c:	781a      	ldrb	r2, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010cb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010cb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d1a4      	bne.n	8010c06 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010cbc:	e7ff      	b.n	8010cbe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8010cbe:	bf00      	nop
 8010cc0:	3744      	adds	r7, #68	; 0x44
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b091      	sub	sp, #68	; 0x44
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cd8:	2b21      	cmp	r3, #33	; 0x21
 8010cda:	d165      	bne.n	8010da8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ce2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010ce4:	e05c      	b.n	8010da0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d133      	bne.n	8010d5a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	3308      	adds	r3, #8
 8010cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfa:	6a3b      	ldr	r3, [r7, #32]
 8010cfc:	e853 3f00 	ldrex	r3, [r3]
 8010d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d02:	69fb      	ldr	r3, [r7, #28]
 8010d04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010d08:	637b      	str	r3, [r7, #52]	; 0x34
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3308      	adds	r3, #8
 8010d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d1a:	e841 2300 	strex	r3, r2, [r1]
 8010d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1e5      	bne.n	8010cf2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	e853 3f00 	ldrex	r3, [r3]
 8010d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	61bb      	str	r3, [r7, #24]
 8010d46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d48:	6979      	ldr	r1, [r7, #20]
 8010d4a:	69ba      	ldr	r2, [r7, #24]
 8010d4c:	e841 2300 	strex	r3, r2, [r1]
 8010d50:	613b      	str	r3, [r7, #16]
   return(result);
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e6      	bne.n	8010d26 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010d58:	e026      	b.n	8010da8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	69db      	ldr	r3, [r3, #28]
 8010d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d018      	beq.n	8010d9a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d6c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d7c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d82:	1c9a      	adds	r2, r3, #2
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	3b01      	subs	r3, #1
 8010d92:	b29a      	uxth	r2, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010d9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010da0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d19f      	bne.n	8010ce6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010da6:	e7ff      	b.n	8010da8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010da8:	bf00      	nop
 8010daa:	3744      	adds	r7, #68	; 0x44
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b088      	sub	sp, #32
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	e853 3f00 	ldrex	r3, [r3]
 8010dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dd0:	61fb      	str	r3, [r7, #28]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	61bb      	str	r3, [r7, #24]
 8010ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dde:	6979      	ldr	r1, [r7, #20]
 8010de0:	69ba      	ldr	r2, [r7, #24]
 8010de2:	e841 2300 	strex	r3, r2, [r1]
 8010de6:	613b      	str	r3, [r7, #16]
   return(result);
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1e6      	bne.n	8010dbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2220      	movs	r2, #32
 8010df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7fe fc5d 	bl	800f6bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e02:	bf00      	nop
 8010e04:	3720      	adds	r7, #32
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b096      	sub	sp, #88	; 0x58
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e22:	2b22      	cmp	r3, #34	; 0x22
 8010e24:	f040 8095 	bne.w	8010f52 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010e32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010e36:	b2d9      	uxtb	r1, r3
 8010e38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e42:	400a      	ands	r2, r1
 8010e44:	b2d2      	uxtb	r2, r2
 8010e46:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e4c:	1c5a      	adds	r2, r3, #1
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d178      	bne.n	8010f62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e78:	e853 3f00 	ldrex	r3, [r3]
 8010e7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010e84:	653b      	str	r3, [r7, #80]	; 0x50
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8010e90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e96:	e841 2300 	strex	r3, r2, [r1]
 8010e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1e6      	bne.n	8010e70 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	3308      	adds	r3, #8
 8010ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	e853 3f00 	ldrex	r3, [r3]
 8010eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8010eb2:	6a3b      	ldr	r3, [r7, #32]
 8010eb4:	f023 0301 	bic.w	r3, r3, #1
 8010eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	3308      	adds	r3, #8
 8010ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8010ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eca:	e841 2300 	strex	r3, r2, [r1]
 8010ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1e5      	bne.n	8010ea2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2220      	movs	r2, #32
 8010eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d12e      	bne.n	8010f4a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	e853 3f00 	ldrex	r3, [r3]
 8010efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f023 0310 	bic.w	r3, r3, #16
 8010f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f10:	61fb      	str	r3, [r7, #28]
 8010f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f14:	69b9      	ldr	r1, [r7, #24]
 8010f16:	69fa      	ldr	r2, [r7, #28]
 8010f18:	e841 2300 	strex	r3, r2, [r1]
 8010f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1e6      	bne.n	8010ef2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	69db      	ldr	r3, [r3, #28]
 8010f2a:	f003 0310 	and.w	r3, r3, #16
 8010f2e:	2b10      	cmp	r3, #16
 8010f30:	d103      	bne.n	8010f3a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2210      	movs	r2, #16
 8010f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f40:	4619      	mov	r1, r3
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f7fe fbce 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f48:	e00b      	b.n	8010f62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7f1 f8fa 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 8010f50:	e007      	b.n	8010f62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	699a      	ldr	r2, [r3, #24]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f042 0208 	orr.w	r2, r2, #8
 8010f60:	619a      	str	r2, [r3, #24]
}
 8010f62:	bf00      	nop
 8010f64:	3758      	adds	r7, #88	; 0x58
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b096      	sub	sp, #88	; 0x58
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f82:	2b22      	cmp	r3, #34	; 0x22
 8010f84:	f040 8095 	bne.w	80110b2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f96:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010f98:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010f9c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010fa0:	4013      	ands	r3, r2
 8010fa2:	b29a      	uxth	r2, r3
 8010fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fac:	1c9a      	adds	r2, r3, #2
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	3b01      	subs	r3, #1
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d178      	bne.n	80110c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd8:	e853 3f00 	ldrex	r3, [r3]
 8010fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fee:	643b      	str	r3, [r7, #64]	; 0x40
 8010ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ff6:	e841 2300 	strex	r3, r2, [r1]
 8010ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1e6      	bne.n	8010fd0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	3308      	adds	r3, #8
 8011008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	e853 3f00 	ldrex	r3, [r3]
 8011010:	61fb      	str	r3, [r7, #28]
   return(result);
 8011012:	69fb      	ldr	r3, [r7, #28]
 8011014:	f023 0301 	bic.w	r3, r3, #1
 8011018:	64bb      	str	r3, [r7, #72]	; 0x48
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3308      	adds	r3, #8
 8011020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011022:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801102a:	e841 2300 	strex	r3, r2, [r1]
 801102e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1e5      	bne.n	8011002 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2220      	movs	r2, #32
 801103a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011048:	2b01      	cmp	r3, #1
 801104a:	d12e      	bne.n	80110aa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	e853 3f00 	ldrex	r3, [r3]
 801105e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	f023 0310 	bic.w	r3, r3, #16
 8011066:	647b      	str	r3, [r7, #68]	; 0x44
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	461a      	mov	r2, r3
 801106e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011070:	61bb      	str	r3, [r7, #24]
 8011072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011074:	6979      	ldr	r1, [r7, #20]
 8011076:	69ba      	ldr	r2, [r7, #24]
 8011078:	e841 2300 	strex	r3, r2, [r1]
 801107c:	613b      	str	r3, [r7, #16]
   return(result);
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1e6      	bne.n	8011052 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	69db      	ldr	r3, [r3, #28]
 801108a:	f003 0310 	and.w	r3, r3, #16
 801108e:	2b10      	cmp	r3, #16
 8011090:	d103      	bne.n	801109a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2210      	movs	r2, #16
 8011098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80110a0:	4619      	mov	r1, r3
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7fe fb1e 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80110a8:	e00b      	b.n	80110c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7f1 f84a 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 80110b0:	e007      	b.n	80110c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	699a      	ldr	r2, [r3, #24]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f042 0208 	orr.w	r2, r2, #8
 80110c0:	619a      	str	r2, [r3, #24]
}
 80110c2:	bf00      	nop
 80110c4:	3758      	adds	r7, #88	; 0x58
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b0a6      	sub	sp, #152	; 0x98
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110da:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	69db      	ldr	r3, [r3, #28]
 80110e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011102:	2b22      	cmp	r3, #34	; 0x22
 8011104:	f040 814d 	bne.w	80113a2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801110e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011112:	e0f4      	b.n	80112fe <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801111e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8011122:	b2d9      	uxtb	r1, r3
 8011124:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011128:	b2da      	uxtb	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801112e:	400a      	ands	r2, r1
 8011130:	b2d2      	uxtb	r2, r2
 8011132:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011138:	1c5a      	adds	r2, r3, #1
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011144:	b29b      	uxth	r3, r3
 8011146:	3b01      	subs	r3, #1
 8011148:	b29a      	uxth	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801115a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801115e:	f003 0307 	and.w	r3, r3, #7
 8011162:	2b00      	cmp	r3, #0
 8011164:	d053      	beq.n	801120e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	2b00      	cmp	r3, #0
 8011170:	d011      	beq.n	8011196 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00b      	beq.n	8011196 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2201      	movs	r2, #1
 8011184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801118c:	f043 0201 	orr.w	r2, r3, #1
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d011      	beq.n	80111c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80111a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80111a6:	f003 0301 	and.w	r3, r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00b      	beq.n	80111c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2202      	movs	r2, #2
 80111b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111bc:	f043 0204 	orr.w	r2, r3, #4
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80111c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111ca:	f003 0304 	and.w	r3, r3, #4
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d011      	beq.n	80111f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80111d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80111d6:	f003 0301 	and.w	r3, r3, #1
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00b      	beq.n	80111f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2204      	movs	r2, #4
 80111e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111ec:	f043 0202 	orr.w	r2, r3, #2
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d006      	beq.n	801120e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7fe fa65 	bl	800f6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011214:	b29b      	uxth	r3, r3
 8011216:	2b00      	cmp	r3, #0
 8011218:	d171      	bne.n	80112fe <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011222:	e853 3f00 	ldrex	r3, [r3]
 8011226:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801122a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801122e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801123c:	66bb      	str	r3, [r7, #104]	; 0x68
 801123e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011240:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011242:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011244:	e841 2300 	strex	r3, r2, [r1]
 8011248:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801124a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1e4      	bne.n	801121a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3308      	adds	r3, #8
 8011256:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801125a:	e853 3f00 	ldrex	r3, [r3]
 801125e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011262:	4b56      	ldr	r3, [pc, #344]	; (80113bc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8011264:	4013      	ands	r3, r2
 8011266:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3308      	adds	r3, #8
 801126e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011270:	657a      	str	r2, [r7, #84]	; 0x54
 8011272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011274:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011276:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011278:	e841 2300 	strex	r3, r2, [r1]
 801127c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801127e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011280:	2b00      	cmp	r3, #0
 8011282:	d1e5      	bne.n	8011250 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2220      	movs	r2, #32
 8011288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011296:	2b01      	cmp	r3, #1
 8011298:	d12e      	bne.n	80112f8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2200      	movs	r2, #0
 801129e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a8:	e853 3f00 	ldrex	r3, [r3]
 80112ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80112ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b0:	f023 0310 	bic.w	r3, r3, #16
 80112b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	461a      	mov	r2, r3
 80112bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112be:	643b      	str	r3, [r7, #64]	; 0x40
 80112c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112c6:	e841 2300 	strex	r3, r2, [r1]
 80112ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80112cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1e6      	bne.n	80112a0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	69db      	ldr	r3, [r3, #28]
 80112d8:	f003 0310 	and.w	r3, r3, #16
 80112dc:	2b10      	cmp	r3, #16
 80112de:	d103      	bne.n	80112e8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2210      	movs	r2, #16
 80112e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7fe f9f7 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
 80112f6:	e002      	b.n	80112fe <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7f0 ff23 	bl	8002144 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80112fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8011302:	2b00      	cmp	r3, #0
 8011304:	d006      	beq.n	8011314 <UART_RxISR_8BIT_FIFOEN+0x248>
 8011306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801130a:	f003 0320 	and.w	r3, r3, #32
 801130e:	2b00      	cmp	r3, #0
 8011310:	f47f af00 	bne.w	8011114 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801131a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801131e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8011322:	2b00      	cmp	r3, #0
 8011324:	d045      	beq.n	80113b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801132c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011330:	429a      	cmp	r2, r3
 8011332:	d23e      	bcs.n	80113b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	3308      	adds	r3, #8
 801133a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	e853 3f00 	ldrex	r3, [r3]
 8011342:	61fb      	str	r3, [r7, #28]
   return(result);
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801134a:	673b      	str	r3, [r7, #112]	; 0x70
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	3308      	adds	r3, #8
 8011352:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801135a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801135c:	e841 2300 	strex	r3, r2, [r1]
 8011360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1e5      	bne.n	8011334 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4a15      	ldr	r2, [pc, #84]	; (80113c0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801136c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	e853 3f00 	ldrex	r3, [r3]
 801137a:	60bb      	str	r3, [r7, #8]
   return(result);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	f043 0320 	orr.w	r3, r3, #32
 8011382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	461a      	mov	r2, r3
 801138a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801138c:	61bb      	str	r3, [r7, #24]
 801138e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011390:	6979      	ldr	r1, [r7, #20]
 8011392:	69ba      	ldr	r2, [r7, #24]
 8011394:	e841 2300 	strex	r3, r2, [r1]
 8011398:	613b      	str	r3, [r7, #16]
   return(result);
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d1e6      	bne.n	801136e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80113a0:	e007      	b.n	80113b2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	699a      	ldr	r2, [r3, #24]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f042 0208 	orr.w	r2, r2, #8
 80113b0:	619a      	str	r2, [r3, #24]
}
 80113b2:	bf00      	nop
 80113b4:	3798      	adds	r7, #152	; 0x98
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	effffffe 	.word	0xeffffffe
 80113c0:	08010e0b 	.word	0x08010e0b

080113c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b0a8      	sub	sp, #160	; 0xa0
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80113d2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	69db      	ldr	r3, [r3, #28]
 80113dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113fa:	2b22      	cmp	r3, #34	; 0x22
 80113fc:	f040 8151 	bne.w	80116a2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011406:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801140a:	e0f8      	b.n	80115fe <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011412:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801141a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801141e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8011422:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011426:	4013      	ands	r3, r2
 8011428:	b29a      	uxth	r2, r3
 801142a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801142e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011434:	1c9a      	adds	r2, r3, #2
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011440:	b29b      	uxth	r3, r3
 8011442:	3b01      	subs	r3, #1
 8011444:	b29a      	uxth	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801145a:	f003 0307 	and.w	r3, r3, #7
 801145e:	2b00      	cmp	r3, #0
 8011460:	d053      	beq.n	801150a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011466:	f003 0301 	and.w	r3, r3, #1
 801146a:	2b00      	cmp	r3, #0
 801146c:	d011      	beq.n	8011492 <UART_RxISR_16BIT_FIFOEN+0xce>
 801146e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00b      	beq.n	8011492 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2201      	movs	r2, #1
 8011480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011488:	f043 0201 	orr.w	r2, r3, #1
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011496:	f003 0302 	and.w	r3, r3, #2
 801149a:	2b00      	cmp	r3, #0
 801149c:	d011      	beq.n	80114c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801149e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80114a2:	f003 0301 	and.w	r3, r3, #1
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00b      	beq.n	80114c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2202      	movs	r2, #2
 80114b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114b8:	f043 0204 	orr.w	r2, r3, #4
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80114c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80114c6:	f003 0304 	and.w	r3, r3, #4
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d011      	beq.n	80114f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80114ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00b      	beq.n	80114f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2204      	movs	r2, #4
 80114e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114e8:	f043 0202 	orr.w	r2, r3, #2
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d006      	beq.n	801150a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7fe f8e7 	bl	800f6d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2200      	movs	r2, #0
 8011506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011510:	b29b      	uxth	r3, r3
 8011512:	2b00      	cmp	r3, #0
 8011514:	d173      	bne.n	80115fe <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801151c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801151e:	e853 3f00 	ldrex	r3, [r3]
 8011522:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801152a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	461a      	mov	r2, r3
 8011534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011538:	66fb      	str	r3, [r7, #108]	; 0x6c
 801153a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801153c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801153e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011540:	e841 2300 	strex	r3, r2, [r1]
 8011544:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e4      	bne.n	8011516 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	3308      	adds	r3, #8
 8011552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011556:	e853 3f00 	ldrex	r3, [r3]
 801155a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801155c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801155e:	4b57      	ldr	r3, [pc, #348]	; (80116bc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8011560:	4013      	ands	r3, r2
 8011562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3308      	adds	r3, #8
 801156c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011570:	65ba      	str	r2, [r7, #88]	; 0x58
 8011572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011578:	e841 2300 	strex	r3, r2, [r1]
 801157c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801157e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1e3      	bne.n	801154c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2220      	movs	r2, #32
 8011588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011596:	2b01      	cmp	r3, #1
 8011598:	d12e      	bne.n	80115f8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a8:	e853 3f00 	ldrex	r3, [r3]
 80115ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80115ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b0:	f023 0310 	bic.w	r3, r3, #16
 80115b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	461a      	mov	r2, r3
 80115bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80115be:	647b      	str	r3, [r7, #68]	; 0x44
 80115c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115c6:	e841 2300 	strex	r3, r2, [r1]
 80115ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80115cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1e6      	bne.n	80115a0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	69db      	ldr	r3, [r3, #28]
 80115d8:	f003 0310 	and.w	r3, r3, #16
 80115dc:	2b10      	cmp	r3, #16
 80115de:	d103      	bne.n	80115e8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2210      	movs	r2, #16
 80115e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115ee:	4619      	mov	r1, r3
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f7fe f877 	bl	800f6e4 <HAL_UARTEx_RxEventCallback>
 80115f6:	e002      	b.n	80115fe <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7f0 fda3 	bl	8002144 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011602:	2b00      	cmp	r3, #0
 8011604:	d006      	beq.n	8011614 <UART_RxISR_16BIT_FIFOEN+0x250>
 8011606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801160a:	f003 0320 	and.w	r3, r3, #32
 801160e:	2b00      	cmp	r3, #0
 8011610:	f47f aefc 	bne.w	801140c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801161a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801161e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011622:	2b00      	cmp	r3, #0
 8011624:	d045      	beq.n	80116b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801162c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011630:	429a      	cmp	r2, r3
 8011632:	d23e      	bcs.n	80116b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3308      	adds	r3, #8
 801163a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163e:	e853 3f00 	ldrex	r3, [r3]
 8011642:	623b      	str	r3, [r7, #32]
   return(result);
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801164a:	677b      	str	r3, [r7, #116]	; 0x74
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	3308      	adds	r3, #8
 8011652:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011654:	633a      	str	r2, [r7, #48]	; 0x30
 8011656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801165a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801165c:	e841 2300 	strex	r3, r2, [r1]
 8011660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1e5      	bne.n	8011634 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4a15      	ldr	r2, [pc, #84]	; (80116c0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801166c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	e853 3f00 	ldrex	r3, [r3]
 801167a:	60fb      	str	r3, [r7, #12]
   return(result);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f043 0320 	orr.w	r3, r3, #32
 8011682:	673b      	str	r3, [r7, #112]	; 0x70
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	461a      	mov	r2, r3
 801168a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801168c:	61fb      	str	r3, [r7, #28]
 801168e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011690:	69b9      	ldr	r1, [r7, #24]
 8011692:	69fa      	ldr	r2, [r7, #28]
 8011694:	e841 2300 	strex	r3, r2, [r1]
 8011698:	617b      	str	r3, [r7, #20]
   return(result);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d1e6      	bne.n	801166e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80116a0:	e007      	b.n	80116b2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	699a      	ldr	r2, [r3, #24]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f042 0208 	orr.w	r2, r2, #8
 80116b0:	619a      	str	r2, [r3, #24]
}
 80116b2:	bf00      	nop
 80116b4:	37a0      	adds	r7, #160	; 0xa0
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	effffffe 	.word	0xeffffffe
 80116c0:	08010f6b 	.word	0x08010f6b

080116c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80116cc:	bf00      	nop
 80116ce:	370c      	adds	r7, #12
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80116e0:	bf00      	nop
 80116e2:	370c      	adds	r7, #12
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80116f4:	bf00      	nop
 80116f6:	370c      	adds	r7, #12
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801170e:	2b01      	cmp	r3, #1
 8011710:	d101      	bne.n	8011716 <HAL_UARTEx_DisableFifoMode+0x16>
 8011712:	2302      	movs	r3, #2
 8011714:	e027      	b.n	8011766 <HAL_UARTEx_DisableFifoMode+0x66>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2224      	movs	r2, #36	; 0x24
 8011722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f022 0201 	bic.w	r2, r2, #1
 801173c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011744:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2200      	movs	r2, #0
 801174a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	68fa      	ldr	r2, [r7, #12]
 8011752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2220      	movs	r2, #32
 8011758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3714      	adds	r7, #20
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr

08011772 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011772:	b580      	push	{r7, lr}
 8011774:	b084      	sub	sp, #16
 8011776:	af00      	add	r7, sp, #0
 8011778:	6078      	str	r0, [r7, #4]
 801177a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011782:	2b01      	cmp	r3, #1
 8011784:	d101      	bne.n	801178a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011786:	2302      	movs	r3, #2
 8011788:	e02d      	b.n	80117e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2201      	movs	r2, #1
 801178e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2224      	movs	r2, #36	; 0x24
 8011796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f022 0201 	bic.w	r2, r2, #1
 80117b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	683a      	ldr	r2, [r7, #0]
 80117c2:	430a      	orrs	r2, r1
 80117c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f000 f850 	bl	801186c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2220      	movs	r2, #32
 80117d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80117e4:	2300      	movs	r3, #0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}

080117ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80117ee:	b580      	push	{r7, lr}
 80117f0:	b084      	sub	sp, #16
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
 80117f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d101      	bne.n	8011806 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011802:	2302      	movs	r3, #2
 8011804:	e02d      	b.n	8011862 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2224      	movs	r2, #36	; 0x24
 8011812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f022 0201 	bic.w	r2, r2, #1
 801182c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	683a      	ldr	r2, [r7, #0]
 801183e:	430a      	orrs	r2, r1
 8011840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f812 	bl	801186c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2220      	movs	r2, #32
 8011854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801186c:	b480      	push	{r7}
 801186e:	b085      	sub	sp, #20
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011878:	2b00      	cmp	r3, #0
 801187a:	d108      	bne.n	801188e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2201      	movs	r2, #1
 8011880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2201      	movs	r2, #1
 8011888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801188c:	e031      	b.n	80118f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801188e:	2310      	movs	r3, #16
 8011890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011892:	2310      	movs	r3, #16
 8011894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	689b      	ldr	r3, [r3, #8]
 801189c:	0e5b      	lsrs	r3, r3, #25
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	f003 0307 	and.w	r3, r3, #7
 80118a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	0f5b      	lsrs	r3, r3, #29
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	f003 0307 	and.w	r3, r3, #7
 80118b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80118b6:	7bbb      	ldrb	r3, [r7, #14]
 80118b8:	7b3a      	ldrb	r2, [r7, #12]
 80118ba:	4911      	ldr	r1, [pc, #68]	; (8011900 <UARTEx_SetNbDataToProcess+0x94>)
 80118bc:	5c8a      	ldrb	r2, [r1, r2]
 80118be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80118c2:	7b3a      	ldrb	r2, [r7, #12]
 80118c4:	490f      	ldr	r1, [pc, #60]	; (8011904 <UARTEx_SetNbDataToProcess+0x98>)
 80118c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80118c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	7b7a      	ldrb	r2, [r7, #13]
 80118d8:	4909      	ldr	r1, [pc, #36]	; (8011900 <UARTEx_SetNbDataToProcess+0x94>)
 80118da:	5c8a      	ldrb	r2, [r1, r2]
 80118dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80118e0:	7b7a      	ldrb	r2, [r7, #13]
 80118e2:	4908      	ldr	r1, [pc, #32]	; (8011904 <UARTEx_SetNbDataToProcess+0x98>)
 80118e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80118e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80118f2:	bf00      	nop
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	080119b8 	.word	0x080119b8
 8011904:	080119c0 	.word	0x080119c0

08011908 <__libc_init_array>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	4d0d      	ldr	r5, [pc, #52]	; (8011940 <__libc_init_array+0x38>)
 801190c:	4c0d      	ldr	r4, [pc, #52]	; (8011944 <__libc_init_array+0x3c>)
 801190e:	1b64      	subs	r4, r4, r5
 8011910:	10a4      	asrs	r4, r4, #2
 8011912:	2600      	movs	r6, #0
 8011914:	42a6      	cmp	r6, r4
 8011916:	d109      	bne.n	801192c <__libc_init_array+0x24>
 8011918:	4d0b      	ldr	r5, [pc, #44]	; (8011948 <__libc_init_array+0x40>)
 801191a:	4c0c      	ldr	r4, [pc, #48]	; (801194c <__libc_init_array+0x44>)
 801191c:	f000 f820 	bl	8011960 <_init>
 8011920:	1b64      	subs	r4, r4, r5
 8011922:	10a4      	asrs	r4, r4, #2
 8011924:	2600      	movs	r6, #0
 8011926:	42a6      	cmp	r6, r4
 8011928:	d105      	bne.n	8011936 <__libc_init_array+0x2e>
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011930:	4798      	blx	r3
 8011932:	3601      	adds	r6, #1
 8011934:	e7ee      	b.n	8011914 <__libc_init_array+0xc>
 8011936:	f855 3b04 	ldr.w	r3, [r5], #4
 801193a:	4798      	blx	r3
 801193c:	3601      	adds	r6, #1
 801193e:	e7f2      	b.n	8011926 <__libc_init_array+0x1e>
 8011940:	080119d0 	.word	0x080119d0
 8011944:	080119d0 	.word	0x080119d0
 8011948:	080119d0 	.word	0x080119d0
 801194c:	080119d4 	.word	0x080119d4

08011950 <memset>:
 8011950:	4402      	add	r2, r0
 8011952:	4603      	mov	r3, r0
 8011954:	4293      	cmp	r3, r2
 8011956:	d100      	bne.n	801195a <memset+0xa>
 8011958:	4770      	bx	lr
 801195a:	f803 1b01 	strb.w	r1, [r3], #1
 801195e:	e7f9      	b.n	8011954 <memset+0x4>

08011960 <_init>:
 8011960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011962:	bf00      	nop
 8011964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011966:	bc08      	pop	{r3}
 8011968:	469e      	mov	lr, r3
 801196a:	4770      	bx	lr

0801196c <_fini>:
 801196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801196e:	bf00      	nop
 8011970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011972:	bc08      	pop	{r3}
 8011974:	469e      	mov	lr, r3
 8011976:	4770      	bx	lr
