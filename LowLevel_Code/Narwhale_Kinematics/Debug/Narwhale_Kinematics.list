
Narwhale_Kinematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116ac  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08011980  08011980  00021980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011be0  08011be0  00021be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011be8  08011be8  00021be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011bec  08011bec  00021bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000198  24000000  08011bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000022f4  24000198  08011d88  00030198  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400248c  08011d88  0003248c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041d7f  00000000  00000000  000301c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000643c  00000000  00000000  00071f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002220  00000000  00000000  00078388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002028  00000000  00000000  0007a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008bc7  00000000  00000000  0007c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fabb  00000000  00000000  00085197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171202  00000000  00000000  000b4c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225e54  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009520  00000000  00000000  00225ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000198 	.word	0x24000198
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011964 	.word	0x08011964

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400019c 	.word	0x2400019c
 800030c:	08011964 	.word	0x08011964

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <IVK>:
 *  Created on: Jan 20, 2022
 *      Author: matas manawakul
 */

#include "kinematics.h"
void IVK(float v_x, float v_y, float v_z, float v_pitch, float v_yaw, float *q, float *qv){
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000612:	edc7 0a06 	vstr	s1, [r7, #24]
 8000616:	ed87 1a05 	vstr	s2, [r7, #20]
 800061a:	edc7 1a04 	vstr	s3, [r7, #16]
 800061e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000622:	60b8      	str	r0, [r7, #8]
 8000624:	6079      	str	r1, [r7, #4]
	float c1 = cos(*q);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000630:	eeb0 0b47 	vmov.f64	d0, d7
 8000634:	f010 fb70 	bl	8010d18 <cos>
 8000638:	eeb0 7b40 	vmov.f64	d7, d0
 800063c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000640:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float s1 = sin(*q);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800064e:	eeb0 0b47 	vmov.f64	d0, d7
 8000652:	f010 fba9 	bl	8010da8 <sin>
 8000656:	eeb0 7b40 	vmov.f64	d7, d0
 800065a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800065e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float c2 = cos(*(q+1));
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3304      	adds	r3, #4
 8000666:	edd3 7a00 	vldr	s15, [r3]
 800066a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800066e:	eeb0 0b47 	vmov.f64	d0, d7
 8000672:	f010 fb51 	bl	8010d18 <cos>
 8000676:	eeb0 7b40 	vmov.f64	d7, d0
 800067a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800067e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float s2 = sin(*(q+1));
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3304      	adds	r3, #4
 8000686:	edd3 7a00 	vldr	s15, [r3]
 800068a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800068e:	eeb0 0b47 	vmov.f64	d0, d7
 8000692:	f010 fb89 	bl	8010da8 <sin>
 8000696:	eeb0 7b40 	vmov.f64	d7, d0
 800069a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800069e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float c23 = cos(*(q+1)+*(q+2));
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3304      	adds	r3, #4
 80006a6:	ed93 7a00 	vldr	s14, [r3]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	3308      	adds	r3, #8
 80006ae:	edd3 7a00 	vldr	s15, [r3]
 80006b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ba:	eeb0 0b47 	vmov.f64	d0, d7
 80006be:	f010 fb2b 	bl	8010d18 <cos>
 80006c2:	eeb0 7b40 	vmov.f64	d7, d0
 80006c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float s23 = sin(*(q+1)+*(q+2));
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3304      	adds	r3, #4
 80006d2:	ed93 7a00 	vldr	s14, [r3]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3308      	adds	r3, #8
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ea:	f010 fb5d 	bl	8010da8 <sin>
 80006ee:	eeb0 7b40 	vmov.f64	d7, d0
 80006f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float c234 = cos(*(q+1)+*(q+2)+*(q+3));
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3304      	adds	r3, #4
 80006fe:	ed93 7a00 	vldr	s14, [r3]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	3308      	adds	r3, #8
 8000706:	edd3 7a00 	vldr	s15, [r3]
 800070a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	330c      	adds	r3, #12
 8000712:	edd3 7a00 	vldr	s15, [r3]
 8000716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f010 faf9 	bl	8010d18 <cos>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float s234 = sin(*(q+1)+*(q+2)+*(q+3));
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	3304      	adds	r3, #4
 8000736:	ed93 7a00 	vldr	s14, [r3]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3308      	adds	r3, #8
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	330c      	adds	r3, #12
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000756:	eeb0 0b47 	vmov.f64	d0, d7
 800075a:	f010 fb25 	bl	8010da8 <sin>
 800075e:	eeb0 7b40 	vmov.f64	d7, d0
 8000762:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000766:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float l2c23 = 380.0f*c23;
 800076a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800076e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8000994 <IVK+0x38c>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float l2s23 = 380.0f*s23;
 800077a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800077e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8000994 <IVK+0x38c>
 8000782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000786:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float l3c234 = 235.0f*c234;
 800078a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800078e:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8000998 <IVK+0x390>
 8000792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000796:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float l3s234 = 235.0f*s234;
 800079a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800079e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000998 <IVK+0x390>
 80007a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a6:	edc7 7a08 	vstr	s15, [r7, #32]
	*qv = -v_y-v_z-v_pitch;
 80007aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80007ae:	eeb1 7a67 	vneg.f32	s14, s15
 80007b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	edc3 7a00 	vstr	s15, [r3]
	*(qv+1) = v_yaw;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3304      	adds	r3, #4
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	601a      	str	r2, [r3, #0]
	*(qv+2) = v_pitch*l3c234*c1 - v_y*(c1*(l2s23 + 380.0f*c2) - l3c234*c1) - v_z*c1*(l2s23 - l3c234) - v_x*(s1*(20.01f + l2c23 -380.0f*s2) + l3s234*s1);
 80007d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80007d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80007d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80007e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80007e8:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8000994 <IVK+0x38c>
 80007ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80007f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80007f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80007f8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80007fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000800:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8000804:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000808:	ee66 7a27 	vmul.f32	s15, s12, s15
 800080c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000810:	edd7 7a06 	vldr	s15, [r7, #24]
 8000814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800081c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000820:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000828:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800082c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000830:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800083c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000840:	eddf 6a56 	vldr	s13, [pc, #344]	; 800099c <IVK+0x394>
 8000844:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8000848:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800084c:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8000994 <IVK+0x38c>
 8000850:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000854:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000858:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800085c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000860:	ed97 6a08 	vldr	s12, [r7, #32]
 8000864:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000868:	ee66 7a27 	vmul.f32	s15, s12, s15
 800086c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000870:	edd7 7a07 	vldr	s15, [r7, #28]
 8000874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3308      	adds	r3, #8
 800087c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000880:	edc3 7a00 	vstr	s15, [r3]
	*(qv+3) = v_x*(c1*(20.01f + l2c23 - 380.0f*s2) + l3s234*c1) - v_y*(s1*(l2s23 + 380.0f*c2) - l3c234*s1) - v_z*s1*(l2s23 - l3c234) + v_pitch*l3c234*s1;
 8000884:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000888:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800099c <IVK+0x394>
 800088c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000890:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000894:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8000994 <IVK+0x38c>
 8000898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800089c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80008a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a8:	edd7 6a08 	vldr	s13, [r7, #32]
 80008ac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80008b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80008bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c4:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000994 <IVK+0x38c>
 80008c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80008cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80008d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80008d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008dc:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80008e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80008e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80008e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80008ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80008f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80008fc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000900:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000904:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8000908:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800090c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000918:	edd7 6a04 	vldr	s13, [r7, #16]
 800091c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000924:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	330c      	adds	r3, #12
 8000930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000934:	edc3 7a00 	vstr	s15, [r3]
	*(qv+4) = v_y*(l2c23 - 380.0f*s2 + l3s234) + v_z*(l2c23 + l3s234) + (v_pitch*l3s234);
 8000938:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800093c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000994 <IVK+0x38c>
 8000940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000944:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800094c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000954:	edd7 7a06 	vldr	s15, [r7, #24]
 8000958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800095c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000960:	edd7 7a08 	vldr	s15, [r7, #32]
 8000964:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000968:	edd7 7a05 	vldr	s15, [r7, #20]
 800096c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000974:	edd7 6a04 	vldr	s13, [r7, #16]
 8000978:	edd7 7a08 	vldr	s15, [r7, #32]
 800097c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3310      	adds	r3, #16
 8000984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000988:	edc3 7a00 	vstr	s15, [r3]
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	; 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	43be0000 	.word	0x43be0000
 8000998:	436b0000 	.word	0x436b0000
 800099c:	41a0147b 	.word	0x41a0147b

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t timer1;
	v_x = 0.000023997;
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <main+0xd0>)
 80009a6:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <main+0xd4>)
 80009a8:	601a      	str	r2, [r3, #0]
	v_y = 0;
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <main+0xd8>)
 80009ac:	f04f 0200 	mov.w	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
	v_z = -0.000038637;
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <main+0xdc>)
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <main+0xe0>)
 80009b6:	601a      	str	r2, [r3, #0]
	v_pitch = 0;
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <main+0xe4>)
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	v_yaw = 0;
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <main+0xe8>)
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c8:	f001 ffc0 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009cc:	f000 f862 	bl	8000a94 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009d0:	f000 f8da 	bl	8000b88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f001 f854 	bl	8001a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d8:	f001 f832 	bl	8001a40 <MX_DMA_Init>
  MX_ADC3_Init();
 80009dc:	f000 f908 	bl	8000bf0 <MX_ADC3_Init>
  MX_TIM1_Init();
 80009e0:	f000 fa92 	bl	8000f08 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009e4:	f000 fb3e 	bl	8001064 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009e8:	f000 fb92 	bl	8001110 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009ec:	f000 fbe6 	bl	80011bc <MX_TIM5_Init>
  MX_TIM8_Init();
 80009f0:	f000 fc72 	bl	80012d8 <MX_TIM8_Init>
  MX_TIM13_Init();
 80009f4:	f000 fcca 	bl	800138c <MX_TIM13_Init>
  MX_TIM14_Init();
 80009f8:	f000 fd18 	bl	800142c <MX_TIM14_Init>
  MX_TIM15_Init();
 80009fc:	f000 fd66 	bl	80014cc <MX_TIM15_Init>
  MX_TIM16_Init();
 8000a00:	f000 fdec 	bl	80015dc <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a04:	f000 fe66 	bl	80016d4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000a08:	f000 ff80 	bl	800190c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a0c:	f000 ffcc 	bl	80019a8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8000a10:	f000 f9cc 	bl	8000dac <MX_SPI3_Init>
  MX_SPI4_Init();
 8000a14:	f000 fa22 	bl	8000e5c <MX_SPI4_Init>
  MX_TIM2_Init();
 8000a18:	f000 fad0 	bl	8000fbc <MX_TIM2_Init>
  MX_I2C2_Init();
 8000a1c:	f000 f986 	bl	8000d2c <MX_I2C2_Init>
  MX_CRC_Init();
 8000a20:	f000 f958 	bl	8000cd4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000a24:	f00f fc5e 	bl	80102e4 <MX_USB_DEVICE_Init>
  MX_TIM24_Init();
 8000a28:	f000 ff20 	bl	800186c <MX_TIM24_Init>
  MX_TIM23_Init();
 8000a2c:	f000 fece 	bl	80017cc <MX_TIM23_Init>
  MX_TIM6_Init();
 8000a30:	f000 fc1a 	bl	8001268 <MX_TIM6_Init>
//		if (HAL_GetTick() - timer1 > 1000) { gettick จะนับไปเรื่อย
//			timer1 = HAL_GetTick(); keep count ตอนนั้นไว้ที่ timer1
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
//		}
//		float a = cos(3.14);
		IVK(v_x, v_y, v_z, v_pitch, v_yaw, q, qv);
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <main+0xd0>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <main+0xd8>)
 8000a3c:	ed93 7a00 	vldr	s14, [r3]
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <main+0xdc>)
 8000a42:	edd3 6a00 	vldr	s13, [r3]
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0xe4>)
 8000a48:	ed93 6a00 	vldr	s12, [r3]
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <main+0xe8>)
 8000a4e:	edd3 5a00 	vldr	s11, [r3]
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <main+0xec>)
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <main+0xf0>)
 8000a56:	eeb0 2a65 	vmov.f32	s4, s11
 8000a5a:	eef0 1a46 	vmov.f32	s3, s12
 8000a5e:	eeb0 1a66 	vmov.f32	s2, s13
 8000a62:	eef0 0a47 	vmov.f32	s1, s14
 8000a66:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6a:	f7ff fdcd 	bl	8000608 <IVK>
 8000a6e:	e7e1      	b.n	8000a34 <main+0x94>
 8000a70:	24000620 	.word	0x24000620
 8000a74:	37c94d2a 	.word	0x37c94d2a
 8000a78:	240009e0 	.word	0x240009e0
 8000a7c:	24000424 	.word	0x24000424
 8000a80:	b8220e2a 	.word	0xb8220e2a
 8000a84:	24000670 	.word	0x24000670
 8000a88:	240009e4 	.word	0x240009e4
 8000a8c:	24000428 	.word	0x24000428
 8000a90:	24000000 	.word	0x24000000

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	224c      	movs	r2, #76	; 0x4c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f010 f930 	bl	8010d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2220      	movs	r2, #32
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f010 f92a 	bl	8010d08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f007 f8b9 	bl	8007c2c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <SystemClock_Config+0xec>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <SystemClock_Config+0xec>)
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <SystemClock_Config+0xec>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad6:	bf00      	nop
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <SystemClock_Config+0xec>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae4:	d1f8      	bne.n	8000ad8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <SystemClock_Config+0xf0>)
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aea:	f023 0303 	bic.w	r3, r3, #3
 8000aee:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <SystemClock_Config+0xf0>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000af6:	2321      	movs	r3, #33	; 0x21
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b10:	232c      	movs	r3, #44	; 0x2c
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b20:	230c      	movs	r3, #12
 8000b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 f8c5 	bl	8007cc0 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b3c:	f001 f886 	bl	8001c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	233f      	movs	r3, #63	; 0x3f
 8000b42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b5e:	2340      	movs	r3, #64	; 0x40
 8000b60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2103      	movs	r1, #3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 fc56 	bl	8008418 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000b72:	f001 f86b 	bl	8001c4c <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3770      	adds	r7, #112	; 0x70
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	58024800 	.word	0x58024800
 8000b84:	58024400 	.word	0x58024400

08000b88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	; 0xb8
 8000b8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	22b4      	movs	r2, #180	; 0xb4
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f010 f8b7 	bl	8010d08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <PeriphCommonClock_Config+0x64>)
 8000b9c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bb2:	23c0      	movs	r3, #192	; 0xc0
 8000bb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f007 ffab 	bl	8008b30 <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000be0:	f001 f834 	bl	8001c4c <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	37b8      	adds	r7, #184	; 0xb8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	00082003 	.word	0x00082003

08000bf0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2224      	movs	r2, #36	; 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f010 f883 	bl	8010d08 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c04:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <MX_ADC3_Init+0xdc>)
 8000c06:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c0e:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c70:	4815      	ldr	r0, [pc, #84]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000c72:	f002 f9bf 	bl	8002ff4 <HAL_ADC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f000 ffe6 	bl	8001c4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC3_Init+0xe0>)
 8000c82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c84:	2306      	movs	r3, #6
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000c88:	2306      	movs	r3, #6
 8000c8a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c92:	2304      	movs	r3, #4
 8000c94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_ADC3_Init+0xd8>)
 8000cb0:	f002 fe00 	bl	80038b4 <HAL_ADC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000cba:	f000 ffc7 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24000794 	.word	0x24000794
 8000ccc:	58026000 	.word	0x58026000
 8000cd0:	c7520000 	.word	0xc7520000

08000cd4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_CRC_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_CRC_Init+0x50>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cec:	221d      	movs	r2, #29
 8000cee:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cf8:	22c4      	movs	r2, #196	; 0xc4
 8000cfa:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_CRC_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_CRC_Init+0x50>)
 8000d10:	f003 fd2a 	bl	8004768 <HAL_CRC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 ff97 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	240005b0 	.word	0x240005b0
 8000d28:	58024c00 	.word	0x58024c00

08000d2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MX_I2C2_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <MX_I2C2_Init+0x7c>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d68:	f005 fc6a 	bl	8006640 <HAL_I2C_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d72:	f000 ff6b 	bl	8001c4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d7a:	f005 fcf1 	bl	8006760 <HAL_I2CEx_ConfigAnalogFilter>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d84:	f000 ff62 	bl	8001c4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_I2C2_Init+0x74>)
 8000d8c:	f005 fd33 	bl	80067f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 ff59 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	240005d4 	.word	0x240005d4
 8000da4:	40005800 	.word	0x40005800
 8000da8:	60404e72 	.word	0x60404e72

08000dac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000db2:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <MX_SPI3_Init+0xac>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dde:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000de2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000de6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000dfc:	221d      	movs	r2, #29
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_SPI3_Init+0xa8>)
 8000e40:	f009 ff08 	bl	800ac54 <HAL_SPI_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000e4a:	f000 feff 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400070c 	.word	0x2400070c
 8000e58:	40003c00 	.word	0x40003c00

08000e5c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <MX_SPI4_Init+0xa8>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e76:	220f      	movs	r2, #15
 8000e78:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_SPI4_Init+0xa4>)
 8000eee:	f009 feb1 	bl	800ac54 <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000ef8:	f000 fea8 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000958 	.word	0x24000958
 8000f04:	40013400 	.word	0x40013400

08000f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2224      	movs	r2, #36	; 0x24
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00f fef6 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <MX_TIM1_Init+0xb0>)
 8000f2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16383;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f3a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000f3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f52:	2303      	movs	r3, #3
 8000f54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f7e:	f00a f839 	bl	800aff4 <HAL_TIM_Encoder_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000f88:	f000 fe60 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_TIM1_Init+0xac>)
 8000f9e:	f00a fef5 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000fa8:	f000 fe50 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24000a34 	.word	0x24000a34
 8000fb8:	40010000 	.word	0x40010000

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2224      	movs	r2, #36	; 0x24
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00f fe9c 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000fdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000ff0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000ff4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001002:	2303      	movs	r3, #3
 8001004:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800101a:	2301      	movs	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_TIM2_Init+0xa4>)
 800102e:	f009 ffe1 	bl	800aff4 <HAL_TIM_Encoder_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001038:	f000 fe08 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_TIM2_Init+0xa4>)
 800104a:	f00a fe9f 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001054:	f000 fdfa 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	24000a80 	.word	0x24000a80

08001064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2224      	movs	r2, #36	; 0x24
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00f fe48 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_TIM3_Init+0xa4>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_TIM3_Init+0xa8>)
 8001086:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_TIM3_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_TIM3_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_TIM3_Init+0xa4>)
 8001096:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800109a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_TIM3_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM3_Init+0xa4>)
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010c0:	2301      	movs	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80010c8:	230a      	movs	r3, #10
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_TIM3_Init+0xa4>)
 80010d4:	f009 ff8e 	bl	800aff4 <HAL_TIM_Encoder_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010de:	f000 fdb5 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_TIM3_Init+0xa4>)
 80010f0:	f00a fe4c 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80010fa:	f000 fda7 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3730      	adds	r7, #48	; 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	240006c0 	.word	0x240006c0
 800110c:	40000400 	.word	0x40000400

08001110 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2224      	movs	r2, #36	; 0x24
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00f fdf2 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_TIM4_Init+0xa4>)
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <MX_TIM4_Init+0xa8>)
 8001132:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_TIM4_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_TIM4_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_TIM4_Init+0xa4>)
 8001142:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001146:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM4_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM4_Init+0xa4>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001154:	2303      	movs	r3, #3
 8001156:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM4_Init+0xa4>)
 8001180:	f009 ff38 	bl	800aff4 <HAL_TIM_Encoder_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800118a:	f000 fd5f 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM4_Init+0xa4>)
 800119c:	f00a fdf6 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011a6:	f000 fd51 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000488 	.word	0x24000488
 80011b8:	40000800 	.word	0x40000800

080011bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2224      	movs	r2, #36	; 0x24
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00f fd9c 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <MX_TIM5_Init+0xa8>)
 80011de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011ee:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80011f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_TIM5_Init+0xa4>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001200:	2303      	movs	r3, #3
 8001202:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_TIM5_Init+0xa4>)
 800122c:	f009 fee2 	bl	800aff4 <HAL_TIM_Encoder_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001236:	f000 fd09 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM5_Init+0xa4>)
 8001248:	f00a fda0 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001252:	f000 fcfb 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000674 	.word	0x24000674
 8001264:	40000c00 	.word	0x40000c00

08001268 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM6_Init+0x68>)
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <MX_TIM6_Init+0x6c>)
 800127c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_TIM6_Init+0x68>)
 8001280:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001284:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_TIM6_Init+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_TIM6_Init+0x68>)
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_TIM6_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM6_Init+0x68>)
 800129c:	f009 fdfb 	bl	800ae96 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012a6:	f000 fcd1 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM6_Init+0x68>)
 80012b8:	f00a fd68 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012c2:	f000 fcc3 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	240009e8 	.word	0x240009e8
 80012d4:	40001000 	.word	0x40001000

080012d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2224      	movs	r2, #36	; 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00f fd0e 	bl	8010d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_TIM8_Init+0xac>)
 80012f8:	4a23      	ldr	r2, [pc, #140]	; (8001388 <MX_TIM8_Init+0xb0>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_TIM8_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM8_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM8_Init+0xac>)
 800130a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800130e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM8_Init+0xac>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM8_Init+0xac>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM8_Init+0xac>)
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001322:	2303      	movs	r3, #3
 8001324:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM8_Init+0xac>)
 800134e:	f009 fe51 	bl	800aff4 <HAL_TIM_Encoder_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001358:	f000 fc78 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM8_Init+0xac>)
 800136e:	f00a fd0d 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001378:	f000 fc68 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2400043c 	.word	0x2400043c
 8001388:	40010400 	.word	0x40010400

0800138c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_TIM13_Init+0x98>)
 80013a6:	4a20      	ldr	r2, [pc, #128]	; (8001428 <MX_TIM13_Init+0x9c>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM13_Init+0x98>)
 80013ac:	f44f 7289 	mov.w	r2, #274	; 0x112
 80013b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM13_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM13_Init+0x98>)
 80013ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013be:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_TIM13_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_TIM13_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <MX_TIM13_Init+0x98>)
 80013ce:	f009 fd62 	bl	800ae96 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80013d8:	f000 fc38 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <MX_TIM13_Init+0x98>)
 80013de:	f009 fdb1 	bl	800af44 <HAL_TIM_PWM_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80013e8:	f000 fc30 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ec:	2360      	movs	r3, #96	; 0x60
 80013ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80013f0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <MX_TIM13_Init+0x98>)
 8001406:	f009 fe9b 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001410:	f000 fc1c 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <MX_TIM13_Init+0x98>)
 8001416:	f001 f81d 	bl	8002454 <HAL_TIM_MspPostInit>

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2400087c 	.word	0x2400087c
 8001428:	40001c00 	.word	0x40001c00

0800142c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_TIM14_Init+0x98>)
 8001446:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <MX_TIM14_Init+0x9c>)
 8001448:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_TIM14_Init+0x98>)
 800144c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001450:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM14_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM14_Init+0x98>)
 800145a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM14_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM14_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <MX_TIM14_Init+0x98>)
 800146e:	f009 fd12 	bl	800ae96 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8001478:	f000 fbe8 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <MX_TIM14_Init+0x98>)
 800147e:	f009 fd61 	bl	800af44 <HAL_TIM_PWM_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fbe0 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001490:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM14_Init+0x98>)
 80014a6:	f009 fe4b 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80014b0:	f000 fbcc 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM14_Init+0x98>)
 80014b6:	f000 ffcd 	bl	8002454 <HAL_TIM_MspPostInit>

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000b18 	.word	0x24000b18
 80014c8:	40002000 	.word	0x40002000

080014cc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b098      	sub	sp, #96	; 0x60
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2234      	movs	r2, #52	; 0x34
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00f fc05 	bl	8010d08 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001500:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <MX_TIM15_Init+0x10c>)
 8001502:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001506:	f44f 7289 	mov.w	r2, #274	; 0x112
 800150a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_TIM15_Init+0x108>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001514:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001518:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_TIM15_Init+0x108>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800152c:	4829      	ldr	r0, [pc, #164]	; (80015d4 <MX_TIM15_Init+0x108>)
 800152e:	f009 fd09 	bl	800af44 <HAL_TIM_PWM_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 fb88 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001544:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001548:	4619      	mov	r1, r3
 800154a:	4822      	ldr	r0, [pc, #136]	; (80015d4 <MX_TIM15_Init+0x108>)
 800154c:	f00a fc1e 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001556:	f000 fb79 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155a:	2360      	movs	r3, #96	; 0x60
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2000-1;
 800155e:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_TIM15_Init+0x108>)
 8001582:	f009 fddd 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800158c:	f000 fb5e 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM15_Init+0x108>)
 80015b8:	f00a fc84 	bl	800bec4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80015c2:	f000 fb43 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM15_Init+0x108>)
 80015c8:	f000 ff44 	bl	8002454 <HAL_TIM_MspPostInit>

}
 80015cc:	bf00      	nop
 80015ce:	3760      	adds	r7, #96	; 0x60
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000564 	.word	0x24000564
 80015d8:	40014000 	.word	0x40014000

080015dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2234      	movs	r2, #52	; 0x34
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00f fb83 	bl	8010d08 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001604:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <MX_TIM16_Init+0xf4>)
 8001606:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <MX_TIM16_Init+0xf0>)
 800160a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800160e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_TIM16_Init+0xf0>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001630:	4826      	ldr	r0, [pc, #152]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001632:	f009 fc30 	bl	800ae96 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800163c:	f000 fb06 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001640:	4822      	ldr	r0, [pc, #136]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001642:	f009 fc7f 	bl	800af44 <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800164c:	f000 fafe 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001650:	2360      	movs	r3, #96	; 0x60
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001654:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800165e:	2300      	movs	r3, #0
 8001660:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001672:	2200      	movs	r2, #0
 8001674:	4619      	mov	r1, r3
 8001676:	4815      	ldr	r0, [pc, #84]	; (80016cc <MX_TIM16_Init+0xf0>)
 8001678:	f009 fd62 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8001682:	f000 fae3 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800169a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_TIM16_Init+0xf0>)
 80016ae:	f00a fc09 	bl	800bec4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80016b8:	f000 fac8 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <MX_TIM16_Init+0xf0>)
 80016be:	f000 fec9 	bl	8002454 <HAL_TIM_MspPostInit>

}
 80016c2:	bf00      	nop
 80016c4:	3750      	adds	r7, #80	; 0x50
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24000b64 	.word	0x24000b64
 80016d0:	40014400 	.word	0x40014400

080016d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ee:	463b      	mov	r3, r7
 80016f0:	2234      	movs	r2, #52	; 0x34
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00f fb07 	bl	8010d08 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <MX_TIM17_Init+0xf0>)
 80016fc:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <MX_TIM17_Init+0xf4>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <MX_TIM17_Init+0xf0>)
 8001702:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001706:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MX_TIM17_Init+0xf0>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <MX_TIM17_Init+0xf0>)
 8001710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001714:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <MX_TIM17_Init+0xf0>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MX_TIM17_Init+0xf0>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <MX_TIM17_Init+0xf0>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001728:	4826      	ldr	r0, [pc, #152]	; (80017c4 <MX_TIM17_Init+0xf0>)
 800172a:	f009 fbb4 	bl	800ae96 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8001734:	f000 fa8a 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001738:	4822      	ldr	r0, [pc, #136]	; (80017c4 <MX_TIM17_Init+0xf0>)
 800173a:	f009 fc03 	bl	800af44 <HAL_TIM_PWM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8001744:	f000 fa82 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	; 0x60
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800174c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001766:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800176a:	2200      	movs	r2, #0
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <MX_TIM17_Init+0xf0>)
 8001770:	f009 fce6 	bl	800b140 <HAL_TIM_PWM_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800177a:	f000 fa67 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM17_Init+0xf0>)
 80017a6:	f00a fb8d 	bl	800bec4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80017b0:	f000 fa4c 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM17_Init+0xf0>)
 80017b6:	f000 fe4d 	bl	8002454 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3750      	adds	r7, #80	; 0x50
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000624 	.word	0x24000624
 80017c8:	40014800 	.word	0x40014800

080017cc <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <MX_TIM23_Init+0x98>)
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <MX_TIM23_Init+0x9c>)
 80017ee:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_TIM23_Init+0x98>)
 80017f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80017f6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_TIM23_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_TIM23_Init+0x98>)
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_TIM23_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_TIM23_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001812:	4814      	ldr	r0, [pc, #80]	; (8001864 <MX_TIM23_Init+0x98>)
 8001814:	f009 fb3f 	bl	800ae96 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800181e:	f000 fa15 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_TIM23_Init+0x98>)
 8001830:	f009 fd9a 	bl	800b368 <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800183a:	f000 fa07 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_TIM23_Init+0x98>)
 800184c:	f00a fa9e 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8001856:	f000 f9f9 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	24000acc 	.word	0x24000acc
 8001868:	4000e000 	.word	0x4000e000

0800186c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM24_Init+0x98>)
 800188c:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <MX_TIM24_Init+0x9c>)
 800188e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_TIM24_Init+0x98>)
 8001892:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001896:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_TIM24_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_TIM24_Init+0x98>)
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_TIM24_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_TIM24_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <MX_TIM24_Init+0x98>)
 80018b4:	f009 faef 	bl	800ae96 <HAL_TIM_Base_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80018be:	f000 f9c5 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM24_Init+0x98>)
 80018d0:	f009 fd4a 	bl	800b368 <HAL_TIM_ConfigClockSource>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80018da:	f000 f9b7 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_TIM24_Init+0x98>)
 80018ec:	f00a fa4e 	bl	800bd8c <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 80018f6:	f000 f9a9 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240003d8 	.word	0x240003d8
 8001908:	4000e400 	.word	0x4000e400

0800190c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <MX_USART1_UART_Init+0x98>)
 800191a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_USART1_UART_Init+0x90>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_USART1_UART_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001930:	220c      	movs	r2, #12
 8001932:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_USART1_UART_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001942:	2200      	movs	r2, #0
 8001944:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_USART1_UART_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001952:	4812      	ldr	r0, [pc, #72]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001954:	f00a fb56 	bl	800c004 <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800195e:	f000 f975 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001962:	2100      	movs	r1, #0
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001966:	f00b fbe9 	bl	800d13c <HAL_UARTEx_SetTxFifoThreshold>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001970:	f000 f96c 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001978:	f00b fc1e 	bl	800d1b8 <HAL_UARTEx_SetRxFifoThreshold>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001982:	f000 f963 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART1_UART_Init+0x90>)
 8001988:	f00b fb9f 	bl	800d0ca <HAL_UARTEx_DisableFifoMode>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001992:	f000 f95b 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	240008c8 	.word	0x240008c8
 80019a0:	40011000 	.word	0x40011000
 80019a4:	001e8480 	.word	0x001e8480

080019a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <MX_USART3_UART_Init+0x94>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 80019f2:	f00a fb07 	bl	800c004 <HAL_UART_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019fc:	f000 f926 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a00:	2100      	movs	r1, #0
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 8001a04:	f00b fb9a 	bl	800d13c <HAL_UARTEx_SetTxFifoThreshold>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a0e:	f000 f91d 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 8001a16:	f00b fbcf 	bl	800d1b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a20:	f000 f914 	bl	8001c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_USART3_UART_Init+0x90>)
 8001a26:	f00b fb50 	bl	800d0ca <HAL_UARTEx_DisableFifoMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a30:	f000 f90c 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	240004d4 	.word	0x240004d4
 8001a3c:	40004800 	.word	0x40004800

08001a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <MX_DMA_Init+0x3c>)
 8001a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <MX_DMA_Init+0x3c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_DMA_Init+0x3c>)
 8001a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	200b      	movs	r0, #11
 8001a6a:	f002 fe48 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a6e:	200b      	movs	r0, #11
 8001a70:	f002 fe5f 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab4:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a5e      	ldr	r2, [pc, #376]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b58      	ldr	r3, [pc, #352]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3c:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <MX_GPIO_Init+0x1b4>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001b50:	4839      	ldr	r0, [pc, #228]	; (8001c38 <MX_GPIO_Init+0x1b8>)
 8001b52:	f004 fd5b 	bl	800660c <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|Griper1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001b5c:	4837      	ldr	r0, [pc, #220]	; (8001c3c <MX_GPIO_Init+0x1bc>)
 8001b5e:	f004 fd55 	bl	800660c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	21c4      	movs	r1, #196	; 0xc4
 8001b66:	4836      	ldr	r0, [pc, #216]	; (8001c40 <MX_GPIO_Init+0x1c0>)
 8001b68:	f004 fd50 	bl	800660c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001b72:	4834      	ldr	r0, [pc, #208]	; (8001c44 <MX_GPIO_Init+0x1c4>)
 8001b74:	f004 fd4a 	bl	800660c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001b78:	2201      	movs	r2, #1
 8001b7a:	213f      	movs	r1, #63	; 0x3f
 8001b7c:	4831      	ldr	r0, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x1c4>)
 8001b7e:	f004 fd45 	bl	800660c <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DIR3_Pin DIR4_Pin DIR5_Pin Output_EN_Pin
                           EMSW2_Pin EMSW3_Pin EMSW4_Pin EERAM_SS_Pin
                           EERAM_HOLD_Pin DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b82:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001b86:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <MX_GPIO_Init+0x1b8>)
 8001b9c:	f004 fb8e 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper0_Pin Griper1_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Griper0_Pin|Griper1_Pin|LED2_Pin|LED1_Pin;
 8001ba0:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <MX_GPIO_Init+0x1bc>)
 8001bba:	f004 fb7f 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper2_Pin EMSW0_Pin */
  GPIO_InitStruct.Pin = Griper2_Pin|EMSW0_Pin;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481b      	ldr	r0, [pc, #108]	; (8001c40 <MX_GPIO_Init+0x1c0>)
 8001bd4:	f004 fb72 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EMSW1_Pin EN45_Pin EN123_Pin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001bd8:	23c4      	movs	r3, #196	; 0xc4
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4814      	ldr	r0, [pc, #80]	; (8001c40 <MX_GPIO_Init+0x1c0>)
 8001bf0:	f004 fb64 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin SPI3_SS6_Pin SPI3_SS5_Pin
                           SPI3_SS4_Pin SPI3_SS3_Pin SPI3_SS2_Pin SPI3_SS1_Pin
                           SPI3_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001bf4:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001bf8:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_GPIO_Init+0x1c4>)
 8001c0e:	f004 fb55 	bl	80062bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC6I_Pin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <MX_GPIO_Init+0x1c8>)
 8001c28:	f004 fb48 	bl	80062bc <HAL_GPIO_Init>

}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58024400 	.word	0x58024400
 8001c38:	58021000 	.word	0x58021000
 8001c3c:	58020800 	.word	0x58020800
 8001c40:	58020400 	.word	0x58020400
 8001c44:	58020c00 	.word	0x58020c00
 8001c48:	58020000 	.word	0x58020000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_MspInit+0x30>)
 8001c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c64:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_MspInit+0x30>)
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_MspInit+0x30>)
 8001c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	58024400 	.word	0x58024400

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_ADC_MspInit+0xa8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d13d      	bne.n	8001d2a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_ADC_MspInit+0xac>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = ADC4_Pin|ADC3_Pin;
 8001cea:	2303      	movs	r3, #3
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <HAL_ADC_MspInit+0xb0>)
 8001cfe:	f004 fadd 	bl	80062bc <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001d02:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001d06:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d0a:	f000 fed5 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d0e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d12:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d16:	f000 fecf 	bl	8002ab8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	207f      	movs	r0, #127	; 0x7f
 8001d20:	f002 fced 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001d24:	207f      	movs	r0, #127	; 0x7f
 8001d26:	f002 fd04 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58026000 	.word	0x58026000
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	58020800 	.word	0x58020800

08001d40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_CRC_MspInit+0x3c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10e      	bne.n	8001d70 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_CRC_MspInit+0x40>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_CRC_MspInit+0x40>)
 8001d5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_CRC_MspInit+0x40>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	58024c00 	.word	0x58024c00
 8001d80:	58024400 	.word	0x58024400

08001d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0b6      	sub	sp, #216	; 0xd8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	22b4      	movs	r2, #180	; 0xb4
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00e ffaf 	bl	8010d08 <memset>
  if(hi2c->Instance==I2C2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_I2C_MspInit+0xc0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d142      	bne.n	8001e3a <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001db4:	2308      	movs	r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 feb4 	bl	8008b30 <HAL_RCCEx_PeriphCLKConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dce:	f7ff ff3d 	bl	8001c4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001dda:	f043 0302 	orr.w	r3, r3, #2
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001df0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	; (8001e4c <HAL_I2C_MspInit+0xc8>)
 8001e18:	f004 fa50 	bl	80062bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001e24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_I2C_MspInit+0xc4>)
 8001e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	37d8      	adds	r7, #216	; 0xd8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40005800 	.word	0x40005800
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	58020400 	.word	0x58020400

08001e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0b8      	sub	sp, #224	; 0xe0
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e68:	f107 0318 	add.w	r3, r7, #24
 8001e6c:	22b4      	movs	r2, #180	; 0xb4
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00e ff49 	bl	8010d08 <memset>
  if(hspi->Instance==SPI3)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_SPI_MspInit+0x158>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d156      	bne.n	8001f2e <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001e86:	2319      	movs	r3, #25
 8001e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 fe3b 	bl	8008b30 <HAL_RCCEx_PeriphCLKConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001ec0:	f7ff fec4 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eca:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ed4:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001ed6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	4b32      	ldr	r3, [pc, #200]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f24:	4619      	mov	r1, r3
 8001f26:	4822      	ldr	r0, [pc, #136]	; (8001fb0 <HAL_SPI_MspInit+0x160>)
 8001f28:	f004 f9c8 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f2c:	e038      	b.n	8001fa0 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI4)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_SPI_MspInit+0x164>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d133      	bne.n	8001fa0 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f48:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_SPI_MspInit+0x15c>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8001f74:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f8e:	2305      	movs	r3, #5
 8001f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <HAL_SPI_MspInit+0x168>)
 8001f9c:	f004 f98e 	bl	80062bc <HAL_GPIO_Init>
}
 8001fa0:	bf00      	nop
 8001fa2:	37e0      	adds	r7, #224	; 0xe0
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40003c00 	.word	0x40003c00
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	58020800 	.word	0x58020800
 8001fb4:	40013400 	.word	0x40013400
 8001fb8:	58021000 	.word	0x58021000

08001fbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b094      	sub	sp, #80	; 0x50
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4aad      	ldr	r2, [pc, #692]	; (8002290 <HAL_TIM_Encoder_MspInit+0x2d4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12f      	bne.n	800203e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fde:	4bad      	ldr	r3, [pc, #692]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8001fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fe4:	4aab      	ldr	r2, [pc, #684]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fee:	4ba9      	ldr	r3, [pc, #676]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8001ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4ba5      	ldr	r3, [pc, #660]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	4aa4      	ldr	r2, [pc, #656]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200c:	4ba1      	ldr	r3, [pc, #644]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4A_Pin|ENC4B_Pin;
 800201a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800202c:	2301      	movs	r3, #1
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002034:	4619      	mov	r1, r3
 8002036:	4898      	ldr	r0, [pc, #608]	; (8002298 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002038:	f004 f940 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800203c:	e123      	b.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d14e      	bne.n	80020e6 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800204a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204e:	4a91      	ldr	r2, [pc, #580]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002058:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800205a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206c:	4a89      	ldr	r2, [pc, #548]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002076:	4b87      	ldr	r3, [pc, #540]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	4a82      	ldr	r2, [pc, #520]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002094:	4b7f      	ldr	r3, [pc, #508]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = ENC6A_Pin;
 80020a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b4:	2301      	movs	r3, #1
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020bc:	4619      	mov	r1, r3
 80020be:	4876      	ldr	r0, [pc, #472]	; (8002298 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80020c0:	f004 f8fc 	bl	80062bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC6B_Pin;
 80020c4:	2308      	movs	r3, #8
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d4:	2301      	movs	r3, #1
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020dc:	4619      	mov	r1, r3
 80020de:	486f      	ldr	r0, [pc, #444]	; (800229c <HAL_TIM_Encoder_MspInit+0x2e0>)
 80020e0:	f004 f8ec 	bl	80062bc <HAL_GPIO_Init>
}
 80020e4:	e0cf      	b.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a6d      	ldr	r2, [pc, #436]	; (80022a0 <HAL_TIM_Encoder_MspInit+0x2e4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d12e      	bne.n	800214e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f6:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b61      	ldr	r3, [pc, #388]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002114:	4a5f      	ldr	r2, [pc, #380]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC5A_Pin|ENC5B_Pin;
 800212c:	2330      	movs	r3, #48	; 0x30
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800213c:	2302      	movs	r3, #2
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002144:	4619      	mov	r1, r3
 8002146:	4855      	ldr	r0, [pc, #340]	; (800229c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002148:	f004 f8b8 	bl	80062bc <HAL_GPIO_Init>
}
 800214c:	e09b      	b.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM4)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a54      	ldr	r2, [pc, #336]	; (80022a4 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d12f      	bne.n	80021b8 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800215a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215e:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800216a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217c:	4a45      	ldr	r2, [pc, #276]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8002194:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021a6:	2302      	movs	r3, #2
 80021a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ae:	4619      	mov	r1, r3
 80021b0:	483d      	ldr	r0, [pc, #244]	; (80022a8 <HAL_TIM_Encoder_MspInit+0x2ec>)
 80021b2:	f004 f883 	bl	80062bc <HAL_GPIO_Init>
}
 80021b6:	e066      	b.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM5)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_TIM_Encoder_MspInit+0x2f0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12e      	bne.n	8002220 <HAL_TIM_Encoder_MspInit+0x264>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021c2:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c8:	4a32      	ldr	r2, [pc, #200]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e6:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80021fe:	2303      	movs	r3, #3
 8002200:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220e:	2302      	movs	r3, #2
 8002210:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002216:	4619      	mov	r1, r3
 8002218:	481f      	ldr	r0, [pc, #124]	; (8002298 <HAL_TIM_Encoder_MspInit+0x2dc>)
 800221a:	f004 f84f 	bl	80062bc <HAL_GPIO_Init>
}
 800221e:	e032      	b.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM8)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x2f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d12d      	bne.n	8002286 <HAL_TIM_Encoder_MspInit+0x2ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800222c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800223c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_TIM_Encoder_MspInit+0x2d8>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8002266:	23c0      	movs	r3, #192	; 0xc0
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002276:	2303      	movs	r3, #3
 8002278:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800227e:	4619      	mov	r1, r3
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <HAL_TIM_Encoder_MspInit+0x2f8>)
 8002282:	f004 f81b 	bl	80062bc <HAL_GPIO_Init>
}
 8002286:	bf00      	nop
 8002288:	3750      	adds	r7, #80	; 0x50
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40010000 	.word	0x40010000
 8002294:	58024400 	.word	0x58024400
 8002298:	58020000 	.word	0x58020000
 800229c:	58020400 	.word	0x58020400
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	58020c00 	.word	0x58020c00
 80022ac:	40000c00 	.word	0x40000c00
 80022b0:	40010400 	.word	0x40010400
 80022b4:	58020800 	.word	0x58020800

080022b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_TIM_Base_MspInit+0x138>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10f      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ca:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80022e8:	e07c      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM13)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a42      	ldr	r2, [pc, #264]	; (80023f8 <HAL_TIM_Base_MspInit+0x140>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10f      	bne.n	8002314 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80022f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fa:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
}
 8002312:	e067      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM14)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a38      	ldr	r2, [pc, #224]	; (80023fc <HAL_TIM_Base_MspInit+0x144>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10f      	bne.n	800233e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002320:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	69fb      	ldr	r3, [r7, #28]
}
 800233c:	e052      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_TIM_Base_MspInit+0x148>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 800234a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 800235a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	69bb      	ldr	r3, [r7, #24]
}
 8002366:	e03d      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM17)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_TIM_Base_MspInit+0x14c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10f      	bne.n	8002392 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 800237a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 8002384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
}
 8002390:	e028      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM23)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_TIM_Base_MspInit+0x150>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10f      	bne.n	80023bc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 800239e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80023a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80023ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	e013      	b.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM24)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_TIM_Base_MspInit+0x154>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80023c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023cc:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80023ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_TIM_Base_MspInit+0x13c>)
 80023d8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	bf00      	nop
 80023e6:	372c      	adds	r7, #44	; 0x2c
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40001000 	.word	0x40001000
 80023f4:	58024400 	.word	0x58024400
 80023f8:	40001c00 	.word	0x40001c00
 80023fc:	40002000 	.word	0x40002000
 8002400:	40014400 	.word	0x40014400
 8002404:	40014800 	.word	0x40014800
 8002408:	4000e000 	.word	0x4000e000
 800240c:	4000e400 	.word	0x4000e400

08002410 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_TIM_PWM_MspInit+0x3c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10e      	bne.n	8002440 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_TIM_PWM_MspInit+0x40>)
 8002424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002428:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_TIM_PWM_MspInit+0x40>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_TIM_PWM_MspInit+0x40>)
 8002434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40014000 	.word	0x40014000
 8002450:	58024400 	.word	0x58024400

08002454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5d      	ldr	r2, [pc, #372]	; (80025e8 <HAL_TIM_MspPostInit+0x194>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11f      	bne.n	80024b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 8002478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247c:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002486:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69bb      	ldr	r3, [r7, #24]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8002494:	2340      	movs	r3, #64	; 0x40
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80024a4:	2309      	movs	r3, #9
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	4850      	ldr	r0, [pc, #320]	; (80025f0 <HAL_TIM_MspPostInit+0x19c>)
 80024b0:	f003 ff04 	bl	80062bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80024b4:	e094      	b.n	80025e0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <HAL_TIM_MspPostInit+0x1a0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d11f      	bne.n	8002500 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	4a49      	ldr	r2, [pc, #292]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80024ee:	2309      	movs	r3, #9
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	483d      	ldr	r0, [pc, #244]	; (80025f0 <HAL_TIM_MspPostInit+0x19c>)
 80024fa:	f003 fedf 	bl	80062bc <HAL_GPIO_Init>
}
 80024fe:	e06f      	b.n	80025e0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM15)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_TIM_MspPostInit+0x1a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11f      	bne.n	800254a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP3_Pin;
 8002528:	2320      	movs	r3, #32
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002538:	2304      	movs	r3, #4
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	4619      	mov	r1, r3
 8002542:	482e      	ldr	r0, [pc, #184]	; (80025fc <HAL_TIM_MspPostInit+0x1a8>)
 8002544:	f003 feba 	bl	80062bc <HAL_GPIO_Init>
}
 8002548:	e04a      	b.n	80025e0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM16)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2c      	ldr	r2, [pc, #176]	; (8002600 <HAL_TIM_MspPostInit+0x1ac>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d120      	bne.n	8002596 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8002572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002584:	2301      	movs	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <HAL_TIM_MspPostInit+0x1b0>)
 8002590:	f003 fe94 	bl	80062bc <HAL_GPIO_Init>
}
 8002594:	e024      	b.n	80025e0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM17)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_TIM_MspPostInit+0x1b4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d11f      	bne.n	80025e0 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80025a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <HAL_TIM_MspPostInit+0x198>)
 80025b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 80025be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	4619      	mov	r1, r3
 80025da:	480a      	ldr	r0, [pc, #40]	; (8002604 <HAL_TIM_MspPostInit+0x1b0>)
 80025dc:	f003 fe6e 	bl	80062bc <HAL_GPIO_Init>
}
 80025e0:	bf00      	nop
 80025e2:	3730      	adds	r7, #48	; 0x30
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40001c00 	.word	0x40001c00
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020000 	.word	0x58020000
 80025f4:	40002000 	.word	0x40002000
 80025f8:	40014000 	.word	0x40014000
 80025fc:	58021000 	.word	0x58021000
 8002600:	40014400 	.word	0x40014400
 8002604:	58020400 	.word	0x58020400
 8002608:	40014800 	.word	0x40014800

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	; 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_UART_MspInit+0x150>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d15d      	bne.n	80026ea <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800262e:	4b4c      	ldr	r3, [pc, #304]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800263e:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_UART_MspInit+0x154>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	4a43      	ldr	r2, [pc, #268]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_UART_MspInit+0x154>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800266a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800267c:	2304      	movs	r3, #4
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	4837      	ldr	r0, [pc, #220]	; (8002764 <HAL_UART_MspInit+0x158>)
 8002688:	f003 fe18 	bl	80062bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_UART_MspInit+0x15c>)
 800268e:	4a37      	ldr	r2, [pc, #220]	; (800276c <HAL_UART_MspInit+0x160>)
 8002690:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002692:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_UART_MspInit+0x15c>)
 8002694:	2229      	movs	r2, #41	; 0x29
 8002696:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002698:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_UART_MspInit+0x15c>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c6:	4b28      	ldr	r3, [pc, #160]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026cc:	4826      	ldr	r0, [pc, #152]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026ce:	f002 f935 	bl	800493c <HAL_DMA_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80026d8:	f7ff fab8 	bl	8001c4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026e0:	67da      	str	r2, [r3, #124]	; 0x7c
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <HAL_UART_MspInit+0x15c>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026e8:	e033      	b.n	8002752 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <HAL_UART_MspInit+0x164>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12e      	bne.n	8002752 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_UART_MspInit+0x154>)
 80026f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_UART_MspInit+0x154>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800270a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002718:	4a11      	ldr	r2, [pc, #68]	; (8002760 <HAL_UART_MspInit+0x154>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_UART_MspInit+0x154>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002742:	2307      	movs	r3, #7
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4809      	ldr	r0, [pc, #36]	; (8002774 <HAL_UART_MspInit+0x168>)
 800274e:	f003 fdb5 	bl	80062bc <HAL_GPIO_Init>
}
 8002752:	bf00      	nop
 8002754:	3730      	adds	r7, #48	; 0x30
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40011000 	.word	0x40011000
 8002760:	58024400 	.word	0x58024400
 8002764:	58020400 	.word	0x58020400
 8002768:	24000804 	.word	0x24000804
 800276c:	40020010 	.word	0x40020010
 8002770:	40004800 	.word	0x40004800
 8002774:	58020c00 	.word	0x58020c00

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800277c:	e7fe      	b.n	800277c <NMI_Handler+0x4>

0800277e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <HardFault_Handler+0x4>

08002784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <MemManage_Handler+0x4>

0800278a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <UsageFault_Handler+0x4>

08002796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c4:	f000 f934 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}

080027cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Stream0_IRQHandler+0x10>)
 80027d2:	f002 fc0d 	bl	8004ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24000804 	.word	0x24000804

080027e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <OTG_HS_IRQHandler+0x10>)
 80027e6:	f004 f9a9 	bl	8006b3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	24002084 	.word	0x24002084

080027f4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <ADC3_IRQHandler+0x10>)
 80027fa:	f000 fe03 	bl	8003404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	24000794 	.word	0x24000794

08002808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <SystemInit+0xd0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <SystemInit+0xd0>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <SystemInit+0xd4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	2b06      	cmp	r3, #6
 8002826:	d807      	bhi.n	8002838 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <SystemInit+0xd4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 030f 	bic.w	r3, r3, #15
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <SystemInit+0xd4>)
 8002832:	f043 0307 	orr.w	r3, r3, #7
 8002836:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <SystemInit+0xd8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <SystemInit+0xd8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <SystemInit+0xd8>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <SystemInit+0xd8>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4924      	ldr	r1, [pc, #144]	; (80028e0 <SystemInit+0xd8>)
 8002850:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <SystemInit+0xdc>)
 8002852:	4013      	ands	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <SystemInit+0xd4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <SystemInit+0xd4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 030f 	bic.w	r3, r3, #15
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <SystemInit+0xd4>)
 800286c:	f043 0307 	orr.w	r3, r3, #7
 8002870:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <SystemInit+0xd8>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <SystemInit+0xd8>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <SystemInit+0xd8>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <SystemInit+0xd8>)
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <SystemInit+0xe0>)
 8002888:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <SystemInit+0xd8>)
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <SystemInit+0xe4>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <SystemInit+0xd8>)
 8002892:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <SystemInit+0xe8>)
 8002894:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <SystemInit+0xd8>)
 8002898:	2200      	movs	r2, #0
 800289a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <SystemInit+0xd8>)
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <SystemInit+0xe8>)
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <SystemInit+0xd8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <SystemInit+0xd8>)
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <SystemInit+0xe8>)
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <SystemInit+0xd8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <SystemInit+0xd8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <SystemInit+0xd8>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <SystemInit+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <SystemInit+0xec>)
 80028c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028cc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	52002000 	.word	0x52002000
 80028e0:	58024400 	.word	0x58024400
 80028e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80028e8:	02020200 	.word	0x02020200
 80028ec:	01ff0000 	.word	0x01ff0000
 80028f0:	01010280 	.word	0x01010280
 80028f4:	52004000 	.word	0x52004000

080028f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002930 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028fc:	f7ff ff84 	bl	8002808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002926:	f00e f9cb 	bl	8010cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292a:	f7fe f839 	bl	80009a0 <main>
  bx  lr
 800292e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002934:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002938:	24000198 	.word	0x24000198
  ldr r2, =_sidata
 800293c:	08011bf0 	.word	0x08011bf0
  ldr r2, =_sbss
 8002940:	24000198 	.word	0x24000198
  ldr r4, =_ebss
 8002944:	2400248c 	.word	0x2400248c

08002948 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC_IRQHandler>
	...

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002952:	2003      	movs	r0, #3
 8002954:	f001 fec8 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002958:	f005 ff14 	bl	8008784 <HAL_RCC_GetSysClockFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_Init+0x68>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	4913      	ldr	r1, [pc, #76]	; (80029b8 <HAL_Init+0x6c>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
 8002974:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_Init+0x68>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_Init+0x6c>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_Init+0x70>)
 800298e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_Init+0x74>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f814 	bl	80029c4 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e002      	b.n	80029ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029a6:	f7ff f957 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	58024400 	.word	0x58024400
 80029b8:	080119c8 	.word	0x080119c8
 80029bc:	24000018 	.word	0x24000018
 80029c0:	24000014 	.word	0x24000014

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_InitTick+0x60>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e021      	b.n	8002a1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_InitTick+0x64>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_InitTick+0x60>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fead 	bl	800474e <HAL_SYSTICK_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00e      	b.n	8002a1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d80a      	bhi.n	8002a1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a04:	2200      	movs	r2, #0
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f001 fe77 	bl	80046fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <HAL_InitTick+0x68>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	24000020 	.word	0x24000020
 8002a28:	24000014 	.word	0x24000014
 8002a2c:	2400001c 	.word	0x2400001c

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	24000020 	.word	0x24000020
 8002a54:	24000bb0 	.word	0x24000bb0

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	24000bb0 	.word	0x24000bb0

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	24000020 	.word	0x24000020

08002ab8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	58000400 	.word	0x58000400

08002ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <LL_ADC_SetOffset+0x60>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10b      	bne.n	8002b88 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b86:	e00b      	b.n	8002ba0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	58026000 	.word	0x58026000

08002bb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	611a      	str	r2, [r3, #16]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3360      	adds	r3, #96	; 0x60
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	601a      	str	r2, [r3, #0]
  }
}
 8002c42:	bf00      	nop
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	58026000 	.word	0x58026000

08002c54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10e      	bne.n	8002c86 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	58026000 	.word	0x58026000

08002c98 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <LL_ADC_SetOffsetSign+0x40>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10e      	bne.n	8002cca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3360      	adds	r3, #96	; 0x60
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	58026000 	.word	0x58026000

08002cdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3360      	adds	r3, #96	; 0x60
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <LL_ADC_SetOffsetState+0x50>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d0e:	e007      	b.n	8002d20 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	58026000 	.word	0x58026000

08002d30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3330      	adds	r3, #48	; 0x30
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	211f      	movs	r1, #31
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	401a      	ands	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	f003 011f 	and.w	r1, r3, #31
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3314      	adds	r3, #20
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	0e5b      	lsrs	r3, r3, #25
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	4413      	add	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	0d1b      	lsrs	r3, r3, #20
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2107      	movs	r1, #7
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	401a      	ands	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	0d1b      	lsrs	r3, r3, #20
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d115      	bne.n	8002e6c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0318 	and.w	r3, r3, #24
 8002e56:	4914      	ldr	r1, [pc, #80]	; (8002ea8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e58:	40d9      	lsrs	r1, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002e6a:	e014      	b.n	8002e96 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f003 0318 	and.w	r3, r3, #24
 8002e82:	4909      	ldr	r1, [pc, #36]	; (8002ea8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e84:	40d9      	lsrs	r1, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	400b      	ands	r3, r1
 8002e8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	58026000 	.word	0x58026000
 8002ea8:	000fffff 	.word	0x000fffff

08002eac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	5fffffc0 	.word	0x5fffffc0

08002f08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1c:	d101      	bne.n	8002f22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	6fffffc0 	.word	0x6fffffc0

08002f58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <LL_ADC_IsEnabled+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <LL_ADC_IsEnabled+0x1a>
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d101      	bne.n	8002fbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d101      	bne.n	8002fe4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1ee      	b.n	80033ec <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fe fe35 	bl	8001c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff67 	bl	8002f08 <LL_ADC_IsDeepPowerDownEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff4d 	bl	8002ee4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff82 	bl	8002f58 <LL_ADC_IsInternalRegulatorEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d114      	bne.n	8003084 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff66 	bl	8002f30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003064:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_ADC_Init+0x2ac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	4a8e      	ldr	r2, [pc, #568]	; (80032a4 <HAL_ADC_Init+0x2b0>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	3301      	adds	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003076:	e002      	b.n	800307e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3b01      	subs	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f9      	bne.n	8003078 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff65 	bl	8002f58 <LL_ADC_IsInternalRegulatorEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff76 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 80030ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 8188 	bne.w	80033da <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8184 	bne.w	80033da <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030da:	f043 0202 	orr.w	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ff4a 	bl	8002f80 <LL_ADC_IsEnabled>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d136      	bne.n	8003160 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	; (80032a8 <HAL_ADC_Init+0x2b4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x112>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_ADC_Init+0x2b8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10e      	bne.n	8003124 <HAL_ADC_Init+0x130>
 8003106:	4868      	ldr	r0, [pc, #416]	; (80032a8 <HAL_ADC_Init+0x2b4>)
 8003108:	f7ff ff3a 	bl	8002f80 <LL_ADC_IsEnabled>
 800310c:	4604      	mov	r4, r0
 800310e:	4867      	ldr	r0, [pc, #412]	; (80032ac <HAL_ADC_Init+0x2b8>)
 8003110:	f7ff ff36 	bl	8002f80 <LL_ADC_IsEnabled>
 8003114:	4603      	mov	r3, r0
 8003116:	4323      	orrs	r3, r4
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e008      	b.n	8003136 <HAL_ADC_Init+0x142>
 8003124:	4862      	ldr	r0, [pc, #392]	; (80032b0 <HAL_ADC_Init+0x2bc>)
 8003126:	f7ff ff2b 	bl	8002f80 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d012      	beq.n	8003160 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5a      	ldr	r2, [pc, #360]	; (80032a8 <HAL_ADC_Init+0x2b4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_ADC_Init+0x15a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_ADC_Init+0x2b8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_ADC_Init+0x15e>
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_ADC_Init+0x2c0>)
 8003150:	e000      	b.n	8003154 <HAL_ADC_Init+0x160>
 8003152:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <HAL_ADC_Init+0x2c4>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7ff fcc2 	bl	8002ae4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_ADC_Init+0x2bc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d129      	bne.n	80031be <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7e5b      	ldrb	r3, [r3, #25]
 800316e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003174:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800317a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d013      	beq.n	80031ac <HAL_ADC_Init+0x1b8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b0c      	cmp	r3, #12
 800318a:	d00d      	beq.n	80031a8 <HAL_ADC_Init+0x1b4>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b1c      	cmp	r3, #28
 8003192:	d007      	beq.n	80031a4 <HAL_ADC_Init+0x1b0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b18      	cmp	r3, #24
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_Init+0x1ac>
 800319c:	2318      	movs	r3, #24
 800319e:	e006      	b.n	80031ae <HAL_ADC_Init+0x1ba>
 80031a0:	2300      	movs	r3, #0
 80031a2:	e004      	b.n	80031ae <HAL_ADC_Init+0x1ba>
 80031a4:	2310      	movs	r3, #16
 80031a6:	e002      	b.n	80031ae <HAL_ADC_Init+0x1ba>
 80031a8:	2308      	movs	r3, #8
 80031aa:	e000      	b.n	80031ae <HAL_ADC_Init+0x1ba>
 80031ac:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80031ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e00e      	b.n	80031dc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7e5b      	ldrb	r3, [r3, #25]
 80031c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d106      	bne.n	80031f4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	3b01      	subs	r3, #1
 80031ec:	045b      	lsls	r3, r3, #17
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_ADC_Init+0x2bc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d115      	bne.n	8003246 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_ADC_Init+0x2c8>)
 8003222:	4013      	ands	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	69b9      	ldr	r1, [r7, #24]
 800322a:	430b      	orrs	r3, r1
 800322c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	611a      	str	r2, [r3, #16]
 8003244:	e009      	b.n	800325a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <HAL_ADC_Init+0x2cc>)
 800324e:	4013      	ands	r3, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	69b9      	ldr	r1, [r7, #24]
 8003256:	430b      	orrs	r3, r1
 8003258:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fea1 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 8003264:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff feae 	bl	8002fcc <LL_ADC_INJ_IsConversionOngoing>
 8003270:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f040 808e 	bne.w	8003396 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 808a 	bne.w	8003396 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_ADC_Init+0x2bc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d11b      	bne.n	80032c4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7e1b      	ldrb	r3, [r3, #24]
 8003290:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003298:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	e018      	b.n	80032d2 <HAL_ADC_Init+0x2de>
 80032a0:	24000014 	.word	0x24000014
 80032a4:	053e2d63 	.word	0x053e2d63
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022100 	.word	0x40022100
 80032b0:	58026000 	.word	0x58026000
 80032b4:	40022300 	.word	0x40022300
 80032b8:	58026300 	.word	0x58026300
 80032bc:	fff04007 	.word	0xfff04007
 80032c0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7e1b      	ldrb	r3, [r3, #24]
 80032c8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_ADC_Init+0x400>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	69b9      	ldr	r1, [r7, #24]
 80032e2:	430b      	orrs	r3, r1
 80032e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d137      	bne.n	8003360 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3f      	ldr	r2, [pc, #252]	; (80033f8 <HAL_ADC_Init+0x404>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d116      	bne.n	800332e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_ADC_Init+0x408>)
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003318:	4311      	orrs	r1, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800331e:	430a      	orrs	r2, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	e020      	b.n	8003370 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_ADC_Init+0x40c>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800333c:	3a01      	subs	r2, #1
 800333e:	0411      	lsls	r1, r2, #16
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	e007      	b.n	8003370 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <HAL_ADC_Init+0x404>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d002      	beq.n	8003396 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 ffbb 	bl	800430c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d10c      	bne.n	80033b8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f023 010f 	bic.w	r1, r3, #15
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
 80033b6:	e007      	b.n	80033c8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 020f 	bic.w	r2, r2, #15
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	f023 0303 	bic.w	r3, r3, #3
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	661a      	str	r2, [r3, #96]	; 0x60
 80033d8:	e007      	b.n	80033ea <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033de:	f043 0210 	orr.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3724      	adds	r7, #36	; 0x24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd90      	pop	{r4, r7, pc}
 80033f4:	ffffbffc 	.word	0xffffbffc
 80033f8:	58026000 	.word	0x58026000
 80033fc:	fc00f81f 	.word	0xfc00f81f
 8003400:	fc00f81e 	.word	0xfc00f81e

08003404 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a87      	ldr	r2, [pc, #540]	; (8003644 <HAL_ADC_IRQHandler+0x240>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_ADC_IRQHandler+0x30>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a86      	ldr	r2, [pc, #536]	; (8003648 <HAL_ADC_IRQHandler+0x244>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_ADC_IRQHandler+0x34>
 8003434:	4b85      	ldr	r3, [pc, #532]	; (800364c <HAL_ADC_IRQHandler+0x248>)
 8003436:	e000      	b.n	800343a <HAL_ADC_IRQHandler+0x36>
 8003438:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_ADC_IRQHandler+0x24c>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fd36 	bl	8002eac <LL_ADC_GetMultimode>
 8003440:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_ADC_IRQHandler+0x78>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d012      	beq.n	800347c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f001 f860 	bl	8004534 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_ADC_IRQHandler+0x8c>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8083 	beq.w	80035a2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d07d      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fc34 	bl	8002d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d062      	beq.n	8003594 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a5d      	ldr	r2, [pc, #372]	; (8003648 <HAL_ADC_IRQHandler+0x244>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d002      	beq.n	80034de <HAL_ADC_IRQHandler+0xda>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_IRQHandler+0xdc>
 80034de:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_ADC_IRQHandler+0x240>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d008      	beq.n	80034fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d002      	beq.n	80034fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d104      	bne.n	8003504 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	e00c      	b.n	800351e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_ADC_IRQHandler+0x244>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d002      	beq.n	8003514 <HAL_ADC_IRQHandler+0x110>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e000      	b.n	8003516 <HAL_ADC_IRQHandler+0x112>
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <HAL_ADC_IRQHandler+0x240>)
 8003516:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d135      	bne.n	8003594 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d12e      	bne.n	8003594 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fd33 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11a      	bne.n	800357c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 020c 	bic.w	r2, r2, #12
 8003554:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d112      	bne.n	8003594 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	; 0x60
 800357a:	e00b      	b.n	8003594 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f96f 	bl	8003878 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	220c      	movs	r2, #12
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_ADC_IRQHandler+0x1b2>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a0 	beq.w	8003702 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 809a 	beq.w	8003702 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fbdf 	bl	8002dae <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035f0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fb9a 	bl	8002d30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035fc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_ADC_IRQHandler+0x244>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d002      	beq.n	800360e <HAL_ADC_IRQHandler+0x20a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	e000      	b.n	8003610 <HAL_ADC_IRQHandler+0x20c>
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_ADC_IRQHandler+0x240>)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	4293      	cmp	r3, r2
 8003616:	d008      	beq.n	800362a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d002      	beq.n	800362a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d104      	bne.n	8003634 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	e014      	b.n	800365e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a03      	ldr	r2, [pc, #12]	; (8003648 <HAL_ADC_IRQHandler+0x244>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00a      	beq.n	8003654 <HAL_ADC_IRQHandler+0x250>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	e008      	b.n	8003656 <HAL_ADC_IRQHandler+0x252>
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300
 8003654:	4b84      	ldr	r3, [pc, #528]	; (8003868 <HAL_ADC_IRQHandler+0x464>)
 8003656:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d047      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_ADC_IRQHandler+0x27a>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d03f      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800367a:	2b00      	cmp	r3, #0
 800367c:	d13a      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d133      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d12e      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fc96 	bl	8002fcc <LL_ADC_INJ_IsConversionOngoing>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11a      	bne.n	80036dc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d112      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60
 80036da:	e00b      	b.n	80036f4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fef5 	bl	80044e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2260      	movs	r2, #96	; 0x60
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <HAL_ADC_IRQHandler+0x32c>
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8b2 	bl	800388c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <HAL_ADC_IRQHandler+0x35c>
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003748:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fedb 	bl	800450c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <HAL_ADC_IRQHandler+0x38c>
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fecd 	bl	8004520 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d043      	beq.n	8003822 <HAL_ADC_IRQHandler+0x41e>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03e      	beq.n	8003822 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80037ac:	2301      	movs	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
 80037b0:	e021      	b.n	80037f6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_ADC_IRQHandler+0x464>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_IRQHandler+0x3c8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a29      	ldr	r2, [pc, #164]	; (800386c <HAL_ADC_IRQHandler+0x468>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x3cc>
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_ADC_IRQHandler+0x46c>)
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_IRQHandler+0x3ce>
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_ADC_IRQHandler+0x470>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fb78 	bl	8002ec8 <LL_ADC_GetMultiDMATransfer>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037de:	2301      	movs	r3, #1
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e008      	b.n	80037f6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80037f2:	2301      	movs	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10e      	bne.n	800381a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380c:	f043 0202 	orr.w	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f843 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2210      	movs	r2, #16
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <HAL_ADC_IRQHandler+0x45a>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	2b00      	cmp	r3, #0
 8003834:	d013      	beq.n	800385e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	f043 0208 	orr.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fe4d 	bl	80044f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000
 800386c:	40022100 	.word	0x40022100
 8003870:	40022300 	.word	0x40022300
 8003874:	58026300 	.word	0x58026300

08003878 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b0b9      	sub	sp, #228	; 0xe4
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ce:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4ab3      	ldr	r2, [pc, #716]	; (8003ba4 <HAL_ADC_ConfigChannel+0x2f0>)
 80038d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x34>
 80038e2:	2302      	movs	r3, #2
 80038e4:	f000 bcfa 	b.w	80042dc <HAL_ADC_ConfigChannel+0xa28>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fb56 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 84de 	bne.w	80042be <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4aa8      	ldr	r2, [pc, #672]	; (8003ba8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d033      	beq.n	8003974 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003914:	2b00      	cmp	r3, #0
 8003916:	d108      	bne.n	800392a <HAL_ADC_ConfigChannel+0x76>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2201      	movs	r2, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	e01d      	b.n	8003966 <HAL_ADC_ConfigChannel+0xb2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800393e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800394e:	2320      	movs	r3, #32
 8003950:	e004      	b.n	800395c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	2201      	movs	r2, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	69d1      	ldr	r1, [r2, #28]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f7ff f9e8 	bl	8002d56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fb0b 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 8003990:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fb17 	bl	8002fcc <LL_ADC_INJ_IsConversionOngoing>
 800399e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 8270 	bne.w	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 826b 	bne.w	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f7ff fa06 	bl	8002dd4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a76      	ldr	r2, [pc, #472]	; (8003ba8 <HAL_ADC_ConfigChannel+0x2f4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10d      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ec:	e032      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039ee:	4b6f      	ldr	r3, [pc, #444]	; (8003bac <HAL_ADC_ConfigChannel+0x2f8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fa:	d10b      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x160>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	e01d      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x19c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x186>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	e00a      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x19c>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d048      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6919      	ldr	r1, [r3, #16]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6c:	f7ff f86e 	bl	8002b4c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a4c      	ldr	r2, [pc, #304]	; (8003ba8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d119      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6919      	ldr	r1, [r3, #16]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7ff f906 	bl	8002c98 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6919      	ldr	r1, [r3, #16]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1f0>
 8003a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x1f2>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f7ff f8d4 	bl	8002c54 <LL_ADC_SetOffsetSaturation>
 8003aac:	e1ee      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6919      	ldr	r1, [r3, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x212>
 8003ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ac4:	e000      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x214>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff f8a1 	bl	8002c10 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6919      	ldr	r1, [r3, #16]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	7e1b      	ldrb	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x230>
 8003ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x232>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7ff f878 	bl	8002bdc <LL_ADC_SetDataRightShift>
 8003aec:	e1ce      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <HAL_ADC_ConfigChannel+0x2f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	f040 8181 	bne.w	8003dfc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f855 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x272>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff f84a 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	0e9b      	lsrs	r3, r3, #26
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	e01e      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x2b0>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f83f 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003b44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003b4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003b54:	2320      	movs	r3, #32
 8003b56:	e004      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b5c:	fab3 f383 	clz	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x2c8>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	e01e      	b.n	8003bba <HAL_ADC_ConfigChannel+0x306>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003b98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003ba0:	2320      	movs	r3, #32
 8003ba2:	e00a      	b.n	8003bba <HAL_ADC_ConfigChannel+0x306>
 8003ba4:	47ff0000 	.word	0x47ff0000
 8003ba8:	58026000 	.word	0x58026000
 8003bac:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d106      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f888 	bl	8002cdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe ffec 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x344>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fe ffe1 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	f003 021f 	and.w	r2, r3, #31
 8003bf6:	e01e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x382>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe ffd6 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e004      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x39a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0e9b      	lsrs	r3, r3, #26
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	e018      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x3cc>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003c76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f825 	bl	8002cdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe ff89 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x40a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe ff7e 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	e01e      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x448>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe ff73 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e004      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x460>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	e014      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x48a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003d30:	2320      	movs	r3, #32
 8003d32:	e004      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d106      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ffc6 	bl	8002cdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2103      	movs	r1, #3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe ff2a 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x4c8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe ff1f 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	e017      	b.n	8003dac <HAL_ADC_ConfigChannel+0x4f8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2103      	movs	r1, #3
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff14 	bl	8002bb0 <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x510>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	e011      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x534>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d14f      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2103      	movs	r1, #3
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe ff71 	bl	8002cdc <LL_ADC_SetOffsetState>
 8003dfa:	e047      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	069b      	lsls	r3, r3, #26
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	069b      	lsls	r3, r3, #26
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e42:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e66:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	069b      	lsls	r3, r3, #26
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff f875 	bl	8002f80 <LL_ADC_IsEnabled>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8219 	bne.w	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7fe ffbe 	bl	8002e2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4aa1      	ldr	r2, [pc, #644]	; (800413c <HAL_ADC_ConfigChannel+0x888>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f040 812e 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x630>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e019      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x664>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	bf94      	ite	ls
 8003f12:	2301      	movls	r3, #1
 8003f14:	2300      	movhi	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d079      	beq.n	8004010 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x684>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	0e9b      	lsrs	r3, r3, #26
 8003f2e:	3301      	adds	r3, #1
 8003f30:	069b      	lsls	r3, r3, #26
 8003f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f36:	e015      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x6b0>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e003      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x6d0>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	e017      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x700>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e003      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	ea42 0103 	orr.w	r1, r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x726>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	051b      	lsls	r3, r3, #20
 8003fd8:	e018      	b.n	800400c <HAL_ADC_ConfigChannel+0x758>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e003      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	4613      	mov	r3, r2
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4413      	add	r3, r2
 800400a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400c:	430b      	orrs	r3, r1
 800400e:	e07e      	b.n	800410e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_ADC_ConfigChannel+0x778>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	3301      	adds	r3, #1
 8004024:	069b      	lsls	r3, r3, #26
 8004026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800402a:	e015      	b.n	8004058 <HAL_ADC_ConfigChannel+0x7a4>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	069b      	lsls	r3, r3, #26
 8004054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x7c4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	3301      	adds	r3, #1
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	e017      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x7f4>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	61bb      	str	r3, [r7, #24]
  return result;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x820>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	3301      	adds	r3, #1
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	3b1e      	subs	r3, #30
 80040cc:	051b      	lsls	r3, r3, #20
 80040ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040d2:	e01b      	b.n	800410c <HAL_ADC_ConfigChannel+0x858>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	60fb      	str	r3, [r7, #12]
  return result;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f003 021f 	and.w	r2, r3, #31
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	3b1e      	subs	r3, #30
 8004106:	051b      	lsls	r3, r3, #20
 8004108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800410c:	430b      	orrs	r3, r1
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	4619      	mov	r1, r3
 8004114:	f7fe fe5e 	bl	8002dd4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f280 80d7 	bge.w	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a06      	ldr	r2, [pc, #24]	; (8004140 <HAL_ADC_ConfigChannel+0x88c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_ADC_ConfigChannel+0x882>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_ADC_ConfigChannel+0x890>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10a      	bne.n	800414c <HAL_ADC_ConfigChannel+0x898>
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <HAL_ADC_ConfigChannel+0x894>)
 8004138:	e009      	b.n	800414e <HAL_ADC_ConfigChannel+0x89a>
 800413a:	bf00      	nop
 800413c:	47ff0000 	.word	0x47ff0000
 8004140:	40022000 	.word	0x40022000
 8004144:	40022100 	.word	0x40022100
 8004148:	40022300 	.word	0x40022300
 800414c:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <HAL_ADC_ConfigChannel+0xa30>)
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fcee 	bl	8002b30 <LL_ADC_GetCommonPathInternalCh>
 8004154:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a62      	ldr	r2, [pc, #392]	; (80042e8 <HAL_ADC_ConfigChannel+0xa34>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_ADC_ConfigChannel+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a61      	ldr	r2, [pc, #388]	; (80042ec <HAL_ADC_ConfigChannel+0xa38>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d10e      	bne.n	800418a <HAL_ADC_ConfigChannel+0x8d6>
 800416c:	485e      	ldr	r0, [pc, #376]	; (80042e8 <HAL_ADC_ConfigChannel+0xa34>)
 800416e:	f7fe ff07 	bl	8002f80 <LL_ADC_IsEnabled>
 8004172:	4604      	mov	r4, r0
 8004174:	485d      	ldr	r0, [pc, #372]	; (80042ec <HAL_ADC_ConfigChannel+0xa38>)
 8004176:	f7fe ff03 	bl	8002f80 <LL_ADC_IsEnabled>
 800417a:	4603      	mov	r3, r0
 800417c:	4323      	orrs	r3, r4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	e008      	b.n	800419c <HAL_ADC_ConfigChannel+0x8e8>
 800418a:	4859      	ldr	r0, [pc, #356]	; (80042f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800418c:	f7fe fef8 	bl	8002f80 <LL_ADC_IsEnabled>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8084 	beq.w	80042aa <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a53      	ldr	r2, [pc, #332]	; (80042f4 <HAL_ADC_ConfigChannel+0xa40>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d132      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x95e>
 80041ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d12c      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a4c      	ldr	r2, [pc, #304]	; (80042f0 <HAL_ADC_ConfigChannel+0xa3c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	f040 8086 	bne.w	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a47      	ldr	r2, [pc, #284]	; (80042e8 <HAL_ADC_ConfigChannel+0xa34>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x924>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a46      	ldr	r2, [pc, #280]	; (80042ec <HAL_ADC_ConfigChannel+0xa38>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x928>
 80041d8:	4a47      	ldr	r2, [pc, #284]	; (80042f8 <HAL_ADC_ConfigChannel+0xa44>)
 80041da:	e000      	b.n	80041de <HAL_ADC_ConfigChannel+0x92a>
 80041dc:	4a41      	ldr	r2, [pc, #260]	; (80042e4 <HAL_ADC_ConfigChannel+0xa30>)
 80041de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe fc8e 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_ADC_ConfigChannel+0xa48>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	4a42      	ldr	r2, [pc, #264]	; (8004300 <HAL_ADC_ConfigChannel+0xa4c>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	3301      	adds	r3, #1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004202:	e002      	b.n	800420a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	3b01      	subs	r3, #1
 8004208:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f9      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004210:	e05e      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <HAL_ADC_ConfigChannel+0xa50>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d120      	bne.n	800425e <HAL_ADC_ConfigChannel+0x9aa>
 800421c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d14e      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_ADC_ConfigChannel+0xa34>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x992>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2a      	ldr	r2, [pc, #168]	; (80042ec <HAL_ADC_ConfigChannel+0xa38>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_ADC_ConfigChannel+0x996>
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <HAL_ADC_ConfigChannel+0xa44>)
 8004248:	e000      	b.n	800424c <HAL_ADC_ConfigChannel+0x998>
 800424a:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <HAL_ADC_ConfigChannel+0xa30>)
 800424c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fc57 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800425c:	e038      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a29      	ldr	r2, [pc, #164]	; (8004308 <HAL_ADC_ConfigChannel+0xa54>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d133      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
 8004268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800426c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d12d      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d128      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_ADC_ConfigChannel+0xa34>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_ADC_ConfigChannel+0x9de>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <HAL_ADC_ConfigChannel+0xa38>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x9e2>
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_ADC_ConfigChannel+0xa44>)
 8004294:	e000      	b.n	8004298 <HAL_ADC_ConfigChannel+0x9e4>
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_ADC_ConfigChannel+0xa30>)
 8004298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800429c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fe fc31 	bl	8002b0a <LL_ADC_SetCommonPathInternalCh>
 80042a8:	e012      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80042bc:	e008      	b.n	80042d0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042d8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80042dc:	4618      	mov	r0, r3
 80042de:	37e4      	adds	r7, #228	; 0xe4
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	58026300 	.word	0x58026300
 80042e8:	40022000 	.word	0x40022000
 80042ec:	40022100 	.word	0x40022100
 80042f0:	58026000 	.word	0x58026000
 80042f4:	c7520000 	.word	0xc7520000
 80042f8:	40022300 	.word	0x40022300
 80042fc:	24000014 	.word	0x24000014
 8004300:	053e2d63 	.word	0x053e2d63
 8004304:	c3210000 	.word	0xc3210000
 8004308:	cb840000 	.word	0xcb840000

0800430c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6b      	ldr	r2, [pc, #428]	; (80044c8 <ADC_ConfigureBoostMode+0x1bc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <ADC_ConfigureBoostMode+0x1c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6a      	ldr	r2, [pc, #424]	; (80044cc <ADC_ConfigureBoostMode+0x1c0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d109      	bne.n	800433c <ADC_ConfigureBoostMode+0x30>
 8004328:	4b69      	ldr	r3, [pc, #420]	; (80044d0 <ADC_ConfigureBoostMode+0x1c4>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e008      	b.n	800434e <ADC_ConfigureBoostMode+0x42>
 800433c:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <ADC_ConfigureBoostMode+0x1c8>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01c      	beq.n	800438c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004352:	f004 fb91 	bl	8008a78 <HAL_RCC_GetHCLKFreq>
 8004356:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004360:	d010      	beq.n	8004384 <ADC_ConfigureBoostMode+0x78>
 8004362:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004366:	d871      	bhi.n	800444c <ADC_ConfigureBoostMode+0x140>
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d002      	beq.n	8004374 <ADC_ConfigureBoostMode+0x68>
 800436e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004372:	d16b      	bne.n	800444c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	60fb      	str	r3, [r7, #12]
        break;
 8004382:	e066      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	60fb      	str	r3, [r7, #12]
        break;
 800438a:	e062      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800438c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004390:	f005 fac8 	bl	8009924 <HAL_RCCEx_GetPeriphCLKFreq>
 8004394:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800439e:	d051      	beq.n	8004444 <ADC_ConfigureBoostMode+0x138>
 80043a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043a4:	d854      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043aa:	d047      	beq.n	800443c <ADC_ConfigureBoostMode+0x130>
 80043ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043b0:	d84e      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043b6:	d03d      	beq.n	8004434 <ADC_ConfigureBoostMode+0x128>
 80043b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043bc:	d848      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c2:	d033      	beq.n	800442c <ADC_ConfigureBoostMode+0x120>
 80043c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043c8:	d842      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80043ce:	d029      	beq.n	8004424 <ADC_ConfigureBoostMode+0x118>
 80043d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80043d4:	d83c      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80043da:	d01a      	beq.n	8004412 <ADC_ConfigureBoostMode+0x106>
 80043dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80043e0:	d836      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80043e6:	d014      	beq.n	8004412 <ADC_ConfigureBoostMode+0x106>
 80043e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80043ec:	d830      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f2:	d00e      	beq.n	8004412 <ADC_ConfigureBoostMode+0x106>
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d82a      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 80043fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043fe:	d008      	beq.n	8004412 <ADC_ConfigureBoostMode+0x106>
 8004400:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004404:	d824      	bhi.n	8004450 <ADC_ConfigureBoostMode+0x144>
 8004406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800440a:	d002      	beq.n	8004412 <ADC_ConfigureBoostMode+0x106>
 800440c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004410:	d11e      	bne.n	8004450 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0c9b      	lsrs	r3, r3, #18
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	60fb      	str	r3, [r7, #12]
        break;
 8004422:	e016      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	60fb      	str	r3, [r7, #12]
        break;
 800442a:	e012      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	60fb      	str	r3, [r7, #12]
        break;
 8004432:	e00e      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	60fb      	str	r3, [r7, #12]
        break;
 800443a:	e00a      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	09db      	lsrs	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]
        break;
 8004442:	e006      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	60fb      	str	r3, [r7, #12]
        break;
 800444a:	e002      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
        break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004450:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <ADC_ConfigureBoostMode+0x1cc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d808      	bhi.n	8004472 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800446e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004470:	e025      	b.n	80044be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <ADC_ConfigureBoostMode+0x1d0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d80a      	bhi.n	8004490 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448c:	609a      	str	r2, [r3, #8]
}
 800448e:	e016      	b.n	80044be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <ADC_ConfigureBoostMode+0x1d4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d80a      	bhi.n	80044ae <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044aa:	609a      	str	r2, [r3, #8]
}
 80044ac:	e007      	b.n	80044be <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80044bc:	609a      	str	r2, [r3, #8]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40022000 	.word	0x40022000
 80044cc:	40022100 	.word	0x40022100
 80044d0:	40022300 	.word	0x40022300
 80044d4:	58026300 	.word	0x58026300
 80044d8:	005f5e10 	.word	0x005f5e10
 80044dc:	00bebc20 	.word	0x00bebc20
 80044e0:	017d7840 	.word	0x017d7840

080044e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <__NVIC_SetPriorityGrouping+0x40>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <__NVIC_SetPriorityGrouping+0x44>)
 8004572:	4313      	orrs	r3, r2
 8004574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <__NVIC_SetPriorityGrouping+0x40>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	60d3      	str	r3, [r2, #12]
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000ed00 	.word	0xe000ed00
 800458c:	05fa0000 	.word	0x05fa0000

08004590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	f003 0307 	and.w	r3, r3, #7
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	db0b      	blt.n	80045d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	f003 021f 	and.w	r2, r3, #31
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <__NVIC_EnableIRQ+0x38>)
 80045c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2001      	movs	r0, #1
 80045ce:	fa00 f202 	lsl.w	r2, r0, r2
 80045d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db0a      	blt.n	8004612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	490c      	ldr	r1, [pc, #48]	; (8004634 <__NVIC_SetPriority+0x4c>)
 8004602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	440b      	add	r3, r1
 800460c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004610:	e00a      	b.n	8004628 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4908      	ldr	r1, [pc, #32]	; (8004638 <__NVIC_SetPriority+0x50>)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	3b04      	subs	r3, #4
 8004620:	0112      	lsls	r2, r2, #4
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	440b      	add	r3, r1
 8004626:	761a      	strb	r2, [r3, #24]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000e100 	.word	0xe000e100
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f1c3 0307 	rsb	r3, r3, #7
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf28      	it	cs
 800465a:	2304      	movcs	r3, #4
 800465c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3304      	adds	r3, #4
 8004662:	2b06      	cmp	r3, #6
 8004664:	d902      	bls.n	800466c <NVIC_EncodePriority+0x30>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3b03      	subs	r3, #3
 800466a:	e000      	b.n	800466e <NVIC_EncodePriority+0x32>
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004684:	f04f 31ff 	mov.w	r1, #4294967295
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43d9      	mvns	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	4313      	orrs	r3, r2
         );
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	; 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b4:	d301      	bcc.n	80046ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <SysTick_Config+0x40>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046c2:	210f      	movs	r1, #15
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	f7ff ff8e 	bl	80045e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <SysTick_Config+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046d2:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <SysTick_Config+0x40>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ff29 	bl	8004548 <__NVIC_SetPriorityGrouping>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	4603      	mov	r3, r0
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff40 	bl	8004590 <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff90 	bl	800463c <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5f 	bl	80045e8 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff33 	bl	80045ac <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa4 	bl	80046a4 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e054      	b.n	8004824 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7f5b      	ldrb	r3, [r3, #29]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fad8 	bl	8001d40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10c      	bne.n	80047b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_CRC_Init+0xc4>)
 80047a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0218 	bic.w	r2, r2, #24
 80047b4:	609a      	str	r2, [r3, #8]
 80047b6:	e00c      	b.n	80047d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6899      	ldr	r1, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f834 	bl	8004830 <HAL_CRCEx_Polynomial_Set>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e028      	b.n	8004824 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	795b      	ldrb	r3, [r3, #5]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	611a      	str	r2, [r3, #16]
 80047e4:	e004      	b.n	80047f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6912      	ldr	r2, [r2, #16]
 80047ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699a      	ldr	r2, [r3, #24]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	04c11db7 	.word	0x04c11db7

08004830 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004840:	231f      	movs	r3, #31
 8004842:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004844:	bf00      	nop
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	613a      	str	r2, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_CRCEx_Polynomial_Set+0x34>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_CRCEx_Polynomial_Set+0x16>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b18      	cmp	r3, #24
 8004868:	d846      	bhi.n	80048f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <HAL_CRCEx_Polynomial_Set+0x40>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048ff 	.word	0x080048ff
 8004874:	080048f9 	.word	0x080048f9
 8004878:	080048f9 	.word	0x080048f9
 800487c:	080048f9 	.word	0x080048f9
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048f9 	.word	0x080048f9
 8004890:	080048ed 	.word	0x080048ed
 8004894:	080048f9 	.word	0x080048f9
 8004898:	080048f9 	.word	0x080048f9
 800489c:	080048f9 	.word	0x080048f9
 80048a0:	080048f9 	.word	0x080048f9
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	080048f9 	.word	0x080048f9
 80048ac:	080048f9 	.word	0x080048f9
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048f9 	.word	0x080048f9
 80048b8:	080048f9 	.word	0x080048f9
 80048bc:	080048f9 	.word	0x080048f9
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	080048f9 	.word	0x080048f9
 80048cc:	080048f9 	.word	0x080048f9
 80048d0:	080048d5 	.word	0x080048d5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d913      	bls.n	8004902 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048de:	e010      	b.n	8004902 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b07      	cmp	r3, #7
 80048e4:	d90f      	bls.n	8004906 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048ea:	e00c      	b.n	8004906 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	d90b      	bls.n	800490a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80048f6:	e008      	b.n	800490a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	75fb      	strb	r3, [r7, #23]
      break;
 80048fc:	e006      	b.n	800490c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80048fe:	bf00      	nop
 8004900:	e004      	b.n	800490c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800490a:	bf00      	nop
  }
  if (status == HAL_OK)
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 0118 	bic.w	r1, r3, #24
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	430a      	orrs	r2, r1
 800492c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004944:	f7fe f888 	bl	8002a58 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e314      	b.n	8004f7e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a66      	ldr	r2, [pc, #408]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d04a      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a65      	ldr	r2, [pc, #404]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d045      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a63      	ldr	r2, [pc, #396]	; (8004afc <HAL_DMA_Init+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d040      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a62      	ldr	r2, [pc, #392]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d03b      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d036      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d031      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02c      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d027      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a5a      	ldr	r2, [pc, #360]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d022      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a59      	ldr	r2, [pc, #356]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d01d      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d018      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a54      	ldr	r2, [pc, #336]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00e      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a53      	ldr	r2, [pc, #332]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d009      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a51      	ldr	r2, [pc, #324]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <HAL_DMA_Init+0xb8>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_DMA_Init+0xbc>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_DMA_Init+0xbe>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 813c 	beq.w	8004c78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a37      	ldr	r2, [pc, #220]	; (8004af4 <HAL_DMA_Init+0x1b8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <HAL_DMA_Init+0x1bc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a34      	ldr	r2, [pc, #208]	; (8004afc <HAL_DMA_Init+0x1c0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a33      	ldr	r2, [pc, #204]	; (8004b00 <HAL_DMA_Init+0x1c4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a31      	ldr	r2, [pc, #196]	; (8004b04 <HAL_DMA_Init+0x1c8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a30      	ldr	r2, [pc, #192]	; (8004b08 <HAL_DMA_Init+0x1cc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <HAL_DMA_Init+0x1d0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_DMA_Init+0x1d4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_DMA_Init+0x1d8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	; (8004b18 <HAL_DMA_Init+0x1dc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <HAL_DMA_Init+0x1e0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_DMA_Init+0x1e4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a25      	ldr	r2, [pc, #148]	; (8004b24 <HAL_DMA_Init+0x1e8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <HAL_DMA_Init+0x1ec>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <HAL_DMA_Init+0x1f0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_DMA_Init+0x174>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <HAL_DMA_Init+0x1f4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <HAL_DMA_Init+0x186>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_DMA_Init+0x196>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ad2:	e02f      	b.n	8004b34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad4:	f7fd ffc0 	bl	8002a58 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d928      	bls.n	8004b34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e244      	b.n	8004f7e <HAL_DMA_Init+0x642>
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1c8      	bne.n	8004ad4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4b84      	ldr	r3, [pc, #528]	; (8004d60 <HAL_DMA_Init+0x424>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d107      	bne.n	8004b98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	4313      	orrs	r3, r2
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b28      	cmp	r3, #40	; 0x28
 8004b9e:	d903      	bls.n	8004ba8 <HAL_DMA_Init+0x26c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba6:	d91f      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b3e      	cmp	r3, #62	; 0x3e
 8004bae:	d903      	bls.n	8004bb8 <HAL_DMA_Init+0x27c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b42      	cmp	r3, #66	; 0x42
 8004bb6:	d917      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b46      	cmp	r3, #70	; 0x46
 8004bbe:	d903      	bls.n	8004bc8 <HAL_DMA_Init+0x28c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b48      	cmp	r3, #72	; 0x48
 8004bc6:	d90f      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b4e      	cmp	r3, #78	; 0x4e
 8004bce:	d903      	bls.n	8004bd8 <HAL_DMA_Init+0x29c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b52      	cmp	r3, #82	; 0x52
 8004bd6:	d907      	bls.n	8004be8 <HAL_DMA_Init+0x2ac>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b73      	cmp	r3, #115	; 0x73
 8004bde:	d905      	bls.n	8004bec <HAL_DMA_Init+0x2b0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b77      	cmp	r3, #119	; 0x77
 8004be6:	d801      	bhi.n	8004bec <HAL_DMA_Init+0x2b0>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_DMA_Init+0x2b2>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 0307 	bic.w	r3, r3, #7
 8004c10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d117      	bne.n	8004c54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 f9b6 	bl	8005fa8 <DMA_CheckFifoParam>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2240      	movs	r2, #64	; 0x40
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e194      	b.n	8004f7e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 f8f1 	bl	8005e44 <DMA_CalcBaseAndBitshift>
 8004c62:	4603      	mov	r3, r0
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	223f      	movs	r2, #63	; 0x3f
 8004c70:	409a      	lsls	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	e0ca      	b.n	8004e0e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_DMA_Init+0x428>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a38      	ldr	r2, [pc, #224]	; (8004d68 <HAL_DMA_Init+0x42c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a36      	ldr	r2, [pc, #216]	; (8004d6c <HAL_DMA_Init+0x430>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <HAL_DMA_Init+0x434>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <HAL_DMA_Init+0x438>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <HAL_DMA_Init+0x43c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a30      	ldr	r2, [pc, #192]	; (8004d7c <HAL_DMA_Init+0x440>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_Init+0x38c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <HAL_DMA_Init+0x444>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_Init+0x390>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_DMA_Init+0x392>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8094 	beq.w	8004dfc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <HAL_DMA_Init+0x428>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d021      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <HAL_DMA_Init+0x42c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01c      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <HAL_DMA_Init+0x430>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d017      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_DMA_Init+0x434>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d012      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_DMA_Init+0x438>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00d      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_DMA_Init+0x43c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d008      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_DMA_Init+0x440>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <HAL_DMA_Init+0x3e6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_DMA_Init+0x444>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_DMA_Init+0x448>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d01d      	beq.n	8004d88 <HAL_DMA_Init+0x44c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d102      	bne.n	8004d5a <HAL_DMA_Init+0x41e>
 8004d54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d58:	e017      	b.n	8004d8a <HAL_DMA_Init+0x44e>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e015      	b.n	8004d8a <HAL_DMA_Init+0x44e>
 8004d5e:	bf00      	nop
 8004d60:	fe10803f 	.word	0xfe10803f
 8004d64:	58025408 	.word	0x58025408
 8004d68:	5802541c 	.word	0x5802541c
 8004d6c:	58025430 	.word	0x58025430
 8004d70:	58025444 	.word	0x58025444
 8004d74:	58025458 	.word	0x58025458
 8004d78:	5802546c 	.word	0x5802546c
 8004d7c:	58025480 	.word	0x58025480
 8004d80:	58025494 	.word	0x58025494
 8004d84:	fffe000f 	.word	0xfffe000f
 8004d88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004db8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b6e      	ldr	r3, [pc, #440]	; (8004f88 <HAL_DMA_Init+0x64c>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	4a6e      	ldr	r2, [pc, #440]	; (8004f8c <HAL_DMA_Init+0x650>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 f82f 	bl	8005e44 <DMA_CalcBaseAndBitshift>
 8004de6:	4603      	mov	r3, r0
 8004de8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	409a      	lsls	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e008      	b.n	8004e0e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0b7      	b.n	8004f7e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5f      	ldr	r2, [pc, #380]	; (8004f90 <HAL_DMA_Init+0x654>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d072      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5d      	ldr	r2, [pc, #372]	; (8004f94 <HAL_DMA_Init+0x658>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d06d      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a5c      	ldr	r2, [pc, #368]	; (8004f98 <HAL_DMA_Init+0x65c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d068      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5a      	ldr	r2, [pc, #360]	; (8004f9c <HAL_DMA_Init+0x660>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d063      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a59      	ldr	r2, [pc, #356]	; (8004fa0 <HAL_DMA_Init+0x664>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d05e      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a57      	ldr	r2, [pc, #348]	; (8004fa4 <HAL_DMA_Init+0x668>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d059      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_DMA_Init+0x66c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d054      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a54      	ldr	r2, [pc, #336]	; (8004fac <HAL_DMA_Init+0x670>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d04f      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a53      	ldr	r2, [pc, #332]	; (8004fb0 <HAL_DMA_Init+0x674>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d04a      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a51      	ldr	r2, [pc, #324]	; (8004fb4 <HAL_DMA_Init+0x678>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d045      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a50      	ldr	r2, [pc, #320]	; (8004fb8 <HAL_DMA_Init+0x67c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d040      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a4e      	ldr	r2, [pc, #312]	; (8004fbc <HAL_DMA_Init+0x680>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d03b      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4d      	ldr	r2, [pc, #308]	; (8004fc0 <HAL_DMA_Init+0x684>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d036      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a4b      	ldr	r2, [pc, #300]	; (8004fc4 <HAL_DMA_Init+0x688>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d031      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4a      	ldr	r2, [pc, #296]	; (8004fc8 <HAL_DMA_Init+0x68c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d02c      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a48      	ldr	r2, [pc, #288]	; (8004fcc <HAL_DMA_Init+0x690>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d027      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a47      	ldr	r2, [pc, #284]	; (8004fd0 <HAL_DMA_Init+0x694>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d022      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a45      	ldr	r2, [pc, #276]	; (8004fd4 <HAL_DMA_Init+0x698>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01d      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a44      	ldr	r2, [pc, #272]	; (8004fd8 <HAL_DMA_Init+0x69c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d018      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_DMA_Init+0x6a0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a41      	ldr	r2, [pc, #260]	; (8004fe0 <HAL_DMA_Init+0x6a4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00e      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3f      	ldr	r2, [pc, #252]	; (8004fe4 <HAL_DMA_Init+0x6a8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d009      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <HAL_DMA_Init+0x6ac>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_DMA_Init+0x5c2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a3c      	ldr	r2, [pc, #240]	; (8004fec <HAL_DMA_Init+0x6b0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_Init+0x5c6>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_DMA_Init+0x5c8>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d032      	beq.n	8004f6e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 f8c9 	bl	80060a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d102      	bne.n	8004f1c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_DMA_Init+0x620>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d80c      	bhi.n	8004f5c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f946 	bl	80061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	e008      	b.n	8004f6e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	a7fdabf8 	.word	0xa7fdabf8
 8004f8c:	cccccccd 	.word	0xcccccccd
 8004f90:	40020010 	.word	0x40020010
 8004f94:	40020028 	.word	0x40020028
 8004f98:	40020040 	.word	0x40020040
 8004f9c:	40020058 	.word	0x40020058
 8004fa0:	40020070 	.word	0x40020070
 8004fa4:	40020088 	.word	0x40020088
 8004fa8:	400200a0 	.word	0x400200a0
 8004fac:	400200b8 	.word	0x400200b8
 8004fb0:	40020410 	.word	0x40020410
 8004fb4:	40020428 	.word	0x40020428
 8004fb8:	40020440 	.word	0x40020440
 8004fbc:	40020458 	.word	0x40020458
 8004fc0:	40020470 	.word	0x40020470
 8004fc4:	40020488 	.word	0x40020488
 8004fc8:	400204a0 	.word	0x400204a0
 8004fcc:	400204b8 	.word	0x400204b8
 8004fd0:	58025408 	.word	0x58025408
 8004fd4:	5802541c 	.word	0x5802541c
 8004fd8:	58025430 	.word	0x58025430
 8004fdc:	58025444 	.word	0x58025444
 8004fe0:	58025458 	.word	0x58025458
 8004fe4:	5802546c 	.word	0x5802546c
 8004fe8:	58025480 	.word	0x58025480
 8004fec:	58025494 	.word	0x58025494

08004ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ffc:	4b67      	ldr	r3, [pc, #412]	; (800519c <HAL_DMA_IRQHandler+0x1ac>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a67      	ldr	r2, [pc, #412]	; (80051a0 <HAL_DMA_IRQHandler+0x1b0>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a5f      	ldr	r2, [pc, #380]	; (80051a4 <HAL_DMA_IRQHandler+0x1b4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d04a      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5d      	ldr	r2, [pc, #372]	; (80051a8 <HAL_DMA_IRQHandler+0x1b8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d045      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a5c      	ldr	r2, [pc, #368]	; (80051ac <HAL_DMA_IRQHandler+0x1bc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d040      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a5a      	ldr	r2, [pc, #360]	; (80051b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d03b      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a59      	ldr	r2, [pc, #356]	; (80051b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d036      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a57      	ldr	r2, [pc, #348]	; (80051b8 <HAL_DMA_IRQHandler+0x1c8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d031      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a56      	ldr	r2, [pc, #344]	; (80051bc <HAL_DMA_IRQHandler+0x1cc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d02c      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a54      	ldr	r2, [pc, #336]	; (80051c0 <HAL_DMA_IRQHandler+0x1d0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d027      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a53      	ldr	r2, [pc, #332]	; (80051c4 <HAL_DMA_IRQHandler+0x1d4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a51      	ldr	r2, [pc, #324]	; (80051c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01d      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a50      	ldr	r2, [pc, #320]	; (80051cc <HAL_DMA_IRQHandler+0x1dc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a4e      	ldr	r2, [pc, #312]	; (80051d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a4d      	ldr	r2, [pc, #308]	; (80051d4 <HAL_DMA_IRQHandler+0x1e4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a4b      	ldr	r2, [pc, #300]	; (80051d8 <HAL_DMA_IRQHandler+0x1e8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a4a      	ldr	r2, [pc, #296]	; (80051dc <HAL_DMA_IRQHandler+0x1ec>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_DMA_IRQHandler+0xd2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a48      	ldr	r2, [pc, #288]	; (80051e0 <HAL_DMA_IRQHandler+0x1f0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_IRQHandler+0xd6>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <HAL_DMA_IRQHandler+0xd8>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 842b 	beq.w	8005924 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	2208      	movs	r2, #8
 80050d8:	409a      	lsls	r2, r3
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80a2 	beq.w	8005228 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <HAL_DMA_IRQHandler+0x1b4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04a      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_DMA_IRQHandler+0x1b8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d045      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <HAL_DMA_IRQHandler+0x1bc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d040      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_DMA_IRQHandler+0x1c0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d03b      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <HAL_DMA_IRQHandler+0x1c4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d036      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <HAL_DMA_IRQHandler+0x1c8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d031      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a25      	ldr	r2, [pc, #148]	; (80051bc <HAL_DMA_IRQHandler+0x1cc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02c      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_DMA_IRQHandler+0x1d0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d027      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <HAL_DMA_IRQHandler+0x1d4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_DMA_IRQHandler+0x1d8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d01d      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_DMA_IRQHandler+0x1dc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_DMA_IRQHandler+0x1e0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_DMA_IRQHandler+0x1e4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_DMA_IRQHandler+0x1e8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_DMA_IRQHandler+0x1ec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_DMA_IRQHandler+0x194>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_DMA_IRQHandler+0x1f0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d12f      	bne.n	80051e4 <HAL_DMA_IRQHandler+0x1f4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e02e      	b.n	80051f8 <HAL_DMA_IRQHandler+0x208>
 800519a:	bf00      	nop
 800519c:	24000014 	.word	0x24000014
 80051a0:	1b4e81b5 	.word	0x1b4e81b5
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0204 	bic.w	r2, r2, #4
 800520a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2208      	movs	r2, #8
 8005216:	409a      	lsls	r2, r3
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	f043 0201 	orr.w	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	fa22 f303 	lsr.w	r3, r2, r3
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d06e      	beq.n	800531c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a67      	ldr	r2, [pc, #412]	; (80053ec <HAL_DMA_IRQHandler+0x3fc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a66      	ldr	r2, [pc, #408]	; (80053f0 <HAL_DMA_IRQHandler+0x400>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a64      	ldr	r2, [pc, #400]	; (80053f4 <HAL_DMA_IRQHandler+0x404>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a63      	ldr	r2, [pc, #396]	; (80053f8 <HAL_DMA_IRQHandler+0x408>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a61      	ldr	r2, [pc, #388]	; (80053fc <HAL_DMA_IRQHandler+0x40c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a60      	ldr	r2, [pc, #384]	; (8005400 <HAL_DMA_IRQHandler+0x410>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5e      	ldr	r2, [pc, #376]	; (8005404 <HAL_DMA_IRQHandler+0x414>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5d      	ldr	r2, [pc, #372]	; (8005408 <HAL_DMA_IRQHandler+0x418>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5b      	ldr	r2, [pc, #364]	; (800540c <HAL_DMA_IRQHandler+0x41c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a5a      	ldr	r2, [pc, #360]	; (8005410 <HAL_DMA_IRQHandler+0x420>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a58      	ldr	r2, [pc, #352]	; (8005414 <HAL_DMA_IRQHandler+0x424>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a57      	ldr	r2, [pc, #348]	; (8005418 <HAL_DMA_IRQHandler+0x428>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a55      	ldr	r2, [pc, #340]	; (800541c <HAL_DMA_IRQHandler+0x42c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a54      	ldr	r2, [pc, #336]	; (8005420 <HAL_DMA_IRQHandler+0x430>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_IRQHandler+0x2ee>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a52      	ldr	r2, [pc, #328]	; (8005424 <HAL_DMA_IRQHandler+0x434>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d10a      	bne.n	80052f4 <HAL_DMA_IRQHandler+0x304>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e003      	b.n	80052fc <HAL_DMA_IRQHandler+0x30c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2201      	movs	r2, #1
 800530a:	409a      	lsls	r2, r3
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f043 0202 	orr.w	r2, r3, #2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2204      	movs	r2, #4
 8005326:	409a      	lsls	r2, r3
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 808f 	beq.w	8005450 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <HAL_DMA_IRQHandler+0x3f8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d04a      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <HAL_DMA_IRQHandler+0x3fc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d045      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <HAL_DMA_IRQHandler+0x400>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d040      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a27      	ldr	r2, [pc, #156]	; (80053f4 <HAL_DMA_IRQHandler+0x404>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d03b      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <HAL_DMA_IRQHandler+0x408>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d036      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a24      	ldr	r2, [pc, #144]	; (80053fc <HAL_DMA_IRQHandler+0x40c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d031      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a23      	ldr	r2, [pc, #140]	; (8005400 <HAL_DMA_IRQHandler+0x410>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d02c      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_DMA_IRQHandler+0x414>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d027      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a20      	ldr	r2, [pc, #128]	; (8005408 <HAL_DMA_IRQHandler+0x418>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_DMA_IRQHandler+0x41c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_DMA_IRQHandler+0x420>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_DMA_IRQHandler+0x424>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <HAL_DMA_IRQHandler+0x428>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_DMA_IRQHandler+0x42c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a17      	ldr	r2, [pc, #92]	; (8005420 <HAL_DMA_IRQHandler+0x430>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_DMA_IRQHandler+0x3e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_DMA_IRQHandler+0x434>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d12a      	bne.n	8005428 <HAL_DMA_IRQHandler+0x438>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e023      	b.n	8005430 <HAL_DMA_IRQHandler+0x440>
 80053e8:	40020010 	.word	0x40020010
 80053ec:	40020028 	.word	0x40020028
 80053f0:	40020040 	.word	0x40020040
 80053f4:	40020058 	.word	0x40020058
 80053f8:	40020070 	.word	0x40020070
 80053fc:	40020088 	.word	0x40020088
 8005400:	400200a0 	.word	0x400200a0
 8005404:	400200b8 	.word	0x400200b8
 8005408:	40020410 	.word	0x40020410
 800540c:	40020428 	.word	0x40020428
 8005410:	40020440 	.word	0x40020440
 8005414:	40020458 	.word	0x40020458
 8005418:	40020470 	.word	0x40020470
 800541c:	40020488 	.word	0x40020488
 8005420:	400204a0 	.word	0x400204a0
 8005424:	400204b8 	.word	0x400204b8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	2204      	movs	r2, #4
 800543e:	409a      	lsls	r2, r3
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	2210      	movs	r2, #16
 800545a:	409a      	lsls	r2, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80a6 	beq.w	80055b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a85      	ldr	r2, [pc, #532]	; (8005680 <HAL_DMA_IRQHandler+0x690>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d04a      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a83      	ldr	r2, [pc, #524]	; (8005684 <HAL_DMA_IRQHandler+0x694>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d045      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a82      	ldr	r2, [pc, #520]	; (8005688 <HAL_DMA_IRQHandler+0x698>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d040      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_DMA_IRQHandler+0x69c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d03b      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7f      	ldr	r2, [pc, #508]	; (8005690 <HAL_DMA_IRQHandler+0x6a0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d036      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7d      	ldr	r2, [pc, #500]	; (8005694 <HAL_DMA_IRQHandler+0x6a4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d031      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a7c      	ldr	r2, [pc, #496]	; (8005698 <HAL_DMA_IRQHandler+0x6a8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d02c      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a7a      	ldr	r2, [pc, #488]	; (800569c <HAL_DMA_IRQHandler+0x6ac>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d027      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a79      	ldr	r2, [pc, #484]	; (80056a0 <HAL_DMA_IRQHandler+0x6b0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a77      	ldr	r2, [pc, #476]	; (80056a4 <HAL_DMA_IRQHandler+0x6b4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a76      	ldr	r2, [pc, #472]	; (80056a8 <HAL_DMA_IRQHandler+0x6b8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a74      	ldr	r2, [pc, #464]	; (80056ac <HAL_DMA_IRQHandler+0x6bc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a73      	ldr	r2, [pc, #460]	; (80056b0 <HAL_DMA_IRQHandler+0x6c0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a71      	ldr	r2, [pc, #452]	; (80056b4 <HAL_DMA_IRQHandler+0x6c4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a70      	ldr	r2, [pc, #448]	; (80056b8 <HAL_DMA_IRQHandler+0x6c8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_DMA_IRQHandler+0x516>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6e      	ldr	r2, [pc, #440]	; (80056bc <HAL_DMA_IRQHandler+0x6cc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10a      	bne.n	800551c <HAL_DMA_IRQHandler+0x52c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e009      	b.n	8005530 <HAL_DMA_IRQHandler+0x540>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03e      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2210      	movs	r2, #16
 800553e:	409a      	lsls	r2, r3
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d108      	bne.n	8005572 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d024      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4798      	blx	r3
 8005570:	e01f      	b.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01b      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
 8005582:	e016      	b.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d107      	bne.n	80055a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0208 	bic.w	r2, r2, #8
 80055a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	2220      	movs	r2, #32
 80055bc:	409a      	lsls	r2, r3
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8110 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <HAL_DMA_IRQHandler+0x690>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d04a      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <HAL_DMA_IRQHandler+0x694>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d045      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a29      	ldr	r2, [pc, #164]	; (8005688 <HAL_DMA_IRQHandler+0x698>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d040      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a28      	ldr	r2, [pc, #160]	; (800568c <HAL_DMA_IRQHandler+0x69c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d03b      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <HAL_DMA_IRQHandler+0x6a0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d036      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a25      	ldr	r2, [pc, #148]	; (8005694 <HAL_DMA_IRQHandler+0x6a4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d031      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a23      	ldr	r2, [pc, #140]	; (8005698 <HAL_DMA_IRQHandler+0x6a8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d02c      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a22      	ldr	r2, [pc, #136]	; (800569c <HAL_DMA_IRQHandler+0x6ac>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d027      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <HAL_DMA_IRQHandler+0x6b0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d022      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <HAL_DMA_IRQHandler+0x6b4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d01d      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <HAL_DMA_IRQHandler+0x6b8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <HAL_DMA_IRQHandler+0x6bc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_DMA_IRQHandler+0x6c0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_DMA_IRQHandler+0x6c4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_DMA_IRQHandler+0x6c8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_DMA_IRQHandler+0x678>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_DMA_IRQHandler+0x6cc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d12b      	bne.n	80056c0 <HAL_DMA_IRQHandler+0x6d0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e02a      	b.n	80056d4 <HAL_DMA_IRQHandler+0x6e4>
 800567e:	bf00      	nop
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf14      	ite	ne
 80056ce:	2301      	movne	r3, #1
 80056d0:	2300      	moveq	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8087 	beq.w	80057e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2220      	movs	r2, #32
 80056e4:	409a      	lsls	r2, r3
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d139      	bne.n	800576a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0216 	bic.w	r2, r2, #22
 8005704:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005714:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <HAL_DMA_IRQHandler+0x736>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0208 	bic.w	r2, r2, #8
 8005734:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	223f      	movs	r2, #63	; 0x3f
 8005740:	409a      	lsls	r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 834a 	beq.w	8005df4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
          }
          return;
 8005768:	e344      	b.n	8005df4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d018      	beq.n	80057aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d108      	bne.n	8005798 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	2b00      	cmp	r3, #0
 800578c:	d02c      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4798      	blx	r3
 8005796:	e027      	b.n	80057e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	e01e      	b.n	80057e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10f      	bne.n	80057d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0210 	bic.w	r2, r2, #16
 80057c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8306 	beq.w	8005dfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8088 	beq.w	8005910 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a7a      	ldr	r2, [pc, #488]	; (80059f8 <HAL_DMA_IRQHandler+0xa08>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d04a      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a79      	ldr	r2, [pc, #484]	; (80059fc <HAL_DMA_IRQHandler+0xa0c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d045      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a77      	ldr	r2, [pc, #476]	; (8005a00 <HAL_DMA_IRQHandler+0xa10>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d040      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a76      	ldr	r2, [pc, #472]	; (8005a04 <HAL_DMA_IRQHandler+0xa14>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d03b      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a74      	ldr	r2, [pc, #464]	; (8005a08 <HAL_DMA_IRQHandler+0xa18>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d036      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a73      	ldr	r2, [pc, #460]	; (8005a0c <HAL_DMA_IRQHandler+0xa1c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d031      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a71      	ldr	r2, [pc, #452]	; (8005a10 <HAL_DMA_IRQHandler+0xa20>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d02c      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a70      	ldr	r2, [pc, #448]	; (8005a14 <HAL_DMA_IRQHandler+0xa24>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d027      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6e      	ldr	r2, [pc, #440]	; (8005a18 <HAL_DMA_IRQHandler+0xa28>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d022      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6d      	ldr	r2, [pc, #436]	; (8005a1c <HAL_DMA_IRQHandler+0xa2c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d01d      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <HAL_DMA_IRQHandler+0xa30>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6a      	ldr	r2, [pc, #424]	; (8005a24 <HAL_DMA_IRQHandler+0xa34>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a68      	ldr	r2, [pc, #416]	; (8005a28 <HAL_DMA_IRQHandler+0xa38>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a67      	ldr	r2, [pc, #412]	; (8005a2c <HAL_DMA_IRQHandler+0xa3c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a65      	ldr	r2, [pc, #404]	; (8005a30 <HAL_DMA_IRQHandler+0xa40>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x8b8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a64      	ldr	r2, [pc, #400]	; (8005a34 <HAL_DMA_IRQHandler+0xa44>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <HAL_DMA_IRQHandler+0x8ca>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	e007      	b.n	80058ca <HAL_DMA_IRQHandler+0x8da>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d307      	bcc.n	80058e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f2      	bne.n	80058ca <HAL_DMA_IRQHandler+0x8da>
 80058e4:	e000      	b.n	80058e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80058e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2203      	movs	r2, #3
 80058fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80058fe:	e003      	b.n	8005908 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8272 	beq.w	8005dfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
 8005922:	e26c      	b.n	8005dfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a43      	ldr	r2, [pc, #268]	; (8005a38 <HAL_DMA_IRQHandler+0xa48>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d022      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a42      	ldr	r2, [pc, #264]	; (8005a3c <HAL_DMA_IRQHandler+0xa4c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d01d      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <HAL_DMA_IRQHandler+0xa50>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a3f      	ldr	r2, [pc, #252]	; (8005a44 <HAL_DMA_IRQHandler+0xa54>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a3d      	ldr	r2, [pc, #244]	; (8005a48 <HAL_DMA_IRQHandler+0xa58>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <HAL_DMA_IRQHandler+0xa5c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <HAL_DMA_IRQHandler+0xa60>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_DMA_IRQHandler+0x984>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <HAL_DMA_IRQHandler+0xa64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d101      	bne.n	8005978 <HAL_DMA_IRQHandler+0x988>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <HAL_DMA_IRQHandler+0x98a>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 823f 	beq.w	8005dfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	2204      	movs	r2, #4
 8005992:	409a      	lsls	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80cd 	beq.w	8005b38 <HAL_DMA_IRQHandler+0xb48>
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80c7 	beq.w	8005b38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2204      	movs	r2, #4
 80059b4:	409a      	lsls	r2, r3
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d049      	beq.n	8005a58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8210 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059e0:	e20a      	b.n	8005df8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8206 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f4:	e200      	b.n	8005df8 <HAL_DMA_IRQHandler+0xe08>
 80059f6:	bf00      	nop
 80059f8:	40020010 	.word	0x40020010
 80059fc:	40020028 	.word	0x40020028
 8005a00:	40020040 	.word	0x40020040
 8005a04:	40020058 	.word	0x40020058
 8005a08:	40020070 	.word	0x40020070
 8005a0c:	40020088 	.word	0x40020088
 8005a10:	400200a0 	.word	0x400200a0
 8005a14:	400200b8 	.word	0x400200b8
 8005a18:	40020410 	.word	0x40020410
 8005a1c:	40020428 	.word	0x40020428
 8005a20:	40020440 	.word	0x40020440
 8005a24:	40020458 	.word	0x40020458
 8005a28:	40020470 	.word	0x40020470
 8005a2c:	40020488 	.word	0x40020488
 8005a30:	400204a0 	.word	0x400204a0
 8005a34:	400204b8 	.word	0x400204b8
 8005a38:	58025408 	.word	0x58025408
 8005a3c:	5802541c 	.word	0x5802541c
 8005a40:	58025430 	.word	0x58025430
 8005a44:	58025444 	.word	0x58025444
 8005a48:	58025458 	.word	0x58025458
 8005a4c:	5802546c 	.word	0x5802546c
 8005a50:	58025480 	.word	0x58025480
 8005a54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d160      	bne.n	8005b24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a8c      	ldr	r2, [pc, #560]	; (8005c98 <HAL_DMA_IRQHandler+0xca8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d04a      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a8a      	ldr	r2, [pc, #552]	; (8005c9c <HAL_DMA_IRQHandler+0xcac>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d045      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a89      	ldr	r2, [pc, #548]	; (8005ca0 <HAL_DMA_IRQHandler+0xcb0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d040      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a87      	ldr	r2, [pc, #540]	; (8005ca4 <HAL_DMA_IRQHandler+0xcb4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d03b      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a86      	ldr	r2, [pc, #536]	; (8005ca8 <HAL_DMA_IRQHandler+0xcb8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d036      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a84      	ldr	r2, [pc, #528]	; (8005cac <HAL_DMA_IRQHandler+0xcbc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d031      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a83      	ldr	r2, [pc, #524]	; (8005cb0 <HAL_DMA_IRQHandler+0xcc0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02c      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_DMA_IRQHandler+0xcc4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d027      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <HAL_DMA_IRQHandler+0xcc8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7e      	ldr	r2, [pc, #504]	; (8005cbc <HAL_DMA_IRQHandler+0xccc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a7d      	ldr	r2, [pc, #500]	; (8005cc0 <HAL_DMA_IRQHandler+0xcd0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7b      	ldr	r2, [pc, #492]	; (8005cc4 <HAL_DMA_IRQHandler+0xcd4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a7a      	ldr	r2, [pc, #488]	; (8005cc8 <HAL_DMA_IRQHandler+0xcd8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a78      	ldr	r2, [pc, #480]	; (8005ccc <HAL_DMA_IRQHandler+0xcdc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a77      	ldr	r2, [pc, #476]	; (8005cd0 <HAL_DMA_IRQHandler+0xce0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_IRQHandler+0xb12>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a75      	ldr	r2, [pc, #468]	; (8005cd4 <HAL_DMA_IRQHandler+0xce4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <HAL_DMA_IRQHandler+0xb24>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0208 	bic.w	r2, r2, #8
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e007      	b.n	8005b24 <HAL_DMA_IRQHandler+0xb34>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8165 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b36:	e15f      	b.n	8005df8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2202      	movs	r2, #2
 8005b42:	409a      	lsls	r2, r3
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80c5 	beq.w	8005cd8 <HAL_DMA_IRQHandler+0xce8>
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80bf 	beq.w	8005cd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2202      	movs	r2, #2
 8005b64:	409a      	lsls	r2, r3
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 813a 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b90:	e134      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8130 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ba4:	e12a      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d168      	bne.n	8005c82 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a38      	ldr	r2, [pc, #224]	; (8005c98 <HAL_DMA_IRQHandler+0xca8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04a      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a37      	ldr	r2, [pc, #220]	; (8005c9c <HAL_DMA_IRQHandler+0xcac>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d045      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a35      	ldr	r2, [pc, #212]	; (8005ca0 <HAL_DMA_IRQHandler+0xcb0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d040      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <HAL_DMA_IRQHandler+0xcb4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d03b      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a32      	ldr	r2, [pc, #200]	; (8005ca8 <HAL_DMA_IRQHandler+0xcb8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d036      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a31      	ldr	r2, [pc, #196]	; (8005cac <HAL_DMA_IRQHandler+0xcbc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d031      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	; (8005cb0 <HAL_DMA_IRQHandler+0xcc0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02c      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2e      	ldr	r2, [pc, #184]	; (8005cb4 <HAL_DMA_IRQHandler+0xcc4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d027      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a2c      	ldr	r2, [pc, #176]	; (8005cb8 <HAL_DMA_IRQHandler+0xcc8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d022      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <HAL_DMA_IRQHandler+0xccc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d01d      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <HAL_DMA_IRQHandler+0xcd0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a28      	ldr	r2, [pc, #160]	; (8005cc4 <HAL_DMA_IRQHandler+0xcd4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <HAL_DMA_IRQHandler+0xcd8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a25      	ldr	r2, [pc, #148]	; (8005ccc <HAL_DMA_IRQHandler+0xcdc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <HAL_DMA_IRQHandler+0xce0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_DMA_IRQHandler+0xc60>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a22      	ldr	r2, [pc, #136]	; (8005cd4 <HAL_DMA_IRQHandler+0xce4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d108      	bne.n	8005c62 <HAL_DMA_IRQHandler+0xc72>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0214 	bic.w	r2, r2, #20
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e007      	b.n	8005c72 <HAL_DMA_IRQHandler+0xc82>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 020a 	bic.w	r2, r2, #10
 8005c70:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80b8 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c94:	e0b2      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe0c>
 8005c96:	bf00      	nop
 8005c98:	40020010 	.word	0x40020010
 8005c9c:	40020028 	.word	0x40020028
 8005ca0:	40020040 	.word	0x40020040
 8005ca4:	40020058 	.word	0x40020058
 8005ca8:	40020070 	.word	0x40020070
 8005cac:	40020088 	.word	0x40020088
 8005cb0:	400200a0 	.word	0x400200a0
 8005cb4:	400200b8 	.word	0x400200b8
 8005cb8:	40020410 	.word	0x40020410
 8005cbc:	40020428 	.word	0x40020428
 8005cc0:	40020440 	.word	0x40020440
 8005cc4:	40020458 	.word	0x40020458
 8005cc8:	40020470 	.word	0x40020470
 8005ccc:	40020488 	.word	0x40020488
 8005cd0:	400204a0 	.word	0x400204a0
 8005cd4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cdc:	f003 031f 	and.w	r3, r3, #31
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8088 	beq.w	8005dfe <HAL_DMA_IRQHandler+0xe0e>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8082 	beq.w	8005dfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a41      	ldr	r2, [pc, #260]	; (8005e04 <HAL_DMA_IRQHandler+0xe14>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d04a      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <HAL_DMA_IRQHandler+0xe18>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d045      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <HAL_DMA_IRQHandler+0xe1c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d040      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3c      	ldr	r2, [pc, #240]	; (8005e10 <HAL_DMA_IRQHandler+0xe20>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d03b      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3b      	ldr	r2, [pc, #236]	; (8005e14 <HAL_DMA_IRQHandler+0xe24>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d036      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a39      	ldr	r2, [pc, #228]	; (8005e18 <HAL_DMA_IRQHandler+0xe28>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a38      	ldr	r2, [pc, #224]	; (8005e1c <HAL_DMA_IRQHandler+0xe2c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d02c      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a36      	ldr	r2, [pc, #216]	; (8005e20 <HAL_DMA_IRQHandler+0xe30>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d027      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a35      	ldr	r2, [pc, #212]	; (8005e24 <HAL_DMA_IRQHandler+0xe34>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a33      	ldr	r2, [pc, #204]	; (8005e28 <HAL_DMA_IRQHandler+0xe38>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01d      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a32      	ldr	r2, [pc, #200]	; (8005e2c <HAL_DMA_IRQHandler+0xe3c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d018      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a30      	ldr	r2, [pc, #192]	; (8005e30 <HAL_DMA_IRQHandler+0xe40>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2f      	ldr	r2, [pc, #188]	; (8005e34 <HAL_DMA_IRQHandler+0xe44>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2d      	ldr	r2, [pc, #180]	; (8005e38 <HAL_DMA_IRQHandler+0xe48>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <HAL_DMA_IRQHandler+0xe4c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_DMA_IRQHandler+0xdaa>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <HAL_DMA_IRQHandler+0xe50>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d108      	bne.n	8005dac <HAL_DMA_IRQHandler+0xdbc>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 021c 	bic.w	r2, r2, #28
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e007      	b.n	8005dbc <HAL_DMA_IRQHandler+0xdcc>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 020e 	bic.w	r2, r2, #14
 8005dba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
 8005df2:	e004      	b.n	8005dfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005df4:	bf00      	nop
 8005df6:	e002      	b.n	8005dfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df8:	bf00      	nop
 8005dfa:	e000      	b.n	8005dfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dfe:	3728      	adds	r7, #40	; 0x28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40020010 	.word	0x40020010
 8005e08:	40020028 	.word	0x40020028
 8005e0c:	40020040 	.word	0x40020040
 8005e10:	40020058 	.word	0x40020058
 8005e14:	40020070 	.word	0x40020070
 8005e18:	40020088 	.word	0x40020088
 8005e1c:	400200a0 	.word	0x400200a0
 8005e20:	400200b8 	.word	0x400200b8
 8005e24:	40020410 	.word	0x40020410
 8005e28:	40020428 	.word	0x40020428
 8005e2c:	40020440 	.word	0x40020440
 8005e30:	40020458 	.word	0x40020458
 8005e34:	40020470 	.word	0x40020470
 8005e38:	40020488 	.word	0x40020488
 8005e3c:	400204a0 	.word	0x400204a0
 8005e40:	400204b8 	.word	0x400204b8

08005e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a42      	ldr	r2, [pc, #264]	; (8005f5c <DMA_CalcBaseAndBitshift+0x118>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d04a      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d045      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <DMA_CalcBaseAndBitshift+0x120>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d040      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a3e      	ldr	r2, [pc, #248]	; (8005f68 <DMA_CalcBaseAndBitshift+0x124>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d03b      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <DMA_CalcBaseAndBitshift+0x128>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d036      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3b      	ldr	r2, [pc, #236]	; (8005f70 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d031      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a39      	ldr	r2, [pc, #228]	; (8005f74 <DMA_CalcBaseAndBitshift+0x130>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02c      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a38      	ldr	r2, [pc, #224]	; (8005f78 <DMA_CalcBaseAndBitshift+0x134>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d027      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a36      	ldr	r2, [pc, #216]	; (8005f7c <DMA_CalcBaseAndBitshift+0x138>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d022      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <DMA_CalcBaseAndBitshift+0x13c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d01d      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <DMA_CalcBaseAndBitshift+0x140>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d018      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a32      	ldr	r2, [pc, #200]	; (8005f88 <DMA_CalcBaseAndBitshift+0x144>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a30      	ldr	r2, [pc, #192]	; (8005f8c <DMA_CalcBaseAndBitshift+0x148>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00e      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a2f      	ldr	r2, [pc, #188]	; (8005f90 <DMA_CalcBaseAndBitshift+0x14c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d009      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2d      	ldr	r2, [pc, #180]	; (8005f94 <DMA_CalcBaseAndBitshift+0x150>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <DMA_CalcBaseAndBitshift+0xa8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <DMA_CalcBaseAndBitshift+0x154>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d101      	bne.n	8005ef0 <DMA_CalcBaseAndBitshift+0xac>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <DMA_CalcBaseAndBitshift+0xae>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d024      	beq.n	8005f40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	3b10      	subs	r3, #16
 8005efe:	4a27      	ldr	r2, [pc, #156]	; (8005f9c <DMA_CalcBaseAndBitshift+0x158>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d908      	bls.n	8005f30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b1f      	ldr	r3, [pc, #124]	; (8005fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	1d1a      	adds	r2, r3, #4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f2e:	e00d      	b.n	8005f4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3e:	e005      	b.n	8005f4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8
 8005f9c:	aaaaaaab 	.word	0xaaaaaaab
 8005fa0:	080119d8 	.word	0x080119d8
 8005fa4:	fffffc00 	.word	0xfffffc00

08005fa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d120      	bne.n	8005ffe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d858      	bhi.n	8006076 <DMA_CheckFifoParam+0xce>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <DMA_CheckFifoParam+0x24>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fef 	.word	0x08005fef
 8005fd4:	08005fdd 	.word	0x08005fdd
 8005fd8:	08006077 	.word	0x08006077
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d048      	beq.n	800607a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fec:	e045      	b.n	800607a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ff6:	d142      	bne.n	800607e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ffc:	e03f      	b.n	800607e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006006:	d123      	bne.n	8006050 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	2b03      	cmp	r3, #3
 800600e:	d838      	bhi.n	8006082 <DMA_CheckFifoParam+0xda>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <DMA_CheckFifoParam+0x70>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	08006029 	.word	0x08006029
 800601c:	0800602f 	.word	0x0800602f
 8006020:	08006029 	.word	0x08006029
 8006024:	08006041 	.word	0x08006041
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
        break;
 800602c:	e030      	b.n	8006090 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d025      	beq.n	8006086 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800603e:	e022      	b.n	8006086 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006048:	d11f      	bne.n	800608a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800604e:	e01c      	b.n	800608a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	2b02      	cmp	r3, #2
 8006056:	d902      	bls.n	800605e <DMA_CheckFifoParam+0xb6>
 8006058:	2b03      	cmp	r3, #3
 800605a:	d003      	beq.n	8006064 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800605c:	e018      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
        break;
 8006062:	e015      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00e      	beq.n	800608e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
    break;
 8006074:	e00b      	b.n	800608e <DMA_CheckFifoParam+0xe6>
        break;
 8006076:	bf00      	nop
 8006078:	e00a      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        break;
 800607a:	bf00      	nop
 800607c:	e008      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        break;
 800607e:	bf00      	nop
 8006080:	e006      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        break;
 8006082:	bf00      	nop
 8006084:	e004      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        break;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
        break;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <DMA_CheckFifoParam+0xe8>
    break;
 800608e:	bf00      	nop
    }
  }

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop

080060a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a38      	ldr	r2, [pc, #224]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d022      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a36      	ldr	r2, [pc, #216]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01d      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a35      	ldr	r2, [pc, #212]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d018      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a33      	ldr	r2, [pc, #204]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a30      	ldr	r2, [pc, #192]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2d      	ldr	r2, [pc, #180]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01a      	beq.n	800613e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	3b08      	subs	r3, #8
 8006110:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a24      	ldr	r2, [pc, #144]	; (80061bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800612c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800613c:	e024      	b.n	8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	3b10      	subs	r3, #16
 8006146:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d806      	bhi.n	8006166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4a1b      	ldr	r2, [pc, #108]	; (80061c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d902      	bls.n	8006166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3308      	adds	r3, #8
 8006164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4b18      	ldr	r3, [pc, #96]	; (80061cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800616a:	4413      	add	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	58025408 	.word	0x58025408
 8006198:	5802541c 	.word	0x5802541c
 800619c:	58025430 	.word	0x58025430
 80061a0:	58025444 	.word	0x58025444
 80061a4:	58025458 	.word	0x58025458
 80061a8:	5802546c 	.word	0x5802546c
 80061ac:	58025480 	.word	0x58025480
 80061b0:	58025494 	.word	0x58025494
 80061b4:	cccccccd 	.word	0xcccccccd
 80061b8:	16009600 	.word	0x16009600
 80061bc:	58025880 	.word	0x58025880
 80061c0:	aaaaaaab 	.word	0xaaaaaaab
 80061c4:	400204b8 	.word	0x400204b8
 80061c8:	4002040f 	.word	0x4002040f
 80061cc:	10008200 	.word	0x10008200
 80061d0:	40020880 	.word	0x40020880

080061d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d04a      	beq.n	8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d847      	bhi.n	8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4b17      	ldr	r3, [pc, #92]	; (80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800625c:	671a      	str	r2, [r3, #112]	; 0x70
 800625e:	e009      	b.n	8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006272:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b01      	subs	r3, #1
 8006278:	2201      	movs	r2, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	58025408 	.word	0x58025408
 8006290:	5802541c 	.word	0x5802541c
 8006294:	58025430 	.word	0x58025430
 8006298:	58025444 	.word	0x58025444
 800629c:	58025458 	.word	0x58025458
 80062a0:	5802546c 	.word	0x5802546c
 80062a4:	58025480 	.word	0x58025480
 80062a8:	58025494 	.word	0x58025494
 80062ac:	1600963f 	.word	0x1600963f
 80062b0:	58025940 	.word	0x58025940
 80062b4:	1000823f 	.word	0x1000823f
 80062b8:	40020940 	.word	0x40020940

080062bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062ca:	4b86      	ldr	r3, [pc, #536]	; (80064e4 <HAL_GPIO_Init+0x228>)
 80062cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062ce:	e18c      	b.n	80065ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	fa01 f303 	lsl.w	r3, r1, r3
 80062dc:	4013      	ands	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 817e 	beq.w	80065e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d005      	beq.n	8006300 <HAL_GPIO_Init+0x44>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d130      	bne.n	8006362 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	2203      	movs	r2, #3
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006336:	2201      	movs	r2, #1
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	091b      	lsrs	r3, r3, #4
 800634c:	f003 0201 	and.w	r2, r3, #1
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b03      	cmp	r3, #3
 800636c:	d017      	beq.n	800639e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d123      	bne.n	80063f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	08da      	lsrs	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3208      	adds	r2, #8
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	220f      	movs	r2, #15
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	08da      	lsrs	r2, r3, #3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3208      	adds	r2, #8
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	2203      	movs	r2, #3
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	4013      	ands	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0203 	and.w	r2, r3, #3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80d8 	beq.w	80065e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006434:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <HAL_GPIO_Init+0x22c>)
 8006436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800643a:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_GPIO_Init+0x22c>)
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006444:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_GPIO_Init+0x22c>)
 8006446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006452:	4a26      	ldr	r2, [pc, #152]	; (80064ec <HAL_GPIO_Init+0x230>)
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	3302      	adds	r3, #2
 800645a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	220f      	movs	r2, #15
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4013      	ands	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <HAL_GPIO_Init+0x234>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d04a      	beq.n	8006514 <HAL_GPIO_Init+0x258>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_GPIO_Init+0x238>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d02b      	beq.n	80064de <HAL_GPIO_Init+0x222>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_GPIO_Init+0x23c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d025      	beq.n	80064da <HAL_GPIO_Init+0x21e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_GPIO_Init+0x240>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01f      	beq.n	80064d6 <HAL_GPIO_Init+0x21a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a19      	ldr	r2, [pc, #100]	; (8006500 <HAL_GPIO_Init+0x244>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d019      	beq.n	80064d2 <HAL_GPIO_Init+0x216>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_GPIO_Init+0x248>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_GPIO_Init+0x212>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a17      	ldr	r2, [pc, #92]	; (8006508 <HAL_GPIO_Init+0x24c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00d      	beq.n	80064ca <HAL_GPIO_Init+0x20e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a16      	ldr	r2, [pc, #88]	; (800650c <HAL_GPIO_Init+0x250>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <HAL_GPIO_Init+0x20a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_GPIO_Init+0x254>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <HAL_GPIO_Init+0x206>
 80064be:	2309      	movs	r3, #9
 80064c0:	e029      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064c2:	230a      	movs	r3, #10
 80064c4:	e027      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064c6:	2307      	movs	r3, #7
 80064c8:	e025      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064ca:	2306      	movs	r3, #6
 80064cc:	e023      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064ce:	2305      	movs	r3, #5
 80064d0:	e021      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064d2:	2304      	movs	r3, #4
 80064d4:	e01f      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064d6:	2303      	movs	r3, #3
 80064d8:	e01d      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064da:	2302      	movs	r3, #2
 80064dc:	e01b      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064de:	2301      	movs	r3, #1
 80064e0:	e019      	b.n	8006516 <HAL_GPIO_Init+0x25a>
 80064e2:	bf00      	nop
 80064e4:	58000080 	.word	0x58000080
 80064e8:	58024400 	.word	0x58024400
 80064ec:	58000400 	.word	0x58000400
 80064f0:	58020000 	.word	0x58020000
 80064f4:	58020400 	.word	0x58020400
 80064f8:	58020800 	.word	0x58020800
 80064fc:	58020c00 	.word	0x58020c00
 8006500:	58021000 	.word	0x58021000
 8006504:	58021400 	.word	0x58021400
 8006508:	58021800 	.word	0x58021800
 800650c:	58021c00 	.word	0x58021c00
 8006510:	58022400 	.word	0x58022400
 8006514:	2300      	movs	r3, #0
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	f002 0203 	and.w	r2, r2, #3
 800651c:	0092      	lsls	r2, r2, #2
 800651e:	4093      	lsls	r3, r2
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4313      	orrs	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006526:	4938      	ldr	r1, [pc, #224]	; (8006608 <HAL_GPIO_Init+0x34c>)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	3302      	adds	r3, #2
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800655a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	43db      	mvns	r3, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	43db      	mvns	r3, r3
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	4013      	ands	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f ae6b 	bne.w	80062d0 <HAL_GPIO_Init+0x14>
  }
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	3724      	adds	r7, #36	; 0x24
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	58000400 	.word	0x58000400

0800660c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	460b      	mov	r3, r1
 8006616:	807b      	strh	r3, [r7, #2]
 8006618:	4613      	mov	r3, r2
 800661a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800661c:	787b      	ldrb	r3, [r7, #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006628:	e003      	b.n	8006632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	041a      	lsls	r2, r3, #16
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	619a      	str	r2, [r3, #24]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e07f      	b.n	8006752 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fb fb8c 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2224      	movs	r2, #36	; 0x24
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d107      	bne.n	80066ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066b6:	609a      	str	r2, [r3, #8]
 80066b8:	e006      	b.n	80066c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d104      	bne.n	80066da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <HAL_I2C_Init+0x11c>)
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	02008000 	.word	0x02008000

08006760 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b20      	cmp	r3, #32
 8006774:	d138      	bne.n	80067e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006780:	2302      	movs	r3, #2
 8006782:	e032      	b.n	80067ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2224      	movs	r2, #36	; 0x24
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b20      	cmp	r3, #32
 800680a:	d139      	bne.n	8006880 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006816:	2302      	movs	r3, #2
 8006818:	e033      	b.n	8006882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2224      	movs	r2, #36	; 0x24
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006848:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e000      	b.n	8006882 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006880:	2302      	movs	r3, #2
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800688e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006890:	b08f      	sub	sp, #60	; 0x3c
 8006892:	af0a      	add	r7, sp, #40	; 0x28
 8006894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e116      	b.n	8006ace <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f009 fef4 	bl	80106a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2203      	movs	r2, #3
 80068c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f006 fe17 	bl	800d512 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	687e      	ldr	r6, [r7, #4]
 80068ec:	466d      	mov	r5, sp
 80068ee:	f106 0410 	add.w	r4, r6, #16
 80068f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006902:	1d33      	adds	r3, r6, #4
 8006904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	f006 fce2 	bl	800d2d0 <USB_CoreInit>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e0d7      	b.n	8006ace <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2100      	movs	r1, #0
 8006924:	4618      	mov	r0, r3
 8006926:	f006 fe05 	bl	800d534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
 800692e:	e04a      	b.n	80069c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	333d      	adds	r3, #61	; 0x3d
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006944:	7bfa      	ldrb	r2, [r7, #15]
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	333c      	adds	r3, #60	; 0x3c
 8006954:	7bfa      	ldrb	r2, [r7, #15]
 8006956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006958:	7bfa      	ldrb	r2, [r7, #15]
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	b298      	uxth	r0, r3
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	3342      	adds	r3, #66	; 0x42
 800696c:	4602      	mov	r2, r0
 800696e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006970:	7bfa      	ldrb	r2, [r7, #15]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4613      	mov	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	333f      	adds	r3, #63	; 0x3f
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006984:	7bfa      	ldrb	r2, [r7, #15]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	3344      	adds	r3, #68	; 0x44
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006998:	7bfa      	ldrb	r2, [r7, #15]
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3348      	adds	r3, #72	; 0x48
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	3350      	adds	r3, #80	; 0x50
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	3301      	adds	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d3af      	bcc.n	8006930 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069d0:	2300      	movs	r3, #0
 80069d2:	73fb      	strb	r3, [r7, #15]
 80069d4:	e044      	b.n	8006a60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80069d6:	7bfa      	ldrb	r2, [r7, #15]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80069ec:	7bfa      	ldrb	r2, [r7, #15]
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80069fe:	7bfa      	ldrb	r2, [r7, #15]
 8006a00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a02:	7bfa      	ldrb	r2, [r7, #15]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a18:	7bfa      	ldrb	r2, [r7, #15]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a2e:	7bfa      	ldrb	r2, [r7, #15]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	7bfa      	ldrb	r2, [r7, #15]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3b5      	bcc.n	80069d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	687e      	ldr	r6, [r7, #4]
 8006a72:	466d      	mov	r5, sp
 8006a74:	f106 0410 	add.w	r4, r6, #16
 8006a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a84:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a88:	1d33      	adds	r3, r6, #4
 8006a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f006 fd9d 	bl	800d5cc <USB_DevInit>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e014      	b.n	8006ace <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d102      	bne.n	8006ac2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f885 	bl	8007bcc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f007 fe35 	bl	800e736 <USB_DevDisconnect>

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ad6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_PCD_Start+0x1c>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e020      	b.n	8006b34 <HAL_PCD_Start+0x5e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d109      	bne.n	8006b16 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d005      	beq.n	8006b16 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f006 fce8 	bl	800d4f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f007 fde5 	bl	800e6f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b08d      	sub	sp, #52	; 0x34
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f007 fea3 	bl	800e89e <USB_GetMode>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f040 83be 	bne.w	80072dc <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f007 fe07 	bl	800e778 <USB_ReadInterrupts>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 83b4 	beq.w	80072da <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f007 fdfe 	bl	800e778 <USB_ReadInterrupts>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d107      	bne.n	8006b96 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695a      	ldr	r2, [r3, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f002 0202 	and.w	r2, r2, #2
 8006b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f007 fdec 	bl	800e778 <USB_ReadInterrupts>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d161      	bne.n	8006c6e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0210 	bic.w	r2, r2, #16
 8006bb8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	0c5b      	lsrs	r3, r3, #17
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d124      	bne.n	8006c30 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d035      	beq.n	8006c5e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	6a38      	ldr	r0, [r7, #32]
 8006c06:	f007 fc23 	bl	800e450 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	091b      	lsrs	r3, r3, #4
 8006c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c16:	441a      	add	r2, r3
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c28:	441a      	add	r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	619a      	str	r2, [r3, #24]
 8006c2e:	e016      	b.n	8006c5e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	0c5b      	lsrs	r3, r3, #17
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d110      	bne.n	8006c5e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c42:	2208      	movs	r2, #8
 8006c44:	4619      	mov	r1, r3
 8006c46:	6a38      	ldr	r0, [r7, #32]
 8006c48:	f007 fc02 	bl	800e450 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c58:	441a      	add	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0210 	orr.w	r2, r2, #16
 8006c6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f007 fd80 	bl	800e778 <USB_ReadInterrupts>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c82:	d16e      	bne.n	8006d62 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f007 fd86 	bl	800e79e <USB_ReadDevAllOutEpInterrupt>
 8006c92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006c94:	e062      	b.n	8006d5c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d057      	beq.n	8006d50 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f007 fdab 	bl	800e806 <USB_ReadDevOutEPInterrupt>
 8006cb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00c      	beq.n	8006cd6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2301      	movs	r3, #1
 8006ccc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fdd1 	bl	8007878 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	461a      	mov	r2, r3
 8006cee:	2308      	movs	r3, #8
 8006cf0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fecb 	bl	8007a90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	461a      	mov	r2, r3
 8006d12:	2310      	movs	r3, #16
 8006d14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d008      	beq.n	8006d32 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2320      	movs	r3, #32
 8006d30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	3301      	adds	r3, #1
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d199      	bne.n	8006c96 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f007 fd06 	bl	800e778 <USB_ReadInterrupts>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d76:	f040 80c4 	bne.w	8006f02 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f007 fd27 	bl	800e7d2 <USB_ReadDevAllInEpInterrupt>
 8006d84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006d8a:	e0b6      	b.n	8006efa <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80ab 	beq.w	8006eee <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f007 fd4d 	bl	800e842 <USB_ReadDevInEPInterrupt>
 8006da8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d057      	beq.n	8006e64 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	2201      	movs	r2, #1
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	69f9      	ldr	r1, [r7, #28]
 8006dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	461a      	mov	r2, r3
 8006de6:	2301      	movs	r3, #1
 8006de8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d132      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	4613      	mov	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3348      	adds	r3, #72	; 0x48
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4403      	add	r3, r0
 8006e12:	3344      	adds	r3, #68	; 0x44
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4419      	add	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4403      	add	r3, r0
 8006e26:	3348      	adds	r3, #72	; 0x48
 8006e28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d113      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x31c>
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e34:	4613      	mov	r3, r2
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	1a9b      	subs	r3, r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	440b      	add	r3, r1
 8006e3e:	3350      	adds	r3, #80	; 0x50
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d108      	bne.n	8006e58 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e50:	461a      	mov	r2, r3
 8006e52:	2101      	movs	r1, #1
 8006e54:	f007 fd56 	bl	800e904 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f009 fc91 	bl	8010786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d008      	beq.n	8006e80 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f003 0310 	and.w	r3, r3, #16
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	461a      	mov	r2, r3
 8006e98:	2310      	movs	r3, #16
 8006e9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d008      	beq.n	8006eb8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ec4:	6a38      	ldr	r0, [r7, #32]
 8006ec6:	f006 fcdf 	bl	800d888 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2302      	movs	r3, #2
 8006eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc38 	bl	800775e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f47f af45 	bne.w	8006d8c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f007 fc36 	bl	800e778 <USB_ReadInterrupts>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f16:	d122      	bne.n	8006f5e <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d108      	bne.n	8006f48 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fe67 	bl	8007c14 <HAL_PCDEx_LPM_Callback>
 8006f46:	e002      	b.n	8006f4e <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f009 fc93 	bl	8010874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f007 fc08 	bl	800e778 <USB_ReadInterrupts>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f72:	d112      	bne.n	8006f9a <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d102      	bne.n	8006f8a <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f009 fc4f 	bl	8010828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695a      	ldr	r2, [r3, #20]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f007 fbea 	bl	800e778 <USB_ReadInterrupts>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fae:	d121      	bne.n	8006ff4 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006fbe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d111      	bne.n	8006fee <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	089b      	lsrs	r3, r3, #2
 8006fda:	f003 020f 	and.w	r2, r3, #15
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe14 	bl	8007c14 <HAL_PCDEx_LPM_Callback>
 8006fec:	e002      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f009 fc1a 	bl	8010828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f007 fbbd 	bl	800e778 <USB_ReadInterrupts>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	f040 80b7 	bne.w	800717a <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2110      	movs	r1, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f006 fc2e 	bl	800d888 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007030:	e046      	b.n	80070c0 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703e:	461a      	mov	r2, r3
 8007040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007044:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007078:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007098:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	3301      	adds	r3, #1
 80070be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d3b3      	bcc.n	8007032 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80070dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f6:	f043 030b 	orr.w	r3, r3, #11
 80070fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710c:	f043 030b 	orr.w	r3, r3, #11
 8007110:	6453      	str	r3, [r2, #68]	; 0x44
 8007112:	e015      	b.n	8007140 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	695a      	ldr	r2, [r3, #20]
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007122:	4619      	mov	r1, r3
 8007124:	f242 032b 	movw	r3, #8235	; 0x202b
 8007128:	4313      	orrs	r3, r2
 800712a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713a:	f043 030b 	orr.w	r3, r3, #11
 800713e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800714e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007152:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007164:	461a      	mov	r2, r3
 8007166:	f007 fbcd 	bl	800e904 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f007 fafa 	bl	800e778 <USB_ReadInterrupts>
 8007184:	4603      	mov	r3, r0
 8007186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800718a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718e:	d124      	bne.n	80071da <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f007 fb91 	bl	800e8bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f006 fbeb 	bl	800d97a <USB_GetDevSpeed>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681c      	ldr	r4, [r3, #0]
 80071b0:	f001 fc62 	bl	8008a78 <HAL_RCC_GetHCLKFreq>
 80071b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	4620      	mov	r0, r4
 80071c0:	f006 f8f4 	bl	800d3ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f009 fb06 	bl	80107d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695a      	ldr	r2, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80071d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f007 faca 	bl	800e778 <USB_ReadInterrupts>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d10a      	bne.n	8007204 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f009 fae3 	bl	80107ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 0208 	and.w	r2, r2, #8
 8007202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f007 fab5 	bl	800e778 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007218:	d10f      	bne.n	800723a <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	b2db      	uxtb	r3, r3
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f009 fb45 	bl	80108b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695a      	ldr	r2, [r3, #20]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f007 fa9a 	bl	800e778 <USB_ReadInterrupts>
 8007244:	4603      	mov	r3, r0
 8007246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800724e:	d10f      	bne.n	8007270 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f009 fb18 	bl	8010890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800726e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f007 fa7f 	bl	800e778 <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d10a      	bne.n	800729c <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f009 fb26 	bl	80108d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800729a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f007 fa69 	bl	800e778 <USB_ReadInterrupts>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d115      	bne.n	80072dc <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f009 fb16 	bl	80108f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6859      	ldr	r1, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	e000      	b.n	80072dc <HAL_PCD_IRQHandler+0x7a0>
      return;
 80072da:	bf00      	nop
    }
  }
}
 80072dc:	3734      	adds	r7, #52	; 0x34
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd90      	pop	{r4, r7, pc}

080072e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	460b      	mov	r3, r1
 80072ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_PCD_SetAddress+0x1a>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e013      	b.n	8007324 <HAL_PCD_SetAddress+0x42>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	78fa      	ldrb	r2, [r7, #3]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f007 f9c7 	bl	800e6a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4603      	mov	r3, r0
 800733c:	70fb      	strb	r3, [r7, #3]
 800733e:	460b      	mov	r3, r1
 8007340:	803b      	strh	r3, [r7, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800734a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800734e:	2b00      	cmp	r3, #0
 8007350:	da0f      	bge.n	8007372 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	f003 020f 	and.w	r2, r3, #15
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	3338      	adds	r3, #56	; 0x38
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	3304      	adds	r3, #4
 8007368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	705a      	strb	r2, [r3, #1]
 8007370:	e00f      	b.n	8007392 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	3304      	adds	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	b2da      	uxtb	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800739e:	883a      	ldrh	r2, [r7, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	78ba      	ldrb	r2, [r7, #2]
 80073a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80073bc:	78bb      	ldrb	r3, [r7, #2]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d102      	bne.n	80073c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_PCD_EP_Open+0xaa>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e00e      	b.n	80073f4 <HAL_PCD_EP_Open+0xc8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68f9      	ldr	r1, [r7, #12]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f006 faed 	bl	800d9c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0f      	bge.n	8007430 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	f003 020f 	and.w	r2, r3, #15
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	3338      	adds	r3, #56	; 0x38
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	3304      	adds	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	705a      	strb	r2, [r3, #1]
 800742e:	e00f      	b.n	8007450 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	4613      	mov	r3, r2
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	3304      	adds	r3, #4
 8007448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_PCD_EP_Close+0x6e>
 8007466:	2302      	movs	r3, #2
 8007468:	e00e      	b.n	8007488 <HAL_PCD_EP_Close+0x8c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	4618      	mov	r0, r3
 800747a:	f006 fb2b 	bl	800dad4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	460b      	mov	r3, r1
 800749e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	f003 020f 	and.w	r2, r3, #15
 80074a6:	4613      	mov	r3, r2
 80074a8:	00db      	lsls	r3, r3, #3
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2200      	movs	r2, #0
 80074d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d102      	bne.n	80074ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	f006 fe0e 	bl	800e124 <USB_EP0StartXfer>
 8007508:	e008      	b.n	800751c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6818      	ldr	r0, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	f006 fbb8 	bl	800dc8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007548:	681b      	ldr	r3, [r3, #0]
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b086      	sub	sp, #24
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	460b      	mov	r3, r1
 8007564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3338      	adds	r3, #56	; 0x38
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2200      	movs	r2, #0
 800758e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2201      	movs	r2, #1
 8007594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007596:	7afb      	ldrb	r3, [r7, #11]
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	b2da      	uxtb	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d102      	bne.n	80075b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	6979      	ldr	r1, [r7, #20]
 80075c8:	f006 fdac 	bl	800e124 <USB_EP0StartXfer>
 80075cc:	e008      	b.n	80075e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	6979      	ldr	r1, [r7, #20]
 80075dc:	f006 fb56 	bl	800dc8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	f003 020f 	and.w	r2, r3, #15
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	429a      	cmp	r2, r3
 8007602:	d901      	bls.n	8007608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e050      	b.n	80076aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800760c:	2b00      	cmp	r3, #0
 800760e:	da0f      	bge.n	8007630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	3338      	adds	r3, #56	; 0x38
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	705a      	strb	r2, [r3, #1]
 800762e:	e00d      	b.n	800764c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	4613      	mov	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	1a9b      	subs	r3, r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	3304      	adds	r3, #4
 8007644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	b2da      	uxtb	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <HAL_PCD_EP_SetStall+0x82>
 8007668:	2302      	movs	r3, #2
 800766a:	e01e      	b.n	80076aa <HAL_PCD_EP_SetStall+0xc0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68f9      	ldr	r1, [r7, #12]
 800767a:	4618      	mov	r0, r3
 800767c:	f006 ff40 	bl	800e500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	b2d9      	uxtb	r1, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800769a:	461a      	mov	r2, r3
 800769c:	f007 f932 	bl	800e904 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d901      	bls.n	80076d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e042      	b.n	8007756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da0f      	bge.n	80076f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	f003 020f 	and.w	r2, r3, #15
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	1a9b      	subs	r3, r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	3338      	adds	r3, #56	; 0x38
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	4413      	add	r3, r2
 80076ec:	3304      	adds	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	705a      	strb	r2, [r3, #1]
 80076f6:	e00f      	b.n	8007718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	f003 020f 	and.w	r2, r3, #15
 80076fe:	4613      	mov	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	3304      	adds	r3, #4
 8007710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	b2da      	uxtb	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_PCD_EP_ClrStall+0x86>
 8007734:	2302      	movs	r3, #2
 8007736:	e00e      	b.n	8007756 <HAL_PCD_EP_ClrStall+0xa4>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	4618      	mov	r0, r3
 8007748:	f006 ff48 	bl	800e5dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b08a      	sub	sp, #40	; 0x28
 8007762:	af02      	add	r7, sp, #8
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	3338      	adds	r3, #56	; 0x38
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	3304      	adds	r3, #4
 8007784:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	429a      	cmp	r2, r3
 8007790:	d901      	bls.n	8007796 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e06c      	b.n	8007870 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d902      	bls.n	80077b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3303      	adds	r3, #3
 80077b6:	089b      	lsrs	r3, r3, #2
 80077b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80077ba:	e02b      	b.n	8007814 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	695a      	ldr	r2, [r3, #20]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d902      	bls.n	80077d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	3303      	adds	r3, #3
 80077dc:	089b      	lsrs	r3, r3, #2
 80077de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68d9      	ldr	r1, [r3, #12]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	4603      	mov	r3, r0
 80077f6:	6978      	ldr	r0, [r7, #20]
 80077f8:	f006 fdec 	bl	800e3d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	441a      	add	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	441a      	add	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	b29b      	uxth	r3, r3
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	429a      	cmp	r2, r3
 8007828:	d809      	bhi.n	800783e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007832:	429a      	cmp	r2, r3
 8007834:	d203      	bcs.n	800783e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1be      	bne.n	80077bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d811      	bhi.n	800786e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	2201      	movs	r2, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	43db      	mvns	r3, r3
 8007864:	6939      	ldr	r1, [r7, #16]
 8007866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800786a:	4013      	ands	r3, r2
 800786c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	333c      	adds	r3, #60	; 0x3c
 8007890:	3304      	adds	r3, #4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	f040 80a0 	bne.w	80079f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d015      	beq.n	80078e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4a72      	ldr	r2, [pc, #456]	; (8007a88 <PCD_EP_OutXfrComplete_int+0x210>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	f240 80dd 	bls.w	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80d7 	beq.w	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	6093      	str	r3, [r2, #8]
 80078e4:	e0cb      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	461a      	mov	r2, r3
 80078fe:	2320      	movs	r3, #32
 8007900:	6093      	str	r3, [r2, #8]
 8007902:	e0bc      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 80b7 	bne.w	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a5d      	ldr	r2, [pc, #372]	; (8007a88 <PCD_EP_OutXfrComplete_int+0x210>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d90f      	bls.n	8007938 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007934:	6093      	str	r3, [r2, #8]
 8007936:	e0a2      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800794a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	0159      	lsls	r1, r3, #5
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	440b      	add	r3, r1
 8007954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800795e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	1a9b      	subs	r3, r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4403      	add	r3, r0
 800796e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007972:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4613      	mov	r3, r2
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4403      	add	r3, r0
 8007996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4419      	add	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4403      	add	r3, r0
 80079ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d114      	bne.n	80079e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079da:	461a      	mov	r2, r3
 80079dc:	2101      	movs	r1, #1
 80079de:	f006 ff91 	bl	800e904 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f008 feb1 	bl	8010750 <HAL_PCD_DataOutStageCallback>
 80079ee:	e046      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <PCD_EP_OutXfrComplete_int+0x214>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d124      	bne.n	8007a42 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a14:	6093      	str	r3, [r2, #8]
 8007a16:	e032      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d008      	beq.n	8007a34 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2320      	movs	r3, #32
 8007a32:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f008 fe88 	bl	8010750 <HAL_PCD_DataOutStageCallback>
 8007a40:	e01d      	b.n	8007a7e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d114      	bne.n	8007a72 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d108      	bne.n	8007a72 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	f006 ff49 	bl	800e904 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f008 fe69 	bl	8010750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	4f54300a 	.word	0x4f54300a
 8007a8c:	4f54310a 	.word	0x4f54310a

08007a90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	333c      	adds	r3, #60	; 0x3c
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d90e      	bls.n	8007ae4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	461a      	mov	r2, r3
 8007ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f008 fe21 	bl	801072c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4a0a      	ldr	r2, [pc, #40]	; (8007b18 <PCD_EP_OutSetupPacket_int+0x88>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d90c      	bls.n	8007b0c <PCD_EP_OutSetupPacket_int+0x7c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d108      	bne.n	8007b0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b04:	461a      	mov	r2, r3
 8007b06:	2101      	movs	r1, #1
 8007b08:	f006 fefc 	bl	800e904 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	4f54300a 	.word	0x4f54300a

08007b1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b3a:	883b      	ldrh	r3, [r7, #0]
 8007b3c:	0419      	lsls	r1, r3, #16
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	629a      	str	r2, [r3, #40]	; 0x28
 8007b48:	e028      	b.n	8007b9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
 8007b5c:	e00d      	b.n	8007b7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	3340      	adds	r3, #64	; 0x40
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4413      	add	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	3301      	adds	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
 8007b7a:	7bfa      	ldrb	r2, [r7, #15]
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d3ec      	bcc.n	8007b5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007b84:	883b      	ldrh	r3, [r7, #0]
 8007b86:	0418      	lsls	r0, r3, #16
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6819      	ldr	r1, [r3, #0]
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	4302      	orrs	r2, r0
 8007b94:	3340      	adds	r3, #64	; 0x40
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	887a      	ldrh	r2, [r7, #2]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <HAL_PCDEx_ActivateLPM+0x44>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	10000003 	.word	0x10000003

08007c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d00a      	beq.n	8007c56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c40:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d001      	beq.n	8007c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e01f      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	e01d      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c56:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f023 0207 	bic.w	r2, r3, #7
 8007c5e:	490f      	ldr	r1, [pc, #60]	; (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c66:	f7fa fef7 	bl	8002a58 <HAL_GetTick>
 8007c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c6c:	e009      	b.n	8007c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c6e:	f7fa fef3 	bl	8002a58 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c7c:	d901      	bls.n	8007c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e007      	b.n	8007c92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c82:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <HAL_PWREx_ConfigSupply+0x70>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8e:	d1ee      	bne.n	8007c6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	58024800 	.word	0x58024800

08007ca0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4a04      	ldr	r2, [pc, #16]	; (8007cbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cae:	60d3      	str	r3, [r2, #12]
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	58024800 	.word	0x58024800

08007cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08c      	sub	sp, #48	; 0x30
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e397      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 8087 	beq.w	8007dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ce0:	4b9e      	ldr	r3, [pc, #632]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cea:	4b9c      	ldr	r3, [pc, #624]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d007      	beq.n	8007d06 <HAL_RCC_OscConfig+0x46>
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2b18      	cmp	r3, #24
 8007cfa:	d110      	bne.n	8007d1e <HAL_RCC_OscConfig+0x5e>
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d10b      	bne.n	8007d1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d06:	4b95      	ldr	r3, [pc, #596]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d06c      	beq.n	8007dec <HAL_RCC_OscConfig+0x12c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d168      	bne.n	8007dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e371      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d106      	bne.n	8007d36 <HAL_RCC_OscConfig+0x76>
 8007d28:	4b8c      	ldr	r3, [pc, #560]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a8b      	ldr	r2, [pc, #556]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	e02e      	b.n	8007d94 <HAL_RCC_OscConfig+0xd4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCC_OscConfig+0x98>
 8007d3e:	4b87      	ldr	r3, [pc, #540]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a86      	ldr	r2, [pc, #536]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	4b84      	ldr	r3, [pc, #528]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a83      	ldr	r2, [pc, #524]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e01d      	b.n	8007d94 <HAL_RCC_OscConfig+0xd4>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d60:	d10c      	bne.n	8007d7c <HAL_RCC_OscConfig+0xbc>
 8007d62:	4b7e      	ldr	r3, [pc, #504]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7d      	ldr	r2, [pc, #500]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	4b7b      	ldr	r3, [pc, #492]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a7a      	ldr	r2, [pc, #488]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	e00b      	b.n	8007d94 <HAL_RCC_OscConfig+0xd4>
 8007d7c:	4b77      	ldr	r3, [pc, #476]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a76      	ldr	r2, [pc, #472]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	4b74      	ldr	r3, [pc, #464]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a73      	ldr	r2, [pc, #460]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d013      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9c:	f7fa fe5c 	bl	8002a58 <HAL_GetTick>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da4:	f7fa fe58 	bl	8002a58 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b64      	cmp	r3, #100	; 0x64
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e325      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007db6:	4b69      	ldr	r3, [pc, #420]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0xe4>
 8007dc2:	e014      	b.n	8007dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7fa fe48 	bl	8002a58 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dcc:	f7fa fe44 	bl	8002a58 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b64      	cmp	r3, #100	; 0x64
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e311      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dde:	4b5f      	ldr	r3, [pc, #380]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1f0      	bne.n	8007dcc <HAL_RCC_OscConfig+0x10c>
 8007dea:	e000      	b.n	8007dee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 808a 	beq.w	8007f10 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dfc:	4b57      	ldr	r3, [pc, #348]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e06:	4b55      	ldr	r3, [pc, #340]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_RCC_OscConfig+0x162>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	2b18      	cmp	r3, #24
 8007e16:	d137      	bne.n	8007e88 <HAL_RCC_OscConfig+0x1c8>
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d132      	bne.n	8007e88 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e22:	4b4e      	ldr	r3, [pc, #312]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCC_OscConfig+0x17a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e2e3      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e3a:	4b48      	ldr	r3, [pc, #288]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f023 0219 	bic.w	r2, r3, #25
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	4945      	ldr	r1, [pc, #276]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e4c:	f7fa fe04 	bl	8002a58 <HAL_GetTick>
 8007e50:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e54:	f7fa fe00 	bl	8002a58 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e2cd      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e66:	4b3d      	ldr	r3, [pc, #244]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e72:	4b3a      	ldr	r3, [pc, #232]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	061b      	lsls	r3, r3, #24
 8007e80:	4936      	ldr	r1, [pc, #216]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e86:	e043      	b.n	8007f10 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d026      	beq.n	8007ede <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e90:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f023 0219 	bic.w	r2, r3, #25
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	492f      	ldr	r1, [pc, #188]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea2:	f7fa fdd9 	bl	8002a58 <HAL_GetTick>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eaa:	f7fa fdd5 	bl	8002a58 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e2a2      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ebc:	4b27      	ldr	r3, [pc, #156]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0f0      	beq.n	8007eaa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec8:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	4921      	ldr	r1, [pc, #132]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	604b      	str	r3, [r1, #4]
 8007edc:	e018      	b.n	8007f10 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ede:	4b1f      	ldr	r3, [pc, #124]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a1e      	ldr	r2, [pc, #120]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007ee4:	f023 0301 	bic.w	r3, r3, #1
 8007ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eea:	f7fa fdb5 	bl	8002a58 <HAL_GetTick>
 8007eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef2:	f7fa fdb1 	bl	8002a58 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e27e      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f04:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0310 	and.w	r3, r3, #16
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d06d      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f1c:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d007      	beq.n	8007f42 <HAL_RCC_OscConfig+0x282>
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	2b18      	cmp	r3, #24
 8007f36:	d11e      	bne.n	8007f76 <HAL_RCC_OscConfig+0x2b6>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d119      	bne.n	8007f76 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f42:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <HAL_RCC_OscConfig+0x29c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <HAL_RCC_OscConfig+0x2a0>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d004      	beq.n	8007f60 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e253      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
 8007f5a:	bf00      	nop
 8007f5c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f60:	4ba3      	ldr	r3, [pc, #652]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	061b      	lsls	r3, r3, #24
 8007f6e:	49a0      	ldr	r1, [pc, #640]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f74:	e040      	b.n	8007ff8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d023      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f7e:	4b9c      	ldr	r3, [pc, #624]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a9b      	ldr	r2, [pc, #620]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8a:	f7fa fd65 	bl	8002a58 <HAL_GetTick>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f92:	f7fa fd61 	bl	8002a58 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e22e      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fa4:	4b92      	ldr	r3, [pc, #584]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fb0:	4b8f      	ldr	r3, [pc, #572]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	498c      	ldr	r1, [pc, #560]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60cb      	str	r3, [r1, #12]
 8007fc4:	e018      	b.n	8007ff8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fc6:	4b8a      	ldr	r3, [pc, #552]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a89      	ldr	r2, [pc, #548]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd2:	f7fa fd41 	bl	8002a58 <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fd8:	e008      	b.n	8007fec <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fda:	f7fa fd3d 	bl	8002a58 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e20a      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fec:	4b80      	ldr	r3, [pc, #512]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f0      	bne.n	8007fda <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b00      	cmp	r3, #0
 8008002:	d036      	beq.n	8008072 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d019      	beq.n	8008040 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800800c:	4b78      	ldr	r3, [pc, #480]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800800e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008010:	4a77      	ldr	r2, [pc, #476]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fa fd1e 	bl	8002a58 <HAL_GetTick>
 800801c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008020:	f7fa fd1a 	bl	8002a58 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e1e7      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008032:	4b6f      	ldr	r3, [pc, #444]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f0      	beq.n	8008020 <HAL_RCC_OscConfig+0x360>
 800803e:	e018      	b.n	8008072 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008040:	4b6b      	ldr	r3, [pc, #428]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008044:	4a6a      	ldr	r2, [pc, #424]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804c:	f7fa fd04 	bl	8002a58 <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008054:	f7fa fd00 	bl	8002a58 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e1cd      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008066:	4b62      	ldr	r3, [pc, #392]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f0      	bne.n	8008054 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d036      	beq.n	80080ec <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d019      	beq.n	80080ba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008086:	4b5a      	ldr	r3, [pc, #360]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a59      	ldr	r2, [pc, #356]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800808c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008090:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008092:	f7fa fce1 	bl	8002a58 <HAL_GetTick>
 8008096:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800809a:	f7fa fcdd 	bl	8002a58 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e1aa      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080ac:	4b50      	ldr	r3, [pc, #320]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f0      	beq.n	800809a <HAL_RCC_OscConfig+0x3da>
 80080b8:	e018      	b.n	80080ec <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080ba:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a4c      	ldr	r2, [pc, #304]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 80080c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080c6:	f7fa fcc7 	bl	8002a58 <HAL_GetTick>
 80080ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080cc:	e008      	b.n	80080e0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080ce:	f7fa fcc3 	bl	8002a58 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e190      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f0      	bne.n	80080ce <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8085 	beq.w	8008204 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080fa:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <HAL_RCC_OscConfig+0x534>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a3d      	ldr	r2, [pc, #244]	; (80081f4 <HAL_RCC_OscConfig+0x534>)
 8008100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008106:	f7fa fca7 	bl	8002a58 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800810e:	f7fa fca3 	bl	8002a58 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b64      	cmp	r3, #100	; 0x64
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e170      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008120:	4b34      	ldr	r3, [pc, #208]	; (80081f4 <HAL_RCC_OscConfig+0x534>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d106      	bne.n	8008142 <HAL_RCC_OscConfig+0x482>
 8008134:	4b2e      	ldr	r3, [pc, #184]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008138:	4a2d      	ldr	r2, [pc, #180]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	6713      	str	r3, [r2, #112]	; 0x70
 8008140:	e02d      	b.n	800819e <HAL_RCC_OscConfig+0x4de>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10c      	bne.n	8008164 <HAL_RCC_OscConfig+0x4a4>
 800814a:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	4a28      	ldr	r2, [pc, #160]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	6713      	str	r3, [r2, #112]	; 0x70
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	4a25      	ldr	r2, [pc, #148]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800815c:	f023 0304 	bic.w	r3, r3, #4
 8008160:	6713      	str	r3, [r2, #112]	; 0x70
 8008162:	e01c      	b.n	800819e <HAL_RCC_OscConfig+0x4de>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	2b05      	cmp	r3, #5
 800816a:	d10c      	bne.n	8008186 <HAL_RCC_OscConfig+0x4c6>
 800816c:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008172:	f043 0304 	orr.w	r3, r3, #4
 8008176:	6713      	str	r3, [r2, #112]	; 0x70
 8008178:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6713      	str	r3, [r2, #112]	; 0x70
 8008184:	e00b      	b.n	800819e <HAL_RCC_OscConfig+0x4de>
 8008186:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	6713      	str	r3, [r2, #112]	; 0x70
 8008192:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d015      	beq.n	80081d2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a6:	f7fa fc57 	bl	8002a58 <HAL_GetTick>
 80081aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081ac:	e00a      	b.n	80081c4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ae:	f7fa fc53 	bl	8002a58 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e11e      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081c4:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <HAL_RCC_OscConfig+0x530>)
 80081c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ee      	beq.n	80081ae <HAL_RCC_OscConfig+0x4ee>
 80081d0:	e018      	b.n	8008204 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d2:	f7fa fc41 	bl	8002a58 <HAL_GetTick>
 80081d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081d8:	e00e      	b.n	80081f8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fa fc3d 	bl	8002a58 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d905      	bls.n	80081f8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e108      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
 80081f0:	58024400 	.word	0x58024400
 80081f4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081f8:	4b84      	ldr	r3, [pc, #528]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80081fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1ea      	bne.n	80081da <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80f9 	beq.w	8008400 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800820e:	4b7f      	ldr	r3, [pc, #508]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008216:	2b18      	cmp	r3, #24
 8008218:	f000 80b4 	beq.w	8008384 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b02      	cmp	r3, #2
 8008222:	f040 8095 	bne.w	8008350 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008226:	4b79      	ldr	r3, [pc, #484]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a78      	ldr	r2, [pc, #480]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800822c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fa fc11 	bl	8002a58 <HAL_GetTick>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800823a:	f7fa fc0d 	bl	8002a58 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e0da      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800824c:	4b6f      	ldr	r3, [pc, #444]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f0      	bne.n	800823a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008258:	4b6c      	ldr	r3, [pc, #432]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800825a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800825c:	4b6c      	ldr	r3, [pc, #432]	; (8008410 <HAL_RCC_OscConfig+0x750>)
 800825e:	4013      	ands	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008268:	0112      	lsls	r2, r2, #4
 800826a:	430a      	orrs	r2, r1
 800826c:	4967      	ldr	r1, [pc, #412]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800826e:	4313      	orrs	r3, r2
 8008270:	628b      	str	r3, [r1, #40]	; 0x28
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	3b01      	subs	r3, #1
 8008278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	3b01      	subs	r3, #1
 8008282:	025b      	lsls	r3, r3, #9
 8008284:	b29b      	uxth	r3, r3
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	3b01      	subs	r3, #1
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	3b01      	subs	r3, #1
 800829c:	061b      	lsls	r3, r3, #24
 800829e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082a2:	495a      	ldr	r1, [pc, #360]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80082a8:	4b58      	ldr	r3, [pc, #352]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	4a57      	ldr	r2, [pc, #348]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082b4:	4b55      	ldr	r3, [pc, #340]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b8:	4b56      	ldr	r3, [pc, #344]	; (8008414 <HAL_RCC_OscConfig+0x754>)
 80082ba:	4013      	ands	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082c0:	00d2      	lsls	r2, r2, #3
 80082c2:	4952      	ldr	r1, [pc, #328]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082c8:	4b50      	ldr	r3, [pc, #320]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	f023 020c 	bic.w	r2, r3, #12
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	494d      	ldr	r1, [pc, #308]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082da:	4b4c      	ldr	r3, [pc, #304]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	f023 0202 	bic.w	r2, r3, #2
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	4949      	ldr	r1, [pc, #292]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082ec:	4b47      	ldr	r3, [pc, #284]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4a46      	ldr	r2, [pc, #280]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f8:	4b44      	ldr	r3, [pc, #272]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a43      	ldr	r2, [pc, #268]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 80082fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008304:	4b41      	ldr	r3, [pc, #260]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a40      	ldr	r2, [pc, #256]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800830a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800830e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008310:	4b3e      	ldr	r3, [pc, #248]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4a3d      	ldr	r2, [pc, #244]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800831c:	4b3b      	ldr	r3, [pc, #236]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a3a      	ldr	r2, [pc, #232]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008328:	f7fa fb96 	bl	8002a58 <HAL_GetTick>
 800832c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008330:	f7fa fb92 	bl	8002a58 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e05f      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0x670>
 800834e:	e057      	b.n	8008400 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008350:	4b2e      	ldr	r3, [pc, #184]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2d      	ldr	r2, [pc, #180]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800835a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fa fb7c 	bl	8002a58 <HAL_GetTick>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008364:	f7fa fb78 	bl	8002a58 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e045      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008376:	4b25      	ldr	r3, [pc, #148]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HAL_RCC_OscConfig+0x6a4>
 8008382:	e03d      	b.n	8008400 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008384:	4b21      	ldr	r3, [pc, #132]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800838a:	4b20      	ldr	r3, [pc, #128]	; (800840c <HAL_RCC_OscConfig+0x74c>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b01      	cmp	r3, #1
 8008396:	d031      	beq.n	80083fc <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f003 0203 	and.w	r2, r3, #3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d12a      	bne.n	80083fc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d122      	bne.n	80083fc <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d11a      	bne.n	80083fc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	0a5b      	lsrs	r3, r3, #9
 80083ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d111      	bne.n	80083fc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d108      	bne.n	80083fc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3730      	adds	r7, #48	; 0x30
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
 8008410:	fffffc0c 	.word	0xfffffc0c
 8008414:	ffff0007 	.word	0xffff0007

08008418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e19c      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800842c:	4b8a      	ldr	r3, [pc, #552]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d910      	bls.n	800845c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800843a:	4b87      	ldr	r3, [pc, #540]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f023 020f 	bic.w	r2, r3, #15
 8008442:	4985      	ldr	r1, [pc, #532]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	4313      	orrs	r3, r2
 8008448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800844a:	4b83      	ldr	r3, [pc, #524]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	429a      	cmp	r2, r3
 8008456:	d001      	beq.n	800845c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e184      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d010      	beq.n	800848a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	4b7b      	ldr	r3, [pc, #492]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008474:	429a      	cmp	r2, r3
 8008476:	d908      	bls.n	800848a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008478:	4b78      	ldr	r3, [pc, #480]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	4975      	ldr	r1, [pc, #468]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008486:	4313      	orrs	r3, r2
 8008488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d010      	beq.n	80084b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	695a      	ldr	r2, [r3, #20]
 800849a:	4b70      	ldr	r3, [pc, #448]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d908      	bls.n	80084b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084a6:	4b6d      	ldr	r3, [pc, #436]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	496a      	ldr	r1, [pc, #424]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d010      	beq.n	80084e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	4b64      	ldr	r3, [pc, #400]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d908      	bls.n	80084e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084d4:	4b61      	ldr	r3, [pc, #388]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	495e      	ldr	r1, [pc, #376]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d010      	beq.n	8008514 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69da      	ldr	r2, [r3, #28]
 80084f6:	4b59      	ldr	r3, [pc, #356]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084fe:	429a      	cmp	r2, r3
 8008500:	d908      	bls.n	8008514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008502:	4b56      	ldr	r3, [pc, #344]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	4953      	ldr	r1, [pc, #332]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008510:	4313      	orrs	r3, r2
 8008512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d010      	beq.n	8008542 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68da      	ldr	r2, [r3, #12]
 8008524:	4b4d      	ldr	r3, [pc, #308]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 030f 	and.w	r3, r3, #15
 800852c:	429a      	cmp	r2, r3
 800852e:	d908      	bls.n	8008542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008530:	4b4a      	ldr	r3, [pc, #296]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	f023 020f 	bic.w	r2, r3, #15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	4947      	ldr	r1, [pc, #284]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800853e:	4313      	orrs	r3, r2
 8008540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d055      	beq.n	80085fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800854e:	4b43      	ldr	r3, [pc, #268]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	4940      	ldr	r1, [pc, #256]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800855c:	4313      	orrs	r3, r2
 800855e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d107      	bne.n	8008578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008568:	4b3c      	ldr	r3, [pc, #240]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d121      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e0f6      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d107      	bne.n	8008590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008580:	4b36      	ldr	r3, [pc, #216]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d115      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0ea      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d107      	bne.n	80085a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008598:	4b30      	ldr	r3, [pc, #192]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e0de      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e0d6      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085b8:	4b28      	ldr	r3, [pc, #160]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f023 0207 	bic.w	r2, r3, #7
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4925      	ldr	r1, [pc, #148]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ca:	f7fa fa45 	bl	8002a58 <HAL_GetTick>
 80085ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d0:	e00a      	b.n	80085e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d2:	f7fa fa41 	bl	8002a58 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e0be      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e8:	4b1c      	ldr	r3, [pc, #112]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d1eb      	bne.n	80085d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d010      	beq.n	8008628 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	4b14      	ldr	r3, [pc, #80]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	429a      	cmp	r2, r3
 8008614:	d208      	bcs.n	8008628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f023 020f 	bic.w	r2, r3, #15
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	490e      	ldr	r1, [pc, #56]	; (800865c <HAL_RCC_ClockConfig+0x244>)
 8008624:	4313      	orrs	r3, r2
 8008626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d214      	bcs.n	8008660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f023 020f 	bic.w	r2, r3, #15
 800863e:	4906      	ldr	r1, [pc, #24]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	4313      	orrs	r3, r2
 8008644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <HAL_RCC_ClockConfig+0x240>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	429a      	cmp	r2, r3
 8008652:	d005      	beq.n	8008660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e086      	b.n	8008766 <HAL_RCC_ClockConfig+0x34e>
 8008658:	52002000 	.word	0x52002000
 800865c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	4b3f      	ldr	r3, [pc, #252]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008678:	429a      	cmp	r2, r3
 800867a:	d208      	bcs.n	800868e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800867c:	4b3c      	ldr	r3, [pc, #240]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	4939      	ldr	r1, [pc, #228]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 800868a:	4313      	orrs	r3, r2
 800868c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	4b34      	ldr	r3, [pc, #208]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d208      	bcs.n	80086bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086aa:	4b31      	ldr	r3, [pc, #196]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	492e      	ldr	r1, [pc, #184]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	4b28      	ldr	r3, [pc, #160]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d208      	bcs.n	80086ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086d8:	4b25      	ldr	r3, [pc, #148]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	4922      	ldr	r1, [pc, #136]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d010      	beq.n	8008718 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69da      	ldr	r2, [r3, #28]
 80086fa:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008702:	429a      	cmp	r2, r3
 8008704:	d208      	bcs.n	8008718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	4917      	ldr	r1, [pc, #92]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 8008714:	4313      	orrs	r3, r2
 8008716:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008718:	f000 f834 	bl	8008784 <HAL_RCC_GetSysClockFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	4b14      	ldr	r3, [pc, #80]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	4912      	ldr	r1, [pc, #72]	; (8008774 <HAL_RCC_ClockConfig+0x35c>)
 800872a:	5ccb      	ldrb	r3, [r1, r3]
 800872c:	f003 031f 	and.w	r3, r3, #31
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
 8008734:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008736:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <HAL_RCC_ClockConfig+0x358>)
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	4a0d      	ldr	r2, [pc, #52]	; (8008774 <HAL_RCC_ClockConfig+0x35c>)
 8008740:	5cd3      	ldrb	r3, [r2, r3]
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
 800874c:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <HAL_RCC_ClockConfig+0x360>)
 800874e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <HAL_RCC_ClockConfig+0x364>)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <HAL_RCC_ClockConfig+0x368>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f7fa f932 	bl	80029c4 <HAL_InitTick>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	58024400 	.word	0x58024400
 8008774:	080119c8 	.word	0x080119c8
 8008778:	24000018 	.word	0x24000018
 800877c:	24000014 	.word	0x24000014
 8008780:	2400001c 	.word	0x2400001c

08008784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008784:	b480      	push	{r7}
 8008786:	b089      	sub	sp, #36	; 0x24
 8008788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800878a:	4bb3      	ldr	r3, [pc, #716]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008792:	2b18      	cmp	r3, #24
 8008794:	f200 8155 	bhi.w	8008a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	08008805 	.word	0x08008805
 80087a4:	08008a43 	.word	0x08008a43
 80087a8:	08008a43 	.word	0x08008a43
 80087ac:	08008a43 	.word	0x08008a43
 80087b0:	08008a43 	.word	0x08008a43
 80087b4:	08008a43 	.word	0x08008a43
 80087b8:	08008a43 	.word	0x08008a43
 80087bc:	08008a43 	.word	0x08008a43
 80087c0:	0800882b 	.word	0x0800882b
 80087c4:	08008a43 	.word	0x08008a43
 80087c8:	08008a43 	.word	0x08008a43
 80087cc:	08008a43 	.word	0x08008a43
 80087d0:	08008a43 	.word	0x08008a43
 80087d4:	08008a43 	.word	0x08008a43
 80087d8:	08008a43 	.word	0x08008a43
 80087dc:	08008a43 	.word	0x08008a43
 80087e0:	08008831 	.word	0x08008831
 80087e4:	08008a43 	.word	0x08008a43
 80087e8:	08008a43 	.word	0x08008a43
 80087ec:	08008a43 	.word	0x08008a43
 80087f0:	08008a43 	.word	0x08008a43
 80087f4:	08008a43 	.word	0x08008a43
 80087f8:	08008a43 	.word	0x08008a43
 80087fc:	08008a43 	.word	0x08008a43
 8008800:	08008837 	.word	0x08008837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008804:	4b94      	ldr	r3, [pc, #592]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008810:	4b91      	ldr	r3, [pc, #580]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	4a90      	ldr	r2, [pc, #576]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008822:	e111      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008824:	4b8d      	ldr	r3, [pc, #564]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008826:	61bb      	str	r3, [r7, #24]
    break;
 8008828:	e10e      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800882a:	4b8d      	ldr	r3, [pc, #564]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800882c:	61bb      	str	r3, [r7, #24]
    break;
 800882e:	e10b      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008830:	4b8c      	ldr	r3, [pc, #560]	; (8008a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008832:	61bb      	str	r3, [r7, #24]
    break;
 8008834:	e108      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008836:	4b88      	ldr	r3, [pc, #544]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008840:	4b85      	ldr	r3, [pc, #532]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	091b      	lsrs	r3, r3, #4
 8008846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800884a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800884c:	4b82      	ldr	r3, [pc, #520]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008856:	4b80      	ldr	r3, [pc, #512]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885a:	08db      	lsrs	r3, r3, #3
 800885c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80e1 	beq.w	8008a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b02      	cmp	r3, #2
 800887e:	f000 8083 	beq.w	8008988 <HAL_RCC_GetSysClockFreq+0x204>
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b02      	cmp	r3, #2
 8008886:	f200 80a1 	bhi.w	80089cc <HAL_RCC_GetSysClockFreq+0x248>
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <HAL_RCC_GetSysClockFreq+0x114>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d056      	beq.n	8008944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008896:	e099      	b.n	80089cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008898:	4b6f      	ldr	r3, [pc, #444]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d02d      	beq.n	8008900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088a4:	4b6c      	ldr	r3, [pc, #432]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	08db      	lsrs	r3, r3, #3
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	4a6b      	ldr	r2, [pc, #428]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
 80088b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ce:	4b62      	ldr	r3, [pc, #392]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088de:	ed97 6a02 	vldr	s12, [r7, #8]
 80088e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80088fe:	e087      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800890e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008912:	4b51      	ldr	r3, [pc, #324]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008922:	ed97 6a02 	vldr	s12, [r7, #8]
 8008926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008942:	e065      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008956:	4b40      	ldr	r3, [pc, #256]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008966:	ed97 6a02 	vldr	s12, [r7, #8]
 800896a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800896e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008986:	e043      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ca:	e021      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089de:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80089f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	0a5b      	lsrs	r3, r3, #9
 8008a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	ee07 3a90 	vmov	s15, r3
 8008a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a34:	ee17 3a90 	vmov	r3, s15
 8008a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a3a:	e005      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
    break;
 8008a40:	e002      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a44:	61bb      	str	r3, [r7, #24]
    break;
 8008a46:	bf00      	nop
  }

  return sysclockfreq;
 8008a48:	69bb      	ldr	r3, [r7, #24]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3724      	adds	r7, #36	; 0x24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	03d09000 	.word	0x03d09000
 8008a60:	003d0900 	.word	0x003d0900
 8008a64:	017d7840 	.word	0x017d7840
 8008a68:	46000000 	.word	0x46000000
 8008a6c:	4c742400 	.word	0x4c742400
 8008a70:	4a742400 	.word	0x4a742400
 8008a74:	4bbebc20 	.word	0x4bbebc20

08008a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a7e:	f7ff fe81 	bl	8008784 <HAL_RCC_GetSysClockFreq>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	490f      	ldr	r1, [pc, #60]	; (8008acc <HAL_RCC_GetHCLKFreq+0x54>)
 8008a90:	5ccb      	ldrb	r3, [r1, r3]
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f003 030f 	and.w	r3, r3, #15
 8008aa4:	4a09      	ldr	r2, [pc, #36]	; (8008acc <HAL_RCC_GetHCLKFreq+0x54>)
 8008aa6:	5cd3      	ldrb	r3, [r2, r3]
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab2:	4a07      	ldr	r2, [pc, #28]	; (8008ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ab6:	4a07      	ldr	r2, [pc, #28]	; (8008ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008abe:	681b      	ldr	r3, [r3, #0]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	080119c8 	.word	0x080119c8
 8008ad0:	24000018 	.word	0x24000018
 8008ad4:	24000014 	.word	0x24000014

08008ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008adc:	f7ff ffcc 	bl	8008a78 <HAL_RCC_GetHCLKFreq>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	4904      	ldr	r1, [pc, #16]	; (8008b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008aee:	5ccb      	ldrb	r3, [r1, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	58024400 	.word	0x58024400
 8008b00:	080119c8 	.word	0x080119c8

08008b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b08:	f7ff ffb6 	bl	8008a78 <HAL_RCC_GetHCLKFreq>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	4904      	ldr	r1, [pc, #16]	; (8008b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b1a:	5ccb      	ldrb	r3, [r1, r3]
 8008b1c:	f003 031f 	and.w	r3, r3, #31
 8008b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	080119c8 	.word	0x080119c8

08008b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d03f      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b54:	d02a      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b5a:	d824      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b60:	d018      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b66:	d81e      	bhi.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b70:	d007      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b72:	e018      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b74:	4bab      	ldr	r3, [pc, #684]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	4aaa      	ldr	r2, [pc, #680]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b80:	e015      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3304      	adds	r3, #4
 8008b86:	2102      	movs	r1, #2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 feff 	bl	800a98c <RCCEx_PLL2_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b92:	e00c      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	2102      	movs	r1, #2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 ffa8 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8008baa:	e000      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d109      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bb4:	4b9b      	ldr	r3, [pc, #620]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc0:	4998      	ldr	r1, [pc, #608]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8008bc6:	e001      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d03d      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d826      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008be0:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008bfd 	.word	0x08008bfd
 8008bec:	08008c0b 	.word	0x08008c0b
 8008bf0:	08008c1d 	.word	0x08008c1d
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfc:	4b89      	ldr	r3, [pc, #548]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c00:	4a88      	ldr	r2, [pc, #544]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c08:	e015      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 febb 	bl	800a98c <RCCEx_PLL2_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c1a:	e00c      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3324      	adds	r3, #36	; 0x24
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 ff64 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c2c:	e003      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
      break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c3c:	4b79      	ldr	r3, [pc, #484]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c40:	f023 0207 	bic.w	r2, r3, #7
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c48:	4976      	ldr	r1, [pc, #472]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c4e:	e001      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d051      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c66:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008c6a:	d036      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c6c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008c70:	d830      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c76:	d032      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c7c:	d82a      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c82:	d02e      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008c84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c88:	d824      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c8e:	d018      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c94:	d81e      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c9e:	d007      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008ca0:	e018      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca2:	4b60      	ldr	r3, [pc, #384]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	4a5f      	ldr	r2, [pc, #380]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cae:	e019      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fe68 	bl	800a98c <RCCEx_PLL2_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cc0:	e010      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3324      	adds	r3, #36	; 0x24
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 ff11 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cd2:	e007      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd8:	e004      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008cda:	bf00      	nop
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008cea:	4b4e      	ldr	r3, [pc, #312]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cf8:	494a      	ldr	r1, [pc, #296]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8008cfe:	e001      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d051      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d16:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d1a:	d036      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008d1c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d20:	d830      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d26:	d032      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008d28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d2c:	d82a      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d32:	d02e      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d38:	d824      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d3e:	d018      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d44:	d81e      	bhi.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008d4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d4e:	d007      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008d50:	e018      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d52:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	4a33      	ldr	r2, [pc, #204]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d5e:	e019      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fe10 	bl	800a98c <RCCEx_PLL2_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d70:	e010      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3324      	adds	r3, #36	; 0x24
 8008d76:	2100      	movs	r1, #0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f001 feb9 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d82:	e007      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]
      break;
 8008d88:	e004      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d8a:	bf00      	nop
 8008d8c:	e002      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d8e:	bf00      	nop
 8008d90:	e000      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d9a:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008da8:	491e      	ldr	r1, [pc, #120]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	658b      	str	r3, [r1, #88]	; 0x58
 8008dae:	e001      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d035      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc4:	2b30      	cmp	r3, #48	; 0x30
 8008dc6:	d01c      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008dc8:	2b30      	cmp	r3, #48	; 0x30
 8008dca:	d817      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d00c      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d813      	bhi.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d016      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008dd8:	2b10      	cmp	r3, #16
 8008dda:	d10f      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	4a10      	ldr	r2, [pc, #64]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008de8:	e00e      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3304      	adds	r3, #4
 8008dee:	2102      	movs	r1, #2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fdcb 	bl	800a98c <RCCEx_PLL2_Config>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008dfa:	e005      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008e00:	e002      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10c      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1a:	4902      	ldr	r1, [pc, #8]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e20:	e004      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008e22:	bf00      	nop
 8008e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d047      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e40:	d030      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e46:	d82a      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e4c:	d02c      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e52:	d824      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e58:	d018      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e5e:	d81e      	bhi.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e68:	d007      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e6a:	e018      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6c:	4bac      	ldr	r3, [pc, #688]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4aab      	ldr	r2, [pc, #684]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e78:	e017      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 fd83 	bl	800a98c <RCCEx_PLL2_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e00e      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fe2c 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e9c:	e005      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea2:	e002      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e000      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d109      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008eb0:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebc:	4998      	ldr	r1, [pc, #608]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ec2:	e001      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d049      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008edc:	d02e      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008ede:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ee2:	d828      	bhi.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008ee4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ee8:	d02a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008eea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eee:	d822      	bhi.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008ef0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ef4:	d026      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008ef6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008efa:	d81c      	bhi.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f00:	d010      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f06:	d816      	bhi.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01d      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f10:	d111      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	3304      	adds	r3, #4
 8008f16:	2101      	movs	r1, #1
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fd37 	bl	800a98c <RCCEx_PLL2_Config>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f22:	e012      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3324      	adds	r3, #36	; 0x24
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 fde0 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f34:	e009      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3a:	e006      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e004      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f40:	bf00      	nop
 8008f42:	e002      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f44:	bf00      	nop
 8008f46:	e000      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d109      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f50:	4b73      	ldr	r3, [pc, #460]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5c:	4970      	ldr	r1, [pc, #448]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	650b      	str	r3, [r1, #80]	; 0x50
 8008f62:	e001      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d04b      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f7e:	d02e      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f84:	d828      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8a:	d02a      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f90:	d822      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f96:	d026      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f9c:	d81c      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa2:	d010      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa8:	d816      	bhi.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01d      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb2:	d111      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	2101      	movs	r1, #1
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 fce6 	bl	800a98c <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fc4:	e012      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3324      	adds	r3, #36	; 0x24
 8008fca:	2101      	movs	r1, #1
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fd8f 	bl	800aaf0 <RCCEx_PLL3_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fd6:	e009      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	75fb      	strb	r3, [r7, #23]
      break;
 8008fdc:	e006      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008fde:	bf00      	nop
 8008fe0:	e004      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008fe2:	bf00      	nop
 8008fe4:	e002      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008fe6:	bf00      	nop
 8008fe8:	e000      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ff2:	4b4b      	ldr	r3, [pc, #300]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009000:	4947      	ldr	r1, [pc, #284]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009002:	4313      	orrs	r3, r2
 8009004:	658b      	str	r3, [r1, #88]	; 0x58
 8009006:	e001      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d02f      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800901c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009020:	d00e      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009026:	d814      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d015      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800902c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009030:	d10f      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009032:	4b3b      	ldr	r3, [pc, #236]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	4a3a      	ldr	r2, [pc, #232]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800903e:	e00c      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3304      	adds	r3, #4
 8009044:	2101      	movs	r1, #1
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fca0 	bl	800a98c <RCCEx_PLL2_Config>
 800904c:	4603      	mov	r3, r0
 800904e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009050:	e003      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	75fb      	strb	r3, [r7, #23]
      break;
 8009056:	e000      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009060:	4b2f      	ldr	r3, [pc, #188]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009064:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906c:	492c      	ldr	r1, [pc, #176]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800906e:	4313      	orrs	r3, r2
 8009070:	650b      	str	r3, [r1, #80]	; 0x50
 8009072:	e001      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d032      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009088:	2b03      	cmp	r3, #3
 800908a:	d81b      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090cb 	.word	0x080090cb
 8009098:	080090a5 	.word	0x080090a5
 800909c:	080090b3 	.word	0x080090b3
 80090a0:	080090cb 	.word	0x080090cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	4a1d      	ldr	r2, [pc, #116]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090b0:	e00c      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2102      	movs	r1, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 fc67 	bl	800a98c <RCCEx_PLL2_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090c2:	e003      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	e000      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80090ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d6:	f023 0203 	bic.w	r2, r3, #3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	4910      	ldr	r1, [pc, #64]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80090e4:	e001      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 808a 	beq.w	800920c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a09      	ldr	r2, [pc, #36]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80090fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009104:	f7f9 fca8 	bl	8002a58 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800910a:	e00d      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800910c:	f7f9 fca4 	bl	8002a58 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b64      	cmp	r3, #100	; 0x64
 8009118:	d906      	bls.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	75fb      	strb	r3, [r7, #23]
        break;
 800911e:	e009      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009120:	58024400 	.word	0x58024400
 8009124:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009128:	4bb9      	ldr	r3, [pc, #740]	; (8009410 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0eb      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d166      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800913a:	4bb6      	ldr	r3, [pc, #728]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800913c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009144:	4053      	eors	r3, r2
 8009146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914a:	2b00      	cmp	r3, #0
 800914c:	d013      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800914e:	4bb1      	ldr	r3, [pc, #708]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009156:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009158:	4bae      	ldr	r3, [pc, #696]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800915a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915c:	4aad      	ldr	r2, [pc, #692]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800915e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009162:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009164:	4bab      	ldr	r3, [pc, #684]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009168:	4aaa      	ldr	r2, [pc, #680]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800916a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800916e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009170:	4aa8      	ldr	r2, [pc, #672]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800917c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009180:	d115      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009182:	f7f9 fc69 	bl	8002a58 <HAL_GetTick>
 8009186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009188:	e00b      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800918a:	f7f9 fc65 	bl	8002a58 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	f241 3288 	movw	r2, #5000	; 0x1388
 8009198:	4293      	cmp	r3, r2
 800919a:	d902      	bls.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	75fb      	strb	r3, [r7, #23]
            break;
 80091a0:	e005      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091a2:	4b9c      	ldr	r3, [pc, #624]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0ed      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d126      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091c2:	d10d      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80091c4:	4b93      	ldr	r3, [pc, #588]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091d2:	0919      	lsrs	r1, r3, #4
 80091d4:	4b90      	ldr	r3, [pc, #576]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80091d6:	400b      	ands	r3, r1
 80091d8:	498e      	ldr	r1, [pc, #568]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	610b      	str	r3, [r1, #16]
 80091de:	e005      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80091e0:	4b8c      	ldr	r3, [pc, #560]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4a8b      	ldr	r2, [pc, #556]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091ea:	6113      	str	r3, [r2, #16]
 80091ec:	4b89      	ldr	r3, [pc, #548]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091fa:	4986      	ldr	r1, [pc, #536]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	670b      	str	r3, [r1, #112]	; 0x70
 8009200:	e004      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	75bb      	strb	r3, [r7, #22]
 8009206:	e001      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d07e      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921c:	2b28      	cmp	r3, #40	; 0x28
 800921e:	d867      	bhi.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	080092f7 	.word	0x080092f7
 800922c:	080092f1 	.word	0x080092f1
 8009230:	080092f1 	.word	0x080092f1
 8009234:	080092f1 	.word	0x080092f1
 8009238:	080092f1 	.word	0x080092f1
 800923c:	080092f1 	.word	0x080092f1
 8009240:	080092f1 	.word	0x080092f1
 8009244:	080092f1 	.word	0x080092f1
 8009248:	080092cd 	.word	0x080092cd
 800924c:	080092f1 	.word	0x080092f1
 8009250:	080092f1 	.word	0x080092f1
 8009254:	080092f1 	.word	0x080092f1
 8009258:	080092f1 	.word	0x080092f1
 800925c:	080092f1 	.word	0x080092f1
 8009260:	080092f1 	.word	0x080092f1
 8009264:	080092f1 	.word	0x080092f1
 8009268:	080092df 	.word	0x080092df
 800926c:	080092f1 	.word	0x080092f1
 8009270:	080092f1 	.word	0x080092f1
 8009274:	080092f1 	.word	0x080092f1
 8009278:	080092f1 	.word	0x080092f1
 800927c:	080092f1 	.word	0x080092f1
 8009280:	080092f1 	.word	0x080092f1
 8009284:	080092f1 	.word	0x080092f1
 8009288:	080092f7 	.word	0x080092f7
 800928c:	080092f1 	.word	0x080092f1
 8009290:	080092f1 	.word	0x080092f1
 8009294:	080092f1 	.word	0x080092f1
 8009298:	080092f1 	.word	0x080092f1
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	080092f1 	.word	0x080092f1
 80092a4:	080092f1 	.word	0x080092f1
 80092a8:	080092f7 	.word	0x080092f7
 80092ac:	080092f1 	.word	0x080092f1
 80092b0:	080092f1 	.word	0x080092f1
 80092b4:	080092f1 	.word	0x080092f1
 80092b8:	080092f1 	.word	0x080092f1
 80092bc:	080092f1 	.word	0x080092f1
 80092c0:	080092f1 	.word	0x080092f1
 80092c4:	080092f1 	.word	0x080092f1
 80092c8:	080092f7 	.word	0x080092f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3304      	adds	r3, #4
 80092d0:	2101      	movs	r1, #1
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 fb5a 	bl	800a98c <RCCEx_PLL2_Config>
 80092d8:	4603      	mov	r3, r0
 80092da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092dc:	e00c      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3324      	adds	r3, #36	; 0x24
 80092e2:	2101      	movs	r1, #1
 80092e4:	4618      	mov	r0, r3
 80092e6:	f001 fc03 	bl	800aaf0 <RCCEx_PLL3_Config>
 80092ea:	4603      	mov	r3, r0
 80092ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092ee:	e003      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
      break;
 80092f4:	e000      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80092f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d109      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092fe:	4b45      	ldr	r3, [pc, #276]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930a:	4942      	ldr	r1, [pc, #264]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800930c:	4313      	orrs	r3, r2
 800930e:	654b      	str	r3, [r1, #84]	; 0x54
 8009310:	e001      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d037      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	2b05      	cmp	r3, #5
 8009328:	d820      	bhi.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009373 	.word	0x08009373
 8009334:	08009349 	.word	0x08009349
 8009338:	0800935b 	.word	0x0800935b
 800933c:	08009373 	.word	0x08009373
 8009340:	08009373 	.word	0x08009373
 8009344:	08009373 	.word	0x08009373
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3304      	adds	r3, #4
 800934c:	2101      	movs	r1, #1
 800934e:	4618      	mov	r0, r3
 8009350:	f001 fb1c 	bl	800a98c <RCCEx_PLL2_Config>
 8009354:	4603      	mov	r3, r0
 8009356:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009358:	e00c      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3324      	adds	r3, #36	; 0x24
 800935e:	2101      	movs	r1, #1
 8009360:	4618      	mov	r0, r3
 8009362:	f001 fbc5 	bl	800aaf0 <RCCEx_PLL3_Config>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800936a:	e003      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
      break;
 8009370:	e000      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8009372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d109      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800937a:	4b26      	ldr	r3, [pc, #152]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800937c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937e:	f023 0207 	bic.w	r2, r3, #7
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009386:	4923      	ldr	r1, [pc, #140]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009388:	4313      	orrs	r3, r2
 800938a:	654b      	str	r3, [r1, #84]	; 0x54
 800938c:	e001      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d040      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	2b05      	cmp	r3, #5
 80093a6:	d821      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093f3 	.word	0x080093f3
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093db 	.word	0x080093db
 80093bc:	080093f3 	.word	0x080093f3
 80093c0:	080093f3 	.word	0x080093f3
 80093c4:	080093f3 	.word	0x080093f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	2101      	movs	r1, #1
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 fadc 	bl	800a98c <RCCEx_PLL2_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093d8:	e00c      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3324      	adds	r3, #36	; 0x24
 80093de:	2101      	movs	r1, #1
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fb85 	bl	800aaf0 <RCCEx_PLL3_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093ea:	e003      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
      break;
 80093f0:	e000      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80093f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d110      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093fa:	4b06      	ldr	r3, [pc, #24]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fe:	f023 0207 	bic.w	r2, r3, #7
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009408:	4902      	ldr	r1, [pc, #8]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800940a:	4313      	orrs	r3, r2
 800940c:	658b      	str	r3, [r1, #88]	; 0x58
 800940e:	e007      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009410:	58024800 	.word	0x58024800
 8009414:	58024400 	.word	0x58024400
 8009418:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d04b      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009436:	d02e      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800943c:	d828      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800943e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009442:	d02a      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009448:	d822      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800944a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800944e:	d026      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009450:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009454:	d81c      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945a:	d010      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800945c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009460:	d816      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d01d      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800946a:	d111      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fa8a 	bl	800a98c <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800947c:	e012      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3324      	adds	r3, #36	; 0x24
 8009482:	2102      	movs	r1, #2
 8009484:	4618      	mov	r0, r3
 8009486:	f001 fb33 	bl	800aaf0 <RCCEx_PLL3_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800948e:	e009      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e006      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009496:	bf00      	nop
 8009498:	e004      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800949a:	bf00      	nop
 800949c:	e002      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80094a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10a      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094aa:	4bb2      	ldr	r3, [pc, #712]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80094ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b8:	49ae      	ldr	r1, [pc, #696]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	654b      	str	r3, [r1, #84]	; 0x54
 80094be:	e001      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d04b      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094da:	d02e      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80094dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094e0:	d828      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d02a      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80094e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ec:	d822      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80094ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094f2:	d026      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80094f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094f8:	d81c      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80094fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094fe:	d010      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009504:	d816      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01d      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800950a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800950e:	d111      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fa38 	bl	800a98c <RCCEx_PLL2_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009520:	e012      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	; 0x24
 8009526:	2102      	movs	r1, #2
 8009528:	4618      	mov	r0, r3
 800952a:	f001 fae1 	bl	800aaf0 <RCCEx_PLL3_Config>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009532:	e009      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
      break;
 8009538:	e006      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800953a:	bf00      	nop
 800953c:	e004      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800953e:	bf00      	nop
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800954e:	4b89      	ldr	r3, [pc, #548]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009552:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800955c:	4985      	ldr	r1, [pc, #532]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800955e:	4313      	orrs	r3, r2
 8009560:	658b      	str	r3, [r1, #88]	; 0x58
 8009562:	e001      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009570:	2b00      	cmp	r3, #0
 8009572:	d04b      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800957a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800957e:	d02e      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009580:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009584:	d828      	bhi.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800958a:	d02a      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800958c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009590:	d822      	bhi.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009592:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009596:	d026      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009598:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800959c:	d81c      	bhi.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800959e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095a2:	d010      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80095a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095a8:	d816      	bhi.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01d      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80095ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095b2:	d111      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f9e6 	bl	800a98c <RCCEx_PLL2_Config>
 80095c0:	4603      	mov	r3, r0
 80095c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095c4:	e012      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3324      	adds	r3, #36	; 0x24
 80095ca:	2102      	movs	r1, #2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fa8f 	bl	800aaf0 <RCCEx_PLL3_Config>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095d6:	e009      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
      break;
 80095dc:	e006      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80095de:	bf00      	nop
 80095e0:	e004      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80095e2:	bf00      	nop
 80095e4:	e002      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80095e6:	bf00      	nop
 80095e8:	e000      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80095ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095f2:	4b60      	ldr	r3, [pc, #384]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009600:	495c      	ldr	r1, [pc, #368]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009602:	4313      	orrs	r3, r2
 8009604:	658b      	str	r3, [r1, #88]	; 0x58
 8009606:	e001      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0308 	and.w	r3, r3, #8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d018      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009620:	d10a      	bne.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3324      	adds	r3, #36	; 0x24
 8009626:	2102      	movs	r1, #2
 8009628:	4618      	mov	r0, r3
 800962a:	f001 fa61 	bl	800aaf0 <RCCEx_PLL3_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009638:	4b4e      	ldr	r3, [pc, #312]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800963a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009644:	494b      	ldr	r1, [pc, #300]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009646:	4313      	orrs	r3, r2
 8009648:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d01a      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009660:	d10a      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3324      	adds	r3, #36	; 0x24
 8009666:	2102      	movs	r1, #2
 8009668:	4618      	mov	r0, r3
 800966a:	f001 fa41 	bl	800aaf0 <RCCEx_PLL3_Config>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009678:	4b3e      	ldr	r3, [pc, #248]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800967a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009686:	493b      	ldr	r1, [pc, #236]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009688:	4313      	orrs	r3, r2
 800968a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d034      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800969e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a2:	d01d      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80096a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096a8:	d817      	bhi.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80096ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096b2:	d009      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096b4:	e011      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3304      	adds	r3, #4
 80096ba:	2100      	movs	r1, #0
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f965 	bl	800a98c <RCCEx_PLL2_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096c6:	e00c      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	2102      	movs	r1, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fa0e 	bl	800aaf0 <RCCEx_PLL3_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096d8:	e003      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	75fb      	strb	r3, [r7, #23]
      break;
 80096de:	e000      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80096e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096e8:	4b22      	ldr	r3, [pc, #136]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096f6:	491f      	ldr	r1, [pc, #124]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	658b      	str	r3, [r1, #88]	; 0x58
 80096fc:	e001      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d036      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009718:	d01c      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800971a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800971e:	d816      	bhi.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009724:	d003      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800972a:	d007      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800972c:	e00f      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	4a10      	ldr	r2, [pc, #64]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800973a:	e00c      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3324      	adds	r3, #36	; 0x24
 8009740:	2101      	movs	r1, #1
 8009742:	4618      	mov	r0, r3
 8009744:	f001 f9d4 	bl	800aaf0 <RCCEx_PLL3_Config>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800974c:	e003      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
      break;
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10d      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800975c:	4b05      	ldr	r3, [pc, #20]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800976a:	4902      	ldr	r1, [pc, #8]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800976c:	4313      	orrs	r3, r2
 800976e:	654b      	str	r3, [r1, #84]	; 0x54
 8009770:	e004      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8009772:	bf00      	nop
 8009774:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d029      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009794:	d007      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009796:	e00f      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009798:	4b61      	ldr	r3, [pc, #388]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	4a60      	ldr	r2, [pc, #384]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800979e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097a4:	e00b      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3304      	adds	r3, #4
 80097aa:	2102      	movs	r1, #2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 f8ed 	bl	800a98c <RCCEx_PLL2_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097b6:	e002      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	75fb      	strb	r3, [r7, #23]
      break;
 80097bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097c4:	4b56      	ldr	r3, [pc, #344]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d0:	4953      	ldr	r1, [pc, #332]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097d6:	e001      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00a      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3324      	adds	r3, #36	; 0x24
 80097ec:	2102      	movs	r1, #2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f001 f97e 	bl	800aaf0 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d030      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009812:	d017      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009818:	d811      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800981a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800981e:	d013      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009824:	d80b      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d010      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800982a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982e:	d106      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009830:	4b3b      	ldr	r3, [pc, #236]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	4a3a      	ldr	r2, [pc, #232]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800983a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800983c:	e007      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
      break;
 8009842:	e004      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009844:	bf00      	nop
 8009846:	e002      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009848:	bf00      	nop
 800984a:	e000      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800984c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d109      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009854:	4b32      	ldr	r3, [pc, #200]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009860:	492f      	ldr	r1, [pc, #188]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009862:	4313      	orrs	r3, r2
 8009864:	654b      	str	r3, [r1, #84]	; 0x54
 8009866:	e001      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009878:	4b29      	ldr	r3, [pc, #164]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800987a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800987c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009884:	4926      	ldr	r1, [pc, #152]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009886:	4313      	orrs	r3, r2
 8009888:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d008      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009896:	4b22      	ldr	r3, [pc, #136]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098a2:	491f      	ldr	r1, [pc, #124]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00d      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098b4:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a19      	ldr	r2, [pc, #100]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098be:	6113      	str	r3, [r2, #16]
 80098c0:	4b17      	ldr	r3, [pc, #92]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098ca:	4915      	ldr	r1, [pc, #84]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	da08      	bge.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e4:	490e      	ldr	r1, [pc, #56]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098f6:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009904:	4906      	ldr	r1, [pc, #24]	; (8009920 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009906:	4313      	orrs	r3, r2
 8009908:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800990a:	7dbb      	ldrb	r3, [r7, #22]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	58024400 	.word	0x58024400

08009924 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b090      	sub	sp, #64	; 0x40
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009932:	f040 8089 	bne.w	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009936:	4b95      	ldr	r3, [pc, #596]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	2b04      	cmp	r3, #4
 8009944:	d87d      	bhi.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8009946:	a201      	add	r2, pc, #4	; (adr r2, 800994c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994c:	08009961 	.word	0x08009961
 8009950:	08009985 	.word	0x08009985
 8009954:	080099a9 	.word	0x080099a9
 8009958:	08009a3d 	.word	0x08009a3d
 800995c:	080099cd 	.word	0x080099cd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009960:	4b8a      	ldr	r3, [pc, #552]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800996c:	d107      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800996e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009972:	4618      	mov	r0, r3
 8009974:	f000 feb8 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800997c:	e3ed      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009982:	e3ea      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009984:	4b81      	ldr	r3, [pc, #516]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009990:	d107      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009992:	f107 0318 	add.w	r3, r7, #24
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fbfe 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099a0:	e3db      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a6:	e3d8      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099a8:	4b78      	ldr	r3, [pc, #480]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099b4:	d107      	bne.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b6:	f107 030c 	add.w	r3, r7, #12
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fd40 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099c4:	e3c9      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ca:	e3c6      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099cc:	4b6f      	ldr	r3, [pc, #444]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099d6:	4b6d      	ldr	r3, [pc, #436]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d10c      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80099e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099e8:	4b68      	ldr	r3, [pc, #416]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	08db      	lsrs	r3, r3, #3
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	4a67      	ldr	r2, [pc, #412]	; (8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80099f4:	fa22 f303 	lsr.w	r3, r2, r3
 80099f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fa:	e01e      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099fc:	4b63      	ldr	r3, [pc, #396]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a08:	d106      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a10:	d102      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a12:	4b60      	ldr	r3, [pc, #384]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a16:	e010      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a18:	4b5c      	ldr	r3, [pc, #368]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a24:	d106      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a2c:	d102      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a2e:	4b5a      	ldr	r3, [pc, #360]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a32:	e002      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a38:	e38f      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009a3a:	e38e      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a3c:	4b57      	ldr	r3, [pc, #348]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a40:	e38b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a46:	e388      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a4e:	f040 80a7 	bne.w	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009a52:	4b4e      	ldr	r3, [pc, #312]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009a5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a62:	d054      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a6a:	f200 808b 	bhi.w	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a74:	f000 8083 	beq.w	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a7e:	f200 8081 	bhi.w	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a88:	d02f      	beq.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a90:	d878      	bhi.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d004      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a9e:	d012      	beq.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8009aa0:	e070      	b.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009aa2:	4b3a      	ldr	r3, [pc, #232]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aae:	d107      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fe17 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009abe:	e34c      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac4:	e349      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ac6:	4b31      	ldr	r3, [pc, #196]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ad2:	d107      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad4:	f107 0318 	add.w	r3, r7, #24
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 fb5d 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ae2:	e33a      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ae8:	e337      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009aea:	4b28      	ldr	r3, [pc, #160]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af6:	d107      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af8:	f107 030c 	add.w	r3, r7, #12
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fc9f 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b06:	e328      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0c:	e325      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b16:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b18:	4b1c      	ldr	r3, [pc, #112]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d10c      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b2a:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	4a16      	ldr	r2, [pc, #88]	; (8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009b36:	fa22 f303 	lsr.w	r3, r2, r3
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b3c:	e01e      	b.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b3e:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4a:	d106      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b52:	d102      	bne.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b54:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b58:	e010      	b.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b66:	d106      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b6e:	d102      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009b70:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b74:	e002      	b.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b7a:	e2ee      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009b7c:	e2ed      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b7e:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b82:	e2ea      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b88:	e2e7      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	03d09000 	.word	0x03d09000
 8009b94:	003d0900 	.word	0x003d0900
 8009b98:	017d7840 	.word	0x017d7840
 8009b9c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba6:	f040 809c 	bne.w	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009baa:	4b9e      	ldr	r3, [pc, #632]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009bb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bba:	d054      	beq.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc2:	f200 808b 	bhi.w	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bcc:	f000 8083 	beq.w	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bd6:	f200 8081 	bhi.w	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be0:	d02f      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009be8:	d878      	bhi.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d004      	beq.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bf6:	d012      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009bf8:	e070      	b.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bfa:	4b8a      	ldr	r3, [pc, #552]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c06:	d107      	bne.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fd6b 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c16:	e2a0      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c1c:	e29d      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c1e:	4b81      	ldr	r3, [pc, #516]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c2a:	d107      	bne.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c2c:	f107 0318 	add.w	r3, r7, #24
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fab1 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009c3a:	e28e      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c40:	e28b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c42:	4b78      	ldr	r3, [pc, #480]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4e:	d107      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fbf3 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c5e:	e27c      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c64:	e279      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c66:	4b6f      	ldr	r3, [pc, #444]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c6e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c70:	4b6c      	ldr	r3, [pc, #432]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d10c      	bne.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c82:	4b68      	ldr	r3, [pc, #416]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	08db      	lsrs	r3, r3, #3
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	4a66      	ldr	r2, [pc, #408]	; (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c94:	e01e      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c96:	4b63      	ldr	r3, [pc, #396]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca2:	d106      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009caa:	d102      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009cac:	4b5f      	ldr	r3, [pc, #380]	; (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cb0:	e010      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cb2:	4b5c      	ldr	r3, [pc, #368]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cbe:	d106      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc6:	d102      	bne.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009cd2:	e242      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009cd4:	e241      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cd6:	4b57      	ldr	r3, [pc, #348]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cda:	e23e      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce0:	e23b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce8:	f040 80a6 	bne.w	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009cec:	4b4d      	ldr	r3, [pc, #308]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009cf4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cfc:	d054      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d04:	f200 808b 	bhi.w	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d0e:	f000 8083 	beq.w	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d18:	f200 8081 	bhi.w	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d22:	d02f      	beq.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d2a:	d878      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d38:	d012      	beq.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009d3a:	e070      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d3c:	4b39      	ldr	r3, [pc, #228]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d48:	d107      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fcca 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d58:	e1ff      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d5e:	e1fc      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d60:	4b30      	ldr	r3, [pc, #192]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d6c:	d107      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6e:	f107 0318 	add.w	r3, r7, #24
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fa10 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d7c:	e1ed      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d82:	e1ea      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d84:	4b27      	ldr	r3, [pc, #156]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d90:	d107      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d92:	f107 030c 	add.w	r3, r7, #12
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fb52 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009da0:	e1db      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da6:	e1d8      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009da8:	4b1e      	ldr	r3, [pc, #120]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009db0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d10c      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8009dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dc4:	4b17      	ldr	r3, [pc, #92]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	08db      	lsrs	r3, r3, #3
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd6:	e01e      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dd8:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de4:	d106      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dec:	d102      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df2:	e010      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e00:	d106      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e0e:	e002      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e14:	e1a1      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e16:	e1a0      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e18:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e1c:	e19d      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e22:	e19a      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e24:	58024400 	.word	0x58024400
 8009e28:	03d09000 	.word	0x03d09000
 8009e2c:	003d0900 	.word	0x003d0900
 8009e30:	017d7840 	.word	0x017d7840
 8009e34:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e3e:	d173      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009e40:	4b9a      	ldr	r3, [pc, #616]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e50:	d02f      	beq.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e58:	d863      	bhi.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d004      	beq.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e66:	d012      	beq.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009e68:	e05b      	b.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e6a:	4b90      	ldr	r3, [pc, #576]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e76:	d107      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e78:	f107 0318 	add.w	r3, r7, #24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f98b 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e86:	e168      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e8c:	e165      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e8e:	4b87      	ldr	r3, [pc, #540]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e9a:	d107      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9c:	f107 030c 	add.w	r3, r7, #12
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 facd 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009eaa:	e156      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eb0:	e153      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009eb2:	4b7e      	ldr	r3, [pc, #504]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ebc:	4b7b      	ldr	r3, [pc, #492]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d10c      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ece:	4b77      	ldr	r3, [pc, #476]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	08db      	lsrs	r3, r3, #3
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	4a75      	ldr	r2, [pc, #468]	; (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009eda:	fa22 f303 	lsr.w	r3, r2, r3
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee0:	e01e      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ee2:	4b72      	ldr	r3, [pc, #456]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eee:	d106      	bne.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef6:	d102      	bne.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ef8:	4b6e      	ldr	r3, [pc, #440]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009efc:	e010      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009efe:	4b6b      	ldr	r3, [pc, #428]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f0a:	d106      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f12:	d102      	bne.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f14:	4b68      	ldr	r3, [pc, #416]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f18:	e002      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f1e:	e11c      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009f20:	e11b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f26:	e118      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2e:	d133      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009f30:	4b5e      	ldr	r3, [pc, #376]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d004      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f46:	d012      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009f48:	e023      	b.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f4a:	4b58      	ldr	r3, [pc, #352]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f56:	d107      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fbc3 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f66:	e0f8      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f6c:	e0f5      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f6e:	4b4f      	ldr	r3, [pc, #316]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f7c:	f107 0318 	add.w	r3, r7, #24
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 f909 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009f8a:	e0e6      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f90:	e0e3      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f96:	e0e0      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9e:	f040 808d 	bne.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009fa2:	4b42      	ldr	r3, [pc, #264]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009faa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fb2:	d06b      	beq.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fba:	d874      	bhi.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc2:	d056      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fca:	d86c      	bhi.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fd2:	d03b      	beq.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fda:	d864      	bhi.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fe2:	d021      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fea:	d85c      	bhi.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d004      	beq.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ff8:	d004      	beq.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009ffa:	e054      	b.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ffc:	f000 f8b6 	bl	800a16c <HAL_RCCEx_GetD3PCLK1Freq>
 800a000:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a002:	e0aa      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a004:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a00c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a010:	d107      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a012:	f107 0318 	add.w	r3, r7, #24
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f8be 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a020:	e09b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a026:	e098      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a028:	4b20      	ldr	r3, [pc, #128]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a034:	d107      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a036:	f107 030c 	add.w	r3, r7, #12
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fa00 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a044:	e089      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a046:	2300      	movs	r3, #0
 800a048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a04a:	e086      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b04      	cmp	r3, #4
 800a056:	d109      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a058:	4b14      	ldr	r3, [pc, #80]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	08db      	lsrs	r3, r3, #3
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	4a13      	ldr	r2, [pc, #76]	; (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a064:	fa22 f303 	lsr.w	r3, r2, r3
 800a068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a06a:	e076      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a070:	e073      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07e:	d102      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800a080:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a084:	e069      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a08a:	e066      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a08c:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a098:	d102      	bne.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800a09a:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a09c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a09e:	e05c      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0a4:	e059      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0aa:	e056      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a0ac:	58024400 	.word	0x58024400
 800a0b0:	03d09000 	.word	0x03d09000
 800a0b4:	003d0900 	.word	0x003d0900
 800a0b8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0c2:	d148      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a0c4:	4b27      	ldr	r3, [pc, #156]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d4:	d02a      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0dc:	d838      	bhi.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0ea:	d00d      	beq.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a0ec:	e030      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0ee:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0fa:	d102      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	; (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a100:	e02b      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a106:	e028      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a108:	4b16      	ldr	r3, [pc, #88]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a114:	d107      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fae4 	bl	800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a124:	e019      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a12a:	e016      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a138:	d107      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13a:	f107 0318 	add.w	r3, r7, #24
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f82a 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a148:	e007      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a154:	e001      	b.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a156:	2300      	movs	r3, #0
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3740      	adds	r7, #64	; 0x40
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	58024400 	.word	0x58024400
 800a168:	017d7840 	.word	0x017d7840

0800a16c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a170:	f7fe fc82 	bl	8008a78 <HAL_RCC_GetHCLKFreq>
 800a174:	4602      	mov	r2, r0
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	091b      	lsrs	r3, r3, #4
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	4904      	ldr	r1, [pc, #16]	; (800a194 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a182:	5ccb      	ldrb	r3, [r1, r3]
 800a184:	f003 031f 	and.w	r3, r3, #31
 800a188:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	58024400 	.word	0x58024400
 800a194:	080119c8 	.word	0x080119c8

0800a198 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a198:	b480      	push	{r7}
 800a19a:	b089      	sub	sp, #36	; 0x24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1a0:	4ba1      	ldr	r3, [pc, #644]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a4:	f003 0303 	and.w	r3, r3, #3
 800a1a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a1aa:	4b9f      	ldr	r3, [pc, #636]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	0b1b      	lsrs	r3, r3, #12
 800a1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a1b6:	4b9c      	ldr	r3, [pc, #624]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a1c2:	4b99      	ldr	r3, [pc, #612]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	08db      	lsrs	r3, r3, #3
 800a1c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	fb02 f303 	mul.w	r3, r2, r3
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 8111 	beq.w	800a408 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	f000 8083 	beq.w	800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	f200 80a1 	bhi.w	800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d056      	beq.n	800a2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a202:	e099      	b.n	800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a204:	4b88      	ldr	r3, [pc, #544]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d02d      	beq.n	800a26c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a210:	4b85      	ldr	r3, [pc, #532]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	08db      	lsrs	r3, r3, #3
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	4a84      	ldr	r2, [pc, #528]	; (800a42c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
 800a220:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23a:	4b7b      	ldr	r3, [pc, #492]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a24e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a25e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a262:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a266:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a26a:	e087      	b.n	800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a276:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a434 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a27e:	4b6a      	ldr	r3, [pc, #424]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a292:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a29e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2ae:	e065      	b.n	800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c2:	4b59      	ldr	r3, [pc, #356]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2f2:	e043      	b.n	800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a43c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a306:	4b48      	ldr	r3, [pc, #288]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a316:	ed97 6a03 	vldr	s12, [r7, #12]
 800a31a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a336:	e021      	b.n	800a37c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a438 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a34a:	4b37      	ldr	r3, [pc, #220]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a352:	ee07 3a90 	vmov	s15, r3
 800a356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a35e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a37a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a37c:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	0a5b      	lsrs	r3, r3, #9
 800a382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a386:	ee07 3a90 	vmov	s15, r3
 800a38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a392:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a396:	edd7 6a07 	vldr	s13, [r7, #28]
 800a39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a2:	ee17 2a90 	vmov	r2, s15
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a3aa:	4b1f      	ldr	r3, [pc, #124]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	0c1b      	lsrs	r3, r3, #16
 800a3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d0:	ee17 2a90 	vmov	r2, s15
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a3d8:	4b13      	ldr	r3, [pc, #76]	; (800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	0e1b      	lsrs	r3, r3, #24
 800a3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fe:	ee17 2a90 	vmov	r2, s15
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a406:	e008      	b.n	800a41a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	609a      	str	r2, [r3, #8]
}
 800a41a:	bf00      	nop
 800a41c:	3724      	adds	r7, #36	; 0x24
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	58024400 	.word	0x58024400
 800a42c:	03d09000 	.word	0x03d09000
 800a430:	46000000 	.word	0x46000000
 800a434:	4c742400 	.word	0x4c742400
 800a438:	4a742400 	.word	0x4a742400
 800a43c:	4bbebc20 	.word	0x4bbebc20

0800a440 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a440:	b480      	push	{r7}
 800a442:	b089      	sub	sp, #36	; 0x24
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a448:	4ba1      	ldr	r3, [pc, #644]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a452:	4b9f      	ldr	r3, [pc, #636]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	0d1b      	lsrs	r3, r3, #20
 800a458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a45c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a45e:	4b9c      	ldr	r3, [pc, #624]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a46a:	4b99      	ldr	r3, [pc, #612]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8111 	beq.w	800a6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	f000 8083 	beq.w	800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b02      	cmp	r3, #2
 800a49a:	f200 80a1 	bhi.w	800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d056      	beq.n	800a558 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a4aa:	e099      	b.n	800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ac:	4b88      	ldr	r3, [pc, #544]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0320 	and.w	r3, r3, #32
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d02d      	beq.n	800a514 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4b8:	4b85      	ldr	r3, [pc, #532]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	08db      	lsrs	r3, r3, #3
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	4a84      	ldr	r2, [pc, #528]	; (800a6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	ee07 3a90 	vmov	s15, r3
 800a4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e2:	4b7b      	ldr	r3, [pc, #492]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a512:	e087      	b.n	800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a526:	4b6a      	ldr	r3, [pc, #424]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a536:	ed97 6a03 	vldr	s12, [r7, #12]
 800a53a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a556:	e065      	b.n	800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	ee07 3a90 	vmov	s15, r3
 800a55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a562:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56a:	4b59      	ldr	r3, [pc, #356]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a57e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a592:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a59a:	e043      	b.n	800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	ee07 3a90 	vmov	s15, r3
 800a5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ae:	4b48      	ldr	r3, [pc, #288]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5de:	e021      	b.n	800a624 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f2:	4b37      	ldr	r3, [pc, #220]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a602:	ed97 6a03 	vldr	s12, [r7, #12]
 800a606:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a622:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a624:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	0a5b      	lsrs	r3, r3, #9
 800a62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64a:	ee17 2a90 	vmov	r2, s15
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a652:	4b1f      	ldr	r3, [pc, #124]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	0c1b      	lsrs	r3, r3, #16
 800a658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a65c:	ee07 3a90 	vmov	s15, r3
 800a660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a664:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a668:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a670:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a678:	ee17 2a90 	vmov	r2, s15
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a680:	4b13      	ldr	r3, [pc, #76]	; (800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	0e1b      	lsrs	r3, r3, #24
 800a686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a696:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a69a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a69e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a6:	ee17 2a90 	vmov	r2, s15
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	609a      	str	r2, [r3, #8]
}
 800a6c2:	bf00      	nop
 800a6c4:	3724      	adds	r7, #36	; 0x24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	58024400 	.word	0x58024400
 800a6d4:	03d09000 	.word	0x03d09000
 800a6d8:	46000000 	.word	0x46000000
 800a6dc:	4c742400 	.word	0x4c742400
 800a6e0:	4a742400 	.word	0x4a742400
 800a6e4:	4bbebc20 	.word	0x4bbebc20

0800a6e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b089      	sub	sp, #36	; 0x24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6f0:	4ba0      	ldr	r3, [pc, #640]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a6fa:	4b9e      	ldr	r3, [pc, #632]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a704:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a706:	4b9b      	ldr	r3, [pc, #620]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a710:	4b98      	ldr	r3, [pc, #608]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a714:	08db      	lsrs	r3, r3, #3
 800a716:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a728:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f000 8111 	beq.w	800a956 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	2b02      	cmp	r3, #2
 800a738:	f000 8083 	beq.w	800a842 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	f200 80a1 	bhi.w	800a886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d056      	beq.n	800a7fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a750:	e099      	b.n	800a886 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a752:	4b88      	ldr	r3, [pc, #544]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d02d      	beq.n	800a7ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a75e:	4b85      	ldr	r3, [pc, #532]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	08db      	lsrs	r3, r3, #3
 800a764:	f003 0303 	and.w	r3, r3, #3
 800a768:	4a83      	ldr	r2, [pc, #524]	; (800a978 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a76a:	fa22 f303 	lsr.w	r3, r2, r3
 800a76e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	ee07 3a90 	vmov	s15, r3
 800a780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a788:	4b7a      	ldr	r3, [pc, #488]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a798:	ed97 6a03 	vldr	s12, [r7, #12]
 800a79c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7b8:	e087      	b.n	800a8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7cc:	4b69      	ldr	r3, [pc, #420]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d4:	ee07 3a90 	vmov	s15, r3
 800a7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7fc:	e065      	b.n	800a8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a808:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a984 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a810:	4b58      	ldr	r3, [pc, #352]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a818:	ee07 3a90 	vmov	s15, r3
 800a81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a820:	ed97 6a03 	vldr	s12, [r7, #12]
 800a824:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a840:	e043      	b.n	800a8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	ee07 3a90 	vmov	s15, r3
 800a848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a988 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a854:	4b47      	ldr	r3, [pc, #284]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a864:	ed97 6a03 	vldr	s12, [r7, #12]
 800a868:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a86c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a884:	e021      	b.n	800a8ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	ee07 3a90 	vmov	s15, r3
 800a88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a890:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a980 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a898:	4b36      	ldr	r3, [pc, #216]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a0:	ee07 3a90 	vmov	s15, r3
 800a8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a8ca:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d4:	ee07 3a90 	vmov	s15, r3
 800a8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f0:	ee17 2a90 	vmov	r2, s15
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	0c1b      	lsrs	r3, r3, #16
 800a8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a90e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a912:	edd7 6a07 	vldr	s13, [r7, #28]
 800a916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a91a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91e:	ee17 2a90 	vmov	r2, s15
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a926:	4b13      	ldr	r3, [pc, #76]	; (800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	0e1b      	lsrs	r3, r3, #24
 800a92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a930:	ee07 3a90 	vmov	s15, r3
 800a934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a93c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a940:	edd7 6a07 	vldr	s13, [r7, #28]
 800a944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94c:	ee17 2a90 	vmov	r2, s15
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a954:	e008      	b.n	800a968 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	609a      	str	r2, [r3, #8]
}
 800a968:	bf00      	nop
 800a96a:	3724      	adds	r7, #36	; 0x24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	58024400 	.word	0x58024400
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	46000000 	.word	0x46000000
 800a980:	4c742400 	.word	0x4c742400
 800a984:	4a742400 	.word	0x4a742400
 800a988:	4bbebc20 	.word	0x4bbebc20

0800a98c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a99a:	4b53      	ldr	r3, [pc, #332]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	f003 0303 	and.w	r3, r3, #3
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d101      	bne.n	800a9aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e099      	b.n	800aade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a9aa:	4b4f      	ldr	r3, [pc, #316]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a4e      	ldr	r2, [pc, #312]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a9b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9b6:	f7f8 f84f 	bl	8002a58 <HAL_GetTick>
 800a9ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9bc:	e008      	b.n	800a9d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a9be:	f7f8 f84b 	bl	8002a58 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d901      	bls.n	800a9d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e086      	b.n	800aade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9d0:	4b45      	ldr	r3, [pc, #276]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f0      	bne.n	800a9be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a9dc:	4b42      	ldr	r3, [pc, #264]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	031b      	lsls	r3, r3, #12
 800a9ea:	493f      	ldr	r1, [pc, #252]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	628b      	str	r3, [r1, #40]	; 0x28
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	025b      	lsls	r3, r3, #9
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	431a      	orrs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	041b      	lsls	r3, r3, #16
 800aa0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	061b      	lsls	r3, r3, #24
 800aa1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa20:	4931      	ldr	r1, [pc, #196]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa22:	4313      	orrs	r3, r2
 800aa24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa26:	4b30      	ldr	r3, [pc, #192]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	492d      	ldr	r1, [pc, #180]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa38:	4b2b      	ldr	r3, [pc, #172]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	f023 0220 	bic.w	r2, r3, #32
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	4928      	ldr	r1, [pc, #160]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aa4a:	4b27      	ldr	r3, [pc, #156]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	4a26      	ldr	r2, [pc, #152]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa50:	f023 0310 	bic.w	r3, r3, #16
 800aa54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa56:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa5a:	4b24      	ldr	r3, [pc, #144]	; (800aaec <RCCEx_PLL2_Config+0x160>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	69d2      	ldr	r2, [r2, #28]
 800aa62:	00d2      	lsls	r2, r2, #3
 800aa64:	4920      	ldr	r1, [pc, #128]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aa6a:	4b1f      	ldr	r3, [pc, #124]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	4a1e      	ldr	r2, [pc, #120]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa70:	f043 0310 	orr.w	r3, r3, #16
 800aa74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d106      	bne.n	800aa8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aa7c:	4b1a      	ldr	r3, [pc, #104]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa88:	e00f      	b.n	800aaaa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d106      	bne.n	800aa9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aa90:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	4a14      	ldr	r2, [pc, #80]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aa96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa9c:	e005      	b.n	800aaaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	4a11      	ldr	r2, [pc, #68]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aaa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a0e      	ldr	r2, [pc, #56]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab6:	f7f7 ffcf 	bl	8002a58 <HAL_GetTick>
 800aaba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aabc:	e008      	b.n	800aad0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aabe:	f7f7 ffcb 	bl	8002a58 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e006      	b.n	800aade <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <RCCEx_PLL2_Config+0x15c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0f0      	beq.n	800aabe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	58024400 	.word	0x58024400
 800aaec:	ffff0007 	.word	0xffff0007

0800aaf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aafe:	4b53      	ldr	r3, [pc, #332]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d101      	bne.n	800ab0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e099      	b.n	800ac42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab0e:	4b4f      	ldr	r3, [pc, #316]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a4e      	ldr	r2, [pc, #312]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab1a:	f7f7 ff9d 	bl	8002a58 <HAL_GetTick>
 800ab1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab20:	e008      	b.n	800ab34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab22:	f7f7 ff99 	bl	8002a58 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e086      	b.n	800ac42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab34:	4b45      	ldr	r3, [pc, #276]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1f0      	bne.n	800ab22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab40:	4b42      	ldr	r3, [pc, #264]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	051b      	lsls	r3, r3, #20
 800ab4e:	493f      	ldr	r1, [pc, #252]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	628b      	str	r3, [r1, #40]	; 0x28
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	025b      	lsls	r3, r3, #9
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	041b      	lsls	r3, r3, #16
 800ab72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab76:	431a      	orrs	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	061b      	lsls	r3, r3, #24
 800ab80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab84:	4931      	ldr	r1, [pc, #196]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ab8a:	4b30      	ldr	r3, [pc, #192]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	492d      	ldr	r1, [pc, #180]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab9c:	4b2b      	ldr	r3, [pc, #172]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	4928      	ldr	r1, [pc, #160]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800abae:	4b27      	ldr	r3, [pc, #156]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb2:	4a26      	ldr	r2, [pc, #152]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abbe:	4b24      	ldr	r3, [pc, #144]	; (800ac50 <RCCEx_PLL3_Config+0x160>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	69d2      	ldr	r2, [r2, #28]
 800abc6:	00d2      	lsls	r2, r2, #3
 800abc8:	4920      	ldr	r1, [pc, #128]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abca:	4313      	orrs	r3, r2
 800abcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800abce:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd2:	4a1e      	ldr	r2, [pc, #120]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800abe0:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	4a19      	ldr	r2, [pc, #100]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abec:	e00f      	b.n	800ac0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d106      	bne.n	800ac02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800abf4:	4b15      	ldr	r3, [pc, #84]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	4a14      	ldr	r2, [pc, #80]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800abfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac00:	e005      	b.n	800ac0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a11      	ldr	r2, [pc, #68]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ac08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a0e      	ldr	r2, [pc, #56]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ac14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac1a:	f7f7 ff1d 	bl	8002a58 <HAL_GetTick>
 800ac1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac20:	e008      	b.n	800ac34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac22:	f7f7 ff19 	bl	8002a58 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d901      	bls.n	800ac34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e006      	b.n	800ac42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <RCCEx_PLL3_Config+0x15c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f0      	beq.n	800ac22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	ffff0007 	.word	0xffff0007

0800ac54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e0f1      	b.n	800ae4a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a78      	ldr	r2, [pc, #480]	; (800ae54 <HAL_SPI_Init+0x200>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d00f      	beq.n	800ac96 <HAL_SPI_Init+0x42>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a77      	ldr	r2, [pc, #476]	; (800ae58 <HAL_SPI_Init+0x204>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00a      	beq.n	800ac96 <HAL_SPI_Init+0x42>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a75      	ldr	r2, [pc, #468]	; (800ae5c <HAL_SPI_Init+0x208>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d005      	beq.n	800ac96 <HAL_SPI_Init+0x42>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	2b0f      	cmp	r3, #15
 800ac90:	d901      	bls.n	800ac96 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e0d9      	b.n	800ae4a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8e2 	bl	800ae60 <SPI_GetPacketSize>
 800ac9c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a6c      	ldr	r2, [pc, #432]	; (800ae54 <HAL_SPI_Init+0x200>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00c      	beq.n	800acc2 <HAL_SPI_Init+0x6e>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a6a      	ldr	r2, [pc, #424]	; (800ae58 <HAL_SPI_Init+0x204>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <HAL_SPI_Init+0x6e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a69      	ldr	r2, [pc, #420]	; (800ae5c <HAL_SPI_Init+0x208>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d002      	beq.n	800acc2 <HAL_SPI_Init+0x6e>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d811      	bhi.n	800ace6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acc6:	4a63      	ldr	r2, [pc, #396]	; (800ae54 <HAL_SPI_Init+0x200>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d009      	beq.n	800ace0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a61      	ldr	r2, [pc, #388]	; (800ae58 <HAL_SPI_Init+0x204>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d004      	beq.n	800ace0 <HAL_SPI_Init+0x8c>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a60      	ldr	r2, [pc, #384]	; (800ae5c <HAL_SPI_Init+0x208>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d104      	bne.n	800acea <HAL_SPI_Init+0x96>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d901      	bls.n	800acea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e0af      	b.n	800ae4a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7f7 f8a6 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2202      	movs	r2, #2
 800ad08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ad26:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad30:	d119      	bne.n	800ad66 <HAL_SPI_Init+0x112>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad3a:	d103      	bne.n	800ad44 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d008      	beq.n	800ad56 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10c      	bne.n	800ad66 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad54:	d107      	bne.n	800ad66 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	69da      	ldr	r2, [r3, #28]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	431a      	orrs	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad78:	ea42 0103 	orr.w	r1, r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	431a      	orrs	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	431a      	orrs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	431a      	orrs	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	431a      	orrs	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adba:	431a      	orrs	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	431a      	orrs	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adc6:	ea42 0103 	orr.w	r1, r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	430a      	orrs	r2, r1
 800add4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d113      	bne.n	800ae06 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adf0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0201 	bic.w	r2, r2, #1
 800ae14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	40013000 	.word	0x40013000
 800ae58:	40003800 	.word	0x40003800
 800ae5c:	40003c00 	.word	0x40003c00

0800ae60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6c:	095b      	lsrs	r3, r3, #5
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	3307      	adds	r3, #7
 800ae7e:	08db      	lsrs	r3, r3, #3
 800ae80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	fb02 f303 	mul.w	r3, r2, r3
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e049      	b.n	800af3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d106      	bne.n	800aec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f7f7 f9fb 	bl	80022b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2202      	movs	r2, #2
 800aec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f000 fb3f 	bl	800b558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e049      	b.n	800afea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7f7 fa50 	bl	8002410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f000 fae8 	bl	800b558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e08f      	b.n	800b128 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7f6 ffcd 	bl	8001fbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2202      	movs	r2, #2
 800b026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6899      	ldr	r1, [r3, #8]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <HAL_TIM_Encoder_Init+0x13c>)
 800b036:	400b      	ands	r3, r1
 800b038:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f000 fa87 	bl	800b558 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	4313      	orrs	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4b31      	ldr	r3, [pc, #196]	; (800b134 <HAL_TIM_Encoder_Init+0x140>)
 800b070:	4013      	ands	r3, r2
 800b072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	4313      	orrs	r3, r2
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	4313      	orrs	r3, r2
 800b084:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	4b2b      	ldr	r3, [pc, #172]	; (800b138 <HAL_TIM_Encoder_Init+0x144>)
 800b08a:	4013      	ands	r3, r2
 800b08c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4b2a      	ldr	r3, [pc, #168]	; (800b13c <HAL_TIM_Encoder_Init+0x148>)
 800b092:	4013      	ands	r3, r2
 800b094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68da      	ldr	r2, [r3, #12]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	021b      	lsls	r3, r3, #8
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	011a      	lsls	r2, r3, #4
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	031b      	lsls	r3, r3, #12
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b0ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	011b      	lsls	r3, r3, #4
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	fffebff8 	.word	0xfffebff8
 800b134:	fffffcfc 	.word	0xfffffcfc
 800b138:	fffff3f3 	.word	0xfffff3f3
 800b13c:	ffff0f0f 	.word	0xffff0f0f

0800b140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e0ff      	b.n	800b35e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b14      	cmp	r3, #20
 800b16a:	f200 80f0 	bhi.w	800b34e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b16e:	a201      	add	r2, pc, #4	; (adr r2, 800b174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b34f 	.word	0x0800b34f
 800b17c:	0800b34f 	.word	0x0800b34f
 800b180:	0800b34f 	.word	0x0800b34f
 800b184:	0800b209 	.word	0x0800b209
 800b188:	0800b34f 	.word	0x0800b34f
 800b18c:	0800b34f 	.word	0x0800b34f
 800b190:	0800b34f 	.word	0x0800b34f
 800b194:	0800b24b 	.word	0x0800b24b
 800b198:	0800b34f 	.word	0x0800b34f
 800b19c:	0800b34f 	.word	0x0800b34f
 800b1a0:	0800b34f 	.word	0x0800b34f
 800b1a4:	0800b28b 	.word	0x0800b28b
 800b1a8:	0800b34f 	.word	0x0800b34f
 800b1ac:	0800b34f 	.word	0x0800b34f
 800b1b0:	0800b34f 	.word	0x0800b34f
 800b1b4:	0800b2cd 	.word	0x0800b2cd
 800b1b8:	0800b34f 	.word	0x0800b34f
 800b1bc:	0800b34f 	.word	0x0800b34f
 800b1c0:	0800b34f 	.word	0x0800b34f
 800b1c4:	0800b30d 	.word	0x0800b30d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fa68 	bl	800b6a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0208 	orr.w	r2, r2, #8
 800b1e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0204 	bic.w	r2, r2, #4
 800b1f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6999      	ldr	r1, [r3, #24]
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	691a      	ldr	r2, [r3, #16]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	619a      	str	r2, [r3, #24]
      break;
 800b206:	e0a5      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fad8 	bl	800b7c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6999      	ldr	r1, [r3, #24]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	021a      	lsls	r2, r3, #8
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	430a      	orrs	r2, r1
 800b246:	619a      	str	r2, [r3, #24]
      break;
 800b248:	e084      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fb41 	bl	800b8d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f042 0208 	orr.w	r2, r2, #8
 800b264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	69da      	ldr	r2, [r3, #28]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f022 0204 	bic.w	r2, r2, #4
 800b274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69d9      	ldr	r1, [r3, #28]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	61da      	str	r2, [r3, #28]
      break;
 800b288:	e064      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fba9 	bl	800b9e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69d9      	ldr	r1, [r3, #28]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	021a      	lsls	r2, r3, #8
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	61da      	str	r2, [r3, #28]
      break;
 800b2ca:	e043      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fbf2 	bl	800babc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f042 0208 	orr.w	r2, r2, #8
 800b2e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0204 	bic.w	r2, r2, #4
 800b2f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b30a:	e023      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fc36 	bl	800bb84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	021a      	lsls	r2, r3, #8
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b34c:	e002      	b.n	800b354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]
      break;
 800b352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3718      	adds	r7, #24
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop

0800b368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_TIM_ConfigClockSource+0x1c>
 800b380:	2302      	movs	r3, #2
 800b382:	e0dc      	b.n	800b53e <HAL_TIM_ConfigClockSource+0x1d6>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	4b6a      	ldr	r3, [pc, #424]	; (800b548 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a64      	ldr	r2, [pc, #400]	; (800b54c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	f000 80a9 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c0:	4a62      	ldr	r2, [pc, #392]	; (800b54c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	f200 80ae 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3c8:	4a61      	ldr	r2, [pc, #388]	; (800b550 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	f000 80a1 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3d0:	4a5f      	ldr	r2, [pc, #380]	; (800b550 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	f200 80a6 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3d8:	4a5e      	ldr	r2, [pc, #376]	; (800b554 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	f000 8099 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e0:	4a5c      	ldr	r2, [pc, #368]	; (800b554 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	f200 809e 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3ec:	f000 8091 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3f4:	f200 8096 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3fc:	f000 8089 	beq.w	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b404:	f200 808e 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b40c:	d03e      	beq.n	800b48c <HAL_TIM_ConfigClockSource+0x124>
 800b40e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b412:	f200 8087 	bhi.w	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b41a:	f000 8086 	beq.w	800b52a <HAL_TIM_ConfigClockSource+0x1c2>
 800b41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b422:	d87f      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b424:	2b70      	cmp	r3, #112	; 0x70
 800b426:	d01a      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0xf6>
 800b428:	2b70      	cmp	r3, #112	; 0x70
 800b42a:	d87b      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b42c:	2b60      	cmp	r3, #96	; 0x60
 800b42e:	d050      	beq.n	800b4d2 <HAL_TIM_ConfigClockSource+0x16a>
 800b430:	2b60      	cmp	r3, #96	; 0x60
 800b432:	d877      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b434:	2b50      	cmp	r3, #80	; 0x50
 800b436:	d03c      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0x14a>
 800b438:	2b50      	cmp	r3, #80	; 0x50
 800b43a:	d873      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d058      	beq.n	800b4f2 <HAL_TIM_ConfigClockSource+0x18a>
 800b440:	2b40      	cmp	r3, #64	; 0x40
 800b442:	d86f      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b444:	2b30      	cmp	r3, #48	; 0x30
 800b446:	d064      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b448:	2b30      	cmp	r3, #48	; 0x30
 800b44a:	d86b      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b44c:	2b20      	cmp	r3, #32
 800b44e:	d060      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b450:	2b20      	cmp	r3, #32
 800b452:	d867      	bhi.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
 800b454:	2b00      	cmp	r3, #0
 800b456:	d05c      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b458:	2b10      	cmp	r3, #16
 800b45a:	d05a      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0x1aa>
 800b45c:	e062      	b.n	800b524 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6899      	ldr	r1, [r3, #8]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f000 fc6d 	bl	800bd4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	609a      	str	r2, [r3, #8]
      break;
 800b48a:	e04f      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	6899      	ldr	r1, [r3, #8]
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f000 fc56 	bl	800bd4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	689a      	ldr	r2, [r3, #8]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4ae:	609a      	str	r2, [r3, #8]
      break;
 800b4b0:	e03c      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	6859      	ldr	r1, [r3, #4]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f000 fbc6 	bl	800bc50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2150      	movs	r1, #80	; 0x50
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 fc20 	bl	800bd10 <TIM_ITRx_SetConfig>
      break;
 800b4d0:	e02c      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6818      	ldr	r0, [r3, #0]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	6859      	ldr	r1, [r3, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f000 fbe5 	bl	800bcae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2160      	movs	r1, #96	; 0x60
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f000 fc10 	bl	800bd10 <TIM_ITRx_SetConfig>
      break;
 800b4f0:	e01c      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6859      	ldr	r1, [r3, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f000 fba6 	bl	800bc50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2140      	movs	r1, #64	; 0x40
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fc00 	bl	800bd10 <TIM_ITRx_SetConfig>
      break;
 800b510:	e00c      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f000 fbf7 	bl	800bd10 <TIM_ITRx_SetConfig>
      break;
 800b522:	e003      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	73fb      	strb	r3, [r7, #15]
      break;
 800b528:	e000      	b.n	800b52c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b52a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	ffceff88 	.word	0xffceff88
 800b54c:	00100040 	.word	0x00100040
 800b550:	00100030 	.word	0x00100030
 800b554:	00100020 	.word	0x00100020

0800b558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a44      	ldr	r2, [pc, #272]	; (800b67c <TIM_Base_SetConfig+0x124>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d013      	beq.n	800b598 <TIM_Base_SetConfig+0x40>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b576:	d00f      	beq.n	800b598 <TIM_Base_SetConfig+0x40>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a41      	ldr	r2, [pc, #260]	; (800b680 <TIM_Base_SetConfig+0x128>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00b      	beq.n	800b598 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a40      	ldr	r2, [pc, #256]	; (800b684 <TIM_Base_SetConfig+0x12c>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d007      	beq.n	800b598 <TIM_Base_SetConfig+0x40>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a3f      	ldr	r2, [pc, #252]	; (800b688 <TIM_Base_SetConfig+0x130>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d003      	beq.n	800b598 <TIM_Base_SetConfig+0x40>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a3e      	ldr	r2, [pc, #248]	; (800b68c <TIM_Base_SetConfig+0x134>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d108      	bne.n	800b5aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b59e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a33      	ldr	r2, [pc, #204]	; (800b67c <TIM_Base_SetConfig+0x124>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d027      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b8:	d023      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a30      	ldr	r2, [pc, #192]	; (800b680 <TIM_Base_SetConfig+0x128>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d01f      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a2f      	ldr	r2, [pc, #188]	; (800b684 <TIM_Base_SetConfig+0x12c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d01b      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a2e      	ldr	r2, [pc, #184]	; (800b688 <TIM_Base_SetConfig+0x130>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d017      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a2d      	ldr	r2, [pc, #180]	; (800b68c <TIM_Base_SetConfig+0x134>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d013      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a2c      	ldr	r2, [pc, #176]	; (800b690 <TIM_Base_SetConfig+0x138>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00f      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a2b      	ldr	r2, [pc, #172]	; (800b694 <TIM_Base_SetConfig+0x13c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00b      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a2a      	ldr	r2, [pc, #168]	; (800b698 <TIM_Base_SetConfig+0x140>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a29      	ldr	r2, [pc, #164]	; (800b69c <TIM_Base_SetConfig+0x144>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d003      	beq.n	800b602 <TIM_Base_SetConfig+0xaa>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a28      	ldr	r2, [pc, #160]	; (800b6a0 <TIM_Base_SetConfig+0x148>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d108      	bne.n	800b614 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	689a      	ldr	r2, [r3, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a10      	ldr	r2, [pc, #64]	; (800b67c <TIM_Base_SetConfig+0x124>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d00f      	beq.n	800b660 <TIM_Base_SetConfig+0x108>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a12      	ldr	r2, [pc, #72]	; (800b68c <TIM_Base_SetConfig+0x134>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d00b      	beq.n	800b660 <TIM_Base_SetConfig+0x108>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a11      	ldr	r2, [pc, #68]	; (800b690 <TIM_Base_SetConfig+0x138>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d007      	beq.n	800b660 <TIM_Base_SetConfig+0x108>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a10      	ldr	r2, [pc, #64]	; (800b694 <TIM_Base_SetConfig+0x13c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d003      	beq.n	800b660 <TIM_Base_SetConfig+0x108>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a0f      	ldr	r2, [pc, #60]	; (800b698 <TIM_Base_SetConfig+0x140>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d103      	bne.n	800b668 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	615a      	str	r2, [r3, #20]
}
 800b66e:	bf00      	nop
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40010000 	.word	0x40010000
 800b680:	40000400 	.word	0x40000400
 800b684:	40000800 	.word	0x40000800
 800b688:	40000c00 	.word	0x40000c00
 800b68c:	40010400 	.word	0x40010400
 800b690:	40014000 	.word	0x40014000
 800b694:	40014400 	.word	0x40014400
 800b698:	40014800 	.word	0x40014800
 800b69c:	4000e000 	.word	0x4000e000
 800b6a0:	4000e400 	.word	0x4000e400

0800b6a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	f023 0201 	bic.w	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6a1b      	ldr	r3, [r3, #32]
 800b6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4b37      	ldr	r3, [pc, #220]	; (800b7ac <TIM_OC1_SetConfig+0x108>)
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f023 0302 	bic.w	r3, r3, #2
 800b6ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a2d      	ldr	r2, [pc, #180]	; (800b7b0 <TIM_OC1_SetConfig+0x10c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00f      	beq.n	800b720 <TIM_OC1_SetConfig+0x7c>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a2c      	ldr	r2, [pc, #176]	; (800b7b4 <TIM_OC1_SetConfig+0x110>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00b      	beq.n	800b720 <TIM_OC1_SetConfig+0x7c>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a2b      	ldr	r2, [pc, #172]	; (800b7b8 <TIM_OC1_SetConfig+0x114>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d007      	beq.n	800b720 <TIM_OC1_SetConfig+0x7c>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a2a      	ldr	r2, [pc, #168]	; (800b7bc <TIM_OC1_SetConfig+0x118>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d003      	beq.n	800b720 <TIM_OC1_SetConfig+0x7c>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a29      	ldr	r2, [pc, #164]	; (800b7c0 <TIM_OC1_SetConfig+0x11c>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d10c      	bne.n	800b73a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f023 0308 	bic.w	r3, r3, #8
 800b726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f023 0304 	bic.w	r3, r3, #4
 800b738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a1c      	ldr	r2, [pc, #112]	; (800b7b0 <TIM_OC1_SetConfig+0x10c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00f      	beq.n	800b762 <TIM_OC1_SetConfig+0xbe>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a1b      	ldr	r2, [pc, #108]	; (800b7b4 <TIM_OC1_SetConfig+0x110>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00b      	beq.n	800b762 <TIM_OC1_SetConfig+0xbe>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a1a      	ldr	r2, [pc, #104]	; (800b7b8 <TIM_OC1_SetConfig+0x114>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d007      	beq.n	800b762 <TIM_OC1_SetConfig+0xbe>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a19      	ldr	r2, [pc, #100]	; (800b7bc <TIM_OC1_SetConfig+0x118>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d003      	beq.n	800b762 <TIM_OC1_SetConfig+0xbe>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <TIM_OC1_SetConfig+0x11c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d111      	bne.n	800b786 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	4313      	orrs	r3, r2
 800b77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	4313      	orrs	r3, r2
 800b784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	693a      	ldr	r2, [r7, #16]
 800b78a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	621a      	str	r2, [r3, #32]
}
 800b7a0:	bf00      	nop
 800b7a2:	371c      	adds	r7, #28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	fffeff8f 	.word	0xfffeff8f
 800b7b0:	40010000 	.word	0x40010000
 800b7b4:	40010400 	.word	0x40010400
 800b7b8:	40014000 	.word	0x40014000
 800b7bc:	40014400 	.word	0x40014400
 800b7c0:	40014800 	.word	0x40014800

0800b7c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	f023 0210 	bic.w	r2, r3, #16
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4b34      	ldr	r3, [pc, #208]	; (800b8c0 <TIM_OC2_SetConfig+0xfc>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	021b      	lsls	r3, r3, #8
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4313      	orrs	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f023 0320 	bic.w	r3, r3, #32
 800b80e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4313      	orrs	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a29      	ldr	r2, [pc, #164]	; (800b8c4 <TIM_OC2_SetConfig+0x100>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d003      	beq.n	800b82c <TIM_OC2_SetConfig+0x68>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a28      	ldr	r2, [pc, #160]	; (800b8c8 <TIM_OC2_SetConfig+0x104>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d10d      	bne.n	800b848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a1e      	ldr	r2, [pc, #120]	; (800b8c4 <TIM_OC2_SetConfig+0x100>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d00f      	beq.n	800b870 <TIM_OC2_SetConfig+0xac>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a1d      	ldr	r2, [pc, #116]	; (800b8c8 <TIM_OC2_SetConfig+0x104>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00b      	beq.n	800b870 <TIM_OC2_SetConfig+0xac>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a1c      	ldr	r2, [pc, #112]	; (800b8cc <TIM_OC2_SetConfig+0x108>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d007      	beq.n	800b870 <TIM_OC2_SetConfig+0xac>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a1b      	ldr	r2, [pc, #108]	; (800b8d0 <TIM_OC2_SetConfig+0x10c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d003      	beq.n	800b870 <TIM_OC2_SetConfig+0xac>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a1a      	ldr	r2, [pc, #104]	; (800b8d4 <TIM_OC2_SetConfig+0x110>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d113      	bne.n	800b898 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b87e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	4313      	orrs	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	621a      	str	r2, [r3, #32]
}
 800b8b2:	bf00      	nop
 800b8b4:	371c      	adds	r7, #28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	feff8fff 	.word	0xfeff8fff
 800b8c4:	40010000 	.word	0x40010000
 800b8c8:	40010400 	.word	0x40010400
 800b8cc:	40014000 	.word	0x40014000
 800b8d0:	40014400 	.word	0x40014400
 800b8d4:	40014800 	.word	0x40014800

0800b8d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	4b33      	ldr	r3, [pc, #204]	; (800b9d0 <TIM_OC3_SetConfig+0xf8>)
 800b904:	4013      	ands	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	021b      	lsls	r3, r3, #8
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a28      	ldr	r2, [pc, #160]	; (800b9d4 <TIM_OC3_SetConfig+0xfc>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d003      	beq.n	800b93e <TIM_OC3_SetConfig+0x66>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4a27      	ldr	r2, [pc, #156]	; (800b9d8 <TIM_OC3_SetConfig+0x100>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d10d      	bne.n	800b95a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4313      	orrs	r3, r2
 800b950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <TIM_OC3_SetConfig+0xfc>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d00f      	beq.n	800b982 <TIM_OC3_SetConfig+0xaa>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a1c      	ldr	r2, [pc, #112]	; (800b9d8 <TIM_OC3_SetConfig+0x100>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d00b      	beq.n	800b982 <TIM_OC3_SetConfig+0xaa>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a1b      	ldr	r2, [pc, #108]	; (800b9dc <TIM_OC3_SetConfig+0x104>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d007      	beq.n	800b982 <TIM_OC3_SetConfig+0xaa>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <TIM_OC3_SetConfig+0x108>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d003      	beq.n	800b982 <TIM_OC3_SetConfig+0xaa>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a19      	ldr	r2, [pc, #100]	; (800b9e4 <TIM_OC3_SetConfig+0x10c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d113      	bne.n	800b9aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	621a      	str	r2, [r3, #32]
}
 800b9c4:	bf00      	nop
 800b9c6:	371c      	adds	r7, #28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	fffeff8f 	.word	0xfffeff8f
 800b9d4:	40010000 	.word	0x40010000
 800b9d8:	40010400 	.word	0x40010400
 800b9dc:	40014000 	.word	0x40014000
 800b9e0:	40014400 	.word	0x40014400
 800b9e4:	40014800 	.word	0x40014800

0800b9e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4b24      	ldr	r3, [pc, #144]	; (800baa4 <TIM_OC4_SetConfig+0xbc>)
 800ba14:	4013      	ands	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	021b      	lsls	r3, r3, #8
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	031b      	lsls	r3, r3, #12
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a19      	ldr	r2, [pc, #100]	; (800baa8 <TIM_OC4_SetConfig+0xc0>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00f      	beq.n	800ba68 <TIM_OC4_SetConfig+0x80>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a18      	ldr	r2, [pc, #96]	; (800baac <TIM_OC4_SetConfig+0xc4>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <TIM_OC4_SetConfig+0x80>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a17      	ldr	r2, [pc, #92]	; (800bab0 <TIM_OC4_SetConfig+0xc8>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d007      	beq.n	800ba68 <TIM_OC4_SetConfig+0x80>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a16      	ldr	r2, [pc, #88]	; (800bab4 <TIM_OC4_SetConfig+0xcc>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC4_SetConfig+0x80>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <TIM_OC4_SetConfig+0xd0>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d109      	bne.n	800ba7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	019b      	lsls	r3, r3, #6
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	621a      	str	r2, [r3, #32]
}
 800ba96:	bf00      	nop
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	feff8fff 	.word	0xfeff8fff
 800baa8:	40010000 	.word	0x40010000
 800baac:	40010400 	.word	0x40010400
 800bab0:	40014000 	.word	0x40014000
 800bab4:	40014400 	.word	0x40014400
 800bab8:	40014800 	.word	0x40014800

0800babc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	4b21      	ldr	r3, [pc, #132]	; (800bb6c <TIM_OC5_SetConfig+0xb0>)
 800bae8:	4013      	ands	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bafc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	041b      	lsls	r3, r3, #16
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a18      	ldr	r2, [pc, #96]	; (800bb70 <TIM_OC5_SetConfig+0xb4>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00f      	beq.n	800bb32 <TIM_OC5_SetConfig+0x76>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <TIM_OC5_SetConfig+0xb8>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d00b      	beq.n	800bb32 <TIM_OC5_SetConfig+0x76>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a16      	ldr	r2, [pc, #88]	; (800bb78 <TIM_OC5_SetConfig+0xbc>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d007      	beq.n	800bb32 <TIM_OC5_SetConfig+0x76>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a15      	ldr	r2, [pc, #84]	; (800bb7c <TIM_OC5_SetConfig+0xc0>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d003      	beq.n	800bb32 <TIM_OC5_SetConfig+0x76>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a14      	ldr	r2, [pc, #80]	; (800bb80 <TIM_OC5_SetConfig+0xc4>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d109      	bne.n	800bb46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	697a      	ldr	r2, [r7, #20]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	621a      	str	r2, [r3, #32]
}
 800bb60:	bf00      	nop
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	fffeff8f 	.word	0xfffeff8f
 800bb70:	40010000 	.word	0x40010000
 800bb74:	40010400 	.word	0x40010400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800

0800bb84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b087      	sub	sp, #28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	4b22      	ldr	r3, [pc, #136]	; (800bc38 <TIM_OC6_SetConfig+0xb4>)
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	021b      	lsls	r3, r3, #8
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	051b      	lsls	r3, r3, #20
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a19      	ldr	r2, [pc, #100]	; (800bc3c <TIM_OC6_SetConfig+0xb8>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d00f      	beq.n	800bbfc <TIM_OC6_SetConfig+0x78>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a18      	ldr	r2, [pc, #96]	; (800bc40 <TIM_OC6_SetConfig+0xbc>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d00b      	beq.n	800bbfc <TIM_OC6_SetConfig+0x78>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a17      	ldr	r2, [pc, #92]	; (800bc44 <TIM_OC6_SetConfig+0xc0>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d007      	beq.n	800bbfc <TIM_OC6_SetConfig+0x78>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a16      	ldr	r2, [pc, #88]	; (800bc48 <TIM_OC6_SetConfig+0xc4>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d003      	beq.n	800bbfc <TIM_OC6_SetConfig+0x78>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a15      	ldr	r2, [pc, #84]	; (800bc4c <TIM_OC6_SetConfig+0xc8>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d109      	bne.n	800bc10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	029b      	lsls	r3, r3, #10
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	621a      	str	r2, [r3, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	feff8fff 	.word	0xfeff8fff
 800bc3c:	40010000 	.word	0x40010000
 800bc40:	40010400 	.word	0x40010400
 800bc44:	40014000 	.word	0x40014000
 800bc48:	40014400 	.word	0x40014400
 800bc4c:	40014800 	.word	0x40014800

0800bc50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	f023 0201 	bic.w	r2, r3, #1
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	f023 030a 	bic.w	r3, r3, #10
 800bc8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	621a      	str	r2, [r3, #32]
}
 800bca2:	bf00      	nop
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b087      	sub	sp, #28
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	f023 0210 	bic.w	r2, r3, #16
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	699b      	ldr	r3, [r3, #24]
 800bcca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bcd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	031b      	lsls	r3, r3, #12
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bcea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	621a      	str	r2, [r3, #32]
}
 800bd02:	bf00      	nop
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
	...

0800bd10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4b09      	ldr	r3, [pc, #36]	; (800bd48 <TIM_ITRx_SetConfig+0x38>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f043 0307 	orr.w	r3, r3, #7
 800bd32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	609a      	str	r2, [r3, #8]
}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	ffcfff8f 	.word	0xffcfff8f

0800bd4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	021a      	lsls	r2, r3, #8
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	431a      	orrs	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	609a      	str	r2, [r3, #8]
}
 800bd80:	bf00      	nop
 800bd82:	371c      	adds	r7, #28
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e077      	b.n	800be94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a35      	ldr	r2, [pc, #212]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d004      	beq.n	800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a34      	ldr	r2, [pc, #208]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d108      	bne.n	800bdea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a25      	ldr	r2, [pc, #148]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d02c      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be16:	d027      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a22      	ldr	r2, [pc, #136]	; (800bea8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d022      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a21      	ldr	r2, [pc, #132]	; (800beac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d01d      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a1f      	ldr	r2, [pc, #124]	; (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d018      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a1a      	ldr	r2, [pc, #104]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d013      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a1b      	ldr	r2, [pc, #108]	; (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d00e      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a1a      	ldr	r2, [pc, #104]	; (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d009      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a18      	ldr	r2, [pc, #96]	; (800bebc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d004      	beq.n	800be68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a17      	ldr	r2, [pc, #92]	; (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d10c      	bne.n	800be82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	4313      	orrs	r3, r2
 800be78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	40010000 	.word	0x40010000
 800bea4:	40010400 	.word	0x40010400
 800bea8:	40000400 	.word	0x40000400
 800beac:	40000800 	.word	0x40000800
 800beb0:	40000c00 	.word	0x40000c00
 800beb4:	40001800 	.word	0x40001800
 800beb8:	40014000 	.word	0x40014000
 800bebc:	4000e000 	.word	0x4000e000
 800bec0:	4000e400 	.word	0x4000e400

0800bec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bedc:	2302      	movs	r3, #2
 800bede:	e087      	b.n	800bff0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	041b      	lsls	r3, r3, #16
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a27      	ldr	r2, [pc, #156]	; (800bffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d004      	beq.n	800bf6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a25      	ldr	r2, [pc, #148]	; (800c000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d106      	bne.n	800bf7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a1e      	ldr	r2, [pc, #120]	; (800bffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d004      	beq.n	800bf90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a1d      	ldr	r2, [pc, #116]	; (800c000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d126      	bne.n	800bfde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9a:	051b      	lsls	r3, r3, #20
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a0e      	ldr	r2, [pc, #56]	; (800bffc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d004      	beq.n	800bfd0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a0d      	ldr	r2, [pc, #52]	; (800c000 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d106      	bne.n	800bfde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	40010000 	.word	0x40010000
 800c000:	40010400 	.word	0x40010400

0800c004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e042      	b.n	800c09c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7f6 faef 	bl	800260c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2224      	movs	r2, #36	; 0x24
 800c032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f022 0201 	bic.w	r2, r2, #1
 800c044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f82c 	bl	800c0a4 <UART_SetConfig>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e022      	b.n	800c09c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fe7e 	bl	800cd60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 ff05 	bl	800cea4 <UART_CheckIdleState>
 800c09a:	4603      	mov	r3, r0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0a4:	b5b0      	push	{r4, r5, r7, lr}
 800c0a6:	b08e      	sub	sp, #56	; 0x38
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	431a      	orrs	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	4bbf      	ldr	r3, [pc, #764]	; (800c3d0 <UART_SetConfig+0x32c>)
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4ab5      	ldr	r2, [pc, #724]	; (800c3d4 <UART_SetConfig+0x330>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d004      	beq.n	800c10e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10a:	4313      	orrs	r3, r2
 800c10c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	4bb0      	ldr	r3, [pc, #704]	; (800c3d8 <UART_SetConfig+0x334>)
 800c116:	4013      	ands	r3, r2
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6812      	ldr	r2, [r2, #0]
 800c11c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c11e:	430b      	orrs	r3, r1
 800c120:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c128:	f023 010f 	bic.w	r1, r3, #15
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	430a      	orrs	r2, r1
 800c136:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4aa7      	ldr	r2, [pc, #668]	; (800c3dc <UART_SetConfig+0x338>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d176      	bne.n	800c230 <UART_SetConfig+0x18c>
 800c142:	4ba7      	ldr	r3, [pc, #668]	; (800c3e0 <UART_SetConfig+0x33c>)
 800c144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c14a:	2b28      	cmp	r3, #40	; 0x28
 800c14c:	d86c      	bhi.n	800c228 <UART_SetConfig+0x184>
 800c14e:	a201      	add	r2, pc, #4	; (adr r2, 800c154 <UART_SetConfig+0xb0>)
 800c150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c154:	0800c1f9 	.word	0x0800c1f9
 800c158:	0800c229 	.word	0x0800c229
 800c15c:	0800c229 	.word	0x0800c229
 800c160:	0800c229 	.word	0x0800c229
 800c164:	0800c229 	.word	0x0800c229
 800c168:	0800c229 	.word	0x0800c229
 800c16c:	0800c229 	.word	0x0800c229
 800c170:	0800c229 	.word	0x0800c229
 800c174:	0800c201 	.word	0x0800c201
 800c178:	0800c229 	.word	0x0800c229
 800c17c:	0800c229 	.word	0x0800c229
 800c180:	0800c229 	.word	0x0800c229
 800c184:	0800c229 	.word	0x0800c229
 800c188:	0800c229 	.word	0x0800c229
 800c18c:	0800c229 	.word	0x0800c229
 800c190:	0800c229 	.word	0x0800c229
 800c194:	0800c209 	.word	0x0800c209
 800c198:	0800c229 	.word	0x0800c229
 800c19c:	0800c229 	.word	0x0800c229
 800c1a0:	0800c229 	.word	0x0800c229
 800c1a4:	0800c229 	.word	0x0800c229
 800c1a8:	0800c229 	.word	0x0800c229
 800c1ac:	0800c229 	.word	0x0800c229
 800c1b0:	0800c229 	.word	0x0800c229
 800c1b4:	0800c211 	.word	0x0800c211
 800c1b8:	0800c229 	.word	0x0800c229
 800c1bc:	0800c229 	.word	0x0800c229
 800c1c0:	0800c229 	.word	0x0800c229
 800c1c4:	0800c229 	.word	0x0800c229
 800c1c8:	0800c229 	.word	0x0800c229
 800c1cc:	0800c229 	.word	0x0800c229
 800c1d0:	0800c229 	.word	0x0800c229
 800c1d4:	0800c219 	.word	0x0800c219
 800c1d8:	0800c229 	.word	0x0800c229
 800c1dc:	0800c229 	.word	0x0800c229
 800c1e0:	0800c229 	.word	0x0800c229
 800c1e4:	0800c229 	.word	0x0800c229
 800c1e8:	0800c229 	.word	0x0800c229
 800c1ec:	0800c229 	.word	0x0800c229
 800c1f0:	0800c229 	.word	0x0800c229
 800c1f4:	0800c221 	.word	0x0800c221
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fe:	e326      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c200:	2304      	movs	r3, #4
 800c202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c206:	e322      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c208:	2308      	movs	r3, #8
 800c20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20e:	e31e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c210:	2310      	movs	r3, #16
 800c212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c216:	e31a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c218:	2320      	movs	r3, #32
 800c21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c21e:	e316      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c220:	2340      	movs	r3, #64	; 0x40
 800c222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c226:	e312      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c228:	2380      	movs	r3, #128	; 0x80
 800c22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c22e:	e30e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a6b      	ldr	r2, [pc, #428]	; (800c3e4 <UART_SetConfig+0x340>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d130      	bne.n	800c29c <UART_SetConfig+0x1f8>
 800c23a:	4b69      	ldr	r3, [pc, #420]	; (800c3e0 <UART_SetConfig+0x33c>)
 800c23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b05      	cmp	r3, #5
 800c244:	d826      	bhi.n	800c294 <UART_SetConfig+0x1f0>
 800c246:	a201      	add	r2, pc, #4	; (adr r2, 800c24c <UART_SetConfig+0x1a8>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c265 	.word	0x0800c265
 800c250:	0800c26d 	.word	0x0800c26d
 800c254:	0800c275 	.word	0x0800c275
 800c258:	0800c27d 	.word	0x0800c27d
 800c25c:	0800c285 	.word	0x0800c285
 800c260:	0800c28d 	.word	0x0800c28d
 800c264:	2300      	movs	r3, #0
 800c266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26a:	e2f0      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c26c:	2304      	movs	r3, #4
 800c26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c272:	e2ec      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c274:	2308      	movs	r3, #8
 800c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c27a:	e2e8      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c27c:	2310      	movs	r3, #16
 800c27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c282:	e2e4      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c284:	2320      	movs	r3, #32
 800c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c28a:	e2e0      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c28c:	2340      	movs	r3, #64	; 0x40
 800c28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c292:	e2dc      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c294:	2380      	movs	r3, #128	; 0x80
 800c296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c29a:	e2d8      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a51      	ldr	r2, [pc, #324]	; (800c3e8 <UART_SetConfig+0x344>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d130      	bne.n	800c308 <UART_SetConfig+0x264>
 800c2a6:	4b4e      	ldr	r3, [pc, #312]	; (800c3e0 <UART_SetConfig+0x33c>)
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	d826      	bhi.n	800c300 <UART_SetConfig+0x25c>
 800c2b2:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <UART_SetConfig+0x214>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c2d1 	.word	0x0800c2d1
 800c2bc:	0800c2d9 	.word	0x0800c2d9
 800c2c0:	0800c2e1 	.word	0x0800c2e1
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c2f1 	.word	0x0800c2f1
 800c2cc:	0800c2f9 	.word	0x0800c2f9
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d6:	e2ba      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c2d8:	2304      	movs	r3, #4
 800c2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2de:	e2b6      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c2e0:	2308      	movs	r3, #8
 800c2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e6:	e2b2      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ee:	e2ae      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2f6:	e2aa      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c2f8:	2340      	movs	r3, #64	; 0x40
 800c2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2fe:	e2a6      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c300:	2380      	movs	r3, #128	; 0x80
 800c302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c306:	e2a2      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a37      	ldr	r2, [pc, #220]	; (800c3ec <UART_SetConfig+0x348>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d130      	bne.n	800c374 <UART_SetConfig+0x2d0>
 800c312:	4b33      	ldr	r3, [pc, #204]	; (800c3e0 <UART_SetConfig+0x33c>)
 800c314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c316:	f003 0307 	and.w	r3, r3, #7
 800c31a:	2b05      	cmp	r3, #5
 800c31c:	d826      	bhi.n	800c36c <UART_SetConfig+0x2c8>
 800c31e:	a201      	add	r2, pc, #4	; (adr r2, 800c324 <UART_SetConfig+0x280>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c33d 	.word	0x0800c33d
 800c328:	0800c345 	.word	0x0800c345
 800c32c:	0800c34d 	.word	0x0800c34d
 800c330:	0800c355 	.word	0x0800c355
 800c334:	0800c35d 	.word	0x0800c35d
 800c338:	0800c365 	.word	0x0800c365
 800c33c:	2300      	movs	r3, #0
 800c33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c342:	e284      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c344:	2304      	movs	r3, #4
 800c346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34a:	e280      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c34c:	2308      	movs	r3, #8
 800c34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c352:	e27c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c354:	2310      	movs	r3, #16
 800c356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c35a:	e278      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c35c:	2320      	movs	r3, #32
 800c35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c362:	e274      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c36a:	e270      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c36c:	2380      	movs	r3, #128	; 0x80
 800c36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c372:	e26c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a1d      	ldr	r2, [pc, #116]	; (800c3f0 <UART_SetConfig+0x34c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d142      	bne.n	800c404 <UART_SetConfig+0x360>
 800c37e:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <UART_SetConfig+0x33c>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	2b05      	cmp	r3, #5
 800c388:	d838      	bhi.n	800c3fc <UART_SetConfig+0x358>
 800c38a:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x2ec>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c3a9 	.word	0x0800c3a9
 800c394:	0800c3b1 	.word	0x0800c3b1
 800c398:	0800c3b9 	.word	0x0800c3b9
 800c39c:	0800c3c1 	.word	0x0800c3c1
 800c3a0:	0800c3c9 	.word	0x0800c3c9
 800c3a4:	0800c3f5 	.word	0x0800c3f5
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ae:	e24e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3b0:	2304      	movs	r3, #4
 800c3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b6:	e24a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3b8:	2308      	movs	r3, #8
 800c3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3be:	e246      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3c0:	2310      	movs	r3, #16
 800c3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3c6:	e242      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3c8:	2320      	movs	r3, #32
 800c3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ce:	e23e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3d0:	cfff69f3 	.word	0xcfff69f3
 800c3d4:	58000c00 	.word	0x58000c00
 800c3d8:	11fff4ff 	.word	0x11fff4ff
 800c3dc:	40011000 	.word	0x40011000
 800c3e0:	58024400 	.word	0x58024400
 800c3e4:	40004400 	.word	0x40004400
 800c3e8:	40004800 	.word	0x40004800
 800c3ec:	40004c00 	.word	0x40004c00
 800c3f0:	40005000 	.word	0x40005000
 800c3f4:	2340      	movs	r3, #64	; 0x40
 800c3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fa:	e228      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c3fc:	2380      	movs	r3, #128	; 0x80
 800c3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c402:	e224      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4ab1      	ldr	r2, [pc, #708]	; (800c6d0 <UART_SetConfig+0x62c>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d176      	bne.n	800c4fc <UART_SetConfig+0x458>
 800c40e:	4bb1      	ldr	r3, [pc, #708]	; (800c6d4 <UART_SetConfig+0x630>)
 800c410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c416:	2b28      	cmp	r3, #40	; 0x28
 800c418:	d86c      	bhi.n	800c4f4 <UART_SetConfig+0x450>
 800c41a:	a201      	add	r2, pc, #4	; (adr r2, 800c420 <UART_SetConfig+0x37c>)
 800c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c420:	0800c4c5 	.word	0x0800c4c5
 800c424:	0800c4f5 	.word	0x0800c4f5
 800c428:	0800c4f5 	.word	0x0800c4f5
 800c42c:	0800c4f5 	.word	0x0800c4f5
 800c430:	0800c4f5 	.word	0x0800c4f5
 800c434:	0800c4f5 	.word	0x0800c4f5
 800c438:	0800c4f5 	.word	0x0800c4f5
 800c43c:	0800c4f5 	.word	0x0800c4f5
 800c440:	0800c4cd 	.word	0x0800c4cd
 800c444:	0800c4f5 	.word	0x0800c4f5
 800c448:	0800c4f5 	.word	0x0800c4f5
 800c44c:	0800c4f5 	.word	0x0800c4f5
 800c450:	0800c4f5 	.word	0x0800c4f5
 800c454:	0800c4f5 	.word	0x0800c4f5
 800c458:	0800c4f5 	.word	0x0800c4f5
 800c45c:	0800c4f5 	.word	0x0800c4f5
 800c460:	0800c4d5 	.word	0x0800c4d5
 800c464:	0800c4f5 	.word	0x0800c4f5
 800c468:	0800c4f5 	.word	0x0800c4f5
 800c46c:	0800c4f5 	.word	0x0800c4f5
 800c470:	0800c4f5 	.word	0x0800c4f5
 800c474:	0800c4f5 	.word	0x0800c4f5
 800c478:	0800c4f5 	.word	0x0800c4f5
 800c47c:	0800c4f5 	.word	0x0800c4f5
 800c480:	0800c4dd 	.word	0x0800c4dd
 800c484:	0800c4f5 	.word	0x0800c4f5
 800c488:	0800c4f5 	.word	0x0800c4f5
 800c48c:	0800c4f5 	.word	0x0800c4f5
 800c490:	0800c4f5 	.word	0x0800c4f5
 800c494:	0800c4f5 	.word	0x0800c4f5
 800c498:	0800c4f5 	.word	0x0800c4f5
 800c49c:	0800c4f5 	.word	0x0800c4f5
 800c4a0:	0800c4e5 	.word	0x0800c4e5
 800c4a4:	0800c4f5 	.word	0x0800c4f5
 800c4a8:	0800c4f5 	.word	0x0800c4f5
 800c4ac:	0800c4f5 	.word	0x0800c4f5
 800c4b0:	0800c4f5 	.word	0x0800c4f5
 800c4b4:	0800c4f5 	.word	0x0800c4f5
 800c4b8:	0800c4f5 	.word	0x0800c4f5
 800c4bc:	0800c4f5 	.word	0x0800c4f5
 800c4c0:	0800c4ed 	.word	0x0800c4ed
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ca:	e1c0      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d2:	e1bc      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e1b8      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4dc:	2310      	movs	r3, #16
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	e1b4      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4e4:	2320      	movs	r3, #32
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	e1b0      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4ec:	2340      	movs	r3, #64	; 0x40
 800c4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f2:	e1ac      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4f4:	2380      	movs	r3, #128	; 0x80
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e1a8      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a75      	ldr	r2, [pc, #468]	; (800c6d8 <UART_SetConfig+0x634>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d130      	bne.n	800c568 <UART_SetConfig+0x4c4>
 800c506:	4b73      	ldr	r3, [pc, #460]	; (800c6d4 <UART_SetConfig+0x630>)
 800c508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	2b05      	cmp	r3, #5
 800c510:	d826      	bhi.n	800c560 <UART_SetConfig+0x4bc>
 800c512:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <UART_SetConfig+0x474>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c531 	.word	0x0800c531
 800c51c:	0800c539 	.word	0x0800c539
 800c520:	0800c541 	.word	0x0800c541
 800c524:	0800c549 	.word	0x0800c549
 800c528:	0800c551 	.word	0x0800c551
 800c52c:	0800c559 	.word	0x0800c559
 800c530:	2300      	movs	r3, #0
 800c532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c536:	e18a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c538:	2304      	movs	r3, #4
 800c53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53e:	e186      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c540:	2308      	movs	r3, #8
 800c542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c546:	e182      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c548:	2310      	movs	r3, #16
 800c54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54e:	e17e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c550:	2320      	movs	r3, #32
 800c552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c556:	e17a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55e:	e176      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c560:	2380      	movs	r3, #128	; 0x80
 800c562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c566:	e172      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a5b      	ldr	r2, [pc, #364]	; (800c6dc <UART_SetConfig+0x638>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d130      	bne.n	800c5d4 <UART_SetConfig+0x530>
 800c572:	4b58      	ldr	r3, [pc, #352]	; (800c6d4 <UART_SetConfig+0x630>)
 800c574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b05      	cmp	r3, #5
 800c57c:	d826      	bhi.n	800c5cc <UART_SetConfig+0x528>
 800c57e:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <UART_SetConfig+0x4e0>)
 800c580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c584:	0800c59d 	.word	0x0800c59d
 800c588:	0800c5a5 	.word	0x0800c5a5
 800c58c:	0800c5ad 	.word	0x0800c5ad
 800c590:	0800c5b5 	.word	0x0800c5b5
 800c594:	0800c5bd 	.word	0x0800c5bd
 800c598:	0800c5c5 	.word	0x0800c5c5
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a2:	e154      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5a4:	2304      	movs	r3, #4
 800c5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5aa:	e150      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5ac:	2308      	movs	r3, #8
 800c5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5b2:	e14c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ba:	e148      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5bc:	2320      	movs	r3, #32
 800c5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c2:	e144      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5c4:	2340      	movs	r3, #64	; 0x40
 800c5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ca:	e140      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5cc:	2380      	movs	r3, #128	; 0x80
 800c5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d2:	e13c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a41      	ldr	r2, [pc, #260]	; (800c6e0 <UART_SetConfig+0x63c>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	f040 8082 	bne.w	800c6e4 <UART_SetConfig+0x640>
 800c5e0:	4b3c      	ldr	r3, [pc, #240]	; (800c6d4 <UART_SetConfig+0x630>)
 800c5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5e8:	2b28      	cmp	r3, #40	; 0x28
 800c5ea:	d86d      	bhi.n	800c6c8 <UART_SetConfig+0x624>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <UART_SetConfig+0x550>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c699 	.word	0x0800c699
 800c5f8:	0800c6c9 	.word	0x0800c6c9
 800c5fc:	0800c6c9 	.word	0x0800c6c9
 800c600:	0800c6c9 	.word	0x0800c6c9
 800c604:	0800c6c9 	.word	0x0800c6c9
 800c608:	0800c6c9 	.word	0x0800c6c9
 800c60c:	0800c6c9 	.word	0x0800c6c9
 800c610:	0800c6c9 	.word	0x0800c6c9
 800c614:	0800c6a1 	.word	0x0800c6a1
 800c618:	0800c6c9 	.word	0x0800c6c9
 800c61c:	0800c6c9 	.word	0x0800c6c9
 800c620:	0800c6c9 	.word	0x0800c6c9
 800c624:	0800c6c9 	.word	0x0800c6c9
 800c628:	0800c6c9 	.word	0x0800c6c9
 800c62c:	0800c6c9 	.word	0x0800c6c9
 800c630:	0800c6c9 	.word	0x0800c6c9
 800c634:	0800c6a9 	.word	0x0800c6a9
 800c638:	0800c6c9 	.word	0x0800c6c9
 800c63c:	0800c6c9 	.word	0x0800c6c9
 800c640:	0800c6c9 	.word	0x0800c6c9
 800c644:	0800c6c9 	.word	0x0800c6c9
 800c648:	0800c6c9 	.word	0x0800c6c9
 800c64c:	0800c6c9 	.word	0x0800c6c9
 800c650:	0800c6c9 	.word	0x0800c6c9
 800c654:	0800c6b1 	.word	0x0800c6b1
 800c658:	0800c6c9 	.word	0x0800c6c9
 800c65c:	0800c6c9 	.word	0x0800c6c9
 800c660:	0800c6c9 	.word	0x0800c6c9
 800c664:	0800c6c9 	.word	0x0800c6c9
 800c668:	0800c6c9 	.word	0x0800c6c9
 800c66c:	0800c6c9 	.word	0x0800c6c9
 800c670:	0800c6c9 	.word	0x0800c6c9
 800c674:	0800c6b9 	.word	0x0800c6b9
 800c678:	0800c6c9 	.word	0x0800c6c9
 800c67c:	0800c6c9 	.word	0x0800c6c9
 800c680:	0800c6c9 	.word	0x0800c6c9
 800c684:	0800c6c9 	.word	0x0800c6c9
 800c688:	0800c6c9 	.word	0x0800c6c9
 800c68c:	0800c6c9 	.word	0x0800c6c9
 800c690:	0800c6c9 	.word	0x0800c6c9
 800c694:	0800c6c1 	.word	0x0800c6c1
 800c698:	2301      	movs	r3, #1
 800c69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c69e:	e0d6      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6a0:	2304      	movs	r3, #4
 800c6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6a6:	e0d2      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6a8:	2308      	movs	r3, #8
 800c6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ae:	e0ce      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6b0:	2310      	movs	r3, #16
 800c6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6b6:	e0ca      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6b8:	2320      	movs	r3, #32
 800c6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6be:	e0c6      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e0c2      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6c8:	2380      	movs	r3, #128	; 0x80
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e0be      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c6d0:	40011400 	.word	0x40011400
 800c6d4:	58024400 	.word	0x58024400
 800c6d8:	40007800 	.word	0x40007800
 800c6dc:	40007c00 	.word	0x40007c00
 800c6e0:	40011800 	.word	0x40011800
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4aad      	ldr	r2, [pc, #692]	; (800c9a0 <UART_SetConfig+0x8fc>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d176      	bne.n	800c7dc <UART_SetConfig+0x738>
 800c6ee:	4bad      	ldr	r3, [pc, #692]	; (800c9a4 <UART_SetConfig+0x900>)
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6f6:	2b28      	cmp	r3, #40	; 0x28
 800c6f8:	d86c      	bhi.n	800c7d4 <UART_SetConfig+0x730>
 800c6fa:	a201      	add	r2, pc, #4	; (adr r2, 800c700 <UART_SetConfig+0x65c>)
 800c6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c700:	0800c7a5 	.word	0x0800c7a5
 800c704:	0800c7d5 	.word	0x0800c7d5
 800c708:	0800c7d5 	.word	0x0800c7d5
 800c70c:	0800c7d5 	.word	0x0800c7d5
 800c710:	0800c7d5 	.word	0x0800c7d5
 800c714:	0800c7d5 	.word	0x0800c7d5
 800c718:	0800c7d5 	.word	0x0800c7d5
 800c71c:	0800c7d5 	.word	0x0800c7d5
 800c720:	0800c7ad 	.word	0x0800c7ad
 800c724:	0800c7d5 	.word	0x0800c7d5
 800c728:	0800c7d5 	.word	0x0800c7d5
 800c72c:	0800c7d5 	.word	0x0800c7d5
 800c730:	0800c7d5 	.word	0x0800c7d5
 800c734:	0800c7d5 	.word	0x0800c7d5
 800c738:	0800c7d5 	.word	0x0800c7d5
 800c73c:	0800c7d5 	.word	0x0800c7d5
 800c740:	0800c7b5 	.word	0x0800c7b5
 800c744:	0800c7d5 	.word	0x0800c7d5
 800c748:	0800c7d5 	.word	0x0800c7d5
 800c74c:	0800c7d5 	.word	0x0800c7d5
 800c750:	0800c7d5 	.word	0x0800c7d5
 800c754:	0800c7d5 	.word	0x0800c7d5
 800c758:	0800c7d5 	.word	0x0800c7d5
 800c75c:	0800c7d5 	.word	0x0800c7d5
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c7d5 	.word	0x0800c7d5
 800c770:	0800c7d5 	.word	0x0800c7d5
 800c774:	0800c7d5 	.word	0x0800c7d5
 800c778:	0800c7d5 	.word	0x0800c7d5
 800c77c:	0800c7d5 	.word	0x0800c7d5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7d5 	.word	0x0800c7d5
 800c788:	0800c7d5 	.word	0x0800c7d5
 800c78c:	0800c7d5 	.word	0x0800c7d5
 800c790:	0800c7d5 	.word	0x0800c7d5
 800c794:	0800c7d5 	.word	0x0800c7d5
 800c798:	0800c7d5 	.word	0x0800c7d5
 800c79c:	0800c7d5 	.word	0x0800c7d5
 800c7a0:	0800c7cd 	.word	0x0800c7cd
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7aa:	e050      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b2:	e04c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e048      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7bc:	2310      	movs	r3, #16
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	e044      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ca:	e040      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d2:	e03c      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7da:	e038      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a71      	ldr	r2, [pc, #452]	; (800c9a8 <UART_SetConfig+0x904>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d130      	bne.n	800c848 <UART_SetConfig+0x7a4>
 800c7e6:	4b6f      	ldr	r3, [pc, #444]	; (800c9a4 <UART_SetConfig+0x900>)
 800c7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ea:	f003 0307 	and.w	r3, r3, #7
 800c7ee:	2b05      	cmp	r3, #5
 800c7f0:	d826      	bhi.n	800c840 <UART_SetConfig+0x79c>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <UART_SetConfig+0x754>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c819 	.word	0x0800c819
 800c800:	0800c821 	.word	0x0800c821
 800c804:	0800c829 	.word	0x0800c829
 800c808:	0800c831 	.word	0x0800c831
 800c80c:	0800c839 	.word	0x0800c839
 800c810:	2302      	movs	r3, #2
 800c812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c816:	e01a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c818:	2304      	movs	r3, #4
 800c81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81e:	e016      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c820:	2308      	movs	r3, #8
 800c822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c826:	e012      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c828:	2310      	movs	r3, #16
 800c82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82e:	e00e      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c830:	2320      	movs	r3, #32
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e00a      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c838:	2340      	movs	r3, #64	; 0x40
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e006      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c840:	2380      	movs	r3, #128	; 0x80
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e002      	b.n	800c84e <UART_SetConfig+0x7aa>
 800c848:	2380      	movs	r3, #128	; 0x80
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a55      	ldr	r2, [pc, #340]	; (800c9a8 <UART_SetConfig+0x904>)
 800c854:	4293      	cmp	r3, r2
 800c856:	f040 80f0 	bne.w	800ca3a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c85a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c85e:	2b20      	cmp	r3, #32
 800c860:	dc46      	bgt.n	800c8f0 <UART_SetConfig+0x84c>
 800c862:	2b02      	cmp	r3, #2
 800c864:	db75      	blt.n	800c952 <UART_SetConfig+0x8ae>
 800c866:	3b02      	subs	r3, #2
 800c868:	2b1e      	cmp	r3, #30
 800c86a:	d872      	bhi.n	800c952 <UART_SetConfig+0x8ae>
 800c86c:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <UART_SetConfig+0x7d0>)
 800c86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c872:	bf00      	nop
 800c874:	0800c8f7 	.word	0x0800c8f7
 800c878:	0800c953 	.word	0x0800c953
 800c87c:	0800c8ff 	.word	0x0800c8ff
 800c880:	0800c953 	.word	0x0800c953
 800c884:	0800c953 	.word	0x0800c953
 800c888:	0800c953 	.word	0x0800c953
 800c88c:	0800c90f 	.word	0x0800c90f
 800c890:	0800c953 	.word	0x0800c953
 800c894:	0800c953 	.word	0x0800c953
 800c898:	0800c953 	.word	0x0800c953
 800c89c:	0800c953 	.word	0x0800c953
 800c8a0:	0800c953 	.word	0x0800c953
 800c8a4:	0800c953 	.word	0x0800c953
 800c8a8:	0800c953 	.word	0x0800c953
 800c8ac:	0800c91f 	.word	0x0800c91f
 800c8b0:	0800c953 	.word	0x0800c953
 800c8b4:	0800c953 	.word	0x0800c953
 800c8b8:	0800c953 	.word	0x0800c953
 800c8bc:	0800c953 	.word	0x0800c953
 800c8c0:	0800c953 	.word	0x0800c953
 800c8c4:	0800c953 	.word	0x0800c953
 800c8c8:	0800c953 	.word	0x0800c953
 800c8cc:	0800c953 	.word	0x0800c953
 800c8d0:	0800c953 	.word	0x0800c953
 800c8d4:	0800c953 	.word	0x0800c953
 800c8d8:	0800c953 	.word	0x0800c953
 800c8dc:	0800c953 	.word	0x0800c953
 800c8e0:	0800c953 	.word	0x0800c953
 800c8e4:	0800c953 	.word	0x0800c953
 800c8e8:	0800c953 	.word	0x0800c953
 800c8ec:	0800c945 	.word	0x0800c945
 800c8f0:	2b40      	cmp	r3, #64	; 0x40
 800c8f2:	d02a      	beq.n	800c94a <UART_SetConfig+0x8a6>
 800c8f4:	e02d      	b.n	800c952 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c8f6:	f7fd fc39 	bl	800a16c <HAL_RCCEx_GetD3PCLK1Freq>
 800c8fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c8fc:	e02f      	b.n	800c95e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8fe:	f107 0314 	add.w	r3, r7, #20
 800c902:	4618      	mov	r0, r3
 800c904:	f7fd fc48 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c90c:	e027      	b.n	800c95e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4618      	mov	r0, r3
 800c914:	f7fd fd94 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c91c:	e01f      	b.n	800c95e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c91e:	4b21      	ldr	r3, [pc, #132]	; (800c9a4 <UART_SetConfig+0x900>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	2b00      	cmp	r3, #0
 800c928:	d009      	beq.n	800c93e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c92a:	4b1e      	ldr	r3, [pc, #120]	; (800c9a4 <UART_SetConfig+0x900>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	08db      	lsrs	r3, r3, #3
 800c930:	f003 0303 	and.w	r3, r3, #3
 800c934:	4a1d      	ldr	r2, [pc, #116]	; (800c9ac <UART_SetConfig+0x908>)
 800c936:	fa22 f303 	lsr.w	r3, r2, r3
 800c93a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c93c:	e00f      	b.n	800c95e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c93e:	4b1b      	ldr	r3, [pc, #108]	; (800c9ac <UART_SetConfig+0x908>)
 800c940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c942:	e00c      	b.n	800c95e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c944:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <UART_SetConfig+0x90c>)
 800c946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c948:	e009      	b.n	800c95e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c94a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c950:	e005      	b.n	800c95e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c95c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 81e6 	beq.w	800cd32 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96a:	4a12      	ldr	r2, [pc, #72]	; (800c9b4 <UART_SetConfig+0x910>)
 800c96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c970:	461a      	mov	r2, r3
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	fbb3 f3f2 	udiv	r3, r3, r2
 800c978:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	4613      	mov	r3, r2
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	4413      	add	r3, r2
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	429a      	cmp	r2, r3
 800c988:	d305      	bcc.n	800c996 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c990:	6a3a      	ldr	r2, [r7, #32]
 800c992:	429a      	cmp	r2, r3
 800c994:	d910      	bls.n	800c9b8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c99c:	e1c9      	b.n	800cd32 <UART_SetConfig+0xc8e>
 800c99e:	bf00      	nop
 800c9a0:	40011c00 	.word	0x40011c00
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	58000c00 	.word	0x58000c00
 800c9ac:	03d09000 	.word	0x03d09000
 800c9b0:	003d0900 	.word	0x003d0900
 800c9b4:	080119e0 	.word	0x080119e0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f04f 0100 	mov.w	r1, #0
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c4:	4ac1      	ldr	r2, [pc, #772]	; (800cccc <UART_SetConfig+0xc28>)
 800c9c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	f04f 0300 	mov.w	r3, #0
 800c9d0:	f7f3 fc9e 	bl	8000310 <__aeabi_uldivmod>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f04f 0200 	mov.w	r2, #0
 800c9e0:	f04f 0300 	mov.w	r3, #0
 800c9e4:	020b      	lsls	r3, r1, #8
 800c9e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c9ea:	0202      	lsls	r2, r0, #8
 800c9ec:	6879      	ldr	r1, [r7, #4]
 800c9ee:	6849      	ldr	r1, [r1, #4]
 800c9f0:	0849      	lsrs	r1, r1, #1
 800c9f2:	4608      	mov	r0, r1
 800c9f4:	f04f 0100 	mov.w	r1, #0
 800c9f8:	1814      	adds	r4, r2, r0
 800c9fa:	eb43 0501 	adc.w	r5, r3, r1
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	461a      	mov	r2, r3
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	4620      	mov	r0, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	f7f3 fc80 	bl	8000310 <__aeabi_uldivmod>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	4613      	mov	r3, r2
 800ca16:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca1e:	d308      	bcc.n	800ca32 <UART_SetConfig+0x98e>
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca26:	d204      	bcs.n	800ca32 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca2e:	60da      	str	r2, [r3, #12]
 800ca30:	e17f      	b.n	800cd32 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca38:	e17b      	b.n	800cd32 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca42:	f040 80bd 	bne.w	800cbc0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ca46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca4a:	2b20      	cmp	r3, #32
 800ca4c:	dc48      	bgt.n	800cae0 <UART_SetConfig+0xa3c>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	db7b      	blt.n	800cb4a <UART_SetConfig+0xaa6>
 800ca52:	2b20      	cmp	r3, #32
 800ca54:	d879      	bhi.n	800cb4a <UART_SetConfig+0xaa6>
 800ca56:	a201      	add	r2, pc, #4	; (adr r2, 800ca5c <UART_SetConfig+0x9b8>)
 800ca58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5c:	0800cae7 	.word	0x0800cae7
 800ca60:	0800caef 	.word	0x0800caef
 800ca64:	0800cb4b 	.word	0x0800cb4b
 800ca68:	0800cb4b 	.word	0x0800cb4b
 800ca6c:	0800caf7 	.word	0x0800caf7
 800ca70:	0800cb4b 	.word	0x0800cb4b
 800ca74:	0800cb4b 	.word	0x0800cb4b
 800ca78:	0800cb4b 	.word	0x0800cb4b
 800ca7c:	0800cb07 	.word	0x0800cb07
 800ca80:	0800cb4b 	.word	0x0800cb4b
 800ca84:	0800cb4b 	.word	0x0800cb4b
 800ca88:	0800cb4b 	.word	0x0800cb4b
 800ca8c:	0800cb4b 	.word	0x0800cb4b
 800ca90:	0800cb4b 	.word	0x0800cb4b
 800ca94:	0800cb4b 	.word	0x0800cb4b
 800ca98:	0800cb4b 	.word	0x0800cb4b
 800ca9c:	0800cb17 	.word	0x0800cb17
 800caa0:	0800cb4b 	.word	0x0800cb4b
 800caa4:	0800cb4b 	.word	0x0800cb4b
 800caa8:	0800cb4b 	.word	0x0800cb4b
 800caac:	0800cb4b 	.word	0x0800cb4b
 800cab0:	0800cb4b 	.word	0x0800cb4b
 800cab4:	0800cb4b 	.word	0x0800cb4b
 800cab8:	0800cb4b 	.word	0x0800cb4b
 800cabc:	0800cb4b 	.word	0x0800cb4b
 800cac0:	0800cb4b 	.word	0x0800cb4b
 800cac4:	0800cb4b 	.word	0x0800cb4b
 800cac8:	0800cb4b 	.word	0x0800cb4b
 800cacc:	0800cb4b 	.word	0x0800cb4b
 800cad0:	0800cb4b 	.word	0x0800cb4b
 800cad4:	0800cb4b 	.word	0x0800cb4b
 800cad8:	0800cb4b 	.word	0x0800cb4b
 800cadc:	0800cb3d 	.word	0x0800cb3d
 800cae0:	2b40      	cmp	r3, #64	; 0x40
 800cae2:	d02e      	beq.n	800cb42 <UART_SetConfig+0xa9e>
 800cae4:	e031      	b.n	800cb4a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cae6:	f7fb fff7 	bl	8008ad8 <HAL_RCC_GetPCLK1Freq>
 800caea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800caec:	e033      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caee:	f7fc f809 	bl	8008b04 <HAL_RCC_GetPCLK2Freq>
 800caf2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800caf4:	e02f      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caf6:	f107 0314 	add.w	r3, r7, #20
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fd fb4c 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb04:	e027      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb06:	f107 0308 	add.w	r3, r7, #8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fd fc98 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb14:	e01f      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb16:	4b6e      	ldr	r3, [pc, #440]	; (800ccd0 <UART_SetConfig+0xc2c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0320 	and.w	r3, r3, #32
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d009      	beq.n	800cb36 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb22:	4b6b      	ldr	r3, [pc, #428]	; (800ccd0 <UART_SetConfig+0xc2c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	08db      	lsrs	r3, r3, #3
 800cb28:	f003 0303 	and.w	r3, r3, #3
 800cb2c:	4a69      	ldr	r2, [pc, #420]	; (800ccd4 <UART_SetConfig+0xc30>)
 800cb2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb34:	e00f      	b.n	800cb56 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800cb36:	4b67      	ldr	r3, [pc, #412]	; (800ccd4 <UART_SetConfig+0xc30>)
 800cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb3a:	e00c      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb3c:	4b66      	ldr	r3, [pc, #408]	; (800ccd8 <UART_SetConfig+0xc34>)
 800cb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb40:	e009      	b.n	800cb56 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb48:	e005      	b.n	800cb56 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cb54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 80ea 	beq.w	800cd32 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb62:	4a5a      	ldr	r2, [pc, #360]	; (800cccc <UART_SetConfig+0xc28>)
 800cb64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb68:	461a      	mov	r2, r3
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb70:	005a      	lsls	r2, r3, #1
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	085b      	lsrs	r3, r3, #1
 800cb78:	441a      	add	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	d916      	bls.n	800cbb8 <UART_SetConfig+0xb14>
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb90:	d212      	bcs.n	800cbb8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f023 030f 	bic.w	r3, r3, #15
 800cb9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	085b      	lsrs	r3, r3, #1
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	f003 0307 	and.w	r3, r3, #7
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	e0bc      	b.n	800cd32 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cbbe:	e0b8      	b.n	800cd32 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	dc4b      	bgt.n	800cc60 <UART_SetConfig+0xbbc>
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f2c0 8087 	blt.w	800ccdc <UART_SetConfig+0xc38>
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	f200 8084 	bhi.w	800ccdc <UART_SetConfig+0xc38>
 800cbd4:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <UART_SetConfig+0xb38>)
 800cbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbda:	bf00      	nop
 800cbdc:	0800cc67 	.word	0x0800cc67
 800cbe0:	0800cc6f 	.word	0x0800cc6f
 800cbe4:	0800ccdd 	.word	0x0800ccdd
 800cbe8:	0800ccdd 	.word	0x0800ccdd
 800cbec:	0800cc77 	.word	0x0800cc77
 800cbf0:	0800ccdd 	.word	0x0800ccdd
 800cbf4:	0800ccdd 	.word	0x0800ccdd
 800cbf8:	0800ccdd 	.word	0x0800ccdd
 800cbfc:	0800cc87 	.word	0x0800cc87
 800cc00:	0800ccdd 	.word	0x0800ccdd
 800cc04:	0800ccdd 	.word	0x0800ccdd
 800cc08:	0800ccdd 	.word	0x0800ccdd
 800cc0c:	0800ccdd 	.word	0x0800ccdd
 800cc10:	0800ccdd 	.word	0x0800ccdd
 800cc14:	0800ccdd 	.word	0x0800ccdd
 800cc18:	0800ccdd 	.word	0x0800ccdd
 800cc1c:	0800cc97 	.word	0x0800cc97
 800cc20:	0800ccdd 	.word	0x0800ccdd
 800cc24:	0800ccdd 	.word	0x0800ccdd
 800cc28:	0800ccdd 	.word	0x0800ccdd
 800cc2c:	0800ccdd 	.word	0x0800ccdd
 800cc30:	0800ccdd 	.word	0x0800ccdd
 800cc34:	0800ccdd 	.word	0x0800ccdd
 800cc38:	0800ccdd 	.word	0x0800ccdd
 800cc3c:	0800ccdd 	.word	0x0800ccdd
 800cc40:	0800ccdd 	.word	0x0800ccdd
 800cc44:	0800ccdd 	.word	0x0800ccdd
 800cc48:	0800ccdd 	.word	0x0800ccdd
 800cc4c:	0800ccdd 	.word	0x0800ccdd
 800cc50:	0800ccdd 	.word	0x0800ccdd
 800cc54:	0800ccdd 	.word	0x0800ccdd
 800cc58:	0800ccdd 	.word	0x0800ccdd
 800cc5c:	0800ccbd 	.word	0x0800ccbd
 800cc60:	2b40      	cmp	r3, #64	; 0x40
 800cc62:	d02e      	beq.n	800ccc2 <UART_SetConfig+0xc1e>
 800cc64:	e03a      	b.n	800ccdc <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc66:	f7fb ff37 	bl	8008ad8 <HAL_RCC_GetPCLK1Freq>
 800cc6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc6c:	e03c      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc6e:	f7fb ff49 	bl	8008b04 <HAL_RCC_GetPCLK2Freq>
 800cc72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc74:	e038      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc76:	f107 0314 	add.w	r3, r7, #20
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fd fa8c 	bl	800a198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc84:	e030      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc86:	f107 0308 	add.w	r3, r7, #8
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fd fbd8 	bl	800a440 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc94:	e028      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc96:	4b0e      	ldr	r3, [pc, #56]	; (800ccd0 <UART_SetConfig+0xc2c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 0320 	and.w	r3, r3, #32
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d009      	beq.n	800ccb6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cca2:	4b0b      	ldr	r3, [pc, #44]	; (800ccd0 <UART_SetConfig+0xc2c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	08db      	lsrs	r3, r3, #3
 800cca8:	f003 0303 	and.w	r3, r3, #3
 800ccac:	4a09      	ldr	r2, [pc, #36]	; (800ccd4 <UART_SetConfig+0xc30>)
 800ccae:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccb4:	e018      	b.n	800cce8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ccb6:	4b07      	ldr	r3, [pc, #28]	; (800ccd4 <UART_SetConfig+0xc30>)
 800ccb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccba:	e015      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccbc:	4b06      	ldr	r3, [pc, #24]	; (800ccd8 <UART_SetConfig+0xc34>)
 800ccbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccc0:	e012      	b.n	800cce8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccc8:	e00e      	b.n	800cce8 <UART_SetConfig+0xc44>
 800ccca:	bf00      	nop
 800cccc:	080119e0 	.word	0x080119e0
 800ccd0:	58024400 	.word	0x58024400
 800ccd4:	03d09000 	.word	0x03d09000
 800ccd8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cce6:	bf00      	nop
    }

    if (pclk != 0U)
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d021      	beq.n	800cd32 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf2:	4a1a      	ldr	r2, [pc, #104]	; (800cd5c <UART_SetConfig+0xcb8>)
 800ccf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfc:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	085b      	lsrs	r3, r3, #1
 800cd06:	441a      	add	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd10:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	2b0f      	cmp	r3, #15
 800cd16:	d909      	bls.n	800cd2c <UART_SetConfig+0xc88>
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd1e:	d205      	bcs.n	800cd2c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60da      	str	r2, [r3, #12]
 800cd2a:	e002      	b.n	800cd32 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2201      	movs	r2, #1
 800cd36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3738      	adds	r7, #56	; 0x38
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bdb0      	pop	{r4, r5, r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	080119e0 	.word	0x080119e0

0800cd60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00a      	beq.n	800cd8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	430a      	orrs	r2, r1
 800cd88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd8e:	f003 0302 	and.w	r3, r3, #2
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00a      	beq.n	800cdac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb0:	f003 0304 	and.w	r3, r3, #4
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00a      	beq.n	800cdce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd2:	f003 0308 	and.w	r3, r3, #8
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00a      	beq.n	800cdf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00a      	beq.n	800ce12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	f003 0320 	and.w	r3, r3, #32
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01a      	beq.n	800ce76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	430a      	orrs	r2, r1
 800ce54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce5e:	d10a      	bne.n	800ce76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	430a      	orrs	r2, r1
 800ce74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	605a      	str	r2, [r3, #4]
  }
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ceb4:	f7f5 fdd0 	bl	8002a58 <HAL_GetTick>
 800ceb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 0308 	and.w	r3, r3, #8
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	d10e      	bne.n	800cee6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f82f 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cee2:	2303      	movs	r3, #3
 800cee4:	e025      	b.n	800cf32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0304 	and.w	r3, r3, #4
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	d10e      	bne.n	800cf12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 f819 	bl	800cf3a <UART_WaitOnFlagUntilTimeout>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e00f      	b.n	800cf32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2220      	movs	r2, #32
 800cf16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b09c      	sub	sp, #112	; 0x70
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	603b      	str	r3, [r7, #0]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4a:	e0a9      	b.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	f000 80a5 	beq.w	800d0a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf56:	f7f5 fd7f 	bl	8002a58 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d302      	bcc.n	800cf6c <UART_WaitOnFlagUntilTimeout+0x32>
 800cf66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d140      	bne.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf74:	e853 3f00 	ldrex	r3, [r3]
 800cf78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf80:	667b      	str	r3, [r7, #100]	; 0x64
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf92:	e841 2300 	strex	r3, r2, [r1]
 800cf96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e6      	bne.n	800cf6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa8:	e853 3f00 	ldrex	r3, [r3]
 800cfac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	f023 0301 	bic.w	r3, r3, #1
 800cfb4:	663b      	str	r3, [r7, #96]	; 0x60
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfbe:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfc6:	e841 2300 	strex	r3, r2, [r1]
 800cfca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1e5      	bne.n	800cf9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2220      	movs	r2, #32
 800cfd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2220      	movs	r2, #32
 800cfde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e069      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 0304 	and.w	r3, r3, #4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d051      	beq.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d00a:	d149      	bne.n	800d0a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d014:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	e853 3f00 	ldrex	r3, [r3]
 800d022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d02a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d034:	637b      	str	r3, [r7, #52]	; 0x34
 800d036:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d03a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d03c:	e841 2300 	strex	r3, r2, [r1]
 800d040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1e6      	bne.n	800d016 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3308      	adds	r3, #8
 800d04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	e853 3f00 	ldrex	r3, [r3]
 800d056:	613b      	str	r3, [r7, #16]
   return(result);
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f023 0301 	bic.w	r3, r3, #1
 800d05e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3308      	adds	r3, #8
 800d066:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d068:	623a      	str	r2, [r7, #32]
 800d06a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	69f9      	ldr	r1, [r7, #28]
 800d06e:	6a3a      	ldr	r2, [r7, #32]
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	61bb      	str	r3, [r7, #24]
   return(result);
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e5      	bne.n	800d048 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2220      	movs	r2, #32
 800d080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2220      	movs	r2, #32
 800d088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2220      	movs	r2, #32
 800d090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e010      	b.n	800d0c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	69da      	ldr	r2, [r3, #28]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2301      	moveq	r3, #1
 800d0b2:	2300      	movne	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	f43f af46 	beq.w	800cf4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3770      	adds	r7, #112	; 0x70
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d101      	bne.n	800d0e0 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0dc:	2302      	movs	r3, #2
 800d0de:	e027      	b.n	800d130 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2224      	movs	r2, #36	; 0x24
 800d0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f022 0201 	bic.w	r2, r2, #1
 800d106:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d10e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2220      	movs	r2, #32
 800d122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d101      	bne.n	800d154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d150:	2302      	movs	r3, #2
 800d152:	e02d      	b.n	800d1b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2224      	movs	r2, #36	; 0x24
 800d160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f022 0201 	bic.w	r2, r2, #1
 800d17a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	430a      	orrs	r2, r1
 800d18e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f84f 	bl	800d234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d101      	bne.n	800d1d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	e02d      	b.n	800d22c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2224      	movs	r2, #36	; 0x24
 800d1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f022 0201 	bic.w	r2, r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	430a      	orrs	r2, r1
 800d20a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f000 f811 	bl	800d234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d254:	e031      	b.n	800d2ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d256:	2310      	movs	r3, #16
 800d258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d25a:	2310      	movs	r3, #16
 800d25c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	0e5b      	lsrs	r3, r3, #25
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 0307 	and.w	r3, r3, #7
 800d26c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	689b      	ldr	r3, [r3, #8]
 800d274:	0f5b      	lsrs	r3, r3, #29
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
 800d280:	7b3a      	ldrb	r2, [r7, #12]
 800d282:	4911      	ldr	r1, [pc, #68]	; (800d2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d284:	5c8a      	ldrb	r2, [r1, r2]
 800d286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d28a:	7b3a      	ldrb	r2, [r7, #12]
 800d28c:	490f      	ldr	r1, [pc, #60]	; (800d2cc <UARTEx_SetNbDataToProcess+0x98>)
 800d28e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d290:	fb93 f3f2 	sdiv	r3, r3, r2
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	7b7a      	ldrb	r2, [r7, #13]
 800d2a0:	4909      	ldr	r1, [pc, #36]	; (800d2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d2a2:	5c8a      	ldrb	r2, [r1, r2]
 800d2a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2a8:	7b7a      	ldrb	r2, [r7, #13]
 800d2aa:	4908      	ldr	r1, [pc, #32]	; (800d2cc <UARTEx_SetNbDataToProcess+0x98>)
 800d2ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d2ba:	bf00      	nop
 800d2bc:	3714      	adds	r7, #20
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	080119f8 	.word	0x080119f8
 800d2cc:	08011a00 	.word	0x08011a00

0800d2d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	f107 001c 	add.w	r0, r7, #28
 800d2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d120      	bne.n	800d32a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68da      	ldr	r2, [r3, #12]
 800d2f8:	4b2a      	ldr	r3, [pc, #168]	; (800d3a4 <USB_CoreInit+0xd4>)
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d30c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d105      	bne.n	800d31e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f001 fb4e 	bl	800e9c0 <USB_CoreReset>
 800d324:	4603      	mov	r3, r0
 800d326:	73fb      	strb	r3, [r7, #15]
 800d328:	e01a      	b.n	800d360 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f001 fb42 	bl	800e9c0 <USB_CoreReset>
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	639a      	str	r2, [r3, #56]	; 0x38
 800d352:	e005      	b.n	800d360 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	2b01      	cmp	r3, #1
 800d364:	d116      	bne.n	800d394 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <USB_CoreInit+0xd8>)
 800d376:	4313      	orrs	r3, r2
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	f043 0206 	orr.w	r2, r3, #6
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	f043 0220 	orr.w	r2, r3, #32
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3a0:	b004      	add	sp, #16
 800d3a2:	4770      	bx	lr
 800d3a4:	ffbdffbf 	.word	0xffbdffbf
 800d3a8:	03ee0000 	.word	0x03ee0000

0800d3ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d165      	bne.n	800d48c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	4a41      	ldr	r2, [pc, #260]	; (800d4c8 <USB_SetTurnaroundTime+0x11c>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d906      	bls.n	800d3d6 <USB_SetTurnaroundTime+0x2a>
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	4a40      	ldr	r2, [pc, #256]	; (800d4cc <USB_SetTurnaroundTime+0x120>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d202      	bcs.n	800d3d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d3d0:	230f      	movs	r3, #15
 800d3d2:	617b      	str	r3, [r7, #20]
 800d3d4:	e062      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	4a3c      	ldr	r2, [pc, #240]	; (800d4cc <USB_SetTurnaroundTime+0x120>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d306      	bcc.n	800d3ec <USB_SetTurnaroundTime+0x40>
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	4a3b      	ldr	r2, [pc, #236]	; (800d4d0 <USB_SetTurnaroundTime+0x124>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d202      	bcs.n	800d3ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d3e6:	230e      	movs	r3, #14
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	e057      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4a38      	ldr	r2, [pc, #224]	; (800d4d0 <USB_SetTurnaroundTime+0x124>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d306      	bcc.n	800d402 <USB_SetTurnaroundTime+0x56>
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	4a37      	ldr	r2, [pc, #220]	; (800d4d4 <USB_SetTurnaroundTime+0x128>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d202      	bcs.n	800d402 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d3fc:	230d      	movs	r3, #13
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	e04c      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <USB_SetTurnaroundTime+0x128>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d306      	bcc.n	800d418 <USB_SetTurnaroundTime+0x6c>
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	4a32      	ldr	r2, [pc, #200]	; (800d4d8 <USB_SetTurnaroundTime+0x12c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d802      	bhi.n	800d418 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d412:	230c      	movs	r3, #12
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	e041      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	4a2f      	ldr	r2, [pc, #188]	; (800d4d8 <USB_SetTurnaroundTime+0x12c>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d906      	bls.n	800d42e <USB_SetTurnaroundTime+0x82>
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	4a2e      	ldr	r2, [pc, #184]	; (800d4dc <USB_SetTurnaroundTime+0x130>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d802      	bhi.n	800d42e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d428:	230b      	movs	r3, #11
 800d42a:	617b      	str	r3, [r7, #20]
 800d42c:	e036      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	4a2a      	ldr	r2, [pc, #168]	; (800d4dc <USB_SetTurnaroundTime+0x130>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d906      	bls.n	800d444 <USB_SetTurnaroundTime+0x98>
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	4a29      	ldr	r2, [pc, #164]	; (800d4e0 <USB_SetTurnaroundTime+0x134>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d802      	bhi.n	800d444 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d43e:	230a      	movs	r3, #10
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	e02b      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4a26      	ldr	r2, [pc, #152]	; (800d4e0 <USB_SetTurnaroundTime+0x134>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d906      	bls.n	800d45a <USB_SetTurnaroundTime+0xae>
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4a25      	ldr	r2, [pc, #148]	; (800d4e4 <USB_SetTurnaroundTime+0x138>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d202      	bcs.n	800d45a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d454:	2309      	movs	r3, #9
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e020      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	4a21      	ldr	r2, [pc, #132]	; (800d4e4 <USB_SetTurnaroundTime+0x138>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d306      	bcc.n	800d470 <USB_SetTurnaroundTime+0xc4>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	4a20      	ldr	r2, [pc, #128]	; (800d4e8 <USB_SetTurnaroundTime+0x13c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d802      	bhi.n	800d470 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d46a:	2308      	movs	r3, #8
 800d46c:	617b      	str	r3, [r7, #20]
 800d46e:	e015      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	4a1d      	ldr	r2, [pc, #116]	; (800d4e8 <USB_SetTurnaroundTime+0x13c>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d906      	bls.n	800d486 <USB_SetTurnaroundTime+0xda>
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	4a1c      	ldr	r2, [pc, #112]	; (800d4ec <USB_SetTurnaroundTime+0x140>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d202      	bcs.n	800d486 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d480:	2307      	movs	r3, #7
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e00a      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d486:	2306      	movs	r3, #6
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e007      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d48c:	79fb      	ldrb	r3, [r7, #7]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d102      	bne.n	800d498 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d492:	2309      	movs	r3, #9
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	e001      	b.n	800d49c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d498:	2309      	movs	r3, #9
 800d49a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	029b      	lsls	r3, r3, #10
 800d4b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	371c      	adds	r7, #28
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	00d8acbf 	.word	0x00d8acbf
 800d4cc:	00e4e1c0 	.word	0x00e4e1c0
 800d4d0:	00f42400 	.word	0x00f42400
 800d4d4:	01067380 	.word	0x01067380
 800d4d8:	011a499f 	.word	0x011a499f
 800d4dc:	01312cff 	.word	0x01312cff
 800d4e0:	014ca43f 	.word	0x014ca43f
 800d4e4:	016e3600 	.word	0x016e3600
 800d4e8:	01a6ab1f 	.word	0x01a6ab1f
 800d4ec:	01e84800 	.word	0x01e84800

0800d4f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	f043 0201 	orr.w	r2, r3, #1
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	f023 0201 	bic.w	r2, r3, #1
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d115      	bne.n	800d582 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d562:	2001      	movs	r0, #1
 800d564:	f7f5 fa84 	bl	8002a70 <HAL_Delay>
      ms++;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3301      	adds	r3, #1
 800d56c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 f995 	bl	800e89e <USB_GetMode>
 800d574:	4603      	mov	r3, r0
 800d576:	2b01      	cmp	r3, #1
 800d578:	d01e      	beq.n	800d5b8 <USB_SetCurrentMode+0x84>
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b31      	cmp	r3, #49	; 0x31
 800d57e:	d9f0      	bls.n	800d562 <USB_SetCurrentMode+0x2e>
 800d580:	e01a      	b.n	800d5b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d582:	78fb      	ldrb	r3, [r7, #3]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d115      	bne.n	800d5b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d594:	2001      	movs	r0, #1
 800d596:	f7f5 fa6b 	bl	8002a70 <HAL_Delay>
      ms++;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	3301      	adds	r3, #1
 800d59e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f001 f97c 	bl	800e89e <USB_GetMode>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d005      	beq.n	800d5b8 <USB_SetCurrentMode+0x84>
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b31      	cmp	r3, #49	; 0x31
 800d5b0:	d9f0      	bls.n	800d594 <USB_SetCurrentMode+0x60>
 800d5b2:	e001      	b.n	800d5b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e005      	b.n	800d5c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b32      	cmp	r3, #50	; 0x32
 800d5bc:	d101      	bne.n	800d5c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5cc:	b084      	sub	sp, #16
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b086      	sub	sp, #24
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d5da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	613b      	str	r3, [r7, #16]
 800d5ea:	e009      	b.n	800d600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	3340      	adds	r3, #64	; 0x40
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	4413      	add	r3, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	2b0e      	cmp	r3, #14
 800d604:	d9f2      	bls.n	800d5ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d11c      	bne.n	800d646 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d61a:	f043 0302 	orr.w	r3, r3, #2
 800d61e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	e005      	b.n	800d652 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d658:	461a      	mov	r2, r3
 800d65a:	2300      	movs	r3, #0
 800d65c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d664:	4619      	mov	r1, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d66c:	461a      	mov	r2, r3
 800d66e:	680b      	ldr	r3, [r1, #0]
 800d670:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	2b01      	cmp	r3, #1
 800d676:	d10c      	bne.n	800d692 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d104      	bne.n	800d688 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d67e:	2100      	movs	r1, #0
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f961 	bl	800d948 <USB_SetDevSpeed>
 800d686:	e008      	b.n	800d69a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d688:	2101      	movs	r1, #1
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f95c 	bl	800d948 <USB_SetDevSpeed>
 800d690:	e003      	b.n	800d69a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d692:	2103      	movs	r1, #3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f957 	bl	800d948 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d69a:	2110      	movs	r1, #16
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f8f3 	bl	800d888 <USB_FlushTxFifo>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f91d 	bl	800d8ec <USB_FlushRxFifo>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6da:	461a      	mov	r2, r3
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	613b      	str	r3, [r7, #16]
 800d6e4:	e043      	b.n	800d76e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	015a      	lsls	r2, r3, #5
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6fc:	d118      	bne.n	800d730 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	015a      	lsls	r2, r3, #5
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	4413      	add	r3, r2
 800d70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d710:	461a      	mov	r2, r3
 800d712:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	e013      	b.n	800d742 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	015a      	lsls	r2, r3, #5
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	4413      	add	r3, r2
 800d722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d726:	461a      	mov	r2, r3
 800d728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	e008      	b.n	800d742 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73c:	461a      	mov	r2, r3
 800d73e:	2300      	movs	r3, #0
 800d740:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74e:	461a      	mov	r2, r3
 800d750:	2300      	movs	r3, #0
 800d752:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d760:	461a      	mov	r2, r3
 800d762:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d766:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	3301      	adds	r3, #1
 800d76c:	613b      	str	r3, [r7, #16]
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	429a      	cmp	r2, r3
 800d774:	d3b7      	bcc.n	800d6e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d776:	2300      	movs	r3, #0
 800d778:	613b      	str	r3, [r7, #16]
 800d77a:	e043      	b.n	800d804 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d78e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d792:	d118      	bne.n	800d7c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10a      	bne.n	800d7b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	e013      	b.n	800d7d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7bc:	461a      	mov	r2, r3
 800d7be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	e008      	b.n	800d7d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	015a      	lsls	r2, r3, #5
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	015a      	lsls	r2, r3, #5
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d7fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	3301      	adds	r3, #1
 800d802:	613b      	str	r3, [r7, #16]
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d3b7      	bcc.n	800d77c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d81a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d81e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d82c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	2b00      	cmp	r3, #0
 800d832:	d105      	bne.n	800d840 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	f043 0210 	orr.w	r2, r3, #16
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	699a      	ldr	r2, [r3, #24]
 800d844:	4b0e      	ldr	r3, [pc, #56]	; (800d880 <USB_DevInit+0x2b4>)
 800d846:	4313      	orrs	r3, r2
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d005      	beq.n	800d85e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	f043 0208 	orr.w	r2, r3, #8
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d860:	2b01      	cmp	r3, #1
 800d862:	d105      	bne.n	800d870 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	699a      	ldr	r2, [r3, #24]
 800d868:	4b06      	ldr	r3, [pc, #24]	; (800d884 <USB_DevInit+0x2b8>)
 800d86a:	4313      	orrs	r3, r2
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d870:	7dfb      	ldrb	r3, [r7, #23]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3718      	adds	r7, #24
 800d876:	46bd      	mov	sp, r7
 800d878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d87c:	b004      	add	sp, #16
 800d87e:	4770      	bx	lr
 800d880:	803c3800 	.word	0x803c3800
 800d884:	40000004 	.word	0x40000004

0800d888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d888:	b480      	push	{r7}
 800d88a:	b085      	sub	sp, #20
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d892:	2300      	movs	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3301      	adds	r3, #1
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	4a12      	ldr	r2, [pc, #72]	; (800d8e8 <USB_FlushTxFifo+0x60>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d901      	bls.n	800d8a6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8a2:	2303      	movs	r3, #3
 800d8a4:	e01a      	b.n	800d8dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	daf3      	bge.n	800d896 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	019b      	lsls	r3, r3, #6
 800d8b6:	f043 0220 	orr.w	r2, r3, #32
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	4a08      	ldr	r2, [pc, #32]	; (800d8e8 <USB_FlushTxFifo+0x60>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d901      	bls.n	800d8ce <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e006      	b.n	800d8dc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b20      	cmp	r3, #32
 800d8d8:	d0f1      	beq.n	800d8be <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	00030d40 	.word	0x00030d40

0800d8ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	4a11      	ldr	r2, [pc, #68]	; (800d944 <USB_FlushRxFifo+0x58>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d901      	bls.n	800d908 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800d904:	2303      	movs	r3, #3
 800d906:	e017      	b.n	800d938 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	daf3      	bge.n	800d8f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d910:	2300      	movs	r3, #0
 800d912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2210      	movs	r2, #16
 800d918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	3301      	adds	r3, #1
 800d91e:	60fb      	str	r3, [r7, #12]
 800d920:	4a08      	ldr	r2, [pc, #32]	; (800d944 <USB_FlushRxFifo+0x58>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d901      	bls.n	800d92a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800d926:	2303      	movs	r3, #3
 800d928:	e006      	b.n	800d938 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	f003 0310 	and.w	r3, r3, #16
 800d932:	2b10      	cmp	r3, #16
 800d934:	d0f1      	beq.n	800d91a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	00030d40 	.word	0x00030d40

0800d948 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	68f9      	ldr	r1, [r7, #12]
 800d964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d968:	4313      	orrs	r3, r2
 800d96a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b087      	sub	sp, #28
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f003 0306 	and.w	r3, r3, #6
 800d992:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d99a:	2300      	movs	r3, #0
 800d99c:	75fb      	strb	r3, [r7, #23]
 800d99e:	e00a      	b.n	800d9b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	d002      	beq.n	800d9ac <USB_GetDevSpeed+0x32>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b06      	cmp	r3, #6
 800d9aa:	d102      	bne.n	800d9b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	75fb      	strb	r3, [r7, #23]
 800d9b0:	e001      	b.n	800d9b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d9b2:	230f      	movs	r3, #15
 800d9b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	371c      	adds	r7, #28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	785b      	ldrb	r3, [r3, #1]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d139      	bne.n	800da54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e6:	69da      	ldr	r2, [r3, #28]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	f003 030f 	and.w	r3, r3, #15
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	68f9      	ldr	r1, [r7, #12]
 800d9fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9fe:	4313      	orrs	r3, r2
 800da00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	015a      	lsls	r2, r3, #5
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4413      	add	r3, r2
 800da0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da14:	2b00      	cmp	r3, #0
 800da16:	d153      	bne.n	800dac0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	015a      	lsls	r2, r3, #5
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4413      	add	r3, r2
 800da20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	78db      	ldrb	r3, [r3, #3]
 800da32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	059b      	lsls	r3, r3, #22
 800da3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da3c:	431a      	orrs	r2, r3
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	0159      	lsls	r1, r3, #5
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	440b      	add	r3, r1
 800da46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4a:	4619      	mov	r1, r3
 800da4c:	4b20      	ldr	r3, [pc, #128]	; (800dad0 <USB_ActivateEndpoint+0x10c>)
 800da4e:	4313      	orrs	r3, r2
 800da50:	600b      	str	r3, [r1, #0]
 800da52:	e035      	b.n	800dac0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5a:	69da      	ldr	r2, [r3, #28]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	f003 030f 	and.w	r3, r3, #15
 800da64:	2101      	movs	r1, #1
 800da66:	fa01 f303 	lsl.w	r3, r1, r3
 800da6a:	041b      	lsls	r3, r3, #16
 800da6c:	68f9      	ldr	r1, [r7, #12]
 800da6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da72:	4313      	orrs	r3, r2
 800da74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	015a      	lsls	r2, r3, #5
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	4413      	add	r3, r2
 800da7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d119      	bne.n	800dac0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	015a      	lsls	r2, r3, #5
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	78db      	ldrb	r3, [r3, #3]
 800daa6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800daa8:	430b      	orrs	r3, r1
 800daaa:	431a      	orrs	r2, r3
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	0159      	lsls	r1, r3, #5
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	440b      	add	r3, r1
 800dab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab8:	4619      	mov	r1, r3
 800daba:	4b05      	ldr	r3, [pc, #20]	; (800dad0 <USB_ActivateEndpoint+0x10c>)
 800dabc:	4313      	orrs	r3, r2
 800dabe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	10008000 	.word	0x10008000

0800dad4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d161      	bne.n	800dbb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db06:	d11f      	bne.n	800db48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	015a      	lsls	r2, r3, #5
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	4413      	add	r3, r2
 800db10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	0151      	lsls	r1, r2, #5
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	440a      	add	r2, r1
 800db1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	0151      	lsls	r1, r2, #5
 800db3a:	68fa      	ldr	r2, [r7, #12]
 800db3c:	440a      	add	r2, r1
 800db3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	2101      	movs	r1, #1
 800db5a:	fa01 f303 	lsl.w	r3, r1, r3
 800db5e:	b29b      	uxth	r3, r3
 800db60:	43db      	mvns	r3, r3
 800db62:	68f9      	ldr	r1, [r7, #12]
 800db64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db68:	4013      	ands	r3, r2
 800db6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db72:	69da      	ldr	r2, [r3, #28]
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 030f 	and.w	r3, r3, #15
 800db7c:	2101      	movs	r1, #1
 800db7e:	fa01 f303 	lsl.w	r3, r1, r3
 800db82:	b29b      	uxth	r3, r3
 800db84:	43db      	mvns	r3, r3
 800db86:	68f9      	ldr	r1, [r7, #12]
 800db88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db8c:	4013      	ands	r3, r2
 800db8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	4413      	add	r3, r2
 800db98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	0159      	lsls	r1, r3, #5
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	440b      	add	r3, r1
 800dba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4b35      	ldr	r3, [pc, #212]	; (800dc84 <USB_DeactivateEndpoint+0x1b0>)
 800dbae:	4013      	ands	r3, r2
 800dbb0:	600b      	str	r3, [r1, #0]
 800dbb2:	e060      	b.n	800dc76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	015a      	lsls	r2, r3, #5
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	4413      	add	r3, r2
 800dbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbca:	d11f      	bne.n	800dc0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	0151      	lsls	r1, r2, #5
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dbea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	0151      	lsls	r1, r2, #5
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	440a      	add	r2, r1
 800dc02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	f003 030f 	and.w	r3, r3, #15
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800dc22:	041b      	lsls	r3, r3, #16
 800dc24:	43db      	mvns	r3, r3
 800dc26:	68f9      	ldr	r1, [r7, #12]
 800dc28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc36:	69da      	ldr	r2, [r3, #28]
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f003 030f 	and.w	r3, r3, #15
 800dc40:	2101      	movs	r1, #1
 800dc42:	fa01 f303 	lsl.w	r3, r1, r3
 800dc46:	041b      	lsls	r3, r3, #16
 800dc48:	43db      	mvns	r3, r3
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc50:	4013      	ands	r3, r2
 800dc52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	0159      	lsls	r1, r3, #5
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	440b      	add	r3, r1
 800dc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc6e:	4619      	mov	r1, r3
 800dc70:	4b05      	ldr	r3, [pc, #20]	; (800dc88 <USB_DeactivateEndpoint+0x1b4>)
 800dc72:	4013      	ands	r3, r2
 800dc74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	ec337800 	.word	0xec337800
 800dc88:	eff37800 	.word	0xeff37800

0800dc8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08a      	sub	sp, #40	; 0x28
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	4613      	mov	r3, r2
 800dc98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	f040 8163 	bne.w	800df74 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d132      	bne.n	800dd1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	015a      	lsls	r2, r3, #5
 800dcba:	69fb      	ldr	r3, [r7, #28]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc2:	691a      	ldr	r2, [r3, #16]
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	0159      	lsls	r1, r3, #5
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	440b      	add	r3, r1
 800dccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	4ba5      	ldr	r3, [pc, #660]	; (800df68 <USB_EPStartXfer+0x2dc>)
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	69ba      	ldr	r2, [r7, #24]
 800dce8:	0151      	lsls	r1, r2, #5
 800dcea:	69fa      	ldr	r2, [r7, #28]
 800dcec:	440a      	add	r2, r1
 800dcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	015a      	lsls	r2, r3, #5
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	4413      	add	r3, r2
 800dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	0159      	lsls	r1, r3, #5
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	440b      	add	r3, r1
 800dd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd12:	4619      	mov	r1, r3
 800dd14:	4b95      	ldr	r3, [pc, #596]	; (800df6c <USB_EPStartXfer+0x2e0>)
 800dd16:	4013      	ands	r3, r2
 800dd18:	610b      	str	r3, [r1, #16]
 800dd1a:	e074      	b.n	800de06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	015a      	lsls	r2, r3, #5
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	4413      	add	r3, r2
 800dd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd28:	691a      	ldr	r2, [r3, #16]
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	0159      	lsls	r1, r3, #5
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	440b      	add	r3, r1
 800dd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd36:	4619      	mov	r1, r3
 800dd38:	4b8c      	ldr	r3, [pc, #560]	; (800df6c <USB_EPStartXfer+0x2e0>)
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4a:	691a      	ldr	r2, [r3, #16]
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	0159      	lsls	r1, r3, #5
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	440b      	add	r3, r1
 800dd54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4b83      	ldr	r3, [pc, #524]	; (800df68 <USB_EPStartXfer+0x2dc>)
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	015a      	lsls	r2, r3, #5
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	4413      	add	r3, r2
 800dd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	6959      	ldr	r1, [r3, #20]
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	440b      	add	r3, r1
 800dd78:	1e59      	subs	r1, r3, #1
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	fbb1 f3f3 	udiv	r3, r1, r3
 800dd82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dd84:	4b7a      	ldr	r3, [pc, #488]	; (800df70 <USB_EPStartXfer+0x2e4>)
 800dd86:	400b      	ands	r3, r1
 800dd88:	69b9      	ldr	r1, [r7, #24]
 800dd8a:	0148      	lsls	r0, r1, #5
 800dd8c:	69f9      	ldr	r1, [r7, #28]
 800dd8e:	4401      	add	r1, r0
 800dd90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd94:	4313      	orrs	r3, r2
 800dd96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	015a      	lsls	r2, r3, #5
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	4413      	add	r3, r2
 800dda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda4:	691a      	ldr	r2, [r3, #16]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	695b      	ldr	r3, [r3, #20]
 800ddaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddae:	69b9      	ldr	r1, [r7, #24]
 800ddb0:	0148      	lsls	r0, r1, #5
 800ddb2:	69f9      	ldr	r1, [r7, #28]
 800ddb4:	4401      	add	r1, r0
 800ddb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	78db      	ldrb	r3, [r3, #3]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d11f      	bne.n	800de06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	015a      	lsls	r2, r3, #5
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	4413      	add	r3, r2
 800ddce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	0151      	lsls	r1, r2, #5
 800ddd8:	69fa      	ldr	r2, [r7, #28]
 800ddda:	440a      	add	r2, r1
 800dddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800dde4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	015a      	lsls	r2, r3, #5
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	4413      	add	r3, r2
 800ddee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	69ba      	ldr	r2, [r7, #24]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	69fa      	ldr	r2, [r7, #28]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d14b      	bne.n	800dea4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d009      	beq.n	800de28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de20:	461a      	mov	r2, r3
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	78db      	ldrb	r3, [r3, #3]
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d128      	bne.n	800de82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d110      	bne.n	800de62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	015a      	lsls	r2, r3, #5
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	4413      	add	r3, r2
 800de48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69ba      	ldr	r2, [r7, #24]
 800de50:	0151      	lsls	r1, r2, #5
 800de52:	69fa      	ldr	r2, [r7, #28]
 800de54:	440a      	add	r2, r1
 800de56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	e00f      	b.n	800de82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	69ba      	ldr	r2, [r7, #24]
 800de72:	0151      	lsls	r1, r2, #5
 800de74:	69fa      	ldr	r2, [r7, #28]
 800de76:	440a      	add	r2, r1
 800de78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	69ba      	ldr	r2, [r7, #24]
 800de92:	0151      	lsls	r1, r2, #5
 800de94:	69fa      	ldr	r2, [r7, #28]
 800de96:	440a      	add	r2, r1
 800de98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	e133      	b.n	800e10c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dea4:	69bb      	ldr	r3, [r7, #24]
 800dea6:	015a      	lsls	r2, r3, #5
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	4413      	add	r3, r2
 800deac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	0151      	lsls	r1, r2, #5
 800deb6:	69fa      	ldr	r2, [r7, #28]
 800deb8:	440a      	add	r2, r1
 800deba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800debe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dec2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	78db      	ldrb	r3, [r3, #3]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d015      	beq.n	800def8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 811b 	beq.w	800e10c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dedc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 030f 	and.w	r3, r3, #15
 800dee6:	2101      	movs	r1, #1
 800dee8:	fa01 f303 	lsl.w	r3, r1, r3
 800deec:	69f9      	ldr	r1, [r7, #28]
 800deee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800def2:	4313      	orrs	r3, r2
 800def4:	634b      	str	r3, [r1, #52]	; 0x34
 800def6:	e109      	b.n	800e10c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df04:	2b00      	cmp	r3, #0
 800df06:	d110      	bne.n	800df2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	015a      	lsls	r2, r3, #5
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	4413      	add	r3, r2
 800df10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	69ba      	ldr	r2, [r7, #24]
 800df18:	0151      	lsls	r1, r2, #5
 800df1a:	69fa      	ldr	r2, [r7, #28]
 800df1c:	440a      	add	r2, r1
 800df1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	e00f      	b.n	800df4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	015a      	lsls	r2, r3, #5
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	4413      	add	r3, r2
 800df32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	69ba      	ldr	r2, [r7, #24]
 800df3a:	0151      	lsls	r1, r2, #5
 800df3c:	69fa      	ldr	r2, [r7, #28]
 800df3e:	440a      	add	r2, r1
 800df40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	68d9      	ldr	r1, [r3, #12]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	781a      	ldrb	r2, [r3, #0]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	b298      	uxth	r0, r3
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	4603      	mov	r3, r0
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	f000 fa38 	bl	800e3d4 <USB_WritePacket>
 800df64:	e0d2      	b.n	800e10c <USB_EPStartXfer+0x480>
 800df66:	bf00      	nop
 800df68:	e007ffff 	.word	0xe007ffff
 800df6c:	fff80000 	.word	0xfff80000
 800df70:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800df74:	69bb      	ldr	r3, [r7, #24]
 800df76:	015a      	lsls	r2, r3, #5
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df80:	691a      	ldr	r2, [r3, #16]
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	0159      	lsls	r1, r3, #5
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	440b      	add	r3, r1
 800df8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8e:	4619      	mov	r1, r3
 800df90:	4b61      	ldr	r3, [pc, #388]	; (800e118 <USB_EPStartXfer+0x48c>)
 800df92:	4013      	ands	r3, r2
 800df94:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	691a      	ldr	r2, [r3, #16]
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	0159      	lsls	r1, r3, #5
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	440b      	add	r3, r1
 800dfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4b5a      	ldr	r3, [pc, #360]	; (800e11c <USB_EPStartXfer+0x490>)
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	695b      	ldr	r3, [r3, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d123      	bne.n	800e008 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	015a      	lsls	r2, r3, #5
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfcc:	691a      	ldr	r2, [r3, #16]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfd6:	69b9      	ldr	r1, [r7, #24]
 800dfd8:	0148      	lsls	r0, r1, #5
 800dfda:	69f9      	ldr	r1, [r7, #28]
 800dfdc:	4401      	add	r1, r0
 800dfde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	69ba      	ldr	r2, [r7, #24]
 800dff6:	0151      	lsls	r1, r2, #5
 800dff8:	69fa      	ldr	r2, [r7, #28]
 800dffa:	440a      	add	r2, r1
 800dffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e004:	6113      	str	r3, [r2, #16]
 800e006:	e033      	b.n	800e070 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	695a      	ldr	r2, [r3, #20]
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	4413      	add	r3, r2
 800e012:	1e5a      	subs	r2, r3, #1
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	fbb2 f3f3 	udiv	r3, r2, r3
 800e01c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	015a      	lsls	r2, r3, #5
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	4413      	add	r3, r2
 800e026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e02a:	691a      	ldr	r2, [r3, #16]
 800e02c:	8afb      	ldrh	r3, [r7, #22]
 800e02e:	04d9      	lsls	r1, r3, #19
 800e030:	4b3b      	ldr	r3, [pc, #236]	; (800e120 <USB_EPStartXfer+0x494>)
 800e032:	400b      	ands	r3, r1
 800e034:	69b9      	ldr	r1, [r7, #24]
 800e036:	0148      	lsls	r0, r1, #5
 800e038:	69f9      	ldr	r1, [r7, #28]
 800e03a:	4401      	add	r1, r0
 800e03c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e040:	4313      	orrs	r3, r2
 800e042:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e050:	691a      	ldr	r2, [r3, #16]
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	8af9      	ldrh	r1, [r7, #22]
 800e058:	fb01 f303 	mul.w	r3, r1, r3
 800e05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e060:	69b9      	ldr	r1, [r7, #24]
 800e062:	0148      	lsls	r0, r1, #5
 800e064:	69f9      	ldr	r1, [r7, #28]
 800e066:	4401      	add	r1, r0
 800e068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e06c:	4313      	orrs	r3, r2
 800e06e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e070:	79fb      	ldrb	r3, [r7, #7]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d10d      	bne.n	800e092 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d009      	beq.n	800e092 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	68d9      	ldr	r1, [r3, #12]
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e08e:	460a      	mov	r2, r1
 800e090:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	78db      	ldrb	r3, [r3, #3]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d128      	bne.n	800e0ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d110      	bne.n	800e0cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69ba      	ldr	r2, [r7, #24]
 800e0ba:	0151      	lsls	r1, r2, #5
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	440a      	add	r2, r1
 800e0c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0c8:	6013      	str	r3, [r2, #0]
 800e0ca:	e00f      	b.n	800e0ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69ba      	ldr	r2, [r7, #24]
 800e0dc:	0151      	lsls	r1, r2, #5
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	440a      	add	r2, r1
 800e0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	015a      	lsls	r2, r3, #5
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	0151      	lsls	r1, r2, #5
 800e0fe:	69fa      	ldr	r2, [r7, #28]
 800e100:	440a      	add	r2, r1
 800e102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e106:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e10a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3720      	adds	r7, #32
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	fff80000 	.word	0xfff80000
 800e11c:	e007ffff 	.word	0xe007ffff
 800e120:	1ff80000 	.word	0x1ff80000

0800e124 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e124:	b480      	push	{r7}
 800e126:	b087      	sub	sp, #28
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	785b      	ldrb	r3, [r3, #1]
 800e140:	2b01      	cmp	r3, #1
 800e142:	f040 80cd 	bne.w	800e2e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d132      	bne.n	800e1b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e15a:	691a      	ldr	r2, [r3, #16]
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	0159      	lsls	r1, r3, #5
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	440b      	add	r3, r1
 800e164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e168:	4619      	mov	r1, r3
 800e16a:	4b98      	ldr	r3, [pc, #608]	; (800e3cc <USB_EP0StartXfer+0x2a8>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	0151      	lsls	r1, r2, #5
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	440a      	add	r2, r1
 800e186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e18a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e18e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	015a      	lsls	r2, r3, #5
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	4413      	add	r3, r2
 800e198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e19c:	691a      	ldr	r2, [r3, #16]
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	0159      	lsls	r1, r3, #5
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	440b      	add	r3, r1
 800e1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4b88      	ldr	r3, [pc, #544]	; (800e3d0 <USB_EP0StartXfer+0x2ac>)
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	610b      	str	r3, [r1, #16]
 800e1b2:	e04e      	b.n	800e252 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	015a      	lsls	r2, r3, #5
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c0:	691a      	ldr	r2, [r3, #16]
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	0159      	lsls	r1, r3, #5
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	440b      	add	r3, r1
 800e1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4b7f      	ldr	r3, [pc, #508]	; (800e3d0 <USB_EP0StartXfer+0x2ac>)
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	015a      	lsls	r2, r3, #5
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	4413      	add	r3, r2
 800e1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e2:	691a      	ldr	r2, [r3, #16]
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	0159      	lsls	r1, r3, #5
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	440b      	add	r3, r1
 800e1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4b76      	ldr	r3, [pc, #472]	; (800e3cc <USB_EP0StartXfer+0x2a8>)
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	695a      	ldr	r2, [r3, #20]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	429a      	cmp	r2, r3
 800e202:	d903      	bls.n	800e20c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	689a      	ldr	r2, [r3, #8]
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	015a      	lsls	r2, r3, #5
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	4413      	add	r3, r2
 800e214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e218:	691b      	ldr	r3, [r3, #16]
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	0151      	lsls	r1, r2, #5
 800e21e:	697a      	ldr	r2, [r7, #20]
 800e220:	440a      	add	r2, r1
 800e222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e22a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e238:	691a      	ldr	r2, [r3, #16]
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	695b      	ldr	r3, [r3, #20]
 800e23e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e242:	6939      	ldr	r1, [r7, #16]
 800e244:	0148      	lsls	r0, r1, #5
 800e246:	6979      	ldr	r1, [r7, #20]
 800e248:	4401      	add	r1, r0
 800e24a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e24e:	4313      	orrs	r3, r2
 800e250:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d11e      	bne.n	800e296 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d009      	beq.n	800e274 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	015a      	lsls	r2, r3, #5
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	4413      	add	r3, r2
 800e268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e26c:	461a      	mov	r2, r3
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	015a      	lsls	r2, r3, #5
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	4413      	add	r3, r2
 800e27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	693a      	ldr	r2, [r7, #16]
 800e284:	0151      	lsls	r1, r2, #5
 800e286:	697a      	ldr	r2, [r7, #20]
 800e288:	440a      	add	r2, r1
 800e28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e28e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e092      	b.n	800e3bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	693a      	ldr	r2, [r7, #16]
 800e2a6:	0151      	lsls	r1, r2, #5
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	695b      	ldr	r3, [r3, #20]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d07e      	beq.n	800e3bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	f003 030f 	and.w	r3, r3, #15
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800e2d4:	6979      	ldr	r1, [r7, #20]
 800e2d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	634b      	str	r3, [r1, #52]	; 0x34
 800e2de:	e06d      	b.n	800e3bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	015a      	lsls	r2, r3, #5
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ec:	691a      	ldr	r2, [r3, #16]
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	0159      	lsls	r1, r3, #5
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	440b      	add	r3, r1
 800e2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4b34      	ldr	r3, [pc, #208]	; (800e3d0 <USB_EP0StartXfer+0x2ac>)
 800e2fe:	4013      	ands	r3, r2
 800e300:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30e:	691a      	ldr	r2, [r3, #16]
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	0159      	lsls	r1, r3, #5
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	440b      	add	r3, r1
 800e318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e31c:	4619      	mov	r1, r3
 800e31e:	4b2b      	ldr	r3, [pc, #172]	; (800e3cc <USB_EP0StartXfer+0x2a8>)
 800e320:	4013      	ands	r3, r2
 800e322:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	695b      	ldr	r3, [r3, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	689a      	ldr	r2, [r3, #8]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	015a      	lsls	r2, r3, #5
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	4413      	add	r3, r2
 800e33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	0151      	lsls	r1, r2, #5
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	440a      	add	r2, r1
 800e34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e34e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	015a      	lsls	r2, r3, #5
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	4413      	add	r3, r2
 800e35c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e360:	691a      	ldr	r2, [r3, #16]
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e36a:	6939      	ldr	r1, [r7, #16]
 800e36c:	0148      	lsls	r0, r1, #5
 800e36e:	6979      	ldr	r1, [r7, #20]
 800e370:	4401      	add	r1, r0
 800e372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e376:	4313      	orrs	r3, r2
 800e378:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e37a:	79fb      	ldrb	r3, [r7, #7]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d10d      	bne.n	800e39c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	68d9      	ldr	r1, [r3, #12]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	015a      	lsls	r2, r3, #5
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	4413      	add	r3, r2
 800e394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e398:	460a      	mov	r2, r1
 800e39a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	693a      	ldr	r2, [r7, #16]
 800e3ac:	0151      	lsls	r1, r2, #5
 800e3ae:	697a      	ldr	r2, [r7, #20]
 800e3b0:	440a      	add	r2, r1
 800e3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	e007ffff 	.word	0xe007ffff
 800e3d0:	fff80000 	.word	0xfff80000

0800e3d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b089      	sub	sp, #36	; 0x24
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	4611      	mov	r1, r2
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	71fb      	strb	r3, [r7, #7]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e3f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d123      	bne.n	800e442 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e3fa:	88bb      	ldrh	r3, [r7, #4]
 800e3fc:	3303      	adds	r3, #3
 800e3fe:	089b      	lsrs	r3, r3, #2
 800e400:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e402:	2300      	movs	r3, #0
 800e404:	61bb      	str	r3, [r7, #24]
 800e406:	e018      	b.n	800e43a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e408:	79fb      	ldrb	r3, [r7, #7]
 800e40a:	031a      	lsls	r2, r3, #12
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	4413      	add	r3, r2
 800e410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e414:	461a      	mov	r2, r3
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	3301      	adds	r3, #1
 800e420:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	3301      	adds	r3, #1
 800e426:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	3301      	adds	r3, #1
 800e42c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	3301      	adds	r3, #1
 800e432:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	3301      	adds	r3, #1
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	69ba      	ldr	r2, [r7, #24]
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d3e2      	bcc.n	800e408 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3724      	adds	r7, #36	; 0x24
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e450:	b480      	push	{r7}
 800e452:	b08b      	sub	sp, #44	; 0x2c
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	4613      	mov	r3, r2
 800e45c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	089b      	lsrs	r3, r3, #2
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	f003 0303 	and.w	r3, r3, #3
 800e474:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e476:	2300      	movs	r3, #0
 800e478:	623b      	str	r3, [r7, #32]
 800e47a:	e014      	b.n	800e4a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	601a      	str	r2, [r3, #0]
    pDest++;
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	3301      	adds	r3, #1
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e490:	3301      	adds	r3, #1
 800e492:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	3301      	adds	r3, #1
 800e498:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	3301      	adds	r3, #1
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	623b      	str	r3, [r7, #32]
 800e4a6:	6a3a      	ldr	r2, [r7, #32]
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d3e6      	bcc.n	800e47c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e4ae:	8bfb      	ldrh	r3, [r7, #30]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d01e      	beq.n	800e4f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f107 0310 	add.w	r3, r7, #16
 800e4c4:	6812      	ldr	r2, [r2, #0]
 800e4c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	00db      	lsls	r3, r3, #3
 800e4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	701a      	strb	r2, [r3, #0]
      i++;
 800e4da:	6a3b      	ldr	r3, [r7, #32]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	623b      	str	r3, [r7, #32]
      pDest++;
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e4e6:	8bfb      	ldrh	r3, [r7, #30]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e4ec:	8bfb      	ldrh	r3, [r7, #30]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1ea      	bne.n	800e4c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	372c      	adds	r7, #44	; 0x2c
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d12c      	bne.n	800e576 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	015a      	lsls	r2, r3, #5
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	4413      	add	r3, r2
 800e524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	db12      	blt.n	800e554 <USB_EPSetStall+0x54>
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00f      	beq.n	800e554 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	015a      	lsls	r2, r3, #5
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4413      	add	r3, r2
 800e53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68ba      	ldr	r2, [r7, #8]
 800e544:	0151      	lsls	r1, r2, #5
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	440a      	add	r2, r1
 800e54a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e54e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e552:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68ba      	ldr	r2, [r7, #8]
 800e564:	0151      	lsls	r1, r2, #5
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	440a      	add	r2, r1
 800e56a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e56e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	e02b      	b.n	800e5ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	015a      	lsls	r2, r3, #5
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	4413      	add	r3, r2
 800e57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	db12      	blt.n	800e5ae <USB_EPSetStall+0xae>
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00f      	beq.n	800e5ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	4413      	add	r3, r2
 800e596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	0151      	lsls	r1, r2, #5
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	440a      	add	r2, r1
 800e5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e5ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	0151      	lsls	r1, r2, #5
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	440a      	add	r2, r1
 800e5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e5cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3714      	adds	r7, #20
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d128      	bne.n	800e64a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	0151      	lsls	r1, r2, #5
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	440a      	add	r2, r1
 800e60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	78db      	ldrb	r3, [r3, #3]
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d003      	beq.n	800e628 <USB_EPClearStall+0x4c>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	78db      	ldrb	r3, [r3, #3]
 800e624:	2b02      	cmp	r3, #2
 800e626:	d138      	bne.n	800e69a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	0151      	lsls	r1, r2, #5
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	440a      	add	r2, r1
 800e63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e646:	6013      	str	r3, [r2, #0]
 800e648:	e027      	b.n	800e69a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	015a      	lsls	r2, r3, #5
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	4413      	add	r3, r2
 800e652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	0151      	lsls	r1, r2, #5
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	440a      	add	r2, r1
 800e660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e668:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	78db      	ldrb	r3, [r3, #3]
 800e66e:	2b03      	cmp	r3, #3
 800e670:	d003      	beq.n	800e67a <USB_EPClearStall+0x9e>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	78db      	ldrb	r3, [r3, #3]
 800e676:	2b02      	cmp	r3, #2
 800e678:	d10f      	bne.n	800e69a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	0151      	lsls	r1, r2, #5
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	440a      	add	r2, r1
 800e690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e698:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3714      	adds	r7, #20
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68fa      	ldr	r2, [r7, #12]
 800e6c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e6ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	78fb      	ldrb	r3, [r7, #3]
 800e6d6:	011b      	lsls	r3, r3, #4
 800e6d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e6dc:	68f9      	ldr	r1, [r7, #12]
 800e6de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3714      	adds	r7, #20
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e70e:	f023 0303 	bic.w	r3, r3, #3
 800e712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e722:	f023 0302 	bic.w	r3, r3, #2
 800e726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3714      	adds	r7, #20
 800e72e:	46bd      	mov	sp, r7
 800e730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e734:	4770      	bx	lr

0800e736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e736:	b480      	push	{r7}
 800e738:	b085      	sub	sp, #20
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e750:	f023 0303 	bic.w	r3, r3, #3
 800e754:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e764:	f043 0302 	orr.w	r3, r3, #2
 800e768:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4013      	ands	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e790:	68fb      	ldr	r3, [r7, #12]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	4013      	ands	r3, r2
 800e7c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	0c1b      	lsrs	r3, r3, #16
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b085      	sub	sp, #20
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ee:	69db      	ldr	r3, [r3, #28]
 800e7f0:	68ba      	ldr	r2, [r7, #8]
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	b29b      	uxth	r3, r3
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e806:	b480      	push	{r7}
 800e808:	b085      	sub	sp, #20
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e816:	78fb      	ldrb	r3, [r7, #3]
 800e818:	015a      	lsls	r2, r3, #5
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	4413      	add	r3, r2
 800e81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	4013      	ands	r3, r2
 800e832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e834:	68bb      	ldr	r3, [r7, #8]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e842:	b480      	push	{r7}
 800e844:	b087      	sub	sp, #28
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	460b      	mov	r3, r1
 800e84c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e864:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e866:	78fb      	ldrb	r3, [r7, #3]
 800e868:	f003 030f 	and.w	r3, r3, #15
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	fa22 f303 	lsr.w	r3, r2, r3
 800e872:	01db      	lsls	r3, r3, #7
 800e874:	b2db      	uxtb	r3, r3
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4313      	orrs	r3, r2
 800e87a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e87c:	78fb      	ldrb	r3, [r7, #3]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	4013      	ands	r3, r2
 800e88e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e890:	68bb      	ldr	r3, [r7, #8]
}
 800e892:	4618      	mov	r0, r3
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr

0800e89e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e89e:	b480      	push	{r7}
 800e8a0:	b083      	sub	sp, #12
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	695b      	ldr	r3, [r3, #20]
 800e8aa:	f003 0301 	and.w	r3, r3, #1
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	370c      	adds	r7, #12
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
	...

0800e8bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <USB_ActivateSetup+0x44>)
 800e8da:	4013      	ands	r3, r2
 800e8dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e8ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	fffff800 	.word	0xfffff800

0800e904 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e904:	b480      	push	{r7}
 800e906:	b087      	sub	sp, #28
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	460b      	mov	r3, r1
 800e90e:	607a      	str	r2, [r7, #4]
 800e910:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	333c      	adds	r3, #60	; 0x3c
 800e91a:	3304      	adds	r3, #4
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	4a26      	ldr	r2, [pc, #152]	; (800e9bc <USB_EP0_OutStart+0xb8>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d90a      	bls.n	800e93e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e938:	d101      	bne.n	800e93e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	e037      	b.n	800e9ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e944:	461a      	mov	r2, r3
 800e946:	2300      	movs	r3, #0
 800e948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	697a      	ldr	r2, [r7, #20]
 800e954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e95c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e96c:	f043 0318 	orr.w	r3, r3, #24
 800e970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e978:	691b      	ldr	r3, [r3, #16]
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e980:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e984:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e986:	7afb      	ldrb	r3, [r7, #11]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d10f      	bne.n	800e9ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e992:	461a      	mov	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e9aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	371c      	adds	r7, #28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	4f54300a 	.word	0x4f54300a

0800e9c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	4a13      	ldr	r2, [pc, #76]	; (800ea20 <USB_CoreReset+0x60>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d901      	bls.n	800e9dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e01a      	b.n	800ea12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	daf3      	bge.n	800e9cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	f043 0201 	orr.w	r2, r3, #1
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	4a09      	ldr	r2, [pc, #36]	; (800ea20 <USB_CoreReset+0x60>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d901      	bls.n	800ea04 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e006      	b.n	800ea12 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	f003 0301 	and.w	r3, r3, #1
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d0f1      	beq.n	800e9f4 <USB_CoreReset+0x34>

  return HAL_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3714      	adds	r7, #20
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	00030d40 	.word	0x00030d40

0800ea24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ea34:	f002 f900 	bl	8010c38 <USBD_static_malloc>
 800ea38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d105      	bne.n	800ea4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	e066      	b.n	800eb1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	7c1b      	ldrb	r3, [r3, #16]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d119      	bne.n	800ea90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea60:	2202      	movs	r2, #2
 800ea62:	2181      	movs	r1, #129	; 0x81
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f001 ffc4 	bl	80109f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea74:	2202      	movs	r2, #2
 800ea76:	2101      	movs	r1, #1
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f001 ffba 	bl	80109f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2210      	movs	r2, #16
 800ea8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ea8e:	e016      	b.n	800eabe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea90:	2340      	movs	r3, #64	; 0x40
 800ea92:	2202      	movs	r2, #2
 800ea94:	2181      	movs	r1, #129	; 0x81
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f001 ffab 	bl	80109f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eaa2:	2340      	movs	r3, #64	; 0x40
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f001 ffa2 	bl	80109f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2210      	movs	r2, #16
 800eaba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eabe:	2308      	movs	r3, #8
 800eac0:	2203      	movs	r2, #3
 800eac2:	2182      	movs	r1, #130	; 0x82
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f001 ff94 	bl	80109f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2201      	movs	r2, #1
 800eace:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	7c1b      	ldrb	r3, [r3, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d109      	bne.n	800eb08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eafa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eafe:	2101      	movs	r1, #1
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f002 f865 	bl	8010bd0 <USBD_LL_PrepareReceive>
 800eb06:	e007      	b.n	800eb18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb0e:	2340      	movs	r3, #64	; 0x40
 800eb10:	2101      	movs	r1, #1
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f002 f85c 	bl	8010bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eb2e:	2181      	movs	r1, #129	; 0x81
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f001 ff84 	bl	8010a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 ff7d 	bl	8010a3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb4c:	2182      	movs	r1, #130	; 0x82
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f001 ff75 	bl	8010a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d00e      	beq.n	800eb8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f002 f868 	bl	8010c54 <USBD_static_free>
    pdev->pClassData = NULL;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3708      	adds	r7, #8
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eba8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d101      	bne.n	800ebc0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	e0af      	b.n	800ed20 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d03f      	beq.n	800ec4c <USBD_CDC_Setup+0xb4>
 800ebcc:	2b20      	cmp	r3, #32
 800ebce:	f040 809f 	bne.w	800ed10 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	88db      	ldrh	r3, [r3, #6]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d02e      	beq.n	800ec38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	b25b      	sxtb	r3, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da16      	bge.n	800ec12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ebf0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	88d2      	ldrh	r2, [r2, #6]
 800ebf6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	88db      	ldrh	r3, [r3, #6]
 800ebfc:	2b07      	cmp	r3, #7
 800ebfe:	bf28      	it	cs
 800ec00:	2307      	movcs	r3, #7
 800ec02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	89fa      	ldrh	r2, [r7, #14]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 fae9 	bl	80101e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ec10:	e085      	b.n	800ed1e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	785a      	ldrb	r2, [r3, #1]
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	88db      	ldrh	r3, [r3, #6]
 800ec20:	b2da      	uxtb	r2, r3
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ec28:	6939      	ldr	r1, [r7, #16]
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	88db      	ldrh	r3, [r3, #6]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f001 fb02 	bl	801023a <USBD_CtlPrepareRx>
      break;
 800ec36:	e072      	b.n	800ed1e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	7850      	ldrb	r0, [r2, #1]
 800ec44:	2200      	movs	r2, #0
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	4798      	blx	r3
      break;
 800ec4a:	e068      	b.n	800ed1e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	785b      	ldrb	r3, [r3, #1]
 800ec50:	2b0b      	cmp	r3, #11
 800ec52:	d852      	bhi.n	800ecfa <USBD_CDC_Setup+0x162>
 800ec54:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <USBD_CDC_Setup+0xc4>)
 800ec56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5a:	bf00      	nop
 800ec5c:	0800ec8d 	.word	0x0800ec8d
 800ec60:	0800ed09 	.word	0x0800ed09
 800ec64:	0800ecfb 	.word	0x0800ecfb
 800ec68:	0800ecfb 	.word	0x0800ecfb
 800ec6c:	0800ecfb 	.word	0x0800ecfb
 800ec70:	0800ecfb 	.word	0x0800ecfb
 800ec74:	0800ecfb 	.word	0x0800ecfb
 800ec78:	0800ecfb 	.word	0x0800ecfb
 800ec7c:	0800ecfb 	.word	0x0800ecfb
 800ec80:	0800ecfb 	.word	0x0800ecfb
 800ec84:	0800ecb7 	.word	0x0800ecb7
 800ec88:	0800ece1 	.word	0x0800ece1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b03      	cmp	r3, #3
 800ec96:	d107      	bne.n	800eca8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec98:	f107 030a 	add.w	r3, r7, #10
 800ec9c:	2202      	movs	r2, #2
 800ec9e:	4619      	mov	r1, r3
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 fa9e 	bl	80101e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eca6:	e032      	b.n	800ed0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eca8:	6839      	ldr	r1, [r7, #0]
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f001 fa28 	bl	8010100 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	75fb      	strb	r3, [r7, #23]
          break;
 800ecb4:	e02b      	b.n	800ed0e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	2b03      	cmp	r3, #3
 800ecc0:	d107      	bne.n	800ecd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ecc2:	f107 030d 	add.w	r3, r7, #13
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	4619      	mov	r1, r3
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 fa89 	bl	80101e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecd0:	e01d      	b.n	800ed0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f001 fa13 	bl	8010100 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	75fb      	strb	r3, [r7, #23]
          break;
 800ecde:	e016      	b.n	800ed0e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d00f      	beq.n	800ed0c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f001 fa06 	bl	8010100 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ecf8:	e008      	b.n	800ed0c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f001 f9ff 	bl	8010100 <USBD_CtlError>
          ret = USBD_FAIL;
 800ed02:	2303      	movs	r3, #3
 800ed04:	75fb      	strb	r3, [r7, #23]
          break;
 800ed06:	e002      	b.n	800ed0e <USBD_CDC_Setup+0x176>
          break;
 800ed08:	bf00      	nop
 800ed0a:	e008      	b.n	800ed1e <USBD_CDC_Setup+0x186>
          break;
 800ed0c:	bf00      	nop
      }
      break;
 800ed0e:	e006      	b.n	800ed1e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f001 f9f4 	bl	8010100 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ed1c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	460b      	mov	r3, r1
 800ed32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed46:	2303      	movs	r3, #3
 800ed48:	e04f      	b.n	800edea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed52:	78fa      	ldrb	r2, [r7, #3]
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	440b      	add	r3, r1
 800ed60:	3318      	adds	r3, #24
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d029      	beq.n	800edbc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ed68:	78fa      	ldrb	r2, [r7, #3]
 800ed6a:	6879      	ldr	r1, [r7, #4]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	4413      	add	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	440b      	add	r3, r1
 800ed76:	3318      	adds	r3, #24
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	78f9      	ldrb	r1, [r7, #3]
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	460b      	mov	r3, r1
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	1a5b      	subs	r3, r3, r1
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4403      	add	r3, r0
 800ed88:	3344      	adds	r3, #68	; 0x44
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ed90:	fb03 f301 	mul.w	r3, r3, r1
 800ed94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d110      	bne.n	800edbc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ed9a:	78fa      	ldrb	r2, [r7, #3]
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	440b      	add	r3, r1
 800eda8:	3318      	adds	r3, #24
 800edaa:	2200      	movs	r2, #0
 800edac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800edae:	78f9      	ldrb	r1, [r7, #3]
 800edb0:	2300      	movs	r3, #0
 800edb2:	2200      	movs	r2, #0
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f001 feea 	bl	8010b8e <USBD_LL_Transmit>
 800edba:	e015      	b.n	800ede8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00b      	beq.n	800ede8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edd6:	691b      	ldr	r3, [r3, #16]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ede4:	78fa      	ldrb	r2, [r7, #3]
 800ede6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ede8:	2300      	movs	r3, #0
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	460b      	mov	r3, r1
 800edfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e015      	b.n	800ee40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ee14:	78fb      	ldrb	r3, [r7, #3]
 800ee16:	4619      	mov	r1, r3
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f001 fefa 	bl	8010c12 <USBD_LL_GetRxDataSize>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e01b      	b.n	800ee9a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d015      	beq.n	800ee98 <USBD_CDC_EP0_RxReady+0x50>
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ee72:	2bff      	cmp	r3, #255	; 0xff
 800ee74:	d010      	beq.n	800ee98 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ee84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee8c:	b292      	uxth	r2, r2
 800ee8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	22ff      	movs	r2, #255	; 0xff
 800ee94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2243      	movs	r2, #67	; 0x43
 800eeb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eeb2:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	240000ac 	.word	0x240000ac

0800eec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2243      	movs	r2, #67	; 0x43
 800eed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eed2:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	24000068 	.word	0x24000068

0800eee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2243      	movs	r2, #67	; 0x43
 800eef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eef2:	4b03      	ldr	r3, [pc, #12]	; (800ef00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	240000f0 	.word	0x240000f0

0800ef04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	220a      	movs	r2, #10
 800ef10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef12:	4b03      	ldr	r3, [pc, #12]	; (800ef20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	24000024 	.word	0x24000024

0800ef24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef34:	2303      	movs	r3, #3
 800ef36:	e004      	b.n	800ef42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	683a      	ldr	r2, [r7, #0]
 800ef3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b087      	sub	sp, #28
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d101      	bne.n	800ef6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ef68:	2303      	movs	r3, #3
 800ef6a:	e008      	b.n	800ef7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	371c      	adds	r7, #28
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	b085      	sub	sp, #20
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800efa2:	2303      	movs	r3, #3
 800efa4:	e004      	b.n	800efb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e016      	b.n	800f008 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	7c1b      	ldrb	r3, [r3, #16]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d109      	bne.n	800eff6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800efe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efec:	2101      	movs	r1, #1
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f001 fdee 	bl	8010bd0 <USBD_LL_PrepareReceive>
 800eff4:	e007      	b.n	800f006 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800effc:	2340      	movs	r3, #64	; 0x40
 800effe:	2101      	movs	r1, #1
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f001 fde5 	bl	8010bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	4613      	mov	r3, r2
 800f01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f024:	2303      	movs	r3, #3
 800f026:	e01f      	b.n	800f068 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2200      	movs	r2, #0
 800f02c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2200      	movs	r2, #0
 800f03c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2201      	movs	r2, #1
 800f052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	79fa      	ldrb	r2, [r7, #7]
 800f05a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f001 fc57 	bl	8010910 <USBD_LL_Init>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f066:	7dfb      	ldrb	r3, [r7, #23]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3718      	adds	r7, #24
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f07a:	2300      	movs	r3, #0
 800f07c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f084:	2303      	movs	r3, #3
 800f086:	e016      	b.n	800f0b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d00b      	beq.n	800f0b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a4:	f107 020e 	add.w	r2, r7, #14
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	4798      	blx	r3
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 fc78 	bl	80109bc <USBD_LL_Start>
 800f0cc:	4603      	mov	r3, r0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3708      	adds	r7, #8
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b083      	sub	sp, #12
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	370c      	adds	r7, #12
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f102:	2b00      	cmp	r3, #0
 800f104:	d009      	beq.n	800f11a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	78fa      	ldrb	r2, [r7, #3]
 800f110:	4611      	mov	r1, r2
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	4798      	blx	r3
 800f116:	4603      	mov	r3, r0
 800f118:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f136:	2b00      	cmp	r3, #0
 800f138:	d007      	beq.n	800f14a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	4611      	mov	r1, r2
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	4798      	blx	r3
  }

  return USBD_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 ff90 	bl	801008c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f17a:	461a      	mov	r2, r3
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f188:	f003 031f 	and.w	r3, r3, #31
 800f18c:	2b02      	cmp	r3, #2
 800f18e:	d01a      	beq.n	800f1c6 <USBD_LL_SetupStage+0x72>
 800f190:	2b02      	cmp	r3, #2
 800f192:	d822      	bhi.n	800f1da <USBD_LL_SetupStage+0x86>
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <USBD_LL_SetupStage+0x4a>
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d00a      	beq.n	800f1b2 <USBD_LL_SetupStage+0x5e>
 800f19c:	e01d      	b.n	800f1da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 fa62 	bl	800f670 <USBD_StdDevReq>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f1b0:	e020      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fac6 	bl	800f74c <USBD_StdItfReq>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1c4:	e016      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fb05 	bl	800f7de <USBD_StdEPReq>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1d8:	e00c      	b.n	800f1f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f001 fc47 	bl	8010a7c <USBD_LL_StallEP>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f2:	bf00      	nop
  }

  return ret;
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b086      	sub	sp, #24
 800f202:	af00      	add	r7, sp, #0
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	460b      	mov	r3, r1
 800f208:	607a      	str	r2, [r7, #4]
 800f20a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f20c:	7afb      	ldrb	r3, [r7, #11]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d138      	bne.n	800f284 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f218:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f220:	2b03      	cmp	r3, #3
 800f222:	d14a      	bne.n	800f2ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	689a      	ldr	r2, [r3, #8]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d913      	bls.n	800f258 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	1ad2      	subs	r2, r2, r3
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	68da      	ldr	r2, [r3, #12]
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	4293      	cmp	r3, r2
 800f248:	bf28      	it	cs
 800f24a:	4613      	movcs	r3, r2
 800f24c:	461a      	mov	r2, r3
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f001 f80f 	bl	8010274 <USBD_CtlContinueRx>
 800f256:	e030      	b.n	800f2ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b03      	cmp	r3, #3
 800f262:	d10b      	bne.n	800f27c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d005      	beq.n	800f27c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f276:	691b      	ldr	r3, [r3, #16]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f001 f80a 	bl	8010296 <USBD_CtlSendStatus>
 800f282:	e01a      	b.n	800f2ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d114      	bne.n	800f2ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f296:	699b      	ldr	r3, [r3, #24]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00e      	beq.n	800f2ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a2:	699b      	ldr	r3, [r3, #24]
 800f2a4:	7afa      	ldrb	r2, [r7, #11]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	4798      	blx	r3
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d001      	beq.n	800f2ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	e000      	b.n	800f2bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f2d2:	7afb      	ldrb	r3, [r7, #11]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d16b      	bne.n	800f3b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3314      	adds	r3, #20
 800f2dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d156      	bne.n	800f396 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	689a      	ldr	r2, [r3, #8]
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d914      	bls.n	800f31e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	689a      	ldr	r2, [r3, #8]
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	1ad2      	subs	r2, r2, r3
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	461a      	mov	r2, r3
 800f308:	6879      	ldr	r1, [r7, #4]
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f000 ff84 	bl	8010218 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f310:	2300      	movs	r3, #0
 800f312:	2200      	movs	r2, #0
 800f314:	2100      	movs	r1, #0
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f001 fc5a 	bl	8010bd0 <USBD_LL_PrepareReceive>
 800f31c:	e03b      	b.n	800f396 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	429a      	cmp	r2, r3
 800f328:	d11c      	bne.n	800f364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f332:	429a      	cmp	r2, r3
 800f334:	d316      	bcc.n	800f364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f340:	429a      	cmp	r2, r3
 800f342:	d20f      	bcs.n	800f364 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f344:	2200      	movs	r2, #0
 800f346:	2100      	movs	r1, #0
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f000 ff65 	bl	8010218 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f356:	2300      	movs	r3, #0
 800f358:	2200      	movs	r2, #0
 800f35a:	2100      	movs	r1, #0
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f001 fc37 	bl	8010bd0 <USBD_LL_PrepareReceive>
 800f362:	e018      	b.n	800f396 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d10b      	bne.n	800f388 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f388:	2180      	movs	r1, #128	; 0x80
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f001 fb76 	bl	8010a7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f000 ff93 	bl	80102bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d122      	bne.n	800f3e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f3a0:	68f8      	ldr	r0, [r7, #12]
 800f3a2:	f7ff fe98 	bl	800f0d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f3ae:	e01a      	b.n	800f3e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b03      	cmp	r3, #3
 800f3ba:	d114      	bne.n	800f3e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00e      	beq.n	800f3e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ce:	695b      	ldr	r3, [r3, #20]
 800f3d0:	7afa      	ldrb	r2, [r7, #11]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f3dc:	7dfb      	ldrb	r3, [r7, #23]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	e000      	b.n	800f3e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f3e6:	2300      	movs	r3, #0
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d101      	bne.n	800f424 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f420:	2303      	movs	r3, #3
 800f422:	e02f      	b.n	800f484 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00f      	beq.n	800f44e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d009      	beq.n	800f44e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	6852      	ldr	r2, [r2, #4]
 800f446:	b2d2      	uxtb	r2, r2
 800f448:	4611      	mov	r1, r2
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	2200      	movs	r2, #0
 800f452:	2100      	movs	r1, #0
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f001 facc 	bl	80109f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2240      	movs	r2, #64	; 0x40
 800f466:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f46a:	2340      	movs	r3, #64	; 0x40
 800f46c:	2200      	movs	r2, #0
 800f46e:	2180      	movs	r1, #128	; 0x80
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 fabe 	bl	80109f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2240      	movs	r2, #64	; 0x40
 800f480:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	460b      	mov	r3, r1
 800f496:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	78fa      	ldrb	r2, [r7, #3]
 800f49c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2204      	movs	r2, #4
 800f4c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f4ca:	2300      	movs	r3, #0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b04      	cmp	r3, #4
 800f4ea:	d106      	bne.n	800f4fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	370c      	adds	r7, #12
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f516:	2b00      	cmp	r3, #0
 800f518:	d101      	bne.n	800f51e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f51a:	2303      	movs	r3, #3
 800f51c:	e012      	b.n	800f544 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f524:	b2db      	uxtb	r3, r3
 800f526:	2b03      	cmp	r3, #3
 800f528:	d10b      	bne.n	800f542 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d005      	beq.n	800f542 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53c:	69db      	ldr	r3, [r3, #28]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f562:	2303      	movs	r3, #3
 800f564:	e014      	b.n	800f590 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d10d      	bne.n	800f58e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d007      	beq.n	800f58e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f584:	6a1b      	ldr	r3, [r3, #32]
 800f586:	78fa      	ldrb	r2, [r7, #3]
 800f588:	4611      	mov	r1, r2
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	e014      	b.n	800f5dc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d10d      	bne.n	800f5da <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d007      	beq.n	800f5da <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d2:	78fa      	ldrb	r2, [r7, #3]
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3708      	adds	r7, #8
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2201      	movs	r2, #1
 800f606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	6852      	ldr	r2, [r2, #4]
 800f620:	b2d2      	uxtb	r2, r2
 800f622:	4611      	mov	r1, r2
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	4798      	blx	r3
  }

  return USBD_OK;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f632:	b480      	push	{r7}
 800f634:	b087      	sub	sp, #28
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	3301      	adds	r3, #1
 800f648:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f650:	8a3b      	ldrh	r3, [r7, #16]
 800f652:	021b      	lsls	r3, r3, #8
 800f654:	b21a      	sxth	r2, r3
 800f656:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	b21b      	sxth	r3, r3
 800f65e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f660:	89fb      	ldrh	r3, [r7, #14]
}
 800f662:	4618      	mov	r0, r3
 800f664:	371c      	adds	r7, #28
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
	...

0800f670 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f686:	2b40      	cmp	r3, #64	; 0x40
 800f688:	d005      	beq.n	800f696 <USBD_StdDevReq+0x26>
 800f68a:	2b40      	cmp	r3, #64	; 0x40
 800f68c:	d853      	bhi.n	800f736 <USBD_StdDevReq+0xc6>
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00b      	beq.n	800f6aa <USBD_StdDevReq+0x3a>
 800f692:	2b20      	cmp	r3, #32
 800f694:	d14f      	bne.n	800f736 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	6839      	ldr	r1, [r7, #0]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	4798      	blx	r3
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6a8:	e04a      	b.n	800f740 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	785b      	ldrb	r3, [r3, #1]
 800f6ae:	2b09      	cmp	r3, #9
 800f6b0:	d83b      	bhi.n	800f72a <USBD_StdDevReq+0xba>
 800f6b2:	a201      	add	r2, pc, #4	; (adr r2, 800f6b8 <USBD_StdDevReq+0x48>)
 800f6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b8:	0800f70d 	.word	0x0800f70d
 800f6bc:	0800f721 	.word	0x0800f721
 800f6c0:	0800f72b 	.word	0x0800f72b
 800f6c4:	0800f717 	.word	0x0800f717
 800f6c8:	0800f72b 	.word	0x0800f72b
 800f6cc:	0800f6eb 	.word	0x0800f6eb
 800f6d0:	0800f6e1 	.word	0x0800f6e1
 800f6d4:	0800f72b 	.word	0x0800f72b
 800f6d8:	0800f703 	.word	0x0800f703
 800f6dc:	0800f6f5 	.word	0x0800f6f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f9de 	bl	800faa4 <USBD_GetDescriptor>
          break;
 800f6e8:	e024      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fb43 	bl	800fd78 <USBD_SetAddress>
          break;
 800f6f2:	e01f      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 fb82 	bl	800fe00 <USBD_SetConfig>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	73fb      	strb	r3, [r7, #15]
          break;
 800f700:	e018      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fc21 	bl	800ff4c <USBD_GetConfig>
          break;
 800f70a:	e013      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 fc52 	bl	800ffb8 <USBD_GetStatus>
          break;
 800f714:	e00e      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fc81 	bl	8010020 <USBD_SetFeature>
          break;
 800f71e:	e009      	b.n	800f734 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 fc90 	bl	8010048 <USBD_ClrFeature>
          break;
 800f728:	e004      	b.n	800f734 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f72a:	6839      	ldr	r1, [r7, #0]
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 fce7 	bl	8010100 <USBD_CtlError>
          break;
 800f732:	bf00      	nop
      }
      break;
 800f734:	e004      	b.n	800f740 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fce1 	bl	8010100 <USBD_CtlError>
      break;
 800f73e:	bf00      	nop
  }

  return ret;
 800f740:	7bfb      	ldrb	r3, [r7, #15]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop

0800f74c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f756:	2300      	movs	r3, #0
 800f758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f762:	2b40      	cmp	r3, #64	; 0x40
 800f764:	d005      	beq.n	800f772 <USBD_StdItfReq+0x26>
 800f766:	2b40      	cmp	r3, #64	; 0x40
 800f768:	d82f      	bhi.n	800f7ca <USBD_StdItfReq+0x7e>
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <USBD_StdItfReq+0x26>
 800f76e:	2b20      	cmp	r3, #32
 800f770:	d12b      	bne.n	800f7ca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	3b01      	subs	r3, #1
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d81d      	bhi.n	800f7bc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	889b      	ldrh	r3, [r3, #4]
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b01      	cmp	r3, #1
 800f788:	d813      	bhi.n	800f7b2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	4798      	blx	r3
 800f798:	4603      	mov	r3, r0
 800f79a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	88db      	ldrh	r3, [r3, #6]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d110      	bne.n	800f7c6 <USBD_StdItfReq+0x7a>
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10d      	bne.n	800f7c6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fd73 	bl	8010296 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f7b0:	e009      	b.n	800f7c6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fca3 	bl	8010100 <USBD_CtlError>
          break;
 800f7ba:	e004      	b.n	800f7c6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 fc9e 	bl	8010100 <USBD_CtlError>
          break;
 800f7c4:	e000      	b.n	800f7c8 <USBD_StdItfReq+0x7c>
          break;
 800f7c6:	bf00      	nop
      }
      break;
 800f7c8:	e004      	b.n	800f7d4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f7ca:	6839      	ldr	r1, [r7, #0]
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fc97 	bl	8010100 <USBD_CtlError>
      break;
 800f7d2:	bf00      	nop
  }

  return ret;
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b084      	sub	sp, #16
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	889b      	ldrh	r3, [r3, #4]
 800f7f0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7fa:	2b40      	cmp	r3, #64	; 0x40
 800f7fc:	d007      	beq.n	800f80e <USBD_StdEPReq+0x30>
 800f7fe:	2b40      	cmp	r3, #64	; 0x40
 800f800:	f200 8145 	bhi.w	800fa8e <USBD_StdEPReq+0x2b0>
 800f804:	2b00      	cmp	r3, #0
 800f806:	d00c      	beq.n	800f822 <USBD_StdEPReq+0x44>
 800f808:	2b20      	cmp	r3, #32
 800f80a:	f040 8140 	bne.w	800fa8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	4798      	blx	r3
 800f81c:	4603      	mov	r3, r0
 800f81e:	73fb      	strb	r3, [r7, #15]
      break;
 800f820:	e13a      	b.n	800fa98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	785b      	ldrb	r3, [r3, #1]
 800f826:	2b03      	cmp	r3, #3
 800f828:	d007      	beq.n	800f83a <USBD_StdEPReq+0x5c>
 800f82a:	2b03      	cmp	r3, #3
 800f82c:	f300 8129 	bgt.w	800fa82 <USBD_StdEPReq+0x2a4>
 800f830:	2b00      	cmp	r3, #0
 800f832:	d07f      	beq.n	800f934 <USBD_StdEPReq+0x156>
 800f834:	2b01      	cmp	r3, #1
 800f836:	d03c      	beq.n	800f8b2 <USBD_StdEPReq+0xd4>
 800f838:	e123      	b.n	800fa82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b02      	cmp	r3, #2
 800f844:	d002      	beq.n	800f84c <USBD_StdEPReq+0x6e>
 800f846:	2b03      	cmp	r3, #3
 800f848:	d016      	beq.n	800f878 <USBD_StdEPReq+0x9a>
 800f84a:	e02c      	b.n	800f8a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f84c:	7bbb      	ldrb	r3, [r7, #14]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00d      	beq.n	800f86e <USBD_StdEPReq+0x90>
 800f852:	7bbb      	ldrb	r3, [r7, #14]
 800f854:	2b80      	cmp	r3, #128	; 0x80
 800f856:	d00a      	beq.n	800f86e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f858:	7bbb      	ldrb	r3, [r7, #14]
 800f85a:	4619      	mov	r1, r3
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f001 f90d 	bl	8010a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f862:	2180      	movs	r1, #128	; 0x80
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f001 f909 	bl	8010a7c <USBD_LL_StallEP>
 800f86a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f86c:	e020      	b.n	800f8b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fc45 	bl	8010100 <USBD_CtlError>
              break;
 800f876:	e01b      	b.n	800f8b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	885b      	ldrh	r3, [r3, #2]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10e      	bne.n	800f89e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f880:	7bbb      	ldrb	r3, [r7, #14]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00b      	beq.n	800f89e <USBD_StdEPReq+0xc0>
 800f886:	7bbb      	ldrb	r3, [r7, #14]
 800f888:	2b80      	cmp	r3, #128	; 0x80
 800f88a:	d008      	beq.n	800f89e <USBD_StdEPReq+0xc0>
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	88db      	ldrh	r3, [r3, #6]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d104      	bne.n	800f89e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	4619      	mov	r1, r3
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f001 f8ef 	bl	8010a7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fcf9 	bl	8010296 <USBD_CtlSendStatus>

              break;
 800f8a4:	e004      	b.n	800f8b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fc29 	bl	8010100 <USBD_CtlError>
              break;
 800f8ae:	bf00      	nop
          }
          break;
 800f8b0:	e0ec      	b.n	800fa8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d002      	beq.n	800f8c4 <USBD_StdEPReq+0xe6>
 800f8be:	2b03      	cmp	r3, #3
 800f8c0:	d016      	beq.n	800f8f0 <USBD_StdEPReq+0x112>
 800f8c2:	e030      	b.n	800f926 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00d      	beq.n	800f8e6 <USBD_StdEPReq+0x108>
 800f8ca:	7bbb      	ldrb	r3, [r7, #14]
 800f8cc:	2b80      	cmp	r3, #128	; 0x80
 800f8ce:	d00a      	beq.n	800f8e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8d0:	7bbb      	ldrb	r3, [r7, #14]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f001 f8d1 	bl	8010a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8da:	2180      	movs	r1, #128	; 0x80
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f001 f8cd 	bl	8010a7c <USBD_LL_StallEP>
 800f8e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8e4:	e025      	b.n	800f932 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f8e6:	6839      	ldr	r1, [r7, #0]
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fc09 	bl	8010100 <USBD_CtlError>
              break;
 800f8ee:	e020      	b.n	800f932 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	885b      	ldrh	r3, [r3, #2]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d11b      	bne.n	800f930 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f8f8:	7bbb      	ldrb	r3, [r7, #14]
 800f8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d004      	beq.n	800f90c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	4619      	mov	r1, r3
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f001 f8d7 	bl	8010aba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fcc2 	bl	8010296 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	4798      	blx	r3
 800f920:	4603      	mov	r3, r0
 800f922:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f924:	e004      	b.n	800f930 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fbe9 	bl	8010100 <USBD_CtlError>
              break;
 800f92e:	e000      	b.n	800f932 <USBD_StdEPReq+0x154>
              break;
 800f930:	bf00      	nop
          }
          break;
 800f932:	e0ab      	b.n	800fa8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d002      	beq.n	800f946 <USBD_StdEPReq+0x168>
 800f940:	2b03      	cmp	r3, #3
 800f942:	d032      	beq.n	800f9aa <USBD_StdEPReq+0x1cc>
 800f944:	e097      	b.n	800fa76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f946:	7bbb      	ldrb	r3, [r7, #14]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d007      	beq.n	800f95c <USBD_StdEPReq+0x17e>
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	2b80      	cmp	r3, #128	; 0x80
 800f950:	d004      	beq.n	800f95c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 fbd3 	bl	8010100 <USBD_CtlError>
                break;
 800f95a:	e091      	b.n	800fa80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f95c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f960:	2b00      	cmp	r3, #0
 800f962:	da0b      	bge.n	800f97c <USBD_StdEPReq+0x19e>
 800f964:	7bbb      	ldrb	r3, [r7, #14]
 800f966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f96a:	4613      	mov	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	3310      	adds	r3, #16
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	4413      	add	r3, r2
 800f978:	3304      	adds	r3, #4
 800f97a:	e00b      	b.n	800f994 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f97c:	7bbb      	ldrb	r3, [r7, #14]
 800f97e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f982:	4613      	mov	r3, r2
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	4413      	add	r3, r2
 800f992:	3304      	adds	r3, #4
 800f994:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	2200      	movs	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2202      	movs	r2, #2
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 fc1d 	bl	80101e2 <USBD_CtlSendData>
              break;
 800f9a8:	e06a      	b.n	800fa80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f9aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	da11      	bge.n	800f9d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9b2:	7bbb      	ldrb	r3, [r7, #14]
 800f9b4:	f003 020f 	and.w	r2, r3, #15
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	440b      	add	r3, r1
 800f9c4:	3324      	adds	r3, #36	; 0x24
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d117      	bne.n	800f9fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fb96 	bl	8010100 <USBD_CtlError>
                  break;
 800f9d4:	e054      	b.n	800fa80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	f003 020f 	and.w	r2, r3, #15
 800f9dc:	6879      	ldr	r1, [r7, #4]
 800f9de:	4613      	mov	r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	440b      	add	r3, r1
 800f9e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d104      	bne.n	800f9fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f9f2:	6839      	ldr	r1, [r7, #0]
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fb83 	bl	8010100 <USBD_CtlError>
                  break;
 800f9fa:	e041      	b.n	800fa80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	da0b      	bge.n	800fa1c <USBD_StdEPReq+0x23e>
 800fa04:	7bbb      	ldrb	r3, [r7, #14]
 800fa06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	3310      	adds	r3, #16
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	4413      	add	r3, r2
 800fa18:	3304      	adds	r3, #4
 800fa1a:	e00b      	b.n	800fa34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa22:	4613      	mov	r3, r2
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4413      	add	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4413      	add	r3, r2
 800fa32:	3304      	adds	r3, #4
 800fa34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa36:	7bbb      	ldrb	r3, [r7, #14]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d002      	beq.n	800fa42 <USBD_StdEPReq+0x264>
 800fa3c:	7bbb      	ldrb	r3, [r7, #14]
 800fa3e:	2b80      	cmp	r3, #128	; 0x80
 800fa40:	d103      	bne.n	800fa4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	601a      	str	r2, [r3, #0]
 800fa48:	e00e      	b.n	800fa68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa4a:	7bbb      	ldrb	r3, [r7, #14]
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 f852 	bl	8010af8 <USBD_LL_IsStallEP>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	e002      	b.n	800fa68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	2200      	movs	r2, #0
 800fa66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2202      	movs	r2, #2
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fbb7 	bl	80101e2 <USBD_CtlSendData>
              break;
 800fa74:	e004      	b.n	800fa80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fa76:	6839      	ldr	r1, [r7, #0]
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f000 fb41 	bl	8010100 <USBD_CtlError>
              break;
 800fa7e:	bf00      	nop
          }
          break;
 800fa80:	e004      	b.n	800fa8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fb3b 	bl	8010100 <USBD_CtlError>
          break;
 800fa8a:	bf00      	nop
      }
      break;
 800fa8c:	e004      	b.n	800fa98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fa8e:	6839      	ldr	r1, [r7, #0]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 fb35 	bl	8010100 <USBD_CtlError>
      break;
 800fa96:	bf00      	nop
  }

  return ret;
 800fa98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
	...

0800faa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800faae:	2300      	movs	r3, #0
 800fab0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fab6:	2300      	movs	r3, #0
 800fab8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	885b      	ldrh	r3, [r3, #2]
 800fabe:	0a1b      	lsrs	r3, r3, #8
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	3b01      	subs	r3, #1
 800fac4:	2b06      	cmp	r3, #6
 800fac6:	f200 8128 	bhi.w	800fd1a <USBD_GetDescriptor+0x276>
 800faca:	a201      	add	r2, pc, #4	; (adr r2, 800fad0 <USBD_GetDescriptor+0x2c>)
 800facc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad0:	0800faed 	.word	0x0800faed
 800fad4:	0800fb05 	.word	0x0800fb05
 800fad8:	0800fb45 	.word	0x0800fb45
 800fadc:	0800fd1b 	.word	0x0800fd1b
 800fae0:	0800fd1b 	.word	0x0800fd1b
 800fae4:	0800fcbb 	.word	0x0800fcbb
 800fae8:	0800fce7 	.word	0x0800fce7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	7c12      	ldrb	r2, [r2, #16]
 800faf8:	f107 0108 	add.w	r1, r7, #8
 800fafc:	4610      	mov	r0, r2
 800fafe:	4798      	blx	r3
 800fb00:	60f8      	str	r0, [r7, #12]
      break;
 800fb02:	e112      	b.n	800fd2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	7c1b      	ldrb	r3, [r3, #16]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d10d      	bne.n	800fb28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb14:	f107 0208 	add.w	r2, r7, #8
 800fb18:	4610      	mov	r0, r2
 800fb1a:	4798      	blx	r3
 800fb1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3301      	adds	r3, #1
 800fb22:	2202      	movs	r2, #2
 800fb24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb26:	e100      	b.n	800fd2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb30:	f107 0208 	add.w	r2, r7, #8
 800fb34:	4610      	mov	r0, r2
 800fb36:	4798      	blx	r3
 800fb38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	2202      	movs	r2, #2
 800fb40:	701a      	strb	r2, [r3, #0]
      break;
 800fb42:	e0f2      	b.n	800fd2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	885b      	ldrh	r3, [r3, #2]
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b05      	cmp	r3, #5
 800fb4c:	f200 80ac 	bhi.w	800fca8 <USBD_GetDescriptor+0x204>
 800fb50:	a201      	add	r2, pc, #4	; (adr r2, 800fb58 <USBD_GetDescriptor+0xb4>)
 800fb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb56:	bf00      	nop
 800fb58:	0800fb71 	.word	0x0800fb71
 800fb5c:	0800fba5 	.word	0x0800fba5
 800fb60:	0800fbd9 	.word	0x0800fbd9
 800fb64:	0800fc0d 	.word	0x0800fc0d
 800fb68:	0800fc41 	.word	0x0800fc41
 800fb6c:	0800fc75 	.word	0x0800fc75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00b      	beq.n	800fb94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	7c12      	ldrb	r2, [r2, #16]
 800fb88:	f107 0108 	add.w	r1, r7, #8
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	4798      	blx	r3
 800fb90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb92:	e091      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb94:	6839      	ldr	r1, [r7, #0]
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f000 fab2 	bl	8010100 <USBD_CtlError>
            err++;
 800fb9c:	7afb      	ldrb	r3, [r7, #11]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	72fb      	strb	r3, [r7, #11]
          break;
 800fba2:	e089      	b.n	800fcb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00b      	beq.n	800fbc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	7c12      	ldrb	r2, [r2, #16]
 800fbbc:	f107 0108 	add.w	r1, r7, #8
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4798      	blx	r3
 800fbc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbc6:	e077      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fa98 	bl	8010100 <USBD_CtlError>
            err++;
 800fbd0:	7afb      	ldrb	r3, [r7, #11]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	72fb      	strb	r3, [r7, #11]
          break;
 800fbd6:	e06f      	b.n	800fcb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00b      	beq.n	800fbfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	7c12      	ldrb	r2, [r2, #16]
 800fbf0:	f107 0108 	add.w	r1, r7, #8
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	4798      	blx	r3
 800fbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbfa:	e05d      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 fa7e 	bl	8010100 <USBD_CtlError>
            err++;
 800fc04:	7afb      	ldrb	r3, [r7, #11]
 800fc06:	3301      	adds	r3, #1
 800fc08:	72fb      	strb	r3, [r7, #11]
          break;
 800fc0a:	e055      	b.n	800fcb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00b      	beq.n	800fc30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	7c12      	ldrb	r2, [r2, #16]
 800fc24:	f107 0108 	add.w	r1, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc2e:	e043      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc30:	6839      	ldr	r1, [r7, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 fa64 	bl	8010100 <USBD_CtlError>
            err++;
 800fc38:	7afb      	ldrb	r3, [r7, #11]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc3e:	e03b      	b.n	800fcb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc46:	695b      	ldr	r3, [r3, #20]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00b      	beq.n	800fc64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	7c12      	ldrb	r2, [r2, #16]
 800fc58:	f107 0108 	add.w	r1, r7, #8
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	4798      	blx	r3
 800fc60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc62:	e029      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 fa4a 	bl	8010100 <USBD_CtlError>
            err++;
 800fc6c:	7afb      	ldrb	r3, [r7, #11]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	72fb      	strb	r3, [r7, #11]
          break;
 800fc72:	e021      	b.n	800fcb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc7a:	699b      	ldr	r3, [r3, #24]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00b      	beq.n	800fc98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	7c12      	ldrb	r2, [r2, #16]
 800fc8c:	f107 0108 	add.w	r1, r7, #8
 800fc90:	4610      	mov	r0, r2
 800fc92:	4798      	blx	r3
 800fc94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc96:	e00f      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc98:	6839      	ldr	r1, [r7, #0]
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fa30 	bl	8010100 <USBD_CtlError>
            err++;
 800fca0:	7afb      	ldrb	r3, [r7, #11]
 800fca2:	3301      	adds	r3, #1
 800fca4:	72fb      	strb	r3, [r7, #11]
          break;
 800fca6:	e007      	b.n	800fcb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fca8:	6839      	ldr	r1, [r7, #0]
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 fa28 	bl	8010100 <USBD_CtlError>
          err++;
 800fcb0:	7afb      	ldrb	r3, [r7, #11]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fcb6:	bf00      	nop
      }
      break;
 800fcb8:	e037      	b.n	800fd2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	7c1b      	ldrb	r3, [r3, #16]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d109      	bne.n	800fcd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcca:	f107 0208 	add.w	r2, r7, #8
 800fcce:	4610      	mov	r0, r2
 800fcd0:	4798      	blx	r3
 800fcd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcd4:	e029      	b.n	800fd2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 fa11 	bl	8010100 <USBD_CtlError>
        err++;
 800fcde:	7afb      	ldrb	r3, [r7, #11]
 800fce0:	3301      	adds	r3, #1
 800fce2:	72fb      	strb	r3, [r7, #11]
      break;
 800fce4:	e021      	b.n	800fd2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7c1b      	ldrb	r3, [r3, #16]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10d      	bne.n	800fd0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf6:	f107 0208 	add.w	r2, r7, #8
 800fcfa:	4610      	mov	r0, r2
 800fcfc:	4798      	blx	r3
 800fcfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	3301      	adds	r3, #1
 800fd04:	2207      	movs	r2, #7
 800fd06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd08:	e00f      	b.n	800fd2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f9f7 	bl	8010100 <USBD_CtlError>
        err++;
 800fd12:	7afb      	ldrb	r3, [r7, #11]
 800fd14:	3301      	adds	r3, #1
 800fd16:	72fb      	strb	r3, [r7, #11]
      break;
 800fd18:	e007      	b.n	800fd2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 f9ef 	bl	8010100 <USBD_CtlError>
      err++;
 800fd22:	7afb      	ldrb	r3, [r7, #11]
 800fd24:	3301      	adds	r3, #1
 800fd26:	72fb      	strb	r3, [r7, #11]
      break;
 800fd28:	bf00      	nop
  }

  if (err != 0U)
 800fd2a:	7afb      	ldrb	r3, [r7, #11]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d11e      	bne.n	800fd6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	88db      	ldrh	r3, [r3, #6]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d016      	beq.n	800fd66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fd38:	893b      	ldrh	r3, [r7, #8]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00e      	beq.n	800fd5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	88da      	ldrh	r2, [r3, #6]
 800fd42:	893b      	ldrh	r3, [r7, #8]
 800fd44:	4293      	cmp	r3, r2
 800fd46:	bf28      	it	cs
 800fd48:	4613      	movcs	r3, r2
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd4e:	893b      	ldrh	r3, [r7, #8]
 800fd50:	461a      	mov	r2, r3
 800fd52:	68f9      	ldr	r1, [r7, #12]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 fa44 	bl	80101e2 <USBD_CtlSendData>
 800fd5a:	e009      	b.n	800fd70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 f9ce 	bl	8010100 <USBD_CtlError>
 800fd64:	e004      	b.n	800fd70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 fa95 	bl	8010296 <USBD_CtlSendStatus>
 800fd6c:	e000      	b.n	800fd70 <USBD_GetDescriptor+0x2cc>
    return;
 800fd6e:	bf00      	nop
  }
}
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop

0800fd78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	889b      	ldrh	r3, [r3, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d131      	bne.n	800fdee <USBD_SetAddress+0x76>
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	88db      	ldrh	r3, [r3, #6]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d12d      	bne.n	800fdee <USBD_SetAddress+0x76>
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	885b      	ldrh	r3, [r3, #2]
 800fd96:	2b7f      	cmp	r3, #127	; 0x7f
 800fd98:	d829      	bhi.n	800fdee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	885b      	ldrh	r3, [r3, #2]
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fda4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	d104      	bne.n	800fdbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fdb2:	6839      	ldr	r1, [r7, #0]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 f9a3 	bl	8010100 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdba:	e01d      	b.n	800fdf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	7bfa      	ldrb	r2, [r7, #15]
 800fdc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fdc4:	7bfb      	ldrb	r3, [r7, #15]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 fec1 	bl	8010b50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fa61 	bl	8010296 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d004      	beq.n	800fde4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2202      	movs	r2, #2
 800fdde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fde2:	e009      	b.n	800fdf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdec:	e004      	b.n	800fdf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 f985 	bl	8010100 <USBD_CtlError>
  }
}
 800fdf6:	bf00      	nop
 800fdf8:	bf00      	nop
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	885b      	ldrh	r3, [r3, #2]
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	4b4c      	ldr	r3, [pc, #304]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe18:	4b4b      	ldr	r3, [pc, #300]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d905      	bls.n	800fe2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe20:	6839      	ldr	r1, [r7, #0]
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f96c 	bl	8010100 <USBD_CtlError>
    return USBD_FAIL;
 800fe28:	2303      	movs	r3, #3
 800fe2a:	e088      	b.n	800ff3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d002      	beq.n	800fe3e <USBD_SetConfig+0x3e>
 800fe38:	2b03      	cmp	r3, #3
 800fe3a:	d025      	beq.n	800fe88 <USBD_SetConfig+0x88>
 800fe3c:	e071      	b.n	800ff22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe3e:	4b42      	ldr	r3, [pc, #264]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d01c      	beq.n	800fe80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fe46:	4b40      	ldr	r3, [pc, #256]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe50:	4b3d      	ldr	r3, [pc, #244]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	4619      	mov	r1, r3
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff f948 	bl	800f0ec <USBD_SetClassConfig>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d004      	beq.n	800fe70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f949 	bl	8010100 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe6e:	e065      	b.n	800ff3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fa10 	bl	8010296 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2203      	movs	r2, #3
 800fe7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fe7e:	e05d      	b.n	800ff3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fa08 	bl	8010296 <USBD_CtlSendStatus>
      break;
 800fe86:	e059      	b.n	800ff3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fe88:	4b2f      	ldr	r3, [pc, #188]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d112      	bne.n	800feb6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2202      	movs	r2, #2
 800fe94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fe98:	4b2b      	ldr	r3, [pc, #172]	; (800ff48 <USBD_SetConfig+0x148>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fea2:	4b29      	ldr	r3, [pc, #164]	; (800ff48 <USBD_SetConfig+0x148>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	4619      	mov	r1, r3
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff f93b 	bl	800f124 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f9f1 	bl	8010296 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800feb4:	e042      	b.n	800ff3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800feb6:	4b24      	ldr	r3, [pc, #144]	; (800ff48 <USBD_SetConfig+0x148>)
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	461a      	mov	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d02a      	beq.n	800ff1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff f929 	bl	800f124 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fed2:	4b1d      	ldr	r3, [pc, #116]	; (800ff48 <USBD_SetConfig+0x148>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fedc:	4b1a      	ldr	r3, [pc, #104]	; (800ff48 <USBD_SetConfig+0x148>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff f902 	bl	800f0ec <USBD_SetClassConfig>
 800fee8:	4603      	mov	r3, r0
 800feea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00f      	beq.n	800ff12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fef2:	6839      	ldr	r1, [r7, #0]
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f903 	bl	8010100 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	4619      	mov	r1, r3
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7ff f90e 	bl	800f124 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2202      	movs	r2, #2
 800ff0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff10:	e014      	b.n	800ff3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 f9bf 	bl	8010296 <USBD_CtlSendStatus>
      break;
 800ff18:	e010      	b.n	800ff3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f9bb 	bl	8010296 <USBD_CtlSendStatus>
      break;
 800ff20:	e00c      	b.n	800ff3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ff22:	6839      	ldr	r1, [r7, #0]
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f8eb 	bl	8010100 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff2a:	4b07      	ldr	r3, [pc, #28]	; (800ff48 <USBD_SetConfig+0x148>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff f8f7 	bl	800f124 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff36:	2303      	movs	r3, #3
 800ff38:	73fb      	strb	r3, [r7, #15]
      break;
 800ff3a:	bf00      	nop
  }

  return ret;
 800ff3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	240001b4 	.word	0x240001b4

0800ff4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	88db      	ldrh	r3, [r3, #6]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d004      	beq.n	800ff68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff5e:	6839      	ldr	r1, [r7, #0]
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f8cd 	bl	8010100 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ff66:	e023      	b.n	800ffb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	dc02      	bgt.n	800ff7a <USBD_GetConfig+0x2e>
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dc03      	bgt.n	800ff80 <USBD_GetConfig+0x34>
 800ff78:	e015      	b.n	800ffa6 <USBD_GetConfig+0x5a>
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	d00b      	beq.n	800ff96 <USBD_GetConfig+0x4a>
 800ff7e:	e012      	b.n	800ffa6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3308      	adds	r3, #8
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f927 	bl	80101e2 <USBD_CtlSendData>
        break;
 800ff94:	e00c      	b.n	800ffb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f000 f91f 	bl	80101e2 <USBD_CtlSendData>
        break;
 800ffa4:	e004      	b.n	800ffb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f8a9 	bl	8010100 <USBD_CtlError>
        break;
 800ffae:	bf00      	nop
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d81e      	bhi.n	801000e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	88db      	ldrh	r3, [r3, #6]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	d004      	beq.n	800ffe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 f890 	bl	8010100 <USBD_CtlError>
        break;
 800ffe0:	e01a      	b.n	8010018 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d005      	beq.n	800fffe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	f043 0202 	orr.w	r2, r3, #2
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	330c      	adds	r3, #12
 8010002:	2202      	movs	r2, #2
 8010004:	4619      	mov	r1, r3
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f8eb 	bl	80101e2 <USBD_CtlSendData>
      break;
 801000c:	e004      	b.n	8010018 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f875 	bl	8010100 <USBD_CtlError>
      break;
 8010016:	bf00      	nop
  }
}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	885b      	ldrh	r3, [r3, #2]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d106      	bne.n	8010040 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f92b 	bl	8010296 <USBD_CtlSendStatus>
  }
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010058:	b2db      	uxtb	r3, r3
 801005a:	3b01      	subs	r3, #1
 801005c:	2b02      	cmp	r3, #2
 801005e:	d80b      	bhi.n	8010078 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	885b      	ldrh	r3, [r3, #2]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d10c      	bne.n	8010082 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f910 	bl	8010296 <USBD_CtlSendStatus>
      }
      break;
 8010076:	e004      	b.n	8010082 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010078:	6839      	ldr	r1, [r7, #0]
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f840 	bl	8010100 <USBD_CtlError>
      break;
 8010080:	e000      	b.n	8010084 <USBD_ClrFeature+0x3c>
      break;
 8010082:	bf00      	nop
  }
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	3301      	adds	r3, #1
 80100a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	781a      	ldrb	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	3301      	adds	r3, #1
 80100b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f7ff fabb 	bl	800f632 <SWAPBYTE>
 80100bc:	4603      	mov	r3, r0
 80100be:	461a      	mov	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	3301      	adds	r3, #1
 80100c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	3301      	adds	r3, #1
 80100ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f7ff faae 	bl	800f632 <SWAPBYTE>
 80100d6:	4603      	mov	r3, r0
 80100d8:	461a      	mov	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	3301      	adds	r3, #1
 80100e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	3301      	adds	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f7ff faa1 	bl	800f632 <SWAPBYTE>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	80da      	strh	r2, [r3, #6]
}
 80100f8:	bf00      	nop
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801010a:	2180      	movs	r1, #128	; 0x80
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fcb5 	bl	8010a7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010112:	2100      	movs	r1, #0
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fcb1 	bl	8010a7c <USBD_LL_StallEP>
}
 801011a:	bf00      	nop
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b086      	sub	sp, #24
 8010126:	af00      	add	r7, sp, #0
 8010128:	60f8      	str	r0, [r7, #12]
 801012a:	60b9      	str	r1, [r7, #8]
 801012c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d036      	beq.n	80101a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801013c:	6938      	ldr	r0, [r7, #16]
 801013e:	f000 f836 	bl	80101ae <USBD_GetLen>
 8010142:	4603      	mov	r3, r0
 8010144:	3301      	adds	r3, #1
 8010146:	b29b      	uxth	r3, r3
 8010148:	005b      	lsls	r3, r3, #1
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	4413      	add	r3, r2
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	7812      	ldrb	r2, [r2, #0]
 801015a:	701a      	strb	r2, [r3, #0]
  idx++;
 801015c:	7dfb      	ldrb	r3, [r7, #23]
 801015e:	3301      	adds	r3, #1
 8010160:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	4413      	add	r3, r2
 8010168:	2203      	movs	r2, #3
 801016a:	701a      	strb	r2, [r3, #0]
  idx++;
 801016c:	7dfb      	ldrb	r3, [r7, #23]
 801016e:	3301      	adds	r3, #1
 8010170:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010172:	e013      	b.n	801019c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010174:	7dfb      	ldrb	r3, [r7, #23]
 8010176:	68ba      	ldr	r2, [r7, #8]
 8010178:	4413      	add	r3, r2
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	7812      	ldrb	r2, [r2, #0]
 801017e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	3301      	adds	r3, #1
 8010184:	613b      	str	r3, [r7, #16]
    idx++;
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	3301      	adds	r3, #1
 801018a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801018c:	7dfb      	ldrb	r3, [r7, #23]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	4413      	add	r3, r2
 8010192:	2200      	movs	r2, #0
 8010194:	701a      	strb	r2, [r3, #0]
    idx++;
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	3301      	adds	r3, #1
 801019a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d1e7      	bne.n	8010174 <USBD_GetString+0x52>
 80101a4:	e000      	b.n	80101a8 <USBD_GetString+0x86>
    return;
 80101a6:	bf00      	nop
  }
}
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b085      	sub	sp, #20
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101b6:	2300      	movs	r3, #0
 80101b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80101be:	e005      	b.n	80101cc <USBD_GetLen+0x1e>
  {
    len++;
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	3301      	adds	r3, #1
 80101c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	3301      	adds	r3, #1
 80101ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d1f5      	bne.n	80101c0 <USBD_GetLen+0x12>
  }

  return len;
 80101d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b084      	sub	sp, #16
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	60f8      	str	r0, [r7, #12]
 80101ea:	60b9      	str	r1, [r7, #8]
 80101ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	2202      	movs	r2, #2
 80101f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68ba      	ldr	r2, [r7, #8]
 8010206:	2100      	movs	r1, #0
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f000 fcc0 	bl	8010b8e <USBD_LL_Transmit>

  return USBD_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	2100      	movs	r1, #0
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f000 fcaf 	bl	8010b8e <USBD_LL_Transmit>

  return USBD_OK;
 8010230:	2300      	movs	r3, #0
}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b084      	sub	sp, #16
 801023e:	af00      	add	r7, sp, #0
 8010240:	60f8      	str	r0, [r7, #12]
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2203      	movs	r2, #3
 801024a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	2100      	movs	r1, #0
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f000 fcb3 	bl	8010bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801026a:	2300      	movs	r3, #0
}
 801026c:	4618      	mov	r0, r3
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	2100      	movs	r1, #0
 8010286:	68f8      	ldr	r0, [r7, #12]
 8010288:	f000 fca2 	bl	8010bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801028c:	2300      	movs	r3, #0
}
 801028e:	4618      	mov	r0, r3
 8010290:	3710      	adds	r7, #16
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2204      	movs	r2, #4
 80102a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102a6:	2300      	movs	r3, #0
 80102a8:	2200      	movs	r2, #0
 80102aa:	2100      	movs	r1, #0
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 fc6e 	bl	8010b8e <USBD_LL_Transmit>

  return USBD_OK;
 80102b2:	2300      	movs	r3, #0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2205      	movs	r2, #5
 80102c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102cc:	2300      	movs	r3, #0
 80102ce:	2200      	movs	r2, #0
 80102d0:	2100      	movs	r1, #0
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f000 fc7c 	bl	8010bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
	...

080102e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80102e8:	2201      	movs	r2, #1
 80102ea:	4913      	ldr	r1, [pc, #76]	; (8010338 <MX_USB_DEVICE_Init+0x54>)
 80102ec:	4813      	ldr	r0, [pc, #76]	; (801033c <MX_USB_DEVICE_Init+0x58>)
 80102ee:	f7fe fe8f 	bl	800f010 <USBD_Init>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80102f8:	f7f1 fca8 	bl	8001c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80102fc:	4910      	ldr	r1, [pc, #64]	; (8010340 <MX_USB_DEVICE_Init+0x5c>)
 80102fe:	480f      	ldr	r0, [pc, #60]	; (801033c <MX_USB_DEVICE_Init+0x58>)
 8010300:	f7fe feb6 	bl	800f070 <USBD_RegisterClass>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801030a:	f7f1 fc9f 	bl	8001c4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801030e:	490d      	ldr	r1, [pc, #52]	; (8010344 <MX_USB_DEVICE_Init+0x60>)
 8010310:	480a      	ldr	r0, [pc, #40]	; (801033c <MX_USB_DEVICE_Init+0x58>)
 8010312:	f7fe fe07 	bl	800ef24 <USBD_CDC_RegisterInterface>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d001      	beq.n	8010320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801031c:	f7f1 fc96 	bl	8001c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010320:	4806      	ldr	r0, [pc, #24]	; (801033c <MX_USB_DEVICE_Init+0x58>)
 8010322:	f7fe fecc 	bl	800f0be <USBD_Start>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801032c:	f7f1 fc8e 	bl	8001c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010330:	f7f7 fcb6 	bl	8007ca0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010334:	bf00      	nop
 8010336:	bd80      	pop	{r7, pc}
 8010338:	24000148 	.word	0x24000148
 801033c:	24000bb4 	.word	0x24000bb4
 8010340:	24000030 	.word	0x24000030
 8010344:	24000134 	.word	0x24000134

08010348 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801034c:	2200      	movs	r2, #0
 801034e:	4905      	ldr	r1, [pc, #20]	; (8010364 <CDC_Init_HS+0x1c>)
 8010350:	4805      	ldr	r0, [pc, #20]	; (8010368 <CDC_Init_HS+0x20>)
 8010352:	f7fe fdfc 	bl	800ef4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8010356:	4905      	ldr	r1, [pc, #20]	; (801036c <CDC_Init_HS+0x24>)
 8010358:	4803      	ldr	r0, [pc, #12]	; (8010368 <CDC_Init_HS+0x20>)
 801035a:	f7fe fe16 	bl	800ef8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801035e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010360:	4618      	mov	r0, r3
 8010362:	bd80      	pop	{r7, pc}
 8010364:	24001684 	.word	0x24001684
 8010368:	24000bb4 	.word	0x24000bb4
 801036c:	24000e84 	.word	0x24000e84

08010370 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8010370:	b480      	push	{r7}
 8010372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8010374:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8010376:	4618      	mov	r0, r3
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	4603      	mov	r3, r0
 8010388:	6039      	str	r1, [r7, #0]
 801038a:	71fb      	strb	r3, [r7, #7]
 801038c:	4613      	mov	r3, r2
 801038e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8010390:	79fb      	ldrb	r3, [r7, #7]
 8010392:	2b23      	cmp	r3, #35	; 0x23
 8010394:	d84a      	bhi.n	801042c <CDC_Control_HS+0xac>
 8010396:	a201      	add	r2, pc, #4	; (adr r2, 801039c <CDC_Control_HS+0x1c>)
 8010398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039c:	0801042d 	.word	0x0801042d
 80103a0:	0801042d 	.word	0x0801042d
 80103a4:	0801042d 	.word	0x0801042d
 80103a8:	0801042d 	.word	0x0801042d
 80103ac:	0801042d 	.word	0x0801042d
 80103b0:	0801042d 	.word	0x0801042d
 80103b4:	0801042d 	.word	0x0801042d
 80103b8:	0801042d 	.word	0x0801042d
 80103bc:	0801042d 	.word	0x0801042d
 80103c0:	0801042d 	.word	0x0801042d
 80103c4:	0801042d 	.word	0x0801042d
 80103c8:	0801042d 	.word	0x0801042d
 80103cc:	0801042d 	.word	0x0801042d
 80103d0:	0801042d 	.word	0x0801042d
 80103d4:	0801042d 	.word	0x0801042d
 80103d8:	0801042d 	.word	0x0801042d
 80103dc:	0801042d 	.word	0x0801042d
 80103e0:	0801042d 	.word	0x0801042d
 80103e4:	0801042d 	.word	0x0801042d
 80103e8:	0801042d 	.word	0x0801042d
 80103ec:	0801042d 	.word	0x0801042d
 80103f0:	0801042d 	.word	0x0801042d
 80103f4:	0801042d 	.word	0x0801042d
 80103f8:	0801042d 	.word	0x0801042d
 80103fc:	0801042d 	.word	0x0801042d
 8010400:	0801042d 	.word	0x0801042d
 8010404:	0801042d 	.word	0x0801042d
 8010408:	0801042d 	.word	0x0801042d
 801040c:	0801042d 	.word	0x0801042d
 8010410:	0801042d 	.word	0x0801042d
 8010414:	0801042d 	.word	0x0801042d
 8010418:	0801042d 	.word	0x0801042d
 801041c:	0801042d 	.word	0x0801042d
 8010420:	0801042d 	.word	0x0801042d
 8010424:	0801042d 	.word	0x0801042d
 8010428:	0801042d 	.word	0x0801042d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801042c:	bf00      	nop
  }

  return (USBD_OK);
 801042e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010430:	4618      	mov	r0, r3
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8010446:	6879      	ldr	r1, [r7, #4]
 8010448:	4805      	ldr	r0, [pc, #20]	; (8010460 <CDC_Receive_HS+0x24>)
 801044a:	f7fe fd9e 	bl	800ef8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801044e:	4804      	ldr	r0, [pc, #16]	; (8010460 <CDC_Receive_HS+0x24>)
 8010450:	f7fe fdb4 	bl	800efbc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010454:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010456:	4618      	mov	r0, r3
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	24000bb4 	.word	0x24000bb4

08010464 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010464:	b480      	push	{r7}
 8010466:	b087      	sub	sp, #28
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	4613      	mov	r3, r2
 8010470:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010472:	2300      	movs	r3, #0
 8010474:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8010476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801047a:	4618      	mov	r0, r3
 801047c:	371c      	adds	r7, #28
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
	...

08010488 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	6039      	str	r1, [r7, #0]
 8010492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	2212      	movs	r2, #18
 8010498:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801049a:	4b03      	ldr	r3, [pc, #12]	; (80104a8 <USBD_HS_DeviceDescriptor+0x20>)
}
 801049c:	4618      	mov	r0, r3
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr
 80104a8:	24000164 	.word	0x24000164

080104ac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	4603      	mov	r3, r0
 80104b4:	6039      	str	r1, [r7, #0]
 80104b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2204      	movs	r2, #4
 80104bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80104be:	4b03      	ldr	r3, [pc, #12]	; (80104cc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	24000178 	.word	0x24000178

080104d0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	4603      	mov	r3, r0
 80104d8:	6039      	str	r1, [r7, #0]
 80104da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80104dc:	79fb      	ldrb	r3, [r7, #7]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d105      	bne.n	80104ee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	4907      	ldr	r1, [pc, #28]	; (8010504 <USBD_HS_ProductStrDescriptor+0x34>)
 80104e6:	4808      	ldr	r0, [pc, #32]	; (8010508 <USBD_HS_ProductStrDescriptor+0x38>)
 80104e8:	f7ff fe1b 	bl	8010122 <USBD_GetString>
 80104ec:	e004      	b.n	80104f8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	4904      	ldr	r1, [pc, #16]	; (8010504 <USBD_HS_ProductStrDescriptor+0x34>)
 80104f2:	4805      	ldr	r0, [pc, #20]	; (8010508 <USBD_HS_ProductStrDescriptor+0x38>)
 80104f4:	f7ff fe15 	bl	8010122 <USBD_GetString>
  }
  return USBD_StrDesc;
 80104f8:	4b02      	ldr	r3, [pc, #8]	; (8010504 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	24001e84 	.word	0x24001e84
 8010508:	08011980 	.word	0x08011980

0801050c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	6039      	str	r1, [r7, #0]
 8010516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010518:	683a      	ldr	r2, [r7, #0]
 801051a:	4904      	ldr	r1, [pc, #16]	; (801052c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801051c:	4804      	ldr	r0, [pc, #16]	; (8010530 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801051e:	f7ff fe00 	bl	8010122 <USBD_GetString>
  return USBD_StrDesc;
 8010522:	4b02      	ldr	r3, [pc, #8]	; (801052c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010524:	4618      	mov	r0, r3
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	24001e84 	.word	0x24001e84
 8010530:	08011998 	.word	0x08011998

08010534 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	4603      	mov	r3, r0
 801053c:	6039      	str	r1, [r7, #0]
 801053e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	221a      	movs	r2, #26
 8010544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010546:	f000 f843 	bl	80105d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801054a:	4b02      	ldr	r3, [pc, #8]	; (8010554 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801054c:	4618      	mov	r0, r3
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	2400017c 	.word	0x2400017c

08010558 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	6039      	str	r1, [r7, #0]
 8010562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010564:	79fb      	ldrb	r3, [r7, #7]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d105      	bne.n	8010576 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	4907      	ldr	r1, [pc, #28]	; (801058c <USBD_HS_ConfigStrDescriptor+0x34>)
 801056e:	4808      	ldr	r0, [pc, #32]	; (8010590 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010570:	f7ff fdd7 	bl	8010122 <USBD_GetString>
 8010574:	e004      	b.n	8010580 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010576:	683a      	ldr	r2, [r7, #0]
 8010578:	4904      	ldr	r1, [pc, #16]	; (801058c <USBD_HS_ConfigStrDescriptor+0x34>)
 801057a:	4805      	ldr	r0, [pc, #20]	; (8010590 <USBD_HS_ConfigStrDescriptor+0x38>)
 801057c:	f7ff fdd1 	bl	8010122 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010580:	4b02      	ldr	r3, [pc, #8]	; (801058c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	24001e84 	.word	0x24001e84
 8010590:	080119ac 	.word	0x080119ac

08010594 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	4603      	mov	r3, r0
 801059c:	6039      	str	r1, [r7, #0]
 801059e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105a0:	79fb      	ldrb	r3, [r7, #7]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d105      	bne.n	80105b2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	4907      	ldr	r1, [pc, #28]	; (80105c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80105aa:	4808      	ldr	r0, [pc, #32]	; (80105cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80105ac:	f7ff fdb9 	bl	8010122 <USBD_GetString>
 80105b0:	e004      	b.n	80105bc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	4904      	ldr	r1, [pc, #16]	; (80105c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80105b6:	4805      	ldr	r0, [pc, #20]	; (80105cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80105b8:	f7ff fdb3 	bl	8010122 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105bc:	4b02      	ldr	r3, [pc, #8]	; (80105c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	24001e84 	.word	0x24001e84
 80105cc:	080119b8 	.word	0x080119b8

080105d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80105d6:	4b0f      	ldr	r3, [pc, #60]	; (8010614 <Get_SerialNum+0x44>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80105dc:	4b0e      	ldr	r3, [pc, #56]	; (8010618 <Get_SerialNum+0x48>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80105e2:	4b0e      	ldr	r3, [pc, #56]	; (801061c <Get_SerialNum+0x4c>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4413      	add	r3, r2
 80105ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d009      	beq.n	801060a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80105f6:	2208      	movs	r2, #8
 80105f8:	4909      	ldr	r1, [pc, #36]	; (8010620 <Get_SerialNum+0x50>)
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f000 f814 	bl	8010628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010600:	2204      	movs	r2, #4
 8010602:	4908      	ldr	r1, [pc, #32]	; (8010624 <Get_SerialNum+0x54>)
 8010604:	68b8      	ldr	r0, [r7, #8]
 8010606:	f000 f80f 	bl	8010628 <IntToUnicode>
  }
}
 801060a:	bf00      	nop
 801060c:	3710      	adds	r7, #16
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	1ff1e800 	.word	0x1ff1e800
 8010618:	1ff1e804 	.word	0x1ff1e804
 801061c:	1ff1e808 	.word	0x1ff1e808
 8010620:	2400017e 	.word	0x2400017e
 8010624:	2400018e 	.word	0x2400018e

08010628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010628:	b480      	push	{r7}
 801062a:	b087      	sub	sp, #28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	4613      	mov	r3, r2
 8010634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801063a:	2300      	movs	r3, #0
 801063c:	75fb      	strb	r3, [r7, #23]
 801063e:	e027      	b.n	8010690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	0f1b      	lsrs	r3, r3, #28
 8010644:	2b09      	cmp	r3, #9
 8010646:	d80b      	bhi.n	8010660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	0f1b      	lsrs	r3, r3, #28
 801064c:	b2da      	uxtb	r2, r3
 801064e:	7dfb      	ldrb	r3, [r7, #23]
 8010650:	005b      	lsls	r3, r3, #1
 8010652:	4619      	mov	r1, r3
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	440b      	add	r3, r1
 8010658:	3230      	adds	r2, #48	; 0x30
 801065a:	b2d2      	uxtb	r2, r2
 801065c:	701a      	strb	r2, [r3, #0]
 801065e:	e00a      	b.n	8010676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	0f1b      	lsrs	r3, r3, #28
 8010664:	b2da      	uxtb	r2, r3
 8010666:	7dfb      	ldrb	r3, [r7, #23]
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	4619      	mov	r1, r3
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	440b      	add	r3, r1
 8010670:	3237      	adds	r2, #55	; 0x37
 8010672:	b2d2      	uxtb	r2, r2
 8010674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	011b      	lsls	r3, r3, #4
 801067a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801067c:	7dfb      	ldrb	r3, [r7, #23]
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	3301      	adds	r3, #1
 8010682:	68ba      	ldr	r2, [r7, #8]
 8010684:	4413      	add	r3, r2
 8010686:	2200      	movs	r2, #0
 8010688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801068a:	7dfb      	ldrb	r3, [r7, #23]
 801068c:	3301      	adds	r3, #1
 801068e:	75fb      	strb	r3, [r7, #23]
 8010690:	7dfa      	ldrb	r2, [r7, #23]
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	429a      	cmp	r2, r3
 8010696:	d3d3      	bcc.n	8010640 <IntToUnicode+0x18>
  }
}
 8010698:	bf00      	nop
 801069a:	bf00      	nop
 801069c:	371c      	adds	r7, #28
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
	...

080106a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b0b0      	sub	sp, #192	; 0xc0
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80106b0:	f107 030c 	add.w	r3, r7, #12
 80106b4:	22b4      	movs	r2, #180	; 0xb4
 80106b6:	2100      	movs	r1, #0
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 fb25 	bl	8010d08 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4a18      	ldr	r2, [pc, #96]	; (8010724 <HAL_PCD_MspInit+0x7c>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d129      	bne.n	801071c <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80106c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80106cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80106ce:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80106d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f8 fa28 	bl	8008b30 <HAL_RCCEx_PeriphCLKConfig>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d001      	beq.n	80106ea <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 80106e6:	f7f1 fab1 	bl	8001c4c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80106ea:	f7f7 fad9 	bl	8007ca0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80106ee:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <HAL_PCD_MspInit+0x80>)
 80106f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80106f4:	4a0c      	ldr	r2, [pc, #48]	; (8010728 <HAL_PCD_MspInit+0x80>)
 80106f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80106fe:	4b0a      	ldr	r3, [pc, #40]	; (8010728 <HAL_PCD_MspInit+0x80>)
 8010700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010708:	60bb      	str	r3, [r7, #8]
 801070a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801070c:	2200      	movs	r2, #0
 801070e:	2100      	movs	r1, #0
 8010710:	204d      	movs	r0, #77	; 0x4d
 8010712:	f7f3 fff4 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010716:	204d      	movs	r0, #77	; 0x4d
 8010718:	f7f4 f80b 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801071c:	bf00      	nop
 801071e:	37c0      	adds	r7, #192	; 0xc0
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	40040000 	.word	0x40040000
 8010728:	58024400 	.word	0x58024400

0801072c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010740:	4619      	mov	r1, r3
 8010742:	4610      	mov	r0, r2
 8010744:	f7fe fd06 	bl	800f154 <USBD_LL_SetupStage>
}
 8010748:	bf00      	nop
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010762:	78fa      	ldrb	r2, [r7, #3]
 8010764:	6879      	ldr	r1, [r7, #4]
 8010766:	4613      	mov	r3, r2
 8010768:	00db      	lsls	r3, r3, #3
 801076a:	1a9b      	subs	r3, r3, r2
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	440b      	add	r3, r1
 8010770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	78fb      	ldrb	r3, [r7, #3]
 8010778:	4619      	mov	r1, r3
 801077a:	f7fe fd40 	bl	800f1fe <USBD_LL_DataOutStage>
}
 801077e:	bf00      	nop
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b082      	sub	sp, #8
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	460b      	mov	r3, r1
 8010790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010798:	78fa      	ldrb	r2, [r7, #3]
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	4613      	mov	r3, r2
 801079e:	00db      	lsls	r3, r3, #3
 80107a0:	1a9b      	subs	r3, r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	440b      	add	r3, r1
 80107a6:	3348      	adds	r3, #72	; 0x48
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	78fb      	ldrb	r3, [r7, #3]
 80107ac:	4619      	mov	r1, r3
 80107ae:	f7fe fd89 	bl	800f2c4 <USBD_LL_DataInStage>
}
 80107b2:	bf00      	nop
 80107b4:	3708      	adds	r7, #8
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}

080107ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ba:	b580      	push	{r7, lr}
 80107bc:	b082      	sub	sp, #8
 80107be:	af00      	add	r7, sp, #0
 80107c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fe fe9d 	bl	800f508 <USBD_LL_SOF>
}
 80107ce:	bf00      	nop
 80107d0:	3708      	adds	r7, #8
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b084      	sub	sp, #16
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80107de:	2301      	movs	r3, #1
 80107e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d102      	bne.n	80107f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80107ea:	2300      	movs	r3, #0
 80107ec:	73fb      	strb	r3, [r7, #15]
 80107ee:	e008      	b.n	8010802 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	d102      	bne.n	80107fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80107f8:	2301      	movs	r3, #1
 80107fa:	73fb      	strb	r3, [r7, #15]
 80107fc:	e001      	b.n	8010802 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80107fe:	f7f1 fa25 	bl	8001c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010808:	7bfa      	ldrb	r2, [r7, #15]
 801080a:	4611      	mov	r1, r2
 801080c:	4618      	mov	r0, r3
 801080e:	f7fe fe3d 	bl	800f48c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fde9 	bl	800f3f0 <USBD_LL_Reset>
}
 801081e:	bf00      	nop
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
	...

08010828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010836:	4618      	mov	r0, r3
 8010838:	f7fe fe38 	bl	800f4ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	6812      	ldr	r2, [r2, #0]
 801084a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801084e:	f043 0301 	orr.w	r3, r3, #1
 8010852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a1b      	ldr	r3, [r3, #32]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d005      	beq.n	8010868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801085c:	4b04      	ldr	r3, [pc, #16]	; (8010870 <HAL_PCD_SuspendCallback+0x48>)
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	4a03      	ldr	r2, [pc, #12]	; (8010870 <HAL_PCD_SuspendCallback+0x48>)
 8010862:	f043 0306 	orr.w	r3, r3, #6
 8010866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	e000ed00 	.word	0xe000ed00

08010874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fe28 	bl	800f4d8 <USBD_LL_Resume>
}
 8010888:	bf00      	nop
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108a2:	78fa      	ldrb	r2, [r7, #3]
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fe fe76 	bl	800f598 <USBD_LL_IsoOUTIncomplete>
}
 80108ac:	bf00      	nop
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108c6:	78fa      	ldrb	r2, [r7, #3]
 80108c8:	4611      	mov	r1, r2
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fe3e 	bl	800f54c <USBD_LL_IsoINIncomplete>
}
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe fe7c 	bl	800f5e4 <USBD_LL_DevConnected>
}
 80108ec:	bf00      	nop
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe fe79 	bl	800f5fa <USBD_LL_DevDisconnected>
}
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d143      	bne.n	80109a8 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010920:	4a24      	ldr	r2, [pc, #144]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a22      	ldr	r2, [pc, #136]	; (80109b4 <USBD_LL_Init+0xa4>)
 801092c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010930:	4b20      	ldr	r3, [pc, #128]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010932:	4a21      	ldr	r2, [pc, #132]	; (80109b8 <USBD_LL_Init+0xa8>)
 8010934:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8010936:	4b1f      	ldr	r3, [pc, #124]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010938:	2209      	movs	r2, #9
 801093a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801093c:	4b1d      	ldr	r3, [pc, #116]	; (80109b4 <USBD_LL_Init+0xa4>)
 801093e:	2202      	movs	r2, #2
 8010940:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010942:	4b1c      	ldr	r3, [pc, #112]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010944:	2200      	movs	r2, #0
 8010946:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010948:	4b1a      	ldr	r3, [pc, #104]	; (80109b4 <USBD_LL_Init+0xa4>)
 801094a:	2202      	movs	r2, #2
 801094c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801094e:	4b19      	ldr	r3, [pc, #100]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010950:	2200      	movs	r2, #0
 8010952:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010954:	4b17      	ldr	r3, [pc, #92]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010956:	2200      	movs	r2, #0
 8010958:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801095a:	4b16      	ldr	r3, [pc, #88]	; (80109b4 <USBD_LL_Init+0xa4>)
 801095c:	2200      	movs	r2, #0
 801095e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8010960:	4b14      	ldr	r3, [pc, #80]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010962:	2201      	movs	r2, #1
 8010964:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010968:	2200      	movs	r2, #0
 801096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801096c:	4b11      	ldr	r3, [pc, #68]	; (80109b4 <USBD_LL_Init+0xa4>)
 801096e:	2200      	movs	r2, #0
 8010970:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010972:	4b10      	ldr	r3, [pc, #64]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010974:	2200      	movs	r2, #0
 8010976:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010978:	480e      	ldr	r0, [pc, #56]	; (80109b4 <USBD_LL_Init+0xa4>)
 801097a:	f7f5 ff88 	bl	800688e <HAL_PCD_Init>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d001      	beq.n	8010988 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8010984:	f7f1 f962 	bl	8001c4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010988:	f44f 7100 	mov.w	r1, #512	; 0x200
 801098c:	4809      	ldr	r0, [pc, #36]	; (80109b4 <USBD_LL_Init+0xa4>)
 801098e:	f7f7 f90c 	bl	8007baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010992:	2280      	movs	r2, #128	; 0x80
 8010994:	2100      	movs	r1, #0
 8010996:	4807      	ldr	r0, [pc, #28]	; (80109b4 <USBD_LL_Init+0xa4>)
 8010998:	f7f7 f8c0 	bl	8007b1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801099c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80109a0:	2101      	movs	r1, #1
 80109a2:	4804      	ldr	r0, [pc, #16]	; (80109b4 <USBD_LL_Init+0xa4>)
 80109a4:	f7f7 f8ba 	bl	8007b1c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	24002084 	.word	0x24002084
 80109b8:	40040000 	.word	0x40040000

080109bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109c8:	2300      	movs	r3, #0
 80109ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7f6 f87f 	bl	8006ad6 <HAL_PCD_Start>
 80109d8:	4603      	mov	r3, r0
 80109da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 f942 	bl	8010c68 <USBD_Get_USB_Status>
 80109e4:	4603      	mov	r3, r0
 80109e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}

080109f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b084      	sub	sp, #16
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
 80109fa:	4608      	mov	r0, r1
 80109fc:	4611      	mov	r1, r2
 80109fe:	461a      	mov	r2, r3
 8010a00:	4603      	mov	r3, r0
 8010a02:	70fb      	strb	r3, [r7, #3]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70bb      	strb	r3, [r7, #2]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a1a:	78bb      	ldrb	r3, [r7, #2]
 8010a1c:	883a      	ldrh	r2, [r7, #0]
 8010a1e:	78f9      	ldrb	r1, [r7, #3]
 8010a20:	f7f6 fc84 	bl	800732c <HAL_PCD_EP_Open>
 8010a24:	4603      	mov	r3, r0
 8010a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f000 f91c 	bl	8010c68 <USBD_Get_USB_Status>
 8010a30:	4603      	mov	r3, r0
 8010a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	460b      	mov	r3, r1
 8010a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a58:	78fa      	ldrb	r2, [r7, #3]
 8010a5a:	4611      	mov	r1, r2
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f6 fccd 	bl	80073fc <HAL_PCD_EP_Close>
 8010a62:	4603      	mov	r3, r0
 8010a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a66:	7bfb      	ldrb	r3, [r7, #15]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 f8fd 	bl	8010c68 <USBD_Get_USB_Status>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	460b      	mov	r3, r1
 8010a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a96:	78fa      	ldrb	r2, [r7, #3]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f6 fda5 	bl	80075ea <HAL_PCD_EP_SetStall>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 f8de 	bl	8010c68 <USBD_Get_USB_Status>
 8010aac:	4603      	mov	r3, r0
 8010aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aca:	2300      	movs	r3, #0
 8010acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ad4:	78fa      	ldrb	r2, [r7, #3]
 8010ad6:	4611      	mov	r1, r2
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f6 fdea 	bl	80076b2 <HAL_PCD_EP_ClrStall>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 f8bf 	bl	8010c68 <USBD_Get_USB_Status>
 8010aea:	4603      	mov	r3, r0
 8010aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	da0b      	bge.n	8010b2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b1a:	68f9      	ldr	r1, [r7, #12]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	00db      	lsls	r3, r3, #3
 8010b20:	1a9b      	subs	r3, r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	440b      	add	r3, r1
 8010b26:	333e      	adds	r3, #62	; 0x3e
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	e00b      	b.n	8010b44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b2c:	78fb      	ldrb	r3, [r7, #3]
 8010b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b32:	68f9      	ldr	r1, [r7, #12]
 8010b34:	4613      	mov	r3, r2
 8010b36:	00db      	lsls	r3, r3, #3
 8010b38:	1a9b      	subs	r3, r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	440b      	add	r3, r1
 8010b3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3714      	adds	r7, #20
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	460b      	mov	r3, r1
 8010b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b6a:	78fa      	ldrb	r2, [r7, #3]
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7f6 fbb7 	bl	80072e2 <HAL_PCD_SetAddress>
 8010b74:	4603      	mov	r3, r0
 8010b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b78:	7bfb      	ldrb	r3, [r7, #15]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f000 f874 	bl	8010c68 <USBD_Get_USB_Status>
 8010b80:	4603      	mov	r3, r0
 8010b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b086      	sub	sp, #24
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	60f8      	str	r0, [r7, #12]
 8010b96:	607a      	str	r2, [r7, #4]
 8010b98:	603b      	str	r3, [r7, #0]
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010bac:	7af9      	ldrb	r1, [r7, #11]
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	f7f6 fcd0 	bl	8007556 <HAL_PCD_EP_Transmit>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bba:	7dfb      	ldrb	r3, [r7, #23]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 f853 	bl	8010c68 <USBD_Get_USB_Status>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010bc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3718      	adds	r7, #24
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	607a      	str	r2, [r7, #4]
 8010bda:	603b      	str	r3, [r7, #0]
 8010bdc:	460b      	mov	r3, r1
 8010bde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be0:	2300      	movs	r3, #0
 8010be2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010be4:	2300      	movs	r3, #0
 8010be6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010bee:	7af9      	ldrb	r1, [r7, #11]
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	f7f6 fc4c 	bl	8007490 <HAL_PCD_EP_Receive>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bfc:	7dfb      	ldrb	r3, [r7, #23]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 f832 	bl	8010c68 <USBD_Get_USB_Status>
 8010c04:	4603      	mov	r3, r0
 8010c06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3718      	adds	r7, #24
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c24:	78fa      	ldrb	r2, [r7, #3]
 8010c26:	4611      	mov	r1, r2
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7f6 fc7c 	bl	8007526 <HAL_PCD_EP_GetRxCount>
 8010c2e:	4603      	mov	r3, r0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c40:	4b03      	ldr	r3, [pc, #12]	; (8010c50 <USBD_static_malloc+0x18>)
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	240001b8 	.word	0x240001b8

08010c54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]

}
 8010c5c:	bf00      	nop
 8010c5e:	370c      	adds	r7, #12
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr

08010c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b085      	sub	sp, #20
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	4603      	mov	r3, r0
 8010c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b03      	cmp	r3, #3
 8010c7a:	d817      	bhi.n	8010cac <USBD_Get_USB_Status+0x44>
 8010c7c:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <USBD_Get_USB_Status+0x1c>)
 8010c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c82:	bf00      	nop
 8010c84:	08010c95 	.word	0x08010c95
 8010c88:	08010c9b 	.word	0x08010c9b
 8010c8c:	08010ca1 	.word	0x08010ca1
 8010c90:	08010ca7 	.word	0x08010ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010c94:	2300      	movs	r3, #0
 8010c96:	73fb      	strb	r3, [r7, #15]
    break;
 8010c98:	e00b      	b.n	8010cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c9e:	e008      	b.n	8010cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ca4:	e005      	b.n	8010cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010ca6:	2303      	movs	r3, #3
 8010ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8010caa:	e002      	b.n	8010cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010cac:	2303      	movs	r3, #3
 8010cae:	73fb      	strb	r3, [r7, #15]
    break;
 8010cb0:	bf00      	nop
  }
  return usb_status;
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3714      	adds	r7, #20
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <__libc_init_array>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	4d0d      	ldr	r5, [pc, #52]	; (8010cf8 <__libc_init_array+0x38>)
 8010cc4:	4c0d      	ldr	r4, [pc, #52]	; (8010cfc <__libc_init_array+0x3c>)
 8010cc6:	1b64      	subs	r4, r4, r5
 8010cc8:	10a4      	asrs	r4, r4, #2
 8010cca:	2600      	movs	r6, #0
 8010ccc:	42a6      	cmp	r6, r4
 8010cce:	d109      	bne.n	8010ce4 <__libc_init_array+0x24>
 8010cd0:	4d0b      	ldr	r5, [pc, #44]	; (8010d00 <__libc_init_array+0x40>)
 8010cd2:	4c0c      	ldr	r4, [pc, #48]	; (8010d04 <__libc_init_array+0x44>)
 8010cd4:	f000 fe46 	bl	8011964 <_init>
 8010cd8:	1b64      	subs	r4, r4, r5
 8010cda:	10a4      	asrs	r4, r4, #2
 8010cdc:	2600      	movs	r6, #0
 8010cde:	42a6      	cmp	r6, r4
 8010ce0:	d105      	bne.n	8010cee <__libc_init_array+0x2e>
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}
 8010ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ce8:	4798      	blx	r3
 8010cea:	3601      	adds	r6, #1
 8010cec:	e7ee      	b.n	8010ccc <__libc_init_array+0xc>
 8010cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cf2:	4798      	blx	r3
 8010cf4:	3601      	adds	r6, #1
 8010cf6:	e7f2      	b.n	8010cde <__libc_init_array+0x1e>
 8010cf8:	08011be8 	.word	0x08011be8
 8010cfc:	08011be8 	.word	0x08011be8
 8010d00:	08011be8 	.word	0x08011be8
 8010d04:	08011bec 	.word	0x08011bec

08010d08 <memset>:
 8010d08:	4402      	add	r2, r0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d100      	bne.n	8010d12 <memset+0xa>
 8010d10:	4770      	bx	lr
 8010d12:	f803 1b01 	strb.w	r1, [r3], #1
 8010d16:	e7f9      	b.n	8010d0c <memset+0x4>

08010d18 <cos>:
 8010d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8010d1e:	ee17 3a90 	vmov	r3, s15
 8010d22:	4a1f      	ldr	r2, [pc, #124]	; (8010da0 <cos+0x88>)
 8010d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	dc04      	bgt.n	8010d36 <cos+0x1e>
 8010d2c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010d98 <cos+0x80>
 8010d30:	f000 f9c2 	bl	80110b8 <__kernel_cos>
 8010d34:	e004      	b.n	8010d40 <cos+0x28>
 8010d36:	4a1b      	ldr	r2, [pc, #108]	; (8010da4 <cos+0x8c>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	dd04      	ble.n	8010d46 <cos+0x2e>
 8010d3c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010d40:	b005      	add	sp, #20
 8010d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d46:	4668      	mov	r0, sp
 8010d48:	f000 f876 	bl	8010e38 <__ieee754_rem_pio2>
 8010d4c:	f000 0003 	and.w	r0, r0, #3
 8010d50:	2801      	cmp	r0, #1
 8010d52:	d007      	beq.n	8010d64 <cos+0x4c>
 8010d54:	2802      	cmp	r0, #2
 8010d56:	d00e      	beq.n	8010d76 <cos+0x5e>
 8010d58:	b9a0      	cbnz	r0, 8010d84 <cos+0x6c>
 8010d5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d5e:	ed9d 0b00 	vldr	d0, [sp]
 8010d62:	e7e5      	b.n	8010d30 <cos+0x18>
 8010d64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d68:	ed9d 0b00 	vldr	d0, [sp]
 8010d6c:	f000 fc90 	bl	8011690 <__kernel_sin>
 8010d70:	eeb1 0b40 	vneg.f64	d0, d0
 8010d74:	e7e4      	b.n	8010d40 <cos+0x28>
 8010d76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d7a:	ed9d 0b00 	vldr	d0, [sp]
 8010d7e:	f000 f99b 	bl	80110b8 <__kernel_cos>
 8010d82:	e7f5      	b.n	8010d70 <cos+0x58>
 8010d84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010d88:	ed9d 0b00 	vldr	d0, [sp]
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	f000 fc7f 	bl	8011690 <__kernel_sin>
 8010d92:	e7d5      	b.n	8010d40 <cos+0x28>
 8010d94:	f3af 8000 	nop.w
	...
 8010da0:	3fe921fb 	.word	0x3fe921fb
 8010da4:	7fefffff 	.word	0x7fefffff

08010da8 <sin>:
 8010da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010daa:	eeb0 7b40 	vmov.f64	d7, d0
 8010dae:	ee17 3a90 	vmov	r3, s15
 8010db2:	4a1f      	ldr	r2, [pc, #124]	; (8010e30 <sin+0x88>)
 8010db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010db8:	4293      	cmp	r3, r2
 8010dba:	dc05      	bgt.n	8010dc8 <sin+0x20>
 8010dbc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010e28 <sin+0x80>
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f000 fc65 	bl	8011690 <__kernel_sin>
 8010dc6:	e004      	b.n	8010dd2 <sin+0x2a>
 8010dc8:	4a1a      	ldr	r2, [pc, #104]	; (8010e34 <sin+0x8c>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	dd04      	ble.n	8010dd8 <sin+0x30>
 8010dce:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010dd2:	b005      	add	sp, #20
 8010dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dd8:	4668      	mov	r0, sp
 8010dda:	f000 f82d 	bl	8010e38 <__ieee754_rem_pio2>
 8010dde:	f000 0003 	and.w	r0, r0, #3
 8010de2:	2801      	cmp	r0, #1
 8010de4:	d008      	beq.n	8010df8 <sin+0x50>
 8010de6:	2802      	cmp	r0, #2
 8010de8:	d00d      	beq.n	8010e06 <sin+0x5e>
 8010dea:	b9b0      	cbnz	r0, 8010e1a <sin+0x72>
 8010dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010df0:	ed9d 0b00 	vldr	d0, [sp]
 8010df4:	2001      	movs	r0, #1
 8010df6:	e7e4      	b.n	8010dc2 <sin+0x1a>
 8010df8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dfc:	ed9d 0b00 	vldr	d0, [sp]
 8010e00:	f000 f95a 	bl	80110b8 <__kernel_cos>
 8010e04:	e7e5      	b.n	8010dd2 <sin+0x2a>
 8010e06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e0a:	ed9d 0b00 	vldr	d0, [sp]
 8010e0e:	2001      	movs	r0, #1
 8010e10:	f000 fc3e 	bl	8011690 <__kernel_sin>
 8010e14:	eeb1 0b40 	vneg.f64	d0, d0
 8010e18:	e7db      	b.n	8010dd2 <sin+0x2a>
 8010e1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e1e:	ed9d 0b00 	vldr	d0, [sp]
 8010e22:	f000 f949 	bl	80110b8 <__kernel_cos>
 8010e26:	e7f5      	b.n	8010e14 <sin+0x6c>
	...
 8010e30:	3fe921fb 	.word	0x3fe921fb
 8010e34:	7fefffff 	.word	0x7fefffff

08010e38 <__ieee754_rem_pio2>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8010e3e:	ee17 5a90 	vmov	r5, s15
 8010e42:	4b97      	ldr	r3, [pc, #604]	; (80110a0 <__ieee754_rem_pio2+0x268>)
 8010e44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	dc07      	bgt.n	8010e60 <__ieee754_rem_pio2+0x28>
 8010e50:	2200      	movs	r2, #0
 8010e52:	2300      	movs	r3, #0
 8010e54:	ed84 0b00 	vstr	d0, [r4]
 8010e58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010e5c:	2000      	movs	r0, #0
 8010e5e:	e01b      	b.n	8010e98 <__ieee754_rem_pio2+0x60>
 8010e60:	4b90      	ldr	r3, [pc, #576]	; (80110a4 <__ieee754_rem_pio2+0x26c>)
 8010e62:	429e      	cmp	r6, r3
 8010e64:	dc3b      	bgt.n	8010ede <__ieee754_rem_pio2+0xa6>
 8010e66:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010e6a:	2d00      	cmp	r5, #0
 8010e6c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011060 <__ieee754_rem_pio2+0x228>
 8010e70:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010e74:	dd19      	ble.n	8010eaa <__ieee754_rem_pio2+0x72>
 8010e76:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010e7a:	429e      	cmp	r6, r3
 8010e7c:	d00e      	beq.n	8010e9c <__ieee754_rem_pio2+0x64>
 8010e7e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011068 <__ieee754_rem_pio2+0x230>
 8010e82:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010e86:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010e8a:	ed84 5b00 	vstr	d5, [r4]
 8010e8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e92:	ed84 7b02 	vstr	d7, [r4, #8]
 8010e96:	2001      	movs	r0, #1
 8010e98:	b008      	add	sp, #32
 8010e9a:	bd70      	pop	{r4, r5, r6, pc}
 8010e9c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011070 <__ieee754_rem_pio2+0x238>
 8010ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ea4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011078 <__ieee754_rem_pio2+0x240>
 8010ea8:	e7eb      	b.n	8010e82 <__ieee754_rem_pio2+0x4a>
 8010eaa:	429e      	cmp	r6, r3
 8010eac:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010eb0:	d00e      	beq.n	8010ed0 <__ieee754_rem_pio2+0x98>
 8010eb2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011068 <__ieee754_rem_pio2+0x230>
 8010eb6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010eba:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010ebe:	ed84 5b00 	vstr	d5, [r4]
 8010ec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eca:	ed84 7b02 	vstr	d7, [r4, #8]
 8010ece:	e7e3      	b.n	8010e98 <__ieee754_rem_pio2+0x60>
 8010ed0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011070 <__ieee754_rem_pio2+0x238>
 8010ed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010ed8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011078 <__ieee754_rem_pio2+0x240>
 8010edc:	e7eb      	b.n	8010eb6 <__ieee754_rem_pio2+0x7e>
 8010ede:	4b72      	ldr	r3, [pc, #456]	; (80110a8 <__ieee754_rem_pio2+0x270>)
 8010ee0:	429e      	cmp	r6, r3
 8010ee2:	dc6e      	bgt.n	8010fc2 <__ieee754_rem_pio2+0x18a>
 8010ee4:	f000 fc2c 	bl	8011740 <fabs>
 8010ee8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010eec:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011080 <__ieee754_rem_pio2+0x248>
 8010ef0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010ef4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010ef8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010efc:	ee17 0a90 	vmov	r0, s15
 8010f00:	eeb1 4b45 	vneg.f64	d4, d5
 8010f04:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011060 <__ieee754_rem_pio2+0x228>
 8010f08:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010f0c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011068 <__ieee754_rem_pio2+0x230>
 8010f10:	281f      	cmp	r0, #31
 8010f12:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010f16:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010f1a:	dc08      	bgt.n	8010f2e <__ieee754_rem_pio2+0xf6>
 8010f1c:	4b63      	ldr	r3, [pc, #396]	; (80110ac <__ieee754_rem_pio2+0x274>)
 8010f1e:	1e42      	subs	r2, r0, #1
 8010f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f24:	42b3      	cmp	r3, r6
 8010f26:	d002      	beq.n	8010f2e <__ieee754_rem_pio2+0xf6>
 8010f28:	ed84 6b00 	vstr	d6, [r4]
 8010f2c:	e024      	b.n	8010f78 <__ieee754_rem_pio2+0x140>
 8010f2e:	ee16 3a90 	vmov	r3, s13
 8010f32:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010f36:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010f3a:	2b10      	cmp	r3, #16
 8010f3c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010f40:	ddf2      	ble.n	8010f28 <__ieee754_rem_pio2+0xf0>
 8010f42:	eeb0 6b40 	vmov.f64	d6, d0
 8010f46:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011070 <__ieee754_rem_pio2+0x238>
 8010f4a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010f4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010f52:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010f56:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011078 <__ieee754_rem_pio2+0x240>
 8010f5a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010f5e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010f62:	ee13 3a90 	vmov	r3, s7
 8010f66:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	2b31      	cmp	r3, #49	; 0x31
 8010f6e:	dc17      	bgt.n	8010fa0 <__ieee754_rem_pio2+0x168>
 8010f70:	eeb0 0b46 	vmov.f64	d0, d6
 8010f74:	ed84 3b00 	vstr	d3, [r4]
 8010f78:	ed94 6b00 	vldr	d6, [r4]
 8010f7c:	2d00      	cmp	r5, #0
 8010f7e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010f82:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010f86:	ed84 7b02 	vstr	d7, [r4, #8]
 8010f8a:	da85      	bge.n	8010e98 <__ieee754_rem_pio2+0x60>
 8010f8c:	eeb1 6b46 	vneg.f64	d6, d6
 8010f90:	ed84 6b00 	vstr	d6, [r4]
 8010f94:	eeb1 7b47 	vneg.f64	d7, d7
 8010f98:	4240      	negs	r0, r0
 8010f9a:	ed84 7b02 	vstr	d7, [r4, #8]
 8010f9e:	e77b      	b.n	8010e98 <__ieee754_rem_pio2+0x60>
 8010fa0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011088 <__ieee754_rem_pio2+0x250>
 8010fa4:	eeb0 0b46 	vmov.f64	d0, d6
 8010fa8:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010fac:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010fb0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011090 <__ieee754_rem_pio2+0x258>
 8010fb4:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010fb8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010fbc:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010fc0:	e7b2      	b.n	8010f28 <__ieee754_rem_pio2+0xf0>
 8010fc2:	4b3b      	ldr	r3, [pc, #236]	; (80110b0 <__ieee754_rem_pio2+0x278>)
 8010fc4:	429e      	cmp	r6, r3
 8010fc6:	dd06      	ble.n	8010fd6 <__ieee754_rem_pio2+0x19e>
 8010fc8:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010fcc:	ed80 7b02 	vstr	d7, [r0, #8]
 8010fd0:	ed80 7b00 	vstr	d7, [r0]
 8010fd4:	e742      	b.n	8010e5c <__ieee754_rem_pio2+0x24>
 8010fd6:	1532      	asrs	r2, r6, #20
 8010fd8:	ee10 0a10 	vmov	r0, s0
 8010fdc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010fe0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010fe4:	ec41 0b17 	vmov	d7, r0, r1
 8010fe8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010fec:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011098 <__ieee754_rem_pio2+0x260>
 8010ff0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010ff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ff8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010ffc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011000:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011004:	a902      	add	r1, sp, #8
 8011006:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801100a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801100e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011012:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011016:	ed8d 7b06 	vstr	d7, [sp, #24]
 801101a:	2603      	movs	r6, #3
 801101c:	4608      	mov	r0, r1
 801101e:	ed91 7b04 	vldr	d7, [r1, #16]
 8011022:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102a:	4633      	mov	r3, r6
 801102c:	f1a1 0108 	sub.w	r1, r1, #8
 8011030:	f106 36ff 	add.w	r6, r6, #4294967295
 8011034:	d0f3      	beq.n	801101e <__ieee754_rem_pio2+0x1e6>
 8011036:	491f      	ldr	r1, [pc, #124]	; (80110b4 <__ieee754_rem_pio2+0x27c>)
 8011038:	9101      	str	r1, [sp, #4]
 801103a:	2102      	movs	r1, #2
 801103c:	9100      	str	r1, [sp, #0]
 801103e:	4621      	mov	r1, r4
 8011040:	f000 f8a6 	bl	8011190 <__kernel_rem_pio2>
 8011044:	2d00      	cmp	r5, #0
 8011046:	f6bf af27 	bge.w	8010e98 <__ieee754_rem_pio2+0x60>
 801104a:	ed94 7b00 	vldr	d7, [r4]
 801104e:	eeb1 7b47 	vneg.f64	d7, d7
 8011052:	ed84 7b00 	vstr	d7, [r4]
 8011056:	ed94 7b02 	vldr	d7, [r4, #8]
 801105a:	e79b      	b.n	8010f94 <__ieee754_rem_pio2+0x15c>
 801105c:	f3af 8000 	nop.w
 8011060:	54400000 	.word	0x54400000
 8011064:	3ff921fb 	.word	0x3ff921fb
 8011068:	1a626331 	.word	0x1a626331
 801106c:	3dd0b461 	.word	0x3dd0b461
 8011070:	1a600000 	.word	0x1a600000
 8011074:	3dd0b461 	.word	0x3dd0b461
 8011078:	2e037073 	.word	0x2e037073
 801107c:	3ba3198a 	.word	0x3ba3198a
 8011080:	6dc9c883 	.word	0x6dc9c883
 8011084:	3fe45f30 	.word	0x3fe45f30
 8011088:	2e000000 	.word	0x2e000000
 801108c:	3ba3198a 	.word	0x3ba3198a
 8011090:	252049c1 	.word	0x252049c1
 8011094:	397b839a 	.word	0x397b839a
 8011098:	00000000 	.word	0x00000000
 801109c:	41700000 	.word	0x41700000
 80110a0:	3fe921fb 	.word	0x3fe921fb
 80110a4:	4002d97b 	.word	0x4002d97b
 80110a8:	413921fb 	.word	0x413921fb
 80110ac:	08011a08 	.word	0x08011a08
 80110b0:	7fefffff 	.word	0x7fefffff
 80110b4:	08011a88 	.word	0x08011a88

080110b8 <__kernel_cos>:
 80110b8:	ee10 1a90 	vmov	r1, s1
 80110bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80110c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80110c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80110c8:	da05      	bge.n	80110d6 <__kernel_cos+0x1e>
 80110ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80110ce:	ee17 3a90 	vmov	r3, s15
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d03d      	beq.n	8011152 <__kernel_cos+0x9a>
 80110d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80110da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011158 <__kernel_cos+0xa0>
 80110de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011160 <__kernel_cos+0xa8>
 80110e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80110e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011168 <__kernel_cos+0xb0>
 80110ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 80110ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011170 <__kernel_cos+0xb8>
 80110f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80110f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011178 <__kernel_cos+0xc0>
 80110fa:	4b23      	ldr	r3, [pc, #140]	; (8011188 <__kernel_cos+0xd0>)
 80110fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011100:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011180 <__kernel_cos+0xc8>
 8011104:	4299      	cmp	r1, r3
 8011106:	eea7 6b03 	vfma.f64	d6, d7, d3
 801110a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801110e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8011112:	ee23 7b07 	vmul.f64	d7, d3, d7
 8011116:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801111a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801111e:	dc04      	bgt.n	801112a <__kernel_cos+0x72>
 8011120:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011124:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011128:	4770      	bx	lr
 801112a:	4b18      	ldr	r3, [pc, #96]	; (801118c <__kernel_cos+0xd4>)
 801112c:	4299      	cmp	r1, r3
 801112e:	dc0d      	bgt.n	801114c <__kernel_cos+0x94>
 8011130:	2200      	movs	r2, #0
 8011132:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011136:	ec43 2b15 	vmov	d5, r2, r3
 801113a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801113e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011142:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011146:	ee30 0b47 	vsub.f64	d0, d0, d7
 801114a:	4770      	bx	lr
 801114c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011150:	e7f3      	b.n	801113a <__kernel_cos+0x82>
 8011152:	eeb0 0b44 	vmov.f64	d0, d4
 8011156:	4770      	bx	lr
 8011158:	be8838d4 	.word	0xbe8838d4
 801115c:	bda8fae9 	.word	0xbda8fae9
 8011160:	bdb4b1c4 	.word	0xbdb4b1c4
 8011164:	3e21ee9e 	.word	0x3e21ee9e
 8011168:	809c52ad 	.word	0x809c52ad
 801116c:	be927e4f 	.word	0xbe927e4f
 8011170:	19cb1590 	.word	0x19cb1590
 8011174:	3efa01a0 	.word	0x3efa01a0
 8011178:	16c15177 	.word	0x16c15177
 801117c:	bf56c16c 	.word	0xbf56c16c
 8011180:	5555554c 	.word	0x5555554c
 8011184:	3fa55555 	.word	0x3fa55555
 8011188:	3fd33332 	.word	0x3fd33332
 801118c:	3fe90000 	.word	0x3fe90000

08011190 <__kernel_rem_pio2>:
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	ed2d 8b06 	vpush	{d8-d10}
 8011198:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801119c:	469b      	mov	fp, r3
 801119e:	460f      	mov	r7, r1
 80111a0:	4bcf      	ldr	r3, [pc, #828]	; (80114e0 <__kernel_rem_pio2+0x350>)
 80111a2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80111a4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80111a8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80111ac:	9000      	str	r0, [sp, #0]
 80111ae:	f112 0f14 	cmn.w	r2, #20
 80111b2:	bfa8      	it	ge
 80111b4:	2318      	movge	r3, #24
 80111b6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80111ba:	bfb8      	it	lt
 80111bc:	2300      	movlt	r3, #0
 80111be:	f06f 0417 	mvn.w	r4, #23
 80111c2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80114c8 <__kernel_rem_pio2+0x338>
 80111c6:	bfa4      	itt	ge
 80111c8:	f1a2 0a03 	subge.w	sl, r2, #3
 80111cc:	fb9a f3f3 	sdivge	r3, sl, r3
 80111d0:	fb03 4404 	mla	r4, r3, r4, r4
 80111d4:	1a5d      	subs	r5, r3, r1
 80111d6:	4414      	add	r4, r2
 80111d8:	eb09 0601 	add.w	r6, r9, r1
 80111dc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80111e0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80111e4:	2200      	movs	r2, #0
 80111e6:	42b2      	cmp	r2, r6
 80111e8:	dd12      	ble.n	8011210 <__kernel_rem_pio2+0x80>
 80111ea:	aa18      	add	r2, sp, #96	; 0x60
 80111ec:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80111f0:	460e      	mov	r6, r1
 80111f2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80111f6:	f1cb 0a01 	rsb	sl, fp, #1
 80111fa:	eb0a 0006 	add.w	r0, sl, r6
 80111fe:	4581      	cmp	r9, r0
 8011200:	db25      	blt.n	801124e <__kernel_rem_pio2+0xbe>
 8011202:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80114c8 <__kernel_rem_pio2+0x338>
 8011206:	f8dd e000 	ldr.w	lr, [sp]
 801120a:	4615      	mov	r5, r2
 801120c:	2000      	movs	r0, #0
 801120e:	e015      	b.n	801123c <__kernel_rem_pio2+0xac>
 8011210:	42d5      	cmn	r5, r2
 8011212:	d409      	bmi.n	8011228 <__kernel_rem_pio2+0x98>
 8011214:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011218:	ee07 0a90 	vmov	s15, r0
 801121c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011220:	eca8 7b02 	vstmia	r8!, {d7}
 8011224:	3201      	adds	r2, #1
 8011226:	e7de      	b.n	80111e6 <__kernel_rem_pio2+0x56>
 8011228:	eeb0 7b46 	vmov.f64	d7, d6
 801122c:	e7f8      	b.n	8011220 <__kernel_rem_pio2+0x90>
 801122e:	ecbe 5b02 	vldmia	lr!, {d5}
 8011232:	ed95 6b00 	vldr	d6, [r5]
 8011236:	3001      	adds	r0, #1
 8011238:	eea5 7b06 	vfma.f64	d7, d5, d6
 801123c:	4288      	cmp	r0, r1
 801123e:	f1a5 0508 	sub.w	r5, r5, #8
 8011242:	ddf4      	ble.n	801122e <__kernel_rem_pio2+0x9e>
 8011244:	eca8 7b02 	vstmia	r8!, {d7}
 8011248:	3208      	adds	r2, #8
 801124a:	3601      	adds	r6, #1
 801124c:	e7d5      	b.n	80111fa <__kernel_rem_pio2+0x6a>
 801124e:	aa04      	add	r2, sp, #16
 8011250:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80114d0 <__kernel_rem_pio2+0x340>
 8011254:	ed9f aba0 	vldr	d10, [pc, #640]	; 80114d8 <__kernel_rem_pio2+0x348>
 8011258:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801125c:	9201      	str	r2, [sp, #4]
 801125e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8011262:	464e      	mov	r6, r9
 8011264:	ab90      	add	r3, sp, #576	; 0x240
 8011266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801126a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801126e:	ab04      	add	r3, sp, #16
 8011270:	4618      	mov	r0, r3
 8011272:	4632      	mov	r2, r6
 8011274:	2a00      	cmp	r2, #0
 8011276:	dc4e      	bgt.n	8011316 <__kernel_rem_pio2+0x186>
 8011278:	4620      	mov	r0, r4
 801127a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801127e:	f000 fadf 	bl	8011840 <scalbn>
 8011282:	eeb0 8b40 	vmov.f64	d8, d0
 8011286:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801128a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801128e:	f000 fa63 	bl	8011758 <floor>
 8011292:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011296:	eea0 8b47 	vfms.f64	d8, d0, d7
 801129a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801129e:	2c00      	cmp	r4, #0
 80112a0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80112a4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80112a8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80112ac:	ee17 8a90 	vmov	r8, s15
 80112b0:	dd46      	ble.n	8011340 <__kernel_rem_pio2+0x1b0>
 80112b2:	1e70      	subs	r0, r6, #1
 80112b4:	aa04      	add	r2, sp, #16
 80112b6:	f1c4 0c18 	rsb	ip, r4, #24
 80112ba:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80112be:	fa45 f20c 	asr.w	r2, r5, ip
 80112c2:	4490      	add	r8, r2
 80112c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80112c8:	1aad      	subs	r5, r5, r2
 80112ca:	aa04      	add	r2, sp, #16
 80112cc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80112d0:	f1c4 0217 	rsb	r2, r4, #23
 80112d4:	4115      	asrs	r5, r2
 80112d6:	2d00      	cmp	r5, #0
 80112d8:	dd41      	ble.n	801135e <__kernel_rem_pio2+0x1ce>
 80112da:	f04f 0c00 	mov.w	ip, #0
 80112de:	f108 0801 	add.w	r8, r8, #1
 80112e2:	4660      	mov	r0, ip
 80112e4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80112e8:	4566      	cmp	r6, ip
 80112ea:	dc69      	bgt.n	80113c0 <__kernel_rem_pio2+0x230>
 80112ec:	2c00      	cmp	r4, #0
 80112ee:	dd03      	ble.n	80112f8 <__kernel_rem_pio2+0x168>
 80112f0:	2c01      	cmp	r4, #1
 80112f2:	d076      	beq.n	80113e2 <__kernel_rem_pio2+0x252>
 80112f4:	2c02      	cmp	r4, #2
 80112f6:	d07f      	beq.n	80113f8 <__kernel_rem_pio2+0x268>
 80112f8:	2d02      	cmp	r5, #2
 80112fa:	d130      	bne.n	801135e <__kernel_rem_pio2+0x1ce>
 80112fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011300:	ee30 8b48 	vsub.f64	d8, d0, d8
 8011304:	b358      	cbz	r0, 801135e <__kernel_rem_pio2+0x1ce>
 8011306:	4620      	mov	r0, r4
 8011308:	9102      	str	r1, [sp, #8]
 801130a:	f000 fa99 	bl	8011840 <scalbn>
 801130e:	9902      	ldr	r1, [sp, #8]
 8011310:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011314:	e023      	b.n	801135e <__kernel_rem_pio2+0x1ce>
 8011316:	ee20 7b09 	vmul.f64	d7, d0, d9
 801131a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801131e:	3a01      	subs	r2, #1
 8011320:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011324:	ad68      	add	r5, sp, #416	; 0x1a0
 8011326:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801132a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801132e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8011332:	eca0 0a01 	vstmia	r0!, {s0}
 8011336:	ed95 0b00 	vldr	d0, [r5]
 801133a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801133e:	e799      	b.n	8011274 <__kernel_rem_pio2+0xe4>
 8011340:	d105      	bne.n	801134e <__kernel_rem_pio2+0x1be>
 8011342:	1e72      	subs	r2, r6, #1
 8011344:	a804      	add	r0, sp, #16
 8011346:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801134a:	15ed      	asrs	r5, r5, #23
 801134c:	e7c3      	b.n	80112d6 <__kernel_rem_pio2+0x146>
 801134e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011352:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135a:	da2f      	bge.n	80113bc <__kernel_rem_pio2+0x22c>
 801135c:	2500      	movs	r5, #0
 801135e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	f040 8087 	bne.w	8011478 <__kernel_rem_pio2+0x2e8>
 801136a:	1e73      	subs	r3, r6, #1
 801136c:	4618      	mov	r0, r3
 801136e:	f04f 0c00 	mov.w	ip, #0
 8011372:	4548      	cmp	r0, r9
 8011374:	da47      	bge.n	8011406 <__kernel_rem_pio2+0x276>
 8011376:	f1bc 0f00 	cmp.w	ip, #0
 801137a:	d070      	beq.n	801145e <__kernel_rem_pio2+0x2ce>
 801137c:	aa04      	add	r2, sp, #16
 801137e:	3c18      	subs	r4, #24
 8011380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011384:	2a00      	cmp	r2, #0
 8011386:	d075      	beq.n	8011474 <__kernel_rem_pio2+0x2e4>
 8011388:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801138c:	4620      	mov	r0, r4
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	f000 fa56 	bl	8011840 <scalbn>
 8011394:	9b00      	ldr	r3, [sp, #0]
 8011396:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80114d0 <__kernel_rem_pio2+0x340>
 801139a:	461a      	mov	r2, r3
 801139c:	2a00      	cmp	r2, #0
 801139e:	f280 80ac 	bge.w	80114fa <__kernel_rem_pio2+0x36a>
 80113a2:	4619      	mov	r1, r3
 80113a4:	2000      	movs	r0, #0
 80113a6:	2900      	cmp	r1, #0
 80113a8:	f2c0 80cd 	blt.w	8011546 <__kernel_rem_pio2+0x3b6>
 80113ac:	aa68      	add	r2, sp, #416	; 0x1a0
 80113ae:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80113b2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80114c8 <__kernel_rem_pio2+0x338>
 80113b6:	4e4b      	ldr	r6, [pc, #300]	; (80114e4 <__kernel_rem_pio2+0x354>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	e0b8      	b.n	801152e <__kernel_rem_pio2+0x39e>
 80113bc:	2502      	movs	r5, #2
 80113be:	e78c      	b.n	80112da <__kernel_rem_pio2+0x14a>
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	b948      	cbnz	r0, 80113d8 <__kernel_rem_pio2+0x248>
 80113c4:	b11a      	cbz	r2, 80113ce <__kernel_rem_pio2+0x23e>
 80113c6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80113ca:	601a      	str	r2, [r3, #0]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f10c 0c01 	add.w	ip, ip, #1
 80113d2:	3304      	adds	r3, #4
 80113d4:	4610      	mov	r0, r2
 80113d6:	e787      	b.n	80112e8 <__kernel_rem_pio2+0x158>
 80113d8:	ebae 0202 	sub.w	r2, lr, r2
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	4602      	mov	r2, r0
 80113e0:	e7f5      	b.n	80113ce <__kernel_rem_pio2+0x23e>
 80113e2:	1e72      	subs	r2, r6, #1
 80113e4:	ab04      	add	r3, sp, #16
 80113e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80113ee:	f10d 0c10 	add.w	ip, sp, #16
 80113f2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80113f6:	e77f      	b.n	80112f8 <__kernel_rem_pio2+0x168>
 80113f8:	1e72      	subs	r2, r6, #1
 80113fa:	ab04      	add	r3, sp, #16
 80113fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011404:	e7f3      	b.n	80113ee <__kernel_rem_pio2+0x25e>
 8011406:	aa04      	add	r2, sp, #16
 8011408:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801140c:	3801      	subs	r0, #1
 801140e:	ea4c 0c02 	orr.w	ip, ip, r2
 8011412:	e7ae      	b.n	8011372 <__kernel_rem_pio2+0x1e2>
 8011414:	3001      	adds	r0, #1
 8011416:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801141a:	2a00      	cmp	r2, #0
 801141c:	d0fa      	beq.n	8011414 <__kernel_rem_pio2+0x284>
 801141e:	eb06 020b 	add.w	r2, r6, fp
 8011422:	ad18      	add	r5, sp, #96	; 0x60
 8011424:	1c73      	adds	r3, r6, #1
 8011426:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801142a:	4406      	add	r6, r0
 801142c:	429e      	cmp	r6, r3
 801142e:	f6ff af19 	blt.w	8011264 <__kernel_rem_pio2+0xd4>
 8011432:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011436:	9d00      	ldr	r5, [sp, #0]
 8011438:	ee07 0a90 	vmov	s15, r0
 801143c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011440:	2000      	movs	r0, #0
 8011442:	eca2 7b02 	vstmia	r2!, {d7}
 8011446:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80114c8 <__kernel_rem_pio2+0x338>
 801144a:	4694      	mov	ip, r2
 801144c:	4288      	cmp	r0, r1
 801144e:	dd09      	ble.n	8011464 <__kernel_rem_pio2+0x2d4>
 8011450:	a868      	add	r0, sp, #416	; 0x1a0
 8011452:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8011456:	ed80 7b00 	vstr	d7, [r0]
 801145a:	3301      	adds	r3, #1
 801145c:	e7e6      	b.n	801142c <__kernel_rem_pio2+0x29c>
 801145e:	9b01      	ldr	r3, [sp, #4]
 8011460:	2001      	movs	r0, #1
 8011462:	e7d8      	b.n	8011416 <__kernel_rem_pio2+0x286>
 8011464:	ecb5 5b02 	vldmia	r5!, {d5}
 8011468:	ed3c 6b02 	vldmdb	ip!, {d6}
 801146c:	3001      	adds	r0, #1
 801146e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011472:	e7eb      	b.n	801144c <__kernel_rem_pio2+0x2bc>
 8011474:	3b01      	subs	r3, #1
 8011476:	e781      	b.n	801137c <__kernel_rem_pio2+0x1ec>
 8011478:	4260      	negs	r0, r4
 801147a:	eeb0 0b48 	vmov.f64	d0, d8
 801147e:	f000 f9df 	bl	8011840 <scalbn>
 8011482:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80114d8 <__kernel_rem_pio2+0x348>
 8011486:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148e:	db2b      	blt.n	80114e8 <__kernel_rem_pio2+0x358>
 8011490:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80114d0 <__kernel_rem_pio2+0x340>
 8011494:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011498:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801149c:	aa04      	add	r2, sp, #16
 801149e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80114a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80114a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80114aa:	a904      	add	r1, sp, #16
 80114ac:	ee10 3a10 	vmov	r3, s0
 80114b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80114b4:	ee17 2a10 	vmov	r2, s14
 80114b8:	1c73      	adds	r3, r6, #1
 80114ba:	3418      	adds	r4, #24
 80114bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80114c0:	e762      	b.n	8011388 <__kernel_rem_pio2+0x1f8>
 80114c2:	bf00      	nop
 80114c4:	f3af 8000 	nop.w
	...
 80114d4:	3e700000 	.word	0x3e700000
 80114d8:	00000000 	.word	0x00000000
 80114dc:	41700000 	.word	0x41700000
 80114e0:	08011bd0 	.word	0x08011bd0
 80114e4:	08011b90 	.word	0x08011b90
 80114e8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80114ec:	aa04      	add	r2, sp, #16
 80114ee:	ee10 3a10 	vmov	r3, s0
 80114f2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80114f6:	4633      	mov	r3, r6
 80114f8:	e746      	b.n	8011388 <__kernel_rem_pio2+0x1f8>
 80114fa:	a804      	add	r0, sp, #16
 80114fc:	a968      	add	r1, sp, #416	; 0x1a0
 80114fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011502:	9000      	str	r0, [sp, #0]
 8011504:	ee07 0a90 	vmov	s15, r0
 8011508:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801150c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011510:	3a01      	subs	r2, #1
 8011512:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011516:	ee20 0b06 	vmul.f64	d0, d0, d6
 801151a:	ed81 7b00 	vstr	d7, [r1]
 801151e:	e73d      	b.n	801139c <__kernel_rem_pio2+0x20c>
 8011520:	ecb6 5b02 	vldmia	r6!, {d5}
 8011524:	ecb4 6b02 	vldmia	r4!, {d6}
 8011528:	3201      	adds	r2, #1
 801152a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801152e:	454a      	cmp	r2, r9
 8011530:	dc01      	bgt.n	8011536 <__kernel_rem_pio2+0x3a6>
 8011532:	4290      	cmp	r0, r2
 8011534:	daf4      	bge.n	8011520 <__kernel_rem_pio2+0x390>
 8011536:	aa40      	add	r2, sp, #256	; 0x100
 8011538:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801153c:	ed82 7b00 	vstr	d7, [r2]
 8011540:	3901      	subs	r1, #1
 8011542:	3001      	adds	r0, #1
 8011544:	e72f      	b.n	80113a6 <__kernel_rem_pio2+0x216>
 8011546:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011548:	2a02      	cmp	r2, #2
 801154a:	dc0a      	bgt.n	8011562 <__kernel_rem_pio2+0x3d2>
 801154c:	2a00      	cmp	r2, #0
 801154e:	dc5a      	bgt.n	8011606 <__kernel_rem_pio2+0x476>
 8011550:	d039      	beq.n	80115c6 <__kernel_rem_pio2+0x436>
 8011552:	f008 0007 	and.w	r0, r8, #7
 8011556:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 801155a:	ecbd 8b06 	vpop	{d8-d10}
 801155e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011562:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011564:	2a03      	cmp	r2, #3
 8011566:	d1f4      	bne.n	8011552 <__kernel_rem_pio2+0x3c2>
 8011568:	aa40      	add	r2, sp, #256	; 0x100
 801156a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801156e:	4611      	mov	r1, r2
 8011570:	4618      	mov	r0, r3
 8011572:	2800      	cmp	r0, #0
 8011574:	f1a1 0108 	sub.w	r1, r1, #8
 8011578:	dc52      	bgt.n	8011620 <__kernel_rem_pio2+0x490>
 801157a:	4619      	mov	r1, r3
 801157c:	2901      	cmp	r1, #1
 801157e:	f1a2 0208 	sub.w	r2, r2, #8
 8011582:	dc5d      	bgt.n	8011640 <__kernel_rem_pio2+0x4b0>
 8011584:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8011688 <__kernel_rem_pio2+0x4f8>
 8011588:	2b01      	cmp	r3, #1
 801158a:	dc69      	bgt.n	8011660 <__kernel_rem_pio2+0x4d0>
 801158c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8011590:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8011594:	2d00      	cmp	r5, #0
 8011596:	d16c      	bne.n	8011672 <__kernel_rem_pio2+0x4e2>
 8011598:	ed87 5b00 	vstr	d5, [r7]
 801159c:	ed87 6b02 	vstr	d6, [r7, #8]
 80115a0:	ed87 7b04 	vstr	d7, [r7, #16]
 80115a4:	e7d5      	b.n	8011552 <__kernel_rem_pio2+0x3c2>
 80115a6:	aa40      	add	r2, sp, #256	; 0x100
 80115a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80115ac:	ed92 6b00 	vldr	d6, [r2]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	daf5      	bge.n	80115a6 <__kernel_rem_pio2+0x416>
 80115ba:	b10d      	cbz	r5, 80115c0 <__kernel_rem_pio2+0x430>
 80115bc:	eeb1 7b47 	vneg.f64	d7, d7
 80115c0:	ed87 7b00 	vstr	d7, [r7]
 80115c4:	e7c5      	b.n	8011552 <__kernel_rem_pio2+0x3c2>
 80115c6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011688 <__kernel_rem_pio2+0x4f8>
 80115ca:	e7f4      	b.n	80115b6 <__kernel_rem_pio2+0x426>
 80115cc:	a940      	add	r1, sp, #256	; 0x100
 80115ce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80115d2:	ed91 7b00 	vldr	d7, [r1]
 80115d6:	3a01      	subs	r2, #1
 80115d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80115dc:	2a00      	cmp	r2, #0
 80115de:	daf5      	bge.n	80115cc <__kernel_rem_pio2+0x43c>
 80115e0:	b1ad      	cbz	r5, 801160e <__kernel_rem_pio2+0x47e>
 80115e2:	eeb1 7b46 	vneg.f64	d7, d6
 80115e6:	ed87 7b00 	vstr	d7, [r7]
 80115ea:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80115ee:	a942      	add	r1, sp, #264	; 0x108
 80115f0:	2201      	movs	r2, #1
 80115f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115f6:	4293      	cmp	r3, r2
 80115f8:	da0c      	bge.n	8011614 <__kernel_rem_pio2+0x484>
 80115fa:	b10d      	cbz	r5, 8011600 <__kernel_rem_pio2+0x470>
 80115fc:	eeb1 7b47 	vneg.f64	d7, d7
 8011600:	ed87 7b02 	vstr	d7, [r7, #8]
 8011604:	e7a5      	b.n	8011552 <__kernel_rem_pio2+0x3c2>
 8011606:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011688 <__kernel_rem_pio2+0x4f8>
 801160a:	461a      	mov	r2, r3
 801160c:	e7e6      	b.n	80115dc <__kernel_rem_pio2+0x44c>
 801160e:	eeb0 7b46 	vmov.f64	d7, d6
 8011612:	e7e8      	b.n	80115e6 <__kernel_rem_pio2+0x456>
 8011614:	ecb1 6b02 	vldmia	r1!, {d6}
 8011618:	3201      	adds	r2, #1
 801161a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801161e:	e7ea      	b.n	80115f6 <__kernel_rem_pio2+0x466>
 8011620:	ed91 7b00 	vldr	d7, [r1]
 8011624:	ed91 5b02 	vldr	d5, [r1, #8]
 8011628:	3801      	subs	r0, #1
 801162a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801162e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011632:	ed81 6b00 	vstr	d6, [r1]
 8011636:	ee37 7b05 	vadd.f64	d7, d7, d5
 801163a:	ed81 7b02 	vstr	d7, [r1, #8]
 801163e:	e798      	b.n	8011572 <__kernel_rem_pio2+0x3e2>
 8011640:	ed92 7b00 	vldr	d7, [r2]
 8011644:	ed92 5b02 	vldr	d5, [r2, #8]
 8011648:	3901      	subs	r1, #1
 801164a:	ee37 6b05 	vadd.f64	d6, d7, d5
 801164e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011652:	ed82 6b00 	vstr	d6, [r2]
 8011656:	ee37 7b05 	vadd.f64	d7, d7, d5
 801165a:	ed82 7b02 	vstr	d7, [r2, #8]
 801165e:	e78d      	b.n	801157c <__kernel_rem_pio2+0x3ec>
 8011660:	aa40      	add	r2, sp, #256	; 0x100
 8011662:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011666:	ed92 6b00 	vldr	d6, [r2]
 801166a:	3b01      	subs	r3, #1
 801166c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011670:	e78a      	b.n	8011588 <__kernel_rem_pio2+0x3f8>
 8011672:	eeb1 5b45 	vneg.f64	d5, d5
 8011676:	eeb1 6b46 	vneg.f64	d6, d6
 801167a:	ed87 5b00 	vstr	d5, [r7]
 801167e:	eeb1 7b47 	vneg.f64	d7, d7
 8011682:	ed87 6b02 	vstr	d6, [r7, #8]
 8011686:	e78b      	b.n	80115a0 <__kernel_rem_pio2+0x410>
	...

08011690 <__kernel_sin>:
 8011690:	ee10 3a90 	vmov	r3, s1
 8011694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011698:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801169c:	da04      	bge.n	80116a8 <__kernel_sin+0x18>
 801169e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80116a2:	ee17 3a90 	vmov	r3, s15
 80116a6:	b35b      	cbz	r3, 8011700 <__kernel_sin+0x70>
 80116a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80116ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80116b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011708 <__kernel_sin+0x78>
 80116b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011710 <__kernel_sin+0x80>
 80116b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80116bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011718 <__kernel_sin+0x88>
 80116c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80116c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011720 <__kernel_sin+0x90>
 80116c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80116cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011728 <__kernel_sin+0x98>
 80116d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80116d4:	b930      	cbnz	r0, 80116e4 <__kernel_sin+0x54>
 80116d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011730 <__kernel_sin+0xa0>
 80116da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80116de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80116e2:	4770      	bx	lr
 80116e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80116e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80116ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80116f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80116f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011738 <__kernel_sin+0xa8>
 80116f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80116fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	f3af 8000 	nop.w
 8011708:	5acfd57c 	.word	0x5acfd57c
 801170c:	3de5d93a 	.word	0x3de5d93a
 8011710:	8a2b9ceb 	.word	0x8a2b9ceb
 8011714:	be5ae5e6 	.word	0xbe5ae5e6
 8011718:	57b1fe7d 	.word	0x57b1fe7d
 801171c:	3ec71de3 	.word	0x3ec71de3
 8011720:	19c161d5 	.word	0x19c161d5
 8011724:	bf2a01a0 	.word	0xbf2a01a0
 8011728:	1110f8a6 	.word	0x1110f8a6
 801172c:	3f811111 	.word	0x3f811111
 8011730:	55555549 	.word	0x55555549
 8011734:	bfc55555 	.word	0xbfc55555
 8011738:	55555549 	.word	0x55555549
 801173c:	3fc55555 	.word	0x3fc55555

08011740 <fabs>:
 8011740:	ec51 0b10 	vmov	r0, r1, d0
 8011744:	ee10 2a10 	vmov	r2, s0
 8011748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801174c:	ec43 2b10 	vmov	d0, r2, r3
 8011750:	4770      	bx	lr
 8011752:	0000      	movs	r0, r0
 8011754:	0000      	movs	r0, r0
	...

08011758 <floor>:
 8011758:	ee10 1a90 	vmov	r1, s1
 801175c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011760:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011764:	2b13      	cmp	r3, #19
 8011766:	b530      	push	{r4, r5, lr}
 8011768:	ee10 0a10 	vmov	r0, s0
 801176c:	ee10 5a10 	vmov	r5, s0
 8011770:	dc31      	bgt.n	80117d6 <floor+0x7e>
 8011772:	2b00      	cmp	r3, #0
 8011774:	da15      	bge.n	80117a2 <floor+0x4a>
 8011776:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011830 <floor+0xd8>
 801177a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801177e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011786:	dd07      	ble.n	8011798 <floor+0x40>
 8011788:	2900      	cmp	r1, #0
 801178a:	da4e      	bge.n	801182a <floor+0xd2>
 801178c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011790:	4318      	orrs	r0, r3
 8011792:	d001      	beq.n	8011798 <floor+0x40>
 8011794:	4928      	ldr	r1, [pc, #160]	; (8011838 <floor+0xe0>)
 8011796:	2000      	movs	r0, #0
 8011798:	460b      	mov	r3, r1
 801179a:	4602      	mov	r2, r0
 801179c:	ec43 2b10 	vmov	d0, r2, r3
 80117a0:	e020      	b.n	80117e4 <floor+0x8c>
 80117a2:	4a26      	ldr	r2, [pc, #152]	; (801183c <floor+0xe4>)
 80117a4:	411a      	asrs	r2, r3
 80117a6:	ea01 0402 	and.w	r4, r1, r2
 80117aa:	4304      	orrs	r4, r0
 80117ac:	d01a      	beq.n	80117e4 <floor+0x8c>
 80117ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011830 <floor+0xd8>
 80117b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80117b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80117ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117be:	ddeb      	ble.n	8011798 <floor+0x40>
 80117c0:	2900      	cmp	r1, #0
 80117c2:	bfbe      	ittt	lt
 80117c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80117c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80117cc:	18c9      	addlt	r1, r1, r3
 80117ce:	ea21 0102 	bic.w	r1, r1, r2
 80117d2:	2000      	movs	r0, #0
 80117d4:	e7e0      	b.n	8011798 <floor+0x40>
 80117d6:	2b33      	cmp	r3, #51	; 0x33
 80117d8:	dd05      	ble.n	80117e6 <floor+0x8e>
 80117da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117de:	d101      	bne.n	80117e4 <floor+0x8c>
 80117e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80117e4:	bd30      	pop	{r4, r5, pc}
 80117e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80117ea:	f04f 32ff 	mov.w	r2, #4294967295
 80117ee:	40e2      	lsrs	r2, r4
 80117f0:	4202      	tst	r2, r0
 80117f2:	d0f7      	beq.n	80117e4 <floor+0x8c>
 80117f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011830 <floor+0xd8>
 80117f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80117fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	ddc8      	ble.n	8011798 <floor+0x40>
 8011806:	2900      	cmp	r1, #0
 8011808:	da02      	bge.n	8011810 <floor+0xb8>
 801180a:	2b14      	cmp	r3, #20
 801180c:	d103      	bne.n	8011816 <floor+0xbe>
 801180e:	3101      	adds	r1, #1
 8011810:	ea20 0002 	bic.w	r0, r0, r2
 8011814:	e7c0      	b.n	8011798 <floor+0x40>
 8011816:	2401      	movs	r4, #1
 8011818:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801181c:	fa04 f303 	lsl.w	r3, r4, r3
 8011820:	4418      	add	r0, r3
 8011822:	42a8      	cmp	r0, r5
 8011824:	bf38      	it	cc
 8011826:	1909      	addcc	r1, r1, r4
 8011828:	e7f2      	b.n	8011810 <floor+0xb8>
 801182a:	2000      	movs	r0, #0
 801182c:	4601      	mov	r1, r0
 801182e:	e7b3      	b.n	8011798 <floor+0x40>
 8011830:	8800759c 	.word	0x8800759c
 8011834:	7e37e43c 	.word	0x7e37e43c
 8011838:	bff00000 	.word	0xbff00000
 801183c:	000fffff 	.word	0x000fffff

08011840 <scalbn>:
 8011840:	b082      	sub	sp, #8
 8011842:	ed8d 0b00 	vstr	d0, [sp]
 8011846:	9b01      	ldr	r3, [sp, #4]
 8011848:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801184c:	b9a2      	cbnz	r2, 8011878 <scalbn+0x38>
 801184e:	9a00      	ldr	r2, [sp, #0]
 8011850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011854:	4313      	orrs	r3, r2
 8011856:	d03a      	beq.n	80118ce <scalbn+0x8e>
 8011858:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011930 <scalbn+0xf0>
 801185c:	4b40      	ldr	r3, [pc, #256]	; (8011960 <scalbn+0x120>)
 801185e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011862:	4298      	cmp	r0, r3
 8011864:	ed8d 7b00 	vstr	d7, [sp]
 8011868:	da11      	bge.n	801188e <scalbn+0x4e>
 801186a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011938 <scalbn+0xf8>
 801186e:	ed9d 6b00 	vldr	d6, [sp]
 8011872:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011876:	e007      	b.n	8011888 <scalbn+0x48>
 8011878:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801187c:	428a      	cmp	r2, r1
 801187e:	d10a      	bne.n	8011896 <scalbn+0x56>
 8011880:	ed9d 7b00 	vldr	d7, [sp]
 8011884:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011888:	ed8d 7b00 	vstr	d7, [sp]
 801188c:	e01f      	b.n	80118ce <scalbn+0x8e>
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011894:	3a36      	subs	r2, #54	; 0x36
 8011896:	4402      	add	r2, r0
 8011898:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801189c:	428a      	cmp	r2, r1
 801189e:	dd0a      	ble.n	80118b6 <scalbn+0x76>
 80118a0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011940 <scalbn+0x100>
 80118a4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011948 <scalbn+0x108>
 80118a8:	eeb0 6b47 	vmov.f64	d6, d7
 80118ac:	9b01      	ldr	r3, [sp, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80118b4:	e7dd      	b.n	8011872 <scalbn+0x32>
 80118b6:	2a00      	cmp	r2, #0
 80118b8:	dd0d      	ble.n	80118d6 <scalbn+0x96>
 80118ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80118c6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80118ca:	e9cd 0100 	strd	r0, r1, [sp]
 80118ce:	ed9d 0b00 	vldr	d0, [sp]
 80118d2:	b002      	add	sp, #8
 80118d4:	4770      	bx	lr
 80118d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80118da:	da18      	bge.n	801190e <scalbn+0xce>
 80118dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80118e0:	4298      	cmp	r0, r3
 80118e2:	9b01      	ldr	r3, [sp, #4]
 80118e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80118e8:	dd09      	ble.n	80118fe <scalbn+0xbe>
 80118ea:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011940 <scalbn+0x100>
 80118ee:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011948 <scalbn+0x108>
 80118f2:	eeb0 6b47 	vmov.f64	d6, d7
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80118fc:	e7b9      	b.n	8011872 <scalbn+0x32>
 80118fe:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011938 <scalbn+0xf8>
 8011902:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011950 <scalbn+0x110>
 8011906:	eeb0 6b47 	vmov.f64	d6, d7
 801190a:	2b00      	cmp	r3, #0
 801190c:	e7f4      	b.n	80118f8 <scalbn+0xb8>
 801190e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011912:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011916:	3236      	adds	r2, #54	; 0x36
 8011918:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801191c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011920:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011958 <scalbn+0x118>
 8011924:	ec41 0b17 	vmov	d7, r0, r1
 8011928:	e7a3      	b.n	8011872 <scalbn+0x32>
 801192a:	bf00      	nop
 801192c:	f3af 8000 	nop.w
 8011930:	00000000 	.word	0x00000000
 8011934:	43500000 	.word	0x43500000
 8011938:	c2f8f359 	.word	0xc2f8f359
 801193c:	01a56e1f 	.word	0x01a56e1f
 8011940:	8800759c 	.word	0x8800759c
 8011944:	7e37e43c 	.word	0x7e37e43c
 8011948:	8800759c 	.word	0x8800759c
 801194c:	fe37e43c 	.word	0xfe37e43c
 8011950:	c2f8f359 	.word	0xc2f8f359
 8011954:	81a56e1f 	.word	0x81a56e1f
 8011958:	00000000 	.word	0x00000000
 801195c:	3c900000 	.word	0x3c900000
 8011960:	ffff3cb0 	.word	0xffff3cb0

08011964 <_init>:
 8011964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011966:	bf00      	nop
 8011968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801196a:	bc08      	pop	{r3}
 801196c:	469e      	mov	lr, r3
 801196e:	4770      	bx	lr

08011970 <_fini>:
 8011970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011972:	bf00      	nop
 8011974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011976:	bc08      	pop	{r3}
 8011978:	469e      	mov	lr, r3
 801197a:	4770      	bx	lr
