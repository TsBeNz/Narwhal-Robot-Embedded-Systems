
Narwhale_Kinematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116f4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080119c8  080119c8  000219c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011c28  08011c28  00021c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011c30  08011c30  00021c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011c34  08011c34  00021c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000198  24000000  08011c38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000022f4  24000198  08011dd0  00030198  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400248c  08011dd0  0003248c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041d7f  00000000  00000000  000301c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000643c  00000000  00000000  00071f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002220  00000000  00000000  00078388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002028  00000000  00000000  0007a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b9b7  00000000  00000000  0007c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002faca  00000000  00000000  000b7f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017122a  00000000  00000000  000e7a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00258c7b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009520  00000000  00000000  00258cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000198 	.word	0x24000198
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080119ac 	.word	0x080119ac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400019c 	.word	0x2400019c
 800030c:	080119ac 	.word	0x080119ac

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <IVK>:
 *  Created on: Jan 20, 2022
 *      Author: matas manawakul
 */

#include "kinematics.h"
void IVK(float v_x, float v_y, float v_z, float v_pitch, float v_yaw, float *q, float *qv){
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000612:	edc7 0a06 	vstr	s1, [r7, #24]
 8000616:	ed87 1a05 	vstr	s2, [r7, #20]
 800061a:	edc7 1a04 	vstr	s3, [r7, #16]
 800061e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000622:	60b8      	str	r0, [r7, #8]
 8000624:	6079      	str	r1, [r7, #4]
	float c1 = cos(*q);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	edd3 7a00 	vldr	s15, [r3]
 800062c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000630:	eeb0 0b47 	vmov.f64	d0, d7
 8000634:	f010 fb94 	bl	8010d60 <cos>
 8000638:	eeb0 7b40 	vmov.f64	d7, d0
 800063c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000640:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float s1 = sin(*q);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800064e:	eeb0 0b47 	vmov.f64	d0, d7
 8000652:	f010 fbcd 	bl	8010df0 <sin>
 8000656:	eeb0 7b40 	vmov.f64	d7, d0
 800065a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800065e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float c2 = cos(*(q+1));
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3304      	adds	r3, #4
 8000666:	edd3 7a00 	vldr	s15, [r3]
 800066a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800066e:	eeb0 0b47 	vmov.f64	d0, d7
 8000672:	f010 fb75 	bl	8010d60 <cos>
 8000676:	eeb0 7b40 	vmov.f64	d7, d0
 800067a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800067e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float s2 = sin(*(q+1));
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3304      	adds	r3, #4
 8000686:	edd3 7a00 	vldr	s15, [r3]
 800068a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800068e:	eeb0 0b47 	vmov.f64	d0, d7
 8000692:	f010 fbad 	bl	8010df0 <sin>
 8000696:	eeb0 7b40 	vmov.f64	d7, d0
 800069a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800069e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float c23 = cos(*(q+1)+*(q+2));
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3304      	adds	r3, #4
 80006a6:	ed93 7a00 	vldr	s14, [r3]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	3308      	adds	r3, #8
 80006ae:	edd3 7a00 	vldr	s15, [r3]
 80006b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ba:	eeb0 0b47 	vmov.f64	d0, d7
 80006be:	f010 fb4f 	bl	8010d60 <cos>
 80006c2:	eeb0 7b40 	vmov.f64	d7, d0
 80006c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float s23 = sin(*(q+1)+*(q+2));
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3304      	adds	r3, #4
 80006d2:	ed93 7a00 	vldr	s14, [r3]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3308      	adds	r3, #8
 80006da:	edd3 7a00 	vldr	s15, [r3]
 80006de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006e6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ea:	f010 fb81 	bl	8010df0 <sin>
 80006ee:	eeb0 7b40 	vmov.f64	d7, d0
 80006f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float c234 = cos(*(q+1)+*(q+2)+*(q+3));
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3304      	adds	r3, #4
 80006fe:	ed93 7a00 	vldr	s14, [r3]
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	3308      	adds	r3, #8
 8000706:	edd3 7a00 	vldr	s15, [r3]
 800070a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	330c      	adds	r3, #12
 8000712:	edd3 7a00 	vldr	s15, [r3]
 8000716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800071a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f010 fb1d 	bl	8010d60 <cos>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float s234 = sin(*(q+1)+*(q+2)+*(q+3));
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	3304      	adds	r3, #4
 8000736:	ed93 7a00 	vldr	s14, [r3]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3308      	adds	r3, #8
 800073e:	edd3 7a00 	vldr	s15, [r3]
 8000742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	330c      	adds	r3, #12
 800074a:	edd3 7a00 	vldr	s15, [r3]
 800074e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000756:	eeb0 0b47 	vmov.f64	d0, d7
 800075a:	f010 fb49 	bl	8010df0 <sin>
 800075e:	eeb0 7b40 	vmov.f64	d7, d0
 8000762:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000766:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float l2c23 = l2*c23;
 800076a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800076e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80009e0 <IVK+0x3d8>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float l2s23 = l2*s23;
 800077a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800077e:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80009e0 <IVK+0x3d8>
 8000782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000786:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float l3c234 = l3*c234;
 800078a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800078e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80009e4 <IVK+0x3dc>
 8000792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000796:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float l3s234 = l3*s234;
 800079a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800079e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80009e4 <IVK+0x3dc>
 80007a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a6:	edc7 7a08 	vstr	s15, [r7, #32]
	*qv = -v_y-v_z-v_pitch;
 80007aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80007ae:	eeb1 7a67 	vneg.f32	s14, s15
 80007b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	edc3 7a00 	vstr	s15, [r3]
	*(qv+1) = v_yaw;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3304      	adds	r3, #4
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	601a      	str	r2, [r3, #0]
	*(qv+2) = v_pitch*l3c234*c1 - v_y*(c1*(l2s23 + h2*c2) - l3c234*c1) - v_z*c1*(l2s23 - l3c234) - v_x*(s1*(l1 + l2c23 - h2*s2) + l3s234*s1);
 80007d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80007d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80007d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80007e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80007e8:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80009e0 <IVK+0x3d8>
 80007ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80007f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80007f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80007f8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80007fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000800:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8000804:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000808:	ee66 7a27 	vmul.f32	s15, s12, s15
 800080c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000810:	edd7 7a06 	vldr	s15, [r7, #24]
 8000814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800081c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000820:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000828:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800082c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000830:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800083c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000840:	edd7 7a07 	vldr	s15, [r7, #28]
 8000844:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000850:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000858:	ed9f 3b5f 	vldr	d3, [pc, #380]	; 80009d8 <IVK+0x3d0>
 800085c:	ee37 3b03 	vadd.f64	d3, d7, d3
 8000860:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000864:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80009e0 <IVK+0x3d8>
 8000868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000870:	ee33 7b47 	vsub.f64	d7, d3, d7
 8000874:	ee24 4b07 	vmul.f64	d4, d4, d7
 8000878:	ed97 7a08 	vldr	s14, [r7, #32]
 800087c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000884:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000888:	ee34 7b07 	vadd.f64	d7, d4, d7
 800088c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000890:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3308      	adds	r3, #8
 8000898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089c:	edc3 7a00 	vstr	s15, [r3]
	*(qv+3) = v_x*(c1*(l1 + l2c23 - h2*s2) + l3s234*c1) - v_y*(s1*(l2s23 + h2*c2) - l3c234*s1) - v_z*s1*(l2s23 - l3c234) + v_pitch*l3c234*s1;
 80008a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80008a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80008ac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80008b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80008b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008b8:	ed9f 4b47 	vldr	d4, [pc, #284]	; 80009d8 <IVK+0x3d0>
 80008bc:	ee37 4b04 	vadd.f64	d4, d7, d4
 80008c0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80008c4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80009e0 <IVK+0x3d8>
 80008c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	ee34 7b47 	vsub.f64	d7, d4, d7
 80008d4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80008d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80008dc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80008ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008f4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80009e0 <IVK+0x3d8>
 80008f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000904:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800090c:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8000910:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000914:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800091c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000928:	ee36 6b47 	vsub.f64	d6, d6, d7
 800092c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000930:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000938:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800093c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000940:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000948:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800094c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000950:	ed97 7a04 	vldr	s14, [r7, #16]
 8000954:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800095c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	330c      	adds	r3, #12
 8000970:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000974:	edc3 7a00 	vstr	s15, [r3]
	*(qv+4) = v_y*(l2c23 - h2*s2 + l3s234) + v_z*(l2c23 + l3s234) + (v_pitch*l3s234);
 8000978:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800097c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80009e0 <IVK+0x3d8>
 8000980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000984:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800098c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000994:	edd7 7a06 	vldr	s15, [r7, #24]
 8000998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800099c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80009a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80009a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80009a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80009ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80009b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80009bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3310      	adds	r3, #16
 80009c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c8:	edc3 7a00 	vstr	s15, [r3]
}
 80009cc:	bf00      	nop
 80009ce:	3750      	adds	r7, #80	; 0x50
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	f3af 8000 	nop.w
 80009d8:	5c28f5c3 	.word	0x5c28f5c3
 80009dc:	4034028f 	.word	0x4034028f
 80009e0:	43be0000 	.word	0x43be0000
 80009e4:	436b0000 	.word	0x436b0000

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t timer1;
	v_x = 0.000023997;
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <main+0xd0>)
 80009ee:	4a33      	ldr	r2, [pc, #204]	; (8000abc <main+0xd4>)
 80009f0:	601a      	str	r2, [r3, #0]
	v_y = 0;
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <main+0xd8>)
 80009f4:	f04f 0200 	mov.w	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
	v_z = -0.000038637;
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <main+0xdc>)
 80009fc:	4a32      	ldr	r2, [pc, #200]	; (8000ac8 <main+0xe0>)
 80009fe:	601a      	str	r2, [r3, #0]
	v_pitch = 0;
 8000a00:	4b32      	ldr	r3, [pc, #200]	; (8000acc <main+0xe4>)
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
	v_yaw = 0;
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <main+0xe8>)
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f001 ffc0 	bl	8002994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f862 	bl	8000adc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a18:	f000 f8da 	bl	8000bd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f001 f854 	bl	8001ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a20:	f001 f832 	bl	8001a88 <MX_DMA_Init>
  MX_ADC3_Init();
 8000a24:	f000 f908 	bl	8000c38 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000a28:	f000 fa92 	bl	8000f50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a2c:	f000 fb3e 	bl	80010ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a30:	f000 fb92 	bl	8001158 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a34:	f000 fbe6 	bl	8001204 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a38:	f000 fc72 	bl	8001320 <MX_TIM8_Init>
  MX_TIM13_Init();
 8000a3c:	f000 fcca 	bl	80013d4 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000a40:	f000 fd18 	bl	8001474 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000a44:	f000 fd66 	bl	8001514 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000a48:	f000 fdec 	bl	8001624 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a4c:	f000 fe66 	bl	800171c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000a50:	f000 ff80 	bl	8001954 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a54:	f000 ffcc 	bl	80019f0 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8000a58:	f000 f9cc 	bl	8000df4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000a5c:	f000 fa22 	bl	8000ea4 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000a60:	f000 fad0 	bl	8001004 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000a64:	f000 f986 	bl	8000d74 <MX_I2C2_Init>
  MX_CRC_Init();
 8000a68:	f000 f958 	bl	8000d1c <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000a6c:	f00f fc5e 	bl	801032c <MX_USB_DEVICE_Init>
  MX_TIM24_Init();
 8000a70:	f000 ff20 	bl	80018b4 <MX_TIM24_Init>
  MX_TIM23_Init();
 8000a74:	f000 fece 	bl	8001814 <MX_TIM23_Init>
  MX_TIM6_Init();
 8000a78:	f000 fc1a 	bl	80012b0 <MX_TIM6_Init>
//		if (HAL_GetTick() - timer1 > 1000) { gettick จะนับไปเรื่อย
//			timer1 = HAL_GetTick(); keep count ตอนนั้นไว้ที่ timer1
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
//		}
//		float a = cos(3.14);
		IVK(v_x, v_y, v_z, v_pitch, v_yaw, q, qv);
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <main+0xd0>)
 8000a7e:	edd3 7a00 	vldr	s15, [r3]
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <main+0xd8>)
 8000a84:	ed93 7a00 	vldr	s14, [r3]
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <main+0xdc>)
 8000a8a:	edd3 6a00 	vldr	s13, [r3]
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <main+0xe4>)
 8000a90:	ed93 6a00 	vldr	s12, [r3]
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <main+0xe8>)
 8000a96:	edd3 5a00 	vldr	s11, [r3]
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <main+0xec>)
 8000a9c:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <main+0xf0>)
 8000a9e:	eeb0 2a65 	vmov.f32	s4, s11
 8000aa2:	eef0 1a46 	vmov.f32	s3, s12
 8000aa6:	eeb0 1a66 	vmov.f32	s2, s13
 8000aaa:	eef0 0a47 	vmov.f32	s1, s14
 8000aae:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab2:	f7ff fda9 	bl	8000608 <IVK>
 8000ab6:	e7e1      	b.n	8000a7c <main+0x94>
 8000ab8:	24000620 	.word	0x24000620
 8000abc:	37c94d2a 	.word	0x37c94d2a
 8000ac0:	240009e0 	.word	0x240009e0
 8000ac4:	24000424 	.word	0x24000424
 8000ac8:	b8220e2a 	.word	0xb8220e2a
 8000acc:	24000670 	.word	0x24000670
 8000ad0:	240009e4 	.word	0x240009e4
 8000ad4:	24000428 	.word	0x24000428
 8000ad8:	24000000 	.word	0x24000000

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09c      	sub	sp, #112	; 0x70
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	224c      	movs	r2, #76	; 0x4c
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f010 f930 	bl	8010d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f010 f92a 	bl	8010d50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000afc:	2002      	movs	r0, #2
 8000afe:	f007 f8b9 	bl	8007c74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <SystemClock_Config+0xec>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <SystemClock_Config+0xec>)
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <SystemClock_Config+0xec>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b1e:	bf00      	nop
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemClock_Config+0xec>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b2c:	d1f8      	bne.n	8000b20 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SystemClock_Config+0xf0>)
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	f023 0303 	bic.w	r3, r3, #3
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <SystemClock_Config+0xf0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b3e:	2321      	movs	r3, #33	; 0x21
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b50:	2302      	movs	r3, #2
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b58:	232c      	movs	r3, #44	; 0x2c
 8000b5a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f007 f8c5 	bl	8007d08 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b84:	f001 f886 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	233f      	movs	r3, #63	; 0x3f
 8000b8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b94:	2308      	movs	r3, #8
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b98:	2340      	movs	r3, #64	; 0x40
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b9c:	2340      	movs	r3, #64	; 0x40
 8000b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2103      	movs	r1, #3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 fc56 	bl	8008460 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000bba:	f001 f86b 	bl	8001c94 <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3770      	adds	r7, #112	; 0x70
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024800 	.word	0x58024800
 8000bcc:	58024400 	.word	0x58024400

08000bd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0ae      	sub	sp, #184	; 0xb8
 8000bd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	22b4      	movs	r2, #180	; 0xb4
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f010 f8b7 	bl	8010d50 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <PeriphCommonClock_Config+0x64>)
 8000be4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bea:	2310      	movs	r3, #16
 8000bec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bfa:	23c0      	movs	r3, #192	; 0xc0
 8000bfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8000c10:	2308      	movs	r3, #8
 8000c12:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f007 ffab 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000c28:	f001 f834 	bl	8001c94 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	37b8      	adds	r7, #184	; 0xb8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	00082003 	.word	0x00082003

08000c38 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2224      	movs	r2, #36	; 0x24
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f010 f883 	bl	8010d50 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c4c:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <MX_ADC3_Init+0xdc>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c52:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c56:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cb8:	4815      	ldr	r0, [pc, #84]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000cba:	f002 f9bf 	bl	800303c <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000cc4:	f000 ffe6 	bl	8001c94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_ADC3_Init+0xe0>)
 8000cca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_ADC3_Init+0xd8>)
 8000cf8:	f002 fe00 	bl	80038fc <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000d02:	f000 ffc7 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	24000794 	.word	0x24000794
 8000d14:	58026000 	.word	0x58026000
 8000d18:	c7520000 	.word	0xc7520000

08000d1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <MX_CRC_Init+0x54>)
 8000d24:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d34:	221d      	movs	r2, #29
 8000d36:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d40:	22c4      	movs	r2, #196	; 0xc4
 8000d42:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_CRC_Init+0x50>)
 8000d58:	f003 fd2a 	bl	80047b0 <HAL_CRC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000d62:	f000 ff97 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240005b0 	.word	0x240005b0
 8000d70:	58024c00 	.word	0x58024c00

08000d74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_I2C2_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <MX_I2C2_Init+0x7c>)
 8000d82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000db0:	f005 fc6a 	bl	8006688 <HAL_I2C_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dba:	f000 ff6b 	bl	8001c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000dc2:	f005 fcf1 	bl	80067a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dcc:	f000 ff62 	bl	8001c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_I2C2_Init+0x74>)
 8000dd4:	f005 fd33 	bl	800683e <HAL_I2CEx_ConfigDigitalFilter>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 ff59 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	240005d4 	.word	0x240005d4
 8000dec:	40005800 	.word	0x40005800
 8000df0:	60404e72 	.word	0x60404e72

08000df4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000dfa:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <MX_SPI3_Init+0xac>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e0e:	2207      	movs	r2, #7
 8000e10:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e2a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e44:	221d      	movs	r2, #29
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_SPI3_Init+0xa8>)
 8000e88:	f009 ff08 	bl	800ac9c <HAL_SPI_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000e92:	f000 feff 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2400070c 	.word	0x2400070c
 8000ea0:	40003c00 	.word	0x40003c00

08000ea4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <MX_SPI4_Init+0xa8>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000eb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ed0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ed4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ed8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000edc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000ef8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_SPI4_Init+0xa4>)
 8000f36:	f009 feb1 	bl	800ac9c <HAL_SPI_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000f40:	f000 fea8 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000958 	.word	0x24000958
 8000f4c:	40013400 	.word	0x40013400

08000f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2224      	movs	r2, #36	; 0x24
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00f fef6 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_TIM1_Init+0xb0>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16383;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f82:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000f86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000fc6:	f00a f839 	bl	800b03c <HAL_TIM_Encoder_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fd0:	f000 fe60 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM1_Init+0xac>)
 8000fe6:	f00a fef5 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff0:	f000 fe50 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	24000a34 	.word	0x24000a34
 8001000:	40010000 	.word	0x40010000

08001004 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2224      	movs	r2, #36	; 0x24
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00f fe9c 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_TIM2_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001038:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800103c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800104a:	2303      	movs	r3, #3
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001052:	2301      	movs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001062:	2301      	movs	r3, #1
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001076:	f009 ffe1 	bl	800b03c <HAL_TIM_Encoder_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001080:	f000 fe08 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0xa4>)
 8001092:	f00a fe9f 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800109c:	f000 fdfa 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	; 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24000a80 	.word	0x24000a80

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2224      	movs	r2, #36	; 0x24
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00f fe48 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <MX_TIM3_Init+0xa8>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010de:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80010e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_TIM3_Init+0xa4>)
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010f0:	2303      	movs	r3, #3
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001108:	2301      	movs	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001110:	230a      	movs	r3, #10
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM3_Init+0xa4>)
 800111c:	f009 ff8e 	bl	800b03c <HAL_TIM_Encoder_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001126:	f000 fdb5 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM3_Init+0xa4>)
 8001138:	f00a fe4c 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001142:	f000 fda7 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240006c0 	.word	0x240006c0
 8001154:	40000400 	.word	0x40000400

08001158 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f00f fdf2 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_TIM4_Init+0xa4>)
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <MX_TIM4_Init+0xa8>)
 800117a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_TIM4_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_TIM4_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_TIM4_Init+0xa4>)
 800118a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800118e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM4_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM4_Init+0xa4>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800119c:	2303      	movs	r3, #3
 800119e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_TIM4_Init+0xa4>)
 80011c8:	f009 ff38 	bl	800b03c <HAL_TIM_Encoder_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011d2:	f000 fd5f 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_TIM4_Init+0xa4>)
 80011e4:	f00a fdf6 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011ee:	f000 fd51 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	24000488 	.word	0x24000488
 8001200:	40000800 	.word	0x40000800

08001204 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	2224      	movs	r2, #36	; 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f00f fd9c 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <MX_TIM5_Init+0xa8>)
 8001226:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_TIM5_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001236:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800123a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_TIM5_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001248:	2303      	movs	r3, #3
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001250:	2301      	movs	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001274:	f009 fee2 	bl	800b03c <HAL_TIM_Encoder_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800127e:	f000 fd09 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MX_TIM5_Init+0xa4>)
 8001290:	f00a fda0 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800129a:	f000 fcfb 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	3730      	adds	r7, #48	; 0x30
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000674 	.word	0x24000674
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_TIM6_Init+0x68>)
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <MX_TIM6_Init+0x6c>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_TIM6_Init+0x68>)
 80012c8:	f44f 7289 	mov.w	r2, #274	; 0x112
 80012cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_TIM6_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_TIM6_Init+0x68>)
 80012d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_TIM6_Init+0x68>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM6_Init+0x68>)
 80012e4:	f009 fdfb 	bl	800aede <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012ee:	f000 fcd1 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM6_Init+0x68>)
 8001300:	f00a fd68 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800130a:	f000 fcc3 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	240009e8 	.word	0x240009e8
 800131c:	40001000 	.word	0x40001000

08001320 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2224      	movs	r2, #36	; 0x24
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f00f fd0e 	bl	8010d50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_TIM8_Init+0xac>)
 8001340:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_TIM8_Init+0xb0>)
 8001342:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_TIM8_Init+0xac>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_TIM8_Init+0xac>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_TIM8_Init+0xac>)
 8001352:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001356:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_TIM8_Init+0xac>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM8_Init+0xac>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_TIM8_Init+0xac>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800136a:	2303      	movs	r3, #3
 800136c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_TIM8_Init+0xac>)
 8001396:	f009 fe51 	bl	800b03c <HAL_TIM_Encoder_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80013a0:	f000 fc78 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM8_Init+0xac>)
 80013b6:	f00a fd0d 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80013c0:	f000 fc68 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400043c 	.word	0x2400043c
 80013d0:	40010400 	.word	0x40010400

080013d4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <MX_TIM13_Init+0x98>)
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <MX_TIM13_Init+0x9c>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM13_Init+0x98>)
 80013f4:	f44f 7289 	mov.w	r2, #274	; 0x112
 80013f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM13_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM13_Init+0x98>)
 8001402:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001406:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM13_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_TIM13_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001414:	4815      	ldr	r0, [pc, #84]	; (800146c <MX_TIM13_Init+0x98>)
 8001416:	f009 fd62 	bl	800aede <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8001420:	f000 fc38 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <MX_TIM13_Init+0x98>)
 8001426:	f009 fdb1 	bl	800af8c <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001430:	f000 fc30 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001438:	f240 13f3 	movw	r3, #499	; 0x1f3
 800143c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM13_Init+0x98>)
 800144e:	f009 fe9b 	bl	800b188 <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001458:	f000 fc1c 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM13_Init+0x98>)
 800145e:	f001 f81d 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2400087c 	.word	0x2400087c
 8001470:	40001c00 	.word	0x40001c00

08001474 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM14_Init+0x98>)
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <MX_TIM14_Init+0x9c>)
 8001490:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM14_Init+0x98>)
 8001494:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001498:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM14_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM14_Init+0x98>)
 80014a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM14_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_TIM14_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014b4:	4815      	ldr	r0, [pc, #84]	; (800150c <MX_TIM14_Init+0x98>)
 80014b6:	f009 fd12 	bl	800aede <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80014c0:	f000 fbe8 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80014c4:	4811      	ldr	r0, [pc, #68]	; (800150c <MX_TIM14_Init+0x98>)
 80014c6:	f009 fd61 	bl	800af8c <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80014d0:	f000 fbe0 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d4:	2360      	movs	r3, #96	; 0x60
 80014d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80014d8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM14_Init+0x98>)
 80014ee:	f009 fe4b 	bl	800b188 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80014f8:	f000 fbcc 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM14_Init+0x98>)
 80014fe:	f000 ffcd 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000b18 	.word	0x24000b18
 8001510:	40002000 	.word	0x40002000

08001514 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b098      	sub	sp, #96	; 0x60
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2234      	movs	r2, #52	; 0x34
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00f fc05 	bl	8010d50 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001546:	4b35      	ldr	r3, [pc, #212]	; (800161c <MX_TIM15_Init+0x108>)
 8001548:	4a35      	ldr	r2, [pc, #212]	; (8001620 <MX_TIM15_Init+0x10c>)
 800154a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <MX_TIM15_Init+0x108>)
 800154e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001552:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <MX_TIM15_Init+0x108>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <MX_TIM15_Init+0x108>)
 800155c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001560:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b2e      	ldr	r3, [pc, #184]	; (800161c <MX_TIM15_Init+0x108>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_TIM15_Init+0x108>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <MX_TIM15_Init+0x108>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001574:	4829      	ldr	r0, [pc, #164]	; (800161c <MX_TIM15_Init+0x108>)
 8001576:	f009 fd09 	bl	800af8c <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 fb88 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800158c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001590:	4619      	mov	r1, r3
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <MX_TIM15_Init+0x108>)
 8001594:	f00a fc1e 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800159e:	f000 fb79 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2000-1;
 80015a6:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM15_Init+0x108>)
 80015ca:	f009 fddd 	bl	800b188 <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80015d4:	f000 fb5e 	bl	8001c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM15_Init+0x108>)
 8001600:	f00a fc84 	bl	800bf0c <HAL_TIMEx_ConfigBreakDeadTime>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800160a:	f000 fb43 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM15_Init+0x108>)
 8001610:	f000 ff44 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3760      	adds	r7, #96	; 0x60
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000564 	.word	0x24000564
 8001620:	40014000 	.word	0x40014000

08001624 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800162a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800163e:	463b      	mov	r3, r7
 8001640:	2234      	movs	r2, #52	; 0x34
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f00f fb83 	bl	8010d50 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MX_TIM16_Init+0xf0>)
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <MX_TIM16_Init+0xf4>)
 800164e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <MX_TIM16_Init+0xf0>)
 8001652:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001656:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_TIM16_Init+0xf0>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <MX_TIM16_Init+0xf0>)
 8001660:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001664:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_TIM16_Init+0xf0>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <MX_TIM16_Init+0xf0>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_TIM16_Init+0xf0>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001678:	4826      	ldr	r0, [pc, #152]	; (8001714 <MX_TIM16_Init+0xf0>)
 800167a:	f009 fc30 	bl	800aede <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001684:	f000 fb06 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001688:	4822      	ldr	r0, [pc, #136]	; (8001714 <MX_TIM16_Init+0xf0>)
 800168a:	f009 fc7f 	bl	800af8c <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001694:	f000 fafe 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800169c:	f240 13f3 	movw	r3, #499	; 0x1f3
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a6:	2300      	movs	r3, #0
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <MX_TIM16_Init+0xf0>)
 80016c0:	f009 fd62 	bl	800b188 <HAL_TIM_PWM_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80016ca:	f000 fae3 	bl	8001c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <MX_TIM16_Init+0xf0>)
 80016f6:	f00a fc09 	bl	800bf0c <HAL_TIMEx_ConfigBreakDeadTime>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8001700:	f000 fac8 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <MX_TIM16_Init+0xf0>)
 8001706:	f000 fec9 	bl	800249c <HAL_TIM_MspPostInit>

}
 800170a:	bf00      	nop
 800170c:	3750      	adds	r7, #80	; 0x50
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	24000b64 	.word	0x24000b64
 8001718:	40014400 	.word	0x40014400

0800171c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2234      	movs	r2, #52	; 0x34
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00f fb07 	bl	8010d50 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <MX_TIM17_Init+0xf0>)
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <MX_TIM17_Init+0xf4>)
 8001746:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <MX_TIM17_Init+0xf0>)
 800174a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800174e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <MX_TIM17_Init+0xf0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <MX_TIM17_Init+0xf0>)
 8001758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800175c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <MX_TIM17_Init+0xf0>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <MX_TIM17_Init+0xf0>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <MX_TIM17_Init+0xf0>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <MX_TIM17_Init+0xf0>)
 8001772:	f009 fbb4 	bl	800aede <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800177c:	f000 fa8a 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001780:	4822      	ldr	r0, [pc, #136]	; (800180c <MX_TIM17_Init+0xf0>)
 8001782:	f009 fc03 	bl	800af8c <HAL_TIM_PWM_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800178c:	f000 fa82 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8001794:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4815      	ldr	r0, [pc, #84]	; (800180c <MX_TIM17_Init+0xf0>)
 80017b8:	f009 fce6 	bl	800b188 <HAL_TIM_PWM_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80017c2:	f000 fa67 	bl	8001c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM17_Init+0xf0>)
 80017ee:	f00a fb8d 	bl	800bf0c <HAL_TIMEx_ConfigBreakDeadTime>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80017f8:	f000 fa4c 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM17_Init+0xf0>)
 80017fe:	f000 fe4d 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000624 	.word	0x24000624
 8001810:	40014800 	.word	0x40014800

08001814 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <MX_TIM23_Init+0x98>)
 8001834:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <MX_TIM23_Init+0x9c>)
 8001836:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_TIM23_Init+0x98>)
 800183a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800183e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_TIM23_Init+0x98>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_TIM23_Init+0x98>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_TIM23_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_TIM23_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <MX_TIM23_Init+0x98>)
 800185c:	f009 fb3f 	bl	800aede <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8001866:	f000 fa15 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	; (80018ac <MX_TIM23_Init+0x98>)
 8001878:	f009 fd9a 	bl	800b3b0 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8001882:	f000 fa07 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_TIM23_Init+0x98>)
 8001894:	f00a fa9e 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800189e:	f000 f9f9 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	24000acc 	.word	0x24000acc
 80018b0:	4000e000 	.word	0x4000e000

080018b4 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <MX_TIM24_Init+0x98>)
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <MX_TIM24_Init+0x9c>)
 80018d6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_TIM24_Init+0x98>)
 80018da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80018de:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_TIM24_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_TIM24_Init+0x98>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_TIM24_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_TIM24_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_TIM24_Init+0x98>)
 80018fc:	f009 faef 	bl	800aede <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8001906:	f000 f9c5 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM24_Init+0x98>)
 8001918:	f009 fd4a 	bl	800b3b0 <HAL_TIM_ConfigClockSource>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8001922:	f000 f9b7 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_TIM24_Init+0x98>)
 8001934:	f00a fa4e 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800193e:	f000 f9a9 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240003d8 	.word	0x240003d8
 8001950:	4000e400 	.word	0x4000e400

08001954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <MX_USART1_UART_Init+0x94>)
 800195c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <MX_USART1_UART_Init+0x98>)
 8001962:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001978:	220c      	movs	r2, #12
 800197a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 800199c:	f00a fb56 	bl	800c04c <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80019a6:	f000 f975 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 80019ae:	f00b fbe9 	bl	800d184 <HAL_UARTEx_SetTxFifoThreshold>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80019b8:	f000 f96c 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 80019c0:	f00b fc1e 	bl	800d200 <HAL_UARTEx_SetRxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80019ca:	f000 f963 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART1_UART_Init+0x90>)
 80019d0:	f00b fb9f 	bl	800d112 <HAL_UARTEx_DisableFifoMode>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80019da:	f000 f95b 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	240008c8 	.word	0x240008c8
 80019e8:	40011000 	.word	0x40011000
 80019ec:	001e8480 	.word	0x001e8480

080019f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 80019f6:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <MX_USART3_UART_Init+0x94>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a3a:	f00a fb07 	bl	800c04c <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a44:	f000 f926 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a4c:	f00b fb9a 	bl	800d184 <HAL_UARTEx_SetTxFifoThreshold>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a56:	f000 f91d 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a5e:	f00b fbcf 	bl	800d200 <HAL_UARTEx_SetRxFifoThreshold>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a68:	f000 f914 	bl	8001c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_USART3_UART_Init+0x90>)
 8001a6e:	f00b fb50 	bl	800d112 <HAL_UARTEx_DisableFifoMode>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f90c 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	240004d4 	.word	0x240004d4
 8001a84:	40004800 	.word	0x40004800

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <MX_DMA_Init+0x3c>)
 8001a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <MX_DMA_Init+0x3c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_DMA_Init+0x3c>)
 8001aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f002 fe48 	bl	8004746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ab6:	200b      	movs	r0, #11
 8001ab8:	f002 fe5f 	bl	800477a <HAL_NVIC_EnableIRQ>

}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024400 	.word	0x58024400

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001afc:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	4a4f      	ldr	r2, [pc, #316]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <MX_GPIO_Init+0x1b4>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b92:	2200      	movs	r2, #0
 8001b94:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001b98:	4839      	ldr	r0, [pc, #228]	; (8001c80 <MX_GPIO_Init+0x1b8>)
 8001b9a:	f004 fd5b 	bl	8006654 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|Griper1_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001ba4:	4837      	ldr	r0, [pc, #220]	; (8001c84 <MX_GPIO_Init+0x1bc>)
 8001ba6:	f004 fd55 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	21c4      	movs	r1, #196	; 0xc4
 8001bae:	4836      	ldr	r0, [pc, #216]	; (8001c88 <MX_GPIO_Init+0x1c0>)
 8001bb0:	f004 fd50 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001bba:	4834      	ldr	r0, [pc, #208]	; (8001c8c <MX_GPIO_Init+0x1c4>)
 8001bbc:	f004 fd4a 	bl	8006654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	213f      	movs	r1, #63	; 0x3f
 8001bc4:	4831      	ldr	r0, [pc, #196]	; (8001c8c <MX_GPIO_Init+0x1c4>)
 8001bc6:	f004 fd45 	bl	8006654 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DIR3_Pin DIR4_Pin DIR5_Pin Output_EN_Pin
                           EMSW2_Pin EMSW3_Pin EMSW4_Pin EERAM_SS_Pin
                           EERAM_HOLD_Pin DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001bca:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001bce:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4827      	ldr	r0, [pc, #156]	; (8001c80 <MX_GPIO_Init+0x1b8>)
 8001be4:	f004 fb8e 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper0_Pin Griper1_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Griper0_Pin|Griper1_Pin|LED2_Pin|LED1_Pin;
 8001be8:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4820      	ldr	r0, [pc, #128]	; (8001c84 <MX_GPIO_Init+0x1bc>)
 8001c02:	f004 fb7f 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper2_Pin EMSW0_Pin */
  GPIO_InitStruct.Pin = Griper2_Pin|EMSW0_Pin;
 8001c06:	2303      	movs	r3, #3
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <MX_GPIO_Init+0x1c0>)
 8001c1c:	f004 fb72 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMSW1_Pin EN45_Pin EN123_Pin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001c20:	23c4      	movs	r3, #196	; 0xc4
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4814      	ldr	r0, [pc, #80]	; (8001c88 <MX_GPIO_Init+0x1c0>)
 8001c38:	f004 fb64 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin SPI3_SS6_Pin SPI3_SS5_Pin
                           SPI3_SS4_Pin SPI3_SS3_Pin SPI3_SS2_Pin SPI3_SS1_Pin
                           SPI3_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001c3c:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001c40:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_GPIO_Init+0x1c4>)
 8001c56:	f004 fb55 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC6I_Pin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4808      	ldr	r0, [pc, #32]	; (8001c90 <MX_GPIO_Init+0x1c8>)
 8001c70:	f004 fb48 	bl	8006304 <HAL_GPIO_Init>

}
 8001c74:	bf00      	nop
 8001c76:	3730      	adds	r7, #48	; 0x30
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58021000 	.word	0x58021000
 8001c84:	58020800 	.word	0x58020800
 8001c88:	58020400 	.word	0x58020400
 8001c8c:	58020c00 	.word	0x58020c00
 8001c90:	58020000 	.word	0x58020000

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_MspInit+0x30>)
 8001ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cac:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x30>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x30>)
 8001cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	58024400 	.word	0x58024400

08001cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <HAL_ADC_MspInit+0xa8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d13d      	bne.n	8001d72 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_ADC_MspInit+0xac>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC1     ------> ADC3_INP11
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = ADC4_Pin|ADC3_Pin;
 8001d32:	2303      	movs	r3, #3
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	480f      	ldr	r0, [pc, #60]	; (8001d84 <HAL_ADC_MspInit+0xb0>)
 8001d46:	f004 fadd 	bl	8006304 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001d4a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001d4e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d52:	f000 fed5 	bl	8002b00 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001d56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001d5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001d5e:	f000 fecf 	bl	8002b00 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	207f      	movs	r0, #127	; 0x7f
 8001d68:	f002 fced 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001d6c:	207f      	movs	r0, #127	; 0x7f
 8001d6e:	f002 fd04 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	58026000 	.word	0x58026000
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020800 	.word	0x58020800

08001d88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <HAL_CRC_MspInit+0x3c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10e      	bne.n	8001db8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_CRC_MspInit+0x40>)
 8001d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_CRC_MspInit+0x40>)
 8001da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_CRC_MspInit+0x40>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	58024c00 	.word	0x58024c00
 8001dc8:	58024400 	.word	0x58024400

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0b6      	sub	sp, #216	; 0xd8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	22b4      	movs	r2, #180	; 0xb4
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f00e ffaf 	bl	8010d50 <memset>
  if(hi2c->Instance==I2C2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <HAL_I2C_MspInit+0xc0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d142      	bne.n	8001e82 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 feb4 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e16:	f7ff ff3d 	bl	8001c94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e52:	2304      	movs	r3, #4
 8001e54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <HAL_I2C_MspInit+0xc8>)
 8001e60:	f004 fa50 	bl	8006304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_I2C_MspInit+0xc4>)
 8001e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	37d8      	adds	r7, #216	; 0xd8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40005800 	.word	0x40005800
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58020400 	.word	0x58020400

08001e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0b8      	sub	sp, #224	; 0xe0
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	22b4      	movs	r2, #180	; 0xb4
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00e ff49 	bl	8010d50 <memset>
  if(hspi->Instance==SPI3)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_SPI_MspInit+0x158>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d156      	bne.n	8001f76 <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001ece:	2319      	movs	r3, #25
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8001ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 fe3b 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001f08:	f7ff fec4 	bl	8001c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f12:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a30      	ldr	r2, [pc, #192]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f62:	2306      	movs	r3, #6
 8001f64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4822      	ldr	r0, [pc, #136]	; (8001ff8 <HAL_SPI_MspInit+0x160>)
 8001f70:	f004 f9c8 	bl	8006304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001f74:	e038      	b.n	8001fe8 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI4)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <HAL_SPI_MspInit+0x164>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d133      	bne.n	8001fe8 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8001fbc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <HAL_SPI_MspInit+0x168>)
 8001fe4:	f004 f98e 	bl	8006304 <HAL_GPIO_Init>
}
 8001fe8:	bf00      	nop
 8001fea:	37e0      	adds	r7, #224	; 0xe0
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40003c00 	.word	0x40003c00
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020800 	.word	0x58020800
 8001ffc:	40013400 	.word	0x40013400
 8002000:	58021000 	.word	0x58021000

08002004 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	; 0x50
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4aad      	ldr	r2, [pc, #692]	; (80022d8 <HAL_TIM_Encoder_MspInit+0x2d4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12f      	bne.n	8002086 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002026:	4bad      	ldr	r3, [pc, #692]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800202c:	4aab      	ldr	r2, [pc, #684]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002036:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4ba5      	ldr	r3, [pc, #660]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204a:	4aa4      	ldr	r2, [pc, #656]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002054:	4ba1      	ldr	r3, [pc, #644]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4A_Pin|ENC4B_Pin;
 8002062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002074:	2301      	movs	r3, #1
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800207c:	4619      	mov	r1, r3
 800207e:	4898      	ldr	r0, [pc, #608]	; (80022e0 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002080:	f004 f940 	bl	8006304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002084:	e123      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d14e      	bne.n	800212e <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002096:	4a91      	ldr	r2, [pc, #580]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020a0:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a89      	ldr	r2, [pc, #548]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b87      	ldr	r3, [pc, #540]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b83      	ldr	r3, [pc, #524]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d2:	4a82      	ldr	r2, [pc, #520]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020dc:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = ENC6A_Pin;
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fc:	2301      	movs	r3, #1
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002104:	4619      	mov	r1, r3
 8002106:	4876      	ldr	r0, [pc, #472]	; (80022e0 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002108:	f004 f8fc 	bl	8006304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC6B_Pin;
 800210c:	2308      	movs	r3, #8
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800211c:	2301      	movs	r3, #1
 800211e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002124:	4619      	mov	r1, r3
 8002126:	486f      	ldr	r0, [pc, #444]	; (80022e4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002128:	f004 f8ec 	bl	8006304 <HAL_GPIO_Init>
}
 800212c:	e0cf      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6d      	ldr	r2, [pc, #436]	; (80022e8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d12e      	bne.n	8002196 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800213a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213e:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002148:	4b64      	ldr	r3, [pc, #400]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800214a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ENC5A_Pin|ENC5B_Pin;
 8002174:	2330      	movs	r3, #48	; 0x30
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002184:	2302      	movs	r3, #2
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800218c:	4619      	mov	r1, r3
 800218e:	4855      	ldr	r0, [pc, #340]	; (80022e4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002190:	f004 f8b8 	bl	8006304 <HAL_GPIO_Init>
}
 8002194:	e09b      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM4)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_TIM_Encoder_MspInit+0x2e8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12f      	bne.n	8002200 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021a0:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a6:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021b0:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	4a45      	ldr	r2, [pc, #276]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80021dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ee:	2302      	movs	r3, #2
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021f6:	4619      	mov	r1, r3
 80021f8:	483d      	ldr	r0, [pc, #244]	; (80022f0 <HAL_TIM_Encoder_MspInit+0x2ec>)
 80021fa:	f004 f883 	bl	8006304 <HAL_GPIO_Init>
}
 80021fe:	e066      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM5)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_TIM_Encoder_MspInit+0x2f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12e      	bne.n	8002268 <HAL_TIM_Encoder_MspInit+0x264>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002210:	4a32      	ldr	r2, [pc, #200]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002246:	2303      	movs	r3, #3
 8002248:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002256:	2302      	movs	r3, #2
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800225e:	4619      	mov	r1, r3
 8002260:	481f      	ldr	r0, [pc, #124]	; (80022e0 <HAL_TIM_Encoder_MspInit+0x2dc>)
 8002262:	f004 f84f 	bl	8006304 <HAL_GPIO_Init>
}
 8002266:	e032      	b.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
  else if(htim_encoder->Instance==TIM8)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_TIM_Encoder_MspInit+0x2f4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12d      	bne.n	80022ce <HAL_TIM_Encoder_MspInit+0x2ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 800227a:	f043 0302 	orr.w	r3, r3, #2
 800227e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_TIM_Encoder_MspInit+0x2d8>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022be:	2303      	movs	r3, #3
 80022c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <HAL_TIM_Encoder_MspInit+0x2f8>)
 80022ca:	f004 f81b 	bl	8006304 <HAL_GPIO_Init>
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	; 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	58024400 	.word	0x58024400
 80022e0:	58020000 	.word	0x58020000
 80022e4:	58020400 	.word	0x58020400
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	58020c00 	.word	0x58020c00
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40010400 	.word	0x40010400
 80022fc:	58020800 	.word	0x58020800

08002300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_TIM_Base_MspInit+0x138>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10f      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002322:	4b46      	ldr	r3, [pc, #280]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8002330:	e07c      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM13)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a42      	ldr	r2, [pc, #264]	; (8002440 <HAL_TIM_Base_MspInit+0x140>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10f      	bne.n	800235c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 800233e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002342:	4a3e      	ldr	r2, [pc, #248]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 800234e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	6a3b      	ldr	r3, [r7, #32]
}
 800235a:	e067      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM14)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a38      	ldr	r2, [pc, #224]	; (8002444 <HAL_TIM_Base_MspInit+0x144>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d10f      	bne.n	8002386 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002366:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800236c:	4a33      	ldr	r2, [pc, #204]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	69fb      	ldr	r3, [r7, #28]
}
 8002384:	e052      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_TIM_Base_MspInit+0x148>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
}
 80023ae:	e03d      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM17)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_TIM_Base_MspInit+0x14c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10f      	bne.n	80023da <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
}
 80023d8:	e028      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM23)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_TIM_Base_MspInit+0x150>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d10f      	bne.n	8002404 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 80023f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
}
 8002402:	e013      	b.n	800242c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM24)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_TIM_Base_MspInit+0x154>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10e      	bne.n	800242c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002410:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_TIM_Base_MspInit+0x13c>)
 8002420:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	bf00      	nop
 800242e:	372c      	adds	r7, #44	; 0x2c
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40001000 	.word	0x40001000
 800243c:	58024400 	.word	0x58024400
 8002440:	40001c00 	.word	0x40001c00
 8002444:	40002000 	.word	0x40002000
 8002448:	40014400 	.word	0x40014400
 800244c:	40014800 	.word	0x40014800
 8002450:	4000e000 	.word	0x4000e000
 8002454:	4000e400 	.word	0x4000e400

08002458 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <HAL_TIM_PWM_MspInit+0x3c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_TIM_PWM_MspInit+0x40>)
 800246c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_TIM_PWM_MspInit+0x40>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_TIM_PWM_MspInit+0x40>)
 800247c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40014000 	.word	0x40014000
 8002498:	58024400 	.word	0x58024400

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <HAL_TIM_MspPostInit+0x194>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d11f      	bne.n	80024fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	4a5b      	ldr	r2, [pc, #364]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ce:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 80024dc:	2340      	movs	r3, #64	; 0x40
 80024de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80024ec:	2309      	movs	r3, #9
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4850      	ldr	r0, [pc, #320]	; (8002638 <HAL_TIM_MspPostInit+0x19c>)
 80024f8:	f003 ff04 	bl	8006304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80024fc:	e094      	b.n	8002628 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_TIM_MspPostInit+0x1a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d11f      	bne.n	8002548 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002536:	2309      	movs	r3, #9
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	483d      	ldr	r0, [pc, #244]	; (8002638 <HAL_TIM_MspPostInit+0x19c>)
 8002542:	f003 fedf 	bl	8006304 <HAL_GPIO_Init>
}
 8002546:	e06f      	b.n	8002628 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM15)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_TIM_MspPostInit+0x1a4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11f      	bne.n	8002592 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 800255a:	f043 0310 	orr.w	r3, r3, #16
 800255e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 8002564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP3_Pin;
 8002570:	2320      	movs	r3, #32
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002580:	2304      	movs	r3, #4
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	482e      	ldr	r0, [pc, #184]	; (8002644 <HAL_TIM_MspPostInit+0x1a8>)
 800258c:	f003 feba 	bl	8006304 <HAL_GPIO_Init>
}
 8002590:	e04a      	b.n	8002628 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM16)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <HAL_TIM_MspPostInit+0x1ac>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d120      	bne.n	80025de <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80025ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	481d      	ldr	r0, [pc, #116]	; (800264c <HAL_TIM_MspPostInit+0x1b0>)
 80025d8:	f003 fe94 	bl	8006304 <HAL_GPIO_Init>
}
 80025dc:	e024      	b.n	8002628 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM17)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_TIM_MspPostInit+0x1b4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d11f      	bne.n	8002628 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_TIM_MspPostInit+0x198>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8002606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002618:	2301      	movs	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	480a      	ldr	r0, [pc, #40]	; (800264c <HAL_TIM_MspPostInit+0x1b0>)
 8002624:	f003 fe6e 	bl	8006304 <HAL_GPIO_Init>
}
 8002628:	bf00      	nop
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40001c00 	.word	0x40001c00
 8002634:	58024400 	.word	0x58024400
 8002638:	58020000 	.word	0x58020000
 800263c:	40002000 	.word	0x40002000
 8002640:	40014000 	.word	0x40014000
 8002644:	58021000 	.word	0x58021000
 8002648:	40014400 	.word	0x40014400
 800264c:	58020400 	.word	0x58020400
 8002650:	40014800 	.word	0x40014800

08002654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_UART_MspInit+0x150>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d15d      	bne.n	8002732 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_UART_MspInit+0x154>)
 8002678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002686:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_UART_MspInit+0x154>)
 8002688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002694:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <HAL_UART_MspInit+0x154>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269a:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_UART_MspInit+0x154>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026c4:	2304      	movs	r3, #4
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	4619      	mov	r1, r3
 80026ce:	4837      	ldr	r0, [pc, #220]	; (80027ac <HAL_UART_MspInit+0x158>)
 80026d0:	f003 fe18 	bl	8006304 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026d6:	4a37      	ldr	r2, [pc, #220]	; (80027b4 <HAL_UART_MspInit+0x160>)
 80026d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026dc:	2229      	movs	r2, #41	; 0x29
 80026de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f4:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 8002702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002706:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002714:	4826      	ldr	r0, [pc, #152]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 8002716:	f002 f935 	bl	8004984 <HAL_DMA_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002720:	f7ff fab8 	bl	8001c94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 8002728:	67da      	str	r2, [r3, #124]	; 0x7c
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_UART_MspInit+0x15c>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002730:	e033      	b.n	800279a <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <HAL_UART_MspInit+0x164>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d12e      	bne.n	800279a <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800273e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002742:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0x154>)
 8002744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800274e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_UART_MspInit+0x154>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_UART_MspInit+0x154>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800278a:	2307      	movs	r3, #7
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_UART_MspInit+0x168>)
 8002796:	f003 fdb5 	bl	8006304 <HAL_GPIO_Init>
}
 800279a:	bf00      	nop
 800279c:	3730      	adds	r7, #48	; 0x30
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40011000 	.word	0x40011000
 80027a8:	58024400 	.word	0x58024400
 80027ac:	58020400 	.word	0x58020400
 80027b0:	24000804 	.word	0x24000804
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40004800 	.word	0x40004800
 80027bc:	58020c00 	.word	0x58020c00

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler+0x4>

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280c:	f000 f934 	bl	8002a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DMA1_Stream0_IRQHandler+0x10>)
 800281a:	f002 fc0d 	bl	8005038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	24000804 	.word	0x24000804

08002828 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <OTG_HS_IRQHandler+0x10>)
 800282e:	f004 f9a9 	bl	8006b84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	24002084 	.word	0x24002084

0800283c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <ADC3_IRQHandler+0x10>)
 8002842:	f000 fe03 	bl	800344c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000794 	.word	0x24000794

08002850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <SystemInit+0xd0>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a31      	ldr	r2, [pc, #196]	; (8002920 <SystemInit+0xd0>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <SystemInit+0xd4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b06      	cmp	r3, #6
 800286e:	d807      	bhi.n	8002880 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <SystemInit+0xd4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 030f 	bic.w	r3, r3, #15
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <SystemInit+0xd4>)
 800287a:	f043 0307 	orr.w	r3, r3, #7
 800287e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <SystemInit+0xd8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a28      	ldr	r2, [pc, #160]	; (8002928 <SystemInit+0xd8>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <SystemInit+0xd8>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <SystemInit+0xd8>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4924      	ldr	r1, [pc, #144]	; (8002928 <SystemInit+0xd8>)
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <SystemInit+0xdc>)
 800289a:	4013      	ands	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <SystemInit+0xd4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <SystemInit+0xd4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 030f 	bic.w	r3, r3, #15
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <SystemInit+0xd4>)
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <SystemInit+0xd8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <SystemInit+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <SystemInit+0xd8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <SystemInit+0xd8>)
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <SystemInit+0xe0>)
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <SystemInit+0xd8>)
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <SystemInit+0xe4>)
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <SystemInit+0xd8>)
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <SystemInit+0xe8>)
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <SystemInit+0xd8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <SystemInit+0xd8>)
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <SystemInit+0xe8>)
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <SystemInit+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <SystemInit+0xd8>)
 80028f2:	4a11      	ldr	r2, [pc, #68]	; (8002938 <SystemInit+0xe8>)
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <SystemInit+0xd8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <SystemInit+0xd8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <SystemInit+0xd8>)
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <SystemInit+0xd8>)
 800290a:	2200      	movs	r2, #0
 800290c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <SystemInit+0xec>)
 8002910:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002914:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	52002000 	.word	0x52002000
 8002928:	58024400 	.word	0x58024400
 800292c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002930:	02020200 	.word	0x02020200
 8002934:	01ff0000 	.word	0x01ff0000
 8002938:	01010280 	.word	0x01010280
 800293c:	52004000 	.word	0x52004000

08002940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002978 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002944:	f7ff ff84 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	; (8002980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	; (800298c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800296e:	f00e f9cb 	bl	8010d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7fe f839 	bl	80009e8 <main>
  bx  lr
 8002976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002978:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800297c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002980:	24000198 	.word	0x24000198
  ldr r2, =_sidata
 8002984:	08011c38 	.word	0x08011c38
  ldr r2, =_sbss
 8002988:	24000198 	.word	0x24000198
  ldr r4, =_ebss
 800298c:	2400248c 	.word	0x2400248c

08002990 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC_IRQHandler>
	...

08002994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	2003      	movs	r0, #3
 800299c:	f001 fec8 	bl	8004730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029a0:	f005 ff14 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_Init+0x68>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	4913      	ldr	r1, [pc, #76]	; (8002a00 <HAL_Init+0x6c>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_Init+0x68>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_Init+0x6c>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <HAL_Init+0x70>)
 80029d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_Init+0x74>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f814 	bl	8002a0c <HAL_InitTick>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e002      	b.n	80029f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ee:	f7ff f957 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024400 	.word	0x58024400
 8002a00:	08011a10 	.word	0x08011a10
 8002a04:	24000018 	.word	0x24000018
 8002a08:	24000014 	.word	0x24000014

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_InitTick+0x60>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e021      	b.n	8002a64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_InitTick+0x64>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_InitTick+0x60>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 fead 	bl	8004796 <HAL_SYSTICK_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00e      	b.n	8002a64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b0f      	cmp	r3, #15
 8002a4a:	d80a      	bhi.n	8002a62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f001 fe77 	bl	8004746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a58:	4a06      	ldr	r2, [pc, #24]	; (8002a74 <HAL_InitTick+0x68>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	24000020 	.word	0x24000020
 8002a70:	24000014 	.word	0x24000014
 8002a74:	2400001c 	.word	0x2400001c

08002a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x24>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4413      	add	r3, r2
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_IncTick+0x24>)
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	24000020 	.word	0x24000020
 8002a9c:	24000bb0 	.word	0x24000bb0

08002aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_GetTick+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	24000bb0 	.word	0x24000bb0

08002ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff ffee 	bl	8002aa0 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
  {
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	24000020 	.word	0x24000020

08002b00 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	58000400 	.word	0x58000400

08002b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <LL_ADC_SetOffset+0x60>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10b      	bne.n	8002bd0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002bce:	e00b      	b.n	8002be8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	58026000 	.word	0x58026000

08002bf8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	461a      	mov	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	611a      	str	r2, [r3, #16]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	58026000 	.word	0x58026000

08002c9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <LL_ADC_SetOffsetSaturation+0x40>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10e      	bne.n	8002cce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3360      	adds	r3, #96	; 0x60
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	58026000 	.word	0x58026000

08002ce0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <LL_ADC_SetOffsetSign+0x40>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10e      	bne.n	8002d12 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	58026000 	.word	0x58026000

08002d24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3360      	adds	r3, #96	; 0x60
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <LL_ADC_SetOffsetState+0x50>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d56:	e007      	b.n	8002d68 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	58026000 	.word	0x58026000

08002d78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3330      	adds	r3, #48	; 0x30
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	4413      	add	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	211f      	movs	r1, #31
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 011f 	and.w	r1, r3, #31
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	0e5b      	lsrs	r3, r3, #25
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	0d1b      	lsrs	r3, r3, #20
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2107      	movs	r1, #7
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	0d1b      	lsrs	r3, r3, #20
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	431a      	orrs	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d115      	bne.n	8002eb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0318 	and.w	r3, r3, #24
 8002e9e:	4914      	ldr	r1, [pc, #80]	; (8002ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ea0:	40d9      	lsrs	r1, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002eb2:	e014      	b.n	8002ede <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0318 	and.w	r3, r3, #24
 8002eca:	4909      	ldr	r1, [pc, #36]	; (8002ef0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ecc:	40d9      	lsrs	r1, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	58026000 	.word	0x58026000
 8002ef0:	000fffff 	.word	0x000fffff

08002ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 031f 	and.w	r3, r3, #31
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6093      	str	r3, [r2, #8]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	5fffffc0 	.word	0x5fffffc0

08002f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <LL_ADC_EnableInternalRegulator+0x24>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	6fffffc0 	.word	0x6fffffc0

08002fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fb4:	d101      	bne.n	8002fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_IsEnabled+0x18>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_IsEnabled+0x1a>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d101      	bne.n	8003006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d101      	bne.n	800302c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1ee      	b.n	8003434 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fe fe35 	bl	8001cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff67 	bl	8002f50 <LL_ADC_IsDeepPowerDownEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff4d 	bl	8002f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff82 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff66 	bl	8002f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ac:	4b8e      	ldr	r3, [pc, #568]	; (80032e8 <HAL_ADC_Init+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	4a8e      	ldr	r2, [pc, #568]	; (80032ec <HAL_ADC_Init+0x2b0>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030be:	e002      	b.n	80030c6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff65 	bl	8002fa0 <LL_ADC_IsInternalRegulatorEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10d      	bne.n	80030f8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff76 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003102:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 8188 	bne.w	8003422 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 8184 	bne.w	8003422 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003122:	f043 0202 	orr.w	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff4a 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d136      	bne.n	80031a8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6c      	ldr	r2, [pc, #432]	; (80032f0 <HAL_ADC_Init+0x2b4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_ADC_Init+0x112>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <HAL_ADC_Init+0x2b8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10e      	bne.n	800316c <HAL_ADC_Init+0x130>
 800314e:	4868      	ldr	r0, [pc, #416]	; (80032f0 <HAL_ADC_Init+0x2b4>)
 8003150:	f7ff ff3a 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003154:	4604      	mov	r4, r0
 8003156:	4867      	ldr	r0, [pc, #412]	; (80032f4 <HAL_ADC_Init+0x2b8>)
 8003158:	f7ff ff36 	bl	8002fc8 <LL_ADC_IsEnabled>
 800315c:	4603      	mov	r3, r0
 800315e:	4323      	orrs	r3, r4
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e008      	b.n	800317e <HAL_ADC_Init+0x142>
 800316c:	4862      	ldr	r0, [pc, #392]	; (80032f8 <HAL_ADC_Init+0x2bc>)
 800316e:	f7ff ff2b 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d012      	beq.n	80031a8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_ADC_Init+0x2b4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_ADC_Init+0x15a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_ADC_Init+0x2b8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_ADC_Init+0x15e>
 8003196:	4a59      	ldr	r2, [pc, #356]	; (80032fc <HAL_ADC_Init+0x2c0>)
 8003198:	e000      	b.n	800319c <HAL_ADC_Init+0x160>
 800319a:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_ADC_Init+0x2c4>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7ff fcc2 	bl	8002b2c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_ADC_Init+0x2bc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d129      	bne.n	8003206 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7e5b      	ldrb	r3, [r3, #25]
 80031b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80031bc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80031c2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d013      	beq.n	80031f4 <HAL_ADC_Init+0x1b8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d00d      	beq.n	80031f0 <HAL_ADC_Init+0x1b4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b1c      	cmp	r3, #28
 80031da:	d007      	beq.n	80031ec <HAL_ADC_Init+0x1b0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b18      	cmp	r3, #24
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_Init+0x1ac>
 80031e4:	2318      	movs	r3, #24
 80031e6:	e006      	b.n	80031f6 <HAL_ADC_Init+0x1ba>
 80031e8:	2300      	movs	r3, #0
 80031ea:	e004      	b.n	80031f6 <HAL_ADC_Init+0x1ba>
 80031ec:	2310      	movs	r3, #16
 80031ee:	e002      	b.n	80031f6 <HAL_ADC_Init+0x1ba>
 80031f0:	2308      	movs	r3, #8
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_Init+0x1ba>
 80031f4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80031f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e00e      	b.n	8003224 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7e5b      	ldrb	r3, [r3, #25]
 800320a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003210:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003216:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	3b01      	subs	r3, #1
 8003234:	045b      	lsls	r3, r3, #17
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <HAL_ADC_Init+0x2bc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d115      	bne.n	800328e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_ADC_Init+0x2c8>)
 800326a:	4013      	ands	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	430b      	orrs	r3, r1
 8003274:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	611a      	str	r2, [r3, #16]
 800328c:	e009      	b.n	80032a2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <HAL_ADC_Init+0x2cc>)
 8003296:	4013      	ands	r3, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	69b9      	ldr	r1, [r7, #24]
 800329e:	430b      	orrs	r3, r1
 80032a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fea1 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 80032ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff feae 	bl	8003014 <LL_ADC_INJ_IsConversionOngoing>
 80032b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 808e 	bne.w	80033de <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 808a 	bne.w	80033de <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_ADC_Init+0x2bc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d11b      	bne.n	800330c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
 80032d8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032e0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	e018      	b.n	800331a <HAL_ADC_Init+0x2de>
 80032e8:	24000014 	.word	0x24000014
 80032ec:	053e2d63 	.word	0x053e2d63
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40022100 	.word	0x40022100
 80032f8:	58026000 	.word	0x58026000
 80032fc:	40022300 	.word	0x40022300
 8003300:	58026300 	.word	0x58026300
 8003304:	fff04007 	.word	0xfff04007
 8003308:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7e1b      	ldrb	r3, [r3, #24]
 8003310:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_ADC_Init+0x400>)
 8003322:	4013      	ands	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003334:	2b01      	cmp	r3, #1
 8003336:	d137      	bne.n	80033a8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3f      	ldr	r2, [pc, #252]	; (8003440 <HAL_ADC_Init+0x404>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d116      	bne.n	8003376 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_ADC_Init+0x408>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003366:	430a      	orrs	r2, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	e020      	b.n	80033b8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_ADC_Init+0x40c>)
 800337e:	4013      	ands	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003384:	3a01      	subs	r2, #1
 8003386:	0411      	lsls	r1, r2, #16
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800338c:	4311      	orrs	r1, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003398:	430a      	orrs	r2, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	611a      	str	r2, [r3, #16]
 80033a6:	e007      	b.n	80033b8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_ADC_Init+0x404>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d002      	beq.n	80033de <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 ffbb 	bl	8004354 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d10c      	bne.n	8003400 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	f023 010f 	bic.w	r1, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
 80033fe:	e007      	b.n	8003410 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 020f 	bic.w	r2, r2, #15
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003414:	f023 0303 	bic.w	r3, r3, #3
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
 8003420:	e007      	b.n	8003432 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003432:	7ffb      	ldrb	r3, [r7, #31]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3724      	adds	r7, #36	; 0x24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	ffffbffc 	.word	0xffffbffc
 8003440:	58026000 	.word	0x58026000
 8003444:	fc00f81f 	.word	0xfc00f81f
 8003448:	fc00f81e 	.word	0xfc00f81e

0800344c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a87      	ldr	r2, [pc, #540]	; (800368c <HAL_ADC_IRQHandler+0x240>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_ADC_IRQHandler+0x30>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a86      	ldr	r2, [pc, #536]	; (8003690 <HAL_ADC_IRQHandler+0x244>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_ADC_IRQHandler+0x34>
 800347c:	4b85      	ldr	r3, [pc, #532]	; (8003694 <HAL_ADC_IRQHandler+0x248>)
 800347e:	e000      	b.n	8003482 <HAL_ADC_IRQHandler+0x36>
 8003480:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_ADC_IRQHandler+0x24c>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fd36 	bl	8002ef4 <LL_ADC_GetMultimode>
 8003488:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d017      	beq.n	80034c4 <HAL_ADC_IRQHandler+0x78>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 f860 	bl	800457c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2202      	movs	r2, #2
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x8c>
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8083 	beq.w	80035ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d07d      	beq.n	80035ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fc34 	bl	8002d78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d062      	beq.n	80035dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5d      	ldr	r2, [pc, #372]	; (8003690 <HAL_ADC_IRQHandler+0x244>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d002      	beq.n	8003526 <HAL_ADC_IRQHandler+0xda>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e000      	b.n	8003528 <HAL_ADC_IRQHandler+0xdc>
 8003526:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_ADC_IRQHandler+0x240>)
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	4293      	cmp	r3, r2
 800352e:	d008      	beq.n	8003542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b05      	cmp	r3, #5
 800353a:	d002      	beq.n	8003542 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b09      	cmp	r3, #9
 8003540:	d104      	bne.n	800354c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	e00c      	b.n	8003566 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_ADC_IRQHandler+0x244>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d002      	beq.n	800355c <HAL_ADC_IRQHandler+0x110>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	e000      	b.n	800355e <HAL_ADC_IRQHandler+0x112>
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <HAL_ADC_IRQHandler+0x240>)
 800355e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d135      	bne.n	80035dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b08      	cmp	r3, #8
 800357c:	d12e      	bne.n	80035dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fd33 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11a      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 020c 	bic.w	r2, r2, #12
 800359c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d112      	bne.n	80035dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
 80035c2:	e00b      	b.n	80035dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f96f 	bl	80038c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	220c      	movs	r2, #12
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d004      	beq.n	80035fe <HAL_ADC_IRQHandler+0x1b2>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a0 	beq.w	800374a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 809a 	beq.w	800374a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fbdf 	bl	8002df6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003638:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fb9a 	bl	8002d78 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003644:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_ADC_IRQHandler+0x244>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d002      	beq.n	8003656 <HAL_ADC_IRQHandler+0x20a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	e000      	b.n	8003658 <HAL_ADC_IRQHandler+0x20c>
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_ADC_IRQHandler+0x240>)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	4293      	cmp	r3, r2
 800365e:	d008      	beq.n	8003672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d002      	beq.n	8003672 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b07      	cmp	r3, #7
 8003670:	d104      	bne.n	800367c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	623b      	str	r3, [r7, #32]
 800367a:	e014      	b.n	80036a6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a03      	ldr	r2, [pc, #12]	; (8003690 <HAL_ADC_IRQHandler+0x244>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00a      	beq.n	800369c <HAL_ADC_IRQHandler+0x250>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	e008      	b.n	800369e <HAL_ADC_IRQHandler+0x252>
 800368c:	40022000 	.word	0x40022000
 8003690:	40022100 	.word	0x40022100
 8003694:	40022300 	.word	0x40022300
 8003698:	58026300 	.word	0x58026300
 800369c:	4b84      	ldr	r3, [pc, #528]	; (80038b0 <HAL_ADC_IRQHandler+0x464>)
 800369e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d047      	beq.n	800373c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x27a>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03f      	beq.n	800373c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d13a      	bne.n	800373c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d133      	bne.n	800373c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d12e      	bne.n	800373c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fc96 	bl	8003014 <LL_ADC_INJ_IsConversionOngoing>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11a      	bne.n	8003724 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d112      	bne.n	800373c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
 8003722:	e00b      	b.n	800373c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003728:	f043 0210 	orr.w	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fef5 	bl	800452c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2260      	movs	r2, #96	; 0x60
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d011      	beq.n	8003778 <HAL_ADC_IRQHandler+0x32c>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8b2 	bl	80038d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d012      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x35c>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fedb 	bl	8004554 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x38c>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fecd 	bl	8004568 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d043      	beq.n	800386a <HAL_ADC_IRQHandler+0x41e>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d03e      	beq.n	800386a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80037f4:	2301      	movs	r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e021      	b.n	800383e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d015      	beq.n	800382c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <HAL_ADC_IRQHandler+0x464>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_IRQHandler+0x3c8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <HAL_ADC_IRQHandler+0x468>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_ADC_IRQHandler+0x3cc>
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_ADC_IRQHandler+0x46c>)
 8003816:	e000      	b.n	800381a <HAL_ADC_IRQHandler+0x3ce>
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <HAL_ADC_IRQHandler+0x470>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fb78 	bl	8002f10 <LL_ADC_GetMultiDMATransfer>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003826:	2301      	movs	r3, #1
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e008      	b.n	800383e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800383a:	2301      	movs	r3, #1
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10e      	bne.n	8003862 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003854:	f043 0202 	orr.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f843 	bl	80038e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2210      	movs	r2, #16
 8003868:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d018      	beq.n	80038a6 <HAL_ADC_IRQHandler+0x45a>
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387a:	2b00      	cmp	r3, #0
 800387c:	d013      	beq.n	80038a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	f043 0208 	orr.w	r2, r3, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fe4d 	bl	8004540 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038a6:	bf00      	nop
 80038a8:	3728      	adds	r7, #40	; 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40022000 	.word	0x40022000
 80038b4:	40022100 	.word	0x40022100
 80038b8:	40022300 	.word	0x40022300
 80038bc:	58026300 	.word	0x58026300

080038c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b0b9      	sub	sp, #228	; 0xe4
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003916:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4ab3      	ldr	r2, [pc, #716]	; (8003bec <HAL_ADC_ConfigChannel+0x2f0>)
 800391e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x34>
 800392a:	2302      	movs	r3, #2
 800392c:	f000 bcfa 	b.w	8004324 <HAL_ADC_ConfigChannel+0xa28>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fb56 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 84de 	bne.w	8004306 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4aa8      	ldr	r2, [pc, #672]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d033      	beq.n	80039bc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x76>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2201      	movs	r2, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	e01d      	b.n	80039ae <HAL_ADC_ConfigChannel+0xb2>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800398a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800398e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003996:	2320      	movs	r3, #32
 8003998:	e004      	b.n	80039a4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800399a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2201      	movs	r2, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	69d1      	ldr	r1, [r2, #28]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f7ff f9e8 	bl	8002d9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fb0b 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 80039d8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fb17 	bl	8003014 <LL_ADC_INJ_IsConversionOngoing>
 80039e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8270 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 826b 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7ff fa06 	bl	8002e1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a76      	ldr	r2, [pc, #472]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10d      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a34:	e032      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a36:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_ADC_ConfigChannel+0x2f8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a42:	d10b      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x160>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	e01d      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x19c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x186>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	e00a      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x19c>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d048      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6919      	ldr	r1, [r3, #16]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab4:	f7ff f86e 	bl	8002b94 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4c      	ldr	r2, [pc, #304]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d119      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7ff f906 	bl	8002ce0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6919      	ldr	r1, [r3, #16]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d102      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1f0>
 8003ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aea:	e000      	b.n	8003aee <HAL_ADC_ConfigChannel+0x1f2>
 8003aec:	2300      	movs	r3, #0
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7ff f8d4 	bl	8002c9c <LL_ADC_SetOffsetSaturation>
 8003af4:	e1ee      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	6919      	ldr	r1, [r3, #16]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d102      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x212>
 8003b08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b0c:	e000      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x214>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	461a      	mov	r2, r3
 8003b12:	f7ff f8a1 	bl	8002c58 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6919      	ldr	r1, [r3, #16]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	7e1b      	ldrb	r3, [r3, #24]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x230>
 8003b26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b2a:	e000      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x232>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f7ff f878 	bl	8002c24 <LL_ADC_SetDataRightShift>
 8003b34:	e1ce      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_ADC_ConfigChannel+0x2f4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f040 8181 	bne.w	8003e44 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff f855 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x272>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f84a 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	0e9b      	lsrs	r3, r3, #26
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	e01e      	b.n	8003bac <HAL_ADC_ConfigChannel+0x2b0>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff f83f 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	e004      	b.n	8003baa <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003ba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x2c8>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0e9b      	lsrs	r3, r3, #26
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	e01e      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x306>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e00a      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x306>
 8003bec:	47ff0000 	.word	0x47ff0000
 8003bf0:	58026000 	.word	0x58026000
 8003bf4:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d106      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f888 	bl	8002d24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe ffec 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x344>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe ffe1 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003c36:	4603      	mov	r3, r0
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	f003 021f 	and.w	r2, r3, #31
 8003c3e:	e01e      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x382>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe ffd6 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e004      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x39a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	0e9b      	lsrs	r3, r3, #26
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	e018      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x3cc>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e004      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d106      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff f825 	bl	8002d24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe ff89 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x40a>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe ff7e 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	0e9b      	lsrs	r3, r3, #26
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	e01e      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x448>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe ff73 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e004      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x460>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	e014      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x48a>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003d78:	2320      	movs	r3, #32
 8003d7a:	e004      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d106      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe ffc6 	bl	8002d24 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2103      	movs	r1, #3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe ff2a 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x4c8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2103      	movs	r1, #3
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ff1f 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	f003 021f 	and.w	r2, r3, #31
 8003dc2:	e017      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x4f8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2103      	movs	r1, #3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe ff14 	bl	8002bf8 <LL_ADC_GetOffsetChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dd6:	fa93 f3a3 	rbit	r3, r3
 8003dda:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003de6:	2320      	movs	r3, #32
 8003de8:	e003      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x510>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0e9b      	lsrs	r3, r3, #26
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	e011      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x534>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e14:	fa93 f3a3 	rbit	r3, r3
 8003e18:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e003      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d14f      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ff71 	bl	8002d24 <LL_ADC_SetOffsetState>
 8003e42:	e047      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	069b      	lsls	r3, r3, #26
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	069b      	lsls	r3, r3, #26
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003eae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	069b      	lsls	r3, r3, #26
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d107      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ed2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f875 	bl	8002fc8 <LL_ADC_IsEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 8219 	bne.w	8004318 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7fe ffbe 	bl	8002e74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4aa1      	ldr	r2, [pc, #644]	; (8004184 <HAL_ADC_ConfigChannel+0x888>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f040 812e 	bne.w	8004160 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x630>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	bf94      	ite	ls
 8003f24:	2301      	movls	r3, #1
 8003f26:	2300      	movhi	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e019      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x664>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003f44:	2320      	movs	r3, #32
 8003f46:	e003      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	bf94      	ite	ls
 8003f5a:	2301      	movls	r3, #1
 8003f5c:	2300      	movhi	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d079      	beq.n	8004058 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x684>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	0e9b      	lsrs	r3, r3, #26
 8003f76:	3301      	adds	r3, #1
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7e:	e015      	b.n	8003fac <HAL_ADC_ConfigChannel+0x6b0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f90:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x6d0>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0e9b      	lsrs	r3, r3, #26
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	e017      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x700>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	ea42 0103 	orr.w	r1, r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x726>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	051b      	lsls	r3, r3, #20
 8004020:	e018      	b.n	8004054 <HAL_ADC_ConfigChannel+0x758>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800403a:	2320      	movs	r3, #32
 800403c:	e003      	b.n	8004046 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f003 021f 	and.w	r2, r3, #31
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004054:	430b      	orrs	r3, r1
 8004056:	e07e      	b.n	8004156 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x778>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	3301      	adds	r3, #1
 800406c:	069b      	lsls	r3, r3, #26
 800406e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004072:	e015      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x7a4>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	069b      	lsls	r3, r3, #26
 800409c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x7c4>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	3301      	adds	r3, #1
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2101      	movs	r1, #1
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	e017      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x7f4>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	61bb      	str	r3, [r7, #24]
  return result;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e003      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	ea42 0103 	orr.w	r1, r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10d      	bne.n	800411c <HAL_ADC_ConfigChannel+0x820>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	3301      	adds	r3, #1
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	3b1e      	subs	r3, #30
 8004114:	051b      	lsls	r3, r3, #20
 8004116:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800411a:	e01b      	b.n	8004154 <HAL_ADC_ConfigChannel+0x858>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
  return result;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f003 021f 	and.w	r2, r3, #31
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	3b1e      	subs	r3, #30
 800414e:	051b      	lsls	r3, r3, #20
 8004150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004154:	430b      	orrs	r3, r1
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6892      	ldr	r2, [r2, #8]
 800415a:	4619      	mov	r1, r3
 800415c:	f7fe fe5e 	bl	8002e1c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f280 80d7 	bge.w	8004318 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a06      	ldr	r2, [pc, #24]	; (8004188 <HAL_ADC_ConfigChannel+0x88c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_ADC_ConfigChannel+0x882>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_ADC_ConfigChannel+0x890>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10a      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x898>
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_ADC_ConfigChannel+0x894>)
 8004180:	e009      	b.n	8004196 <HAL_ADC_ConfigChannel+0x89a>
 8004182:	bf00      	nop
 8004184:	47ff0000 	.word	0x47ff0000
 8004188:	40022000 	.word	0x40022000
 800418c:	40022100 	.word	0x40022100
 8004190:	40022300 	.word	0x40022300
 8004194:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_ADC_ConfigChannel+0xa30>)
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fcee 	bl	8002b78 <LL_ADC_GetCommonPathInternalCh>
 800419c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a62      	ldr	r2, [pc, #392]	; (8004330 <HAL_ADC_ConfigChannel+0xa34>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a61      	ldr	r2, [pc, #388]	; (8004334 <HAL_ADC_ConfigChannel+0xa38>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10e      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x8d6>
 80041b4:	485e      	ldr	r0, [pc, #376]	; (8004330 <HAL_ADC_ConfigChannel+0xa34>)
 80041b6:	f7fe ff07 	bl	8002fc8 <LL_ADC_IsEnabled>
 80041ba:	4604      	mov	r4, r0
 80041bc:	485d      	ldr	r0, [pc, #372]	; (8004334 <HAL_ADC_ConfigChannel+0xa38>)
 80041be:	f7fe ff03 	bl	8002fc8 <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4323      	orrs	r3, r4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	e008      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x8e8>
 80041d2:	4859      	ldr	r0, [pc, #356]	; (8004338 <HAL_ADC_ConfigChannel+0xa3c>)
 80041d4:	f7fe fef8 	bl	8002fc8 <LL_ADC_IsEnabled>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8084 	beq.w	80042f2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a53      	ldr	r2, [pc, #332]	; (800433c <HAL_ADC_ConfigChannel+0xa40>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d132      	bne.n	800425a <HAL_ADC_ConfigChannel+0x95e>
 80041f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d12c      	bne.n	800425a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4c      	ldr	r2, [pc, #304]	; (8004338 <HAL_ADC_ConfigChannel+0xa3c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f040 8086 	bne.w	8004318 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_ADC_ConfigChannel+0xa34>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_ADC_ConfigChannel+0x924>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_ADC_ConfigChannel+0xa38>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x928>
 8004220:	4a47      	ldr	r2, [pc, #284]	; (8004340 <HAL_ADC_ConfigChannel+0xa44>)
 8004222:	e000      	b.n	8004226 <HAL_ADC_ConfigChannel+0x92a>
 8004224:	4a41      	ldr	r2, [pc, #260]	; (800432c <HAL_ADC_ConfigChannel+0xa30>)
 8004226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800422a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fe fc8e 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004236:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_ADC_ConfigChannel+0xa48>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	4a42      	ldr	r2, [pc, #264]	; (8004348 <HAL_ADC_ConfigChannel+0xa4c>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	3301      	adds	r3, #1
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800424a:	e002      	b.n	8004252 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3b01      	subs	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f9      	bne.n	800424c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004258:	e05e      	b.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3b      	ldr	r2, [pc, #236]	; (800434c <HAL_ADC_ConfigChannel+0xa50>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d120      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x9aa>
 8004264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11a      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a30      	ldr	r2, [pc, #192]	; (8004338 <HAL_ADC_ConfigChannel+0xa3c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d14e      	bne.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_ADC_ConfigChannel+0xa34>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_ADC_ConfigChannel+0x992>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_ADC_ConfigChannel+0xa38>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_ADC_ConfigChannel+0x996>
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_ADC_ConfigChannel+0xa44>)
 8004290:	e000      	b.n	8004294 <HAL_ADC_ConfigChannel+0x998>
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_ADC_ConfigChannel+0xa30>)
 8004294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fe fc57 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042a4:	e038      	b.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a29      	ldr	r2, [pc, #164]	; (8004350 <HAL_ADC_ConfigChannel+0xa54>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d133      	bne.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
 80042b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d12d      	bne.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_ADC_ConfigChannel+0xa3c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d128      	bne.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_ADC_ConfigChannel+0xa34>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_ADC_ConfigChannel+0x9de>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_ADC_ConfigChannel+0xa38>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d101      	bne.n	80042de <HAL_ADC_ConfigChannel+0x9e2>
 80042da:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_ADC_ConfigChannel+0xa44>)
 80042dc:	e000      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x9e4>
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <HAL_ADC_ConfigChannel+0xa30>)
 80042e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7fe fc31 	bl	8002b52 <LL_ADC_SetCommonPathInternalCh>
 80042f0:	e012      	b.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004304:	e008      	b.n	8004318 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004320:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004324:	4618      	mov	r0, r3
 8004326:	37e4      	adds	r7, #228	; 0xe4
 8004328:	46bd      	mov	sp, r7
 800432a:	bd90      	pop	{r4, r7, pc}
 800432c:	58026300 	.word	0x58026300
 8004330:	40022000 	.word	0x40022000
 8004334:	40022100 	.word	0x40022100
 8004338:	58026000 	.word	0x58026000
 800433c:	c7520000 	.word	0xc7520000
 8004340:	40022300 	.word	0x40022300
 8004344:	24000014 	.word	0x24000014
 8004348:	053e2d63 	.word	0x053e2d63
 800434c:	c3210000 	.word	0xc3210000
 8004350:	cb840000 	.word	0xcb840000

08004354 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6b      	ldr	r2, [pc, #428]	; (8004510 <ADC_ConfigureBoostMode+0x1bc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <ADC_ConfigureBoostMode+0x1c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6a      	ldr	r2, [pc, #424]	; (8004514 <ADC_ConfigureBoostMode+0x1c0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d109      	bne.n	8004384 <ADC_ConfigureBoostMode+0x30>
 8004370:	4b69      	ldr	r3, [pc, #420]	; (8004518 <ADC_ConfigureBoostMode+0x1c4>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e008      	b.n	8004396 <ADC_ConfigureBoostMode+0x42>
 8004384:	4b65      	ldr	r3, [pc, #404]	; (800451c <ADC_ConfigureBoostMode+0x1c8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01c      	beq.n	80043d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800439a:	f004 fb91 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 800439e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043a8:	d010      	beq.n	80043cc <ADC_ConfigureBoostMode+0x78>
 80043aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043ae:	d871      	bhi.n	8004494 <ADC_ConfigureBoostMode+0x140>
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d002      	beq.n	80043bc <ADC_ConfigureBoostMode+0x68>
 80043b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ba:	d16b      	bne.n	8004494 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	60fb      	str	r3, [r7, #12]
        break;
 80043ca:	e066      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	60fb      	str	r3, [r7, #12]
        break;
 80043d2:	e062      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80043d8:	f005 fac8 	bl	800996c <HAL_RCCEx_GetPeriphCLKFreq>
 80043dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043e6:	d051      	beq.n	800448c <ADC_ConfigureBoostMode+0x138>
 80043e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80043ec:	d854      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 80043ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043f2:	d047      	beq.n	8004484 <ADC_ConfigureBoostMode+0x130>
 80043f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80043f8:	d84e      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 80043fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043fe:	d03d      	beq.n	800447c <ADC_ConfigureBoostMode+0x128>
 8004400:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004404:	d848      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 8004406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800440a:	d033      	beq.n	8004474 <ADC_ConfigureBoostMode+0x120>
 800440c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004410:	d842      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 8004412:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004416:	d029      	beq.n	800446c <ADC_ConfigureBoostMode+0x118>
 8004418:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800441c:	d83c      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 800441e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004422:	d01a      	beq.n	800445a <ADC_ConfigureBoostMode+0x106>
 8004424:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004428:	d836      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 800442a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800442e:	d014      	beq.n	800445a <ADC_ConfigureBoostMode+0x106>
 8004430:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004434:	d830      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443a:	d00e      	beq.n	800445a <ADC_ConfigureBoostMode+0x106>
 800443c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004440:	d82a      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 8004442:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004446:	d008      	beq.n	800445a <ADC_ConfigureBoostMode+0x106>
 8004448:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800444c:	d824      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x144>
 800444e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004452:	d002      	beq.n	800445a <ADC_ConfigureBoostMode+0x106>
 8004454:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004458:	d11e      	bne.n	8004498 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	0c9b      	lsrs	r3, r3, #18
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	60fb      	str	r3, [r7, #12]
        break;
 800446a:	e016      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	60fb      	str	r3, [r7, #12]
        break;
 8004472:	e012      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	60fb      	str	r3, [r7, #12]
        break;
 800447a:	e00e      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	099b      	lsrs	r3, r3, #6
 8004480:	60fb      	str	r3, [r7, #12]
        break;
 8004482:	e00a      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	09db      	lsrs	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
        break;
 800448a:	e006      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	60fb      	str	r3, [r7, #12]
        break;
 8004492:	e002      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004498:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <ADC_ConfigureBoostMode+0x1cc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d808      	bhi.n	80044ba <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044b8:	e025      	b.n	8004506 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a19      	ldr	r2, [pc, #100]	; (8004524 <ADC_ConfigureBoostMode+0x1d0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d80a      	bhi.n	80044d8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	e016      	b.n	8004506 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <ADC_ConfigureBoostMode+0x1d4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d80a      	bhi.n	80044f6 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	e007      	b.n	8004506 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40022000 	.word	0x40022000
 8004514:	40022100 	.word	0x40022100
 8004518:	40022300 	.word	0x40022300
 800451c:	58026300 	.word	0x58026300
 8004520:	005f5e10 	.word	0x005f5e10
 8004524:	00bebc20 	.word	0x00bebc20
 8004528:	017d7840 	.word	0x017d7840

0800452c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ac:	4013      	ands	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045be:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <__NVIC_SetPriorityGrouping+0x40>)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	60d3      	str	r3, [r2, #12]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000ed00 	.word	0xe000ed00
 80045d4:	05fa0000 	.word	0x05fa0000

080045d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <__NVIC_GetPriorityGrouping+0x18>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	f003 0307 	and.w	r3, r3, #7
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db0b      	blt.n	800461e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <__NVIC_EnableIRQ+0x38>)
 800460e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2001      	movs	r0, #1
 8004616:	fa00 f202 	lsl.w	r2, r0, r2
 800461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000e100 	.word	0xe000e100

08004630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800463c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db0a      	blt.n	800465a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	490c      	ldr	r1, [pc, #48]	; (800467c <__NVIC_SetPriority+0x4c>)
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	440b      	add	r3, r1
 8004654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004658:	e00a      	b.n	8004670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <__NVIC_SetPriority+0x50>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3b04      	subs	r3, #4
 8004668:	0112      	lsls	r2, r2, #4
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	440b      	add	r3, r1
 800466e:	761a      	strb	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000e100 	.word	0xe000e100
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004684:	b480      	push	{r7}
 8004686:	b089      	sub	sp, #36	; 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf28      	it	cs
 80046a2:	2304      	movcs	r3, #4
 80046a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3304      	adds	r3, #4
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d902      	bls.n	80046b4 <NVIC_EncodePriority+0x30>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b03      	subs	r3, #3
 80046b2:	e000      	b.n	80046b6 <NVIC_EncodePriority+0x32>
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43da      	mvns	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	401a      	ands	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	f04f 31ff 	mov.w	r1, #4294967295
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	43d9      	mvns	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	4313      	orrs	r3, r2
         );
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3724      	adds	r7, #36	; 0x24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046fc:	d301      	bcc.n	8004702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004702:	4a0a      	ldr	r2, [pc, #40]	; (800472c <SysTick_Config+0x40>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3b01      	subs	r3, #1
 8004708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470a:	210f      	movs	r1, #15
 800470c:	f04f 30ff 	mov.w	r0, #4294967295
 8004710:	f7ff ff8e 	bl	8004630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <SysTick_Config+0x40>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <SysTick_Config+0x40>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	e000e010 	.word	0xe000e010

08004730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff29 	bl	8004590 <__NVIC_SetPriorityGrouping>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff40 	bl	80045d8 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff90 	bl	8004684 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5f 	bl	8004630 <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff33 	bl	80045f4 <__NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ffa4 	bl	80046ec <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e054      	b.n	800486c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7f5b      	ldrb	r3, [r3, #29]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fd fad8 	bl	8001d88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_CRC_Init+0xc4>)
 80047ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0218 	bic.w	r2, r2, #24
 80047fc:	609a      	str	r2, [r3, #8]
 80047fe:	e00c      	b.n	800481a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6899      	ldr	r1, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	461a      	mov	r2, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f834 	bl	8004878 <HAL_CRCEx_Polynomial_Set>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e028      	b.n	800486c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	795b      	ldrb	r3, [r3, #5]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	611a      	str	r2, [r3, #16]
 800482c:	e004      	b.n	8004838 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6912      	ldr	r2, [r2, #16]
 8004836:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	04c11db7 	.word	0x04c11db7

08004878 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004888:	231f      	movs	r3, #31
 800488a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800488c:	bf00      	nop
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	613a      	str	r2, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_CRCEx_Polynomial_Set+0x34>
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 031f 	and.w	r3, r3, #31
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_CRCEx_Polynomial_Set+0x16>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b18      	cmp	r3, #24
 80048b0:	d846      	bhi.n	8004940 <HAL_CRCEx_Polynomial_Set+0xc8>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	08004947 	.word	0x08004947
 80048bc:	08004941 	.word	0x08004941
 80048c0:	08004941 	.word	0x08004941
 80048c4:	08004941 	.word	0x08004941
 80048c8:	08004941 	.word	0x08004941
 80048cc:	08004941 	.word	0x08004941
 80048d0:	08004941 	.word	0x08004941
 80048d4:	08004941 	.word	0x08004941
 80048d8:	08004935 	.word	0x08004935
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004941 	.word	0x08004941
 80048e4:	08004941 	.word	0x08004941
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004941 	.word	0x08004941
 80048f0:	08004941 	.word	0x08004941
 80048f4:	08004941 	.word	0x08004941
 80048f8:	08004929 	.word	0x08004929
 80048fc:	08004941 	.word	0x08004941
 8004900:	08004941 	.word	0x08004941
 8004904:	08004941 	.word	0x08004941
 8004908:	08004941 	.word	0x08004941
 800490c:	08004941 	.word	0x08004941
 8004910:	08004941 	.word	0x08004941
 8004914:	08004941 	.word	0x08004941
 8004918:	0800491d 	.word	0x0800491d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d913      	bls.n	800494a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004926:	e010      	b.n	800494a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b07      	cmp	r3, #7
 800492c:	d90f      	bls.n	800494e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004932:	e00c      	b.n	800494e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b0f      	cmp	r3, #15
 8004938:	d90b      	bls.n	8004952 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800493e:	e008      	b.n	8004952 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e006      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004952:	bf00      	nop
  }
  if (status == HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 0118 	bic.w	r1, r3, #24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7fe f888 	bl	8002aa0 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e314      	b.n	8004fc6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a66      	ldr	r2, [pc, #408]	; (8004b3c <HAL_DMA_Init+0x1b8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04a      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <HAL_DMA_Init+0x1bc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d045      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <HAL_DMA_Init+0x1c0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d040      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a62      	ldr	r2, [pc, #392]	; (8004b48 <HAL_DMA_Init+0x1c4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d03b      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a60      	ldr	r2, [pc, #384]	; (8004b4c <HAL_DMA_Init+0x1c8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d036      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5f      	ldr	r2, [pc, #380]	; (8004b50 <HAL_DMA_Init+0x1cc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d031      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a5d      	ldr	r2, [pc, #372]	; (8004b54 <HAL_DMA_Init+0x1d0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02c      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a5c      	ldr	r2, [pc, #368]	; (8004b58 <HAL_DMA_Init+0x1d4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d027      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a5a      	ldr	r2, [pc, #360]	; (8004b5c <HAL_DMA_Init+0x1d8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d022      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <HAL_DMA_Init+0x1dc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d01d      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a57      	ldr	r2, [pc, #348]	; (8004b64 <HAL_DMA_Init+0x1e0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a56      	ldr	r2, [pc, #344]	; (8004b68 <HAL_DMA_Init+0x1e4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a54      	ldr	r2, [pc, #336]	; (8004b6c <HAL_DMA_Init+0x1e8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a53      	ldr	r2, [pc, #332]	; (8004b70 <HAL_DMA_Init+0x1ec>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a51      	ldr	r2, [pc, #324]	; (8004b74 <HAL_DMA_Init+0x1f0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_DMA_Init+0xb8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a50      	ldr	r2, [pc, #320]	; (8004b78 <HAL_DMA_Init+0x1f4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_DMA_Init+0xbc>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_Init+0xbe>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 813c 	beq.w	8004cc0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <HAL_DMA_Init+0x1b8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d04a      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <HAL_DMA_Init+0x1bc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d045      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_DMA_Init+0x1c0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d040      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_DMA_Init+0x1c4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d03b      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a31      	ldr	r2, [pc, #196]	; (8004b4c <HAL_DMA_Init+0x1c8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d036      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <HAL_DMA_Init+0x1cc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d031      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a2e      	ldr	r2, [pc, #184]	; (8004b54 <HAL_DMA_Init+0x1d0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <HAL_DMA_Init+0x1d4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d027      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_DMA_Init+0x1d8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <HAL_DMA_Init+0x1dc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a28      	ldr	r2, [pc, #160]	; (8004b64 <HAL_DMA_Init+0x1e0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_DMA_Init+0x1e4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <HAL_DMA_Init+0x1e8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <HAL_DMA_Init+0x1ec>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_DMA_Init+0x1f0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_Init+0x174>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <HAL_DMA_Init+0x1f4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <HAL_DMA_Init+0x186>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e007      	b.n	8004b1a <HAL_DMA_Init+0x196>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b1a:	e02f      	b.n	8004b7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b1c:	f7fd ffc0 	bl	8002aa0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d928      	bls.n	8004b7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e244      	b.n	8004fc6 <HAL_DMA_Init+0x642>
 8004b3c:	40020010 	.word	0x40020010
 8004b40:	40020028 	.word	0x40020028
 8004b44:	40020040 	.word	0x40020040
 8004b48:	40020058 	.word	0x40020058
 8004b4c:	40020070 	.word	0x40020070
 8004b50:	40020088 	.word	0x40020088
 8004b54:	400200a0 	.word	0x400200a0
 8004b58:	400200b8 	.word	0x400200b8
 8004b5c:	40020410 	.word	0x40020410
 8004b60:	40020428 	.word	0x40020428
 8004b64:	40020440 	.word	0x40020440
 8004b68:	40020458 	.word	0x40020458
 8004b6c:	40020470 	.word	0x40020470
 8004b70:	40020488 	.word	0x40020488
 8004b74:	400204a0 	.word	0x400204a0
 8004b78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1c8      	bne.n	8004b1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4b84      	ldr	r3, [pc, #528]	; (8004da8 <HAL_DMA_Init+0x424>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ba2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d107      	bne.n	8004be0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b28      	cmp	r3, #40	; 0x28
 8004be6:	d903      	bls.n	8004bf0 <HAL_DMA_Init+0x26c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b2e      	cmp	r3, #46	; 0x2e
 8004bee:	d91f      	bls.n	8004c30 <HAL_DMA_Init+0x2ac>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf6:	d903      	bls.n	8004c00 <HAL_DMA_Init+0x27c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b42      	cmp	r3, #66	; 0x42
 8004bfe:	d917      	bls.n	8004c30 <HAL_DMA_Init+0x2ac>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b46      	cmp	r3, #70	; 0x46
 8004c06:	d903      	bls.n	8004c10 <HAL_DMA_Init+0x28c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b48      	cmp	r3, #72	; 0x48
 8004c0e:	d90f      	bls.n	8004c30 <HAL_DMA_Init+0x2ac>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b4e      	cmp	r3, #78	; 0x4e
 8004c16:	d903      	bls.n	8004c20 <HAL_DMA_Init+0x29c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b52      	cmp	r3, #82	; 0x52
 8004c1e:	d907      	bls.n	8004c30 <HAL_DMA_Init+0x2ac>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b73      	cmp	r3, #115	; 0x73
 8004c26:	d905      	bls.n	8004c34 <HAL_DMA_Init+0x2b0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b77      	cmp	r3, #119	; 0x77
 8004c2e:	d801      	bhi.n	8004c34 <HAL_DMA_Init+0x2b0>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_DMA_Init+0x2b2>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c40:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d117      	bne.n	8004c9c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00e      	beq.n	8004c9c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f9b6 	bl	8005ff0 <DMA_CheckFifoParam>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2240      	movs	r2, #64	; 0x40
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e194      	b.n	8004fc6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 f8f1 	bl	8005e8c <DMA_CalcBaseAndBitshift>
 8004caa:	4603      	mov	r3, r0
 8004cac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	e0ca      	b.n	8004e56 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_DMA_Init+0x428>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_DMA_Init+0x42c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a36      	ldr	r2, [pc, #216]	; (8004db4 <HAL_DMA_Init+0x430>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a35      	ldr	r2, [pc, #212]	; (8004db8 <HAL_DMA_Init+0x434>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <HAL_DMA_Init+0x438>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a32      	ldr	r2, [pc, #200]	; (8004dc0 <HAL_DMA_Init+0x43c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a30      	ldr	r2, [pc, #192]	; (8004dc4 <HAL_DMA_Init+0x440>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Init+0x38c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <HAL_DMA_Init+0x444>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA_Init+0x390>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_Init+0x392>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8094 	beq.w	8004e44 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_DMA_Init+0x428>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d021      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <HAL_DMA_Init+0x42c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d01c      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_DMA_Init+0x430>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d017      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_DMA_Init+0x434>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d012      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_DMA_Init+0x438>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00d      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_DMA_Init+0x43c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d008      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_DMA_Init+0x440>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d003      	beq.n	8004d6a <HAL_DMA_Init+0x3e6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_DMA_Init+0x444>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_DMA_Init+0x448>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d01d      	beq.n	8004dd0 <HAL_DMA_Init+0x44c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d102      	bne.n	8004da2 <HAL_DMA_Init+0x41e>
 8004d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004da0:	e017      	b.n	8004dd2 <HAL_DMA_Init+0x44e>
 8004da2:	2300      	movs	r3, #0
 8004da4:	e015      	b.n	8004dd2 <HAL_DMA_Init+0x44e>
 8004da6:	bf00      	nop
 8004da8:	fe10803f 	.word	0xfe10803f
 8004dac:	58025408 	.word	0x58025408
 8004db0:	5802541c 	.word	0x5802541c
 8004db4:	58025430 	.word	0x58025430
 8004db8:	58025444 	.word	0x58025444
 8004dbc:	58025458 	.word	0x58025458
 8004dc0:	5802546c 	.word	0x5802546c
 8004dc4:	58025480 	.word	0x58025480
 8004dc8:	58025494 	.word	0x58025494
 8004dcc:	fffe000f 	.word	0xfffe000f
 8004dd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004de0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004de8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004df0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004df8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b6e      	ldr	r3, [pc, #440]	; (8004fd0 <HAL_DMA_Init+0x64c>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4a6e      	ldr	r2, [pc, #440]	; (8004fd4 <HAL_DMA_Init+0x650>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	009a      	lsls	r2, r3, #2
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 f82f 	bl	8005e8c <DMA_CalcBaseAndBitshift>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e008      	b.n	8004e56 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0b7      	b.n	8004fc6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5f      	ldr	r2, [pc, #380]	; (8004fd8 <HAL_DMA_Init+0x654>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d072      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_DMA_Init+0x658>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d06d      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_DMA_Init+0x65c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d068      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_DMA_Init+0x660>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d063      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a59      	ldr	r2, [pc, #356]	; (8004fe8 <HAL_DMA_Init+0x664>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d05e      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_DMA_Init+0x668>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d059      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a56      	ldr	r2, [pc, #344]	; (8004ff0 <HAL_DMA_Init+0x66c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d054      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a54      	ldr	r2, [pc, #336]	; (8004ff4 <HAL_DMA_Init+0x670>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04f      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a53      	ldr	r2, [pc, #332]	; (8004ff8 <HAL_DMA_Init+0x674>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a51      	ldr	r2, [pc, #324]	; (8004ffc <HAL_DMA_Init+0x678>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a50      	ldr	r2, [pc, #320]	; (8005000 <HAL_DMA_Init+0x67c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a4e      	ldr	r2, [pc, #312]	; (8005004 <HAL_DMA_Init+0x680>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4d      	ldr	r2, [pc, #308]	; (8005008 <HAL_DMA_Init+0x684>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	; (800500c <HAL_DMA_Init+0x688>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <HAL_DMA_Init+0x68c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a48      	ldr	r2, [pc, #288]	; (8005014 <HAL_DMA_Init+0x690>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	; (8005018 <HAL_DMA_Init+0x694>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a45      	ldr	r2, [pc, #276]	; (800501c <HAL_DMA_Init+0x698>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a44      	ldr	r2, [pc, #272]	; (8005020 <HAL_DMA_Init+0x69c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a42      	ldr	r2, [pc, #264]	; (8005024 <HAL_DMA_Init+0x6a0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a41      	ldr	r2, [pc, #260]	; (8005028 <HAL_DMA_Init+0x6a4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3f      	ldr	r2, [pc, #252]	; (800502c <HAL_DMA_Init+0x6a8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3e      	ldr	r2, [pc, #248]	; (8005030 <HAL_DMA_Init+0x6ac>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_Init+0x5c2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <HAL_DMA_Init+0x6b0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_DMA_Init+0x5c6>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_DMA_Init+0x5c8>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d032      	beq.n	8004fb6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 f8c9 	bl	80060e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d102      	bne.n	8004f64 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_DMA_Init+0x620>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d80c      	bhi.n	8004fa4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f001 f946 	bl	800621c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e008      	b.n	8004fb6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	a7fdabf8 	.word	0xa7fdabf8
 8004fd4:	cccccccd 	.word	0xcccccccd
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
 8005018:	58025408 	.word	0x58025408
 800501c:	5802541c 	.word	0x5802541c
 8005020:	58025430 	.word	0x58025430
 8005024:	58025444 	.word	0x58025444
 8005028:	58025458 	.word	0x58025458
 800502c:	5802546c 	.word	0x5802546c
 8005030:	58025480 	.word	0x58025480
 8005034:	58025494 	.word	0x58025494

08005038 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005044:	4b67      	ldr	r3, [pc, #412]	; (80051e4 <HAL_DMA_IRQHandler+0x1ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a67      	ldr	r2, [pc, #412]	; (80051e8 <HAL_DMA_IRQHandler+0x1b0>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a5f      	ldr	r2, [pc, #380]	; (80051ec <HAL_DMA_IRQHandler+0x1b4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04a      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5d      	ldr	r2, [pc, #372]	; (80051f0 <HAL_DMA_IRQHandler+0x1b8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d045      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5c      	ldr	r2, [pc, #368]	; (80051f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d040      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5a      	ldr	r2, [pc, #360]	; (80051f8 <HAL_DMA_IRQHandler+0x1c0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d03b      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a59      	ldr	r2, [pc, #356]	; (80051fc <HAL_DMA_IRQHandler+0x1c4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d036      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a57      	ldr	r2, [pc, #348]	; (8005200 <HAL_DMA_IRQHandler+0x1c8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d031      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a56      	ldr	r2, [pc, #344]	; (8005204 <HAL_DMA_IRQHandler+0x1cc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d02c      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a54      	ldr	r2, [pc, #336]	; (8005208 <HAL_DMA_IRQHandler+0x1d0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d027      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a53      	ldr	r2, [pc, #332]	; (800520c <HAL_DMA_IRQHandler+0x1d4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a51      	ldr	r2, [pc, #324]	; (8005210 <HAL_DMA_IRQHandler+0x1d8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01d      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a50      	ldr	r2, [pc, #320]	; (8005214 <HAL_DMA_IRQHandler+0x1dc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4e      	ldr	r2, [pc, #312]	; (8005218 <HAL_DMA_IRQHandler+0x1e0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4d      	ldr	r2, [pc, #308]	; (800521c <HAL_DMA_IRQHandler+0x1e4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a4b      	ldr	r2, [pc, #300]	; (8005220 <HAL_DMA_IRQHandler+0x1e8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a4a      	ldr	r2, [pc, #296]	; (8005224 <HAL_DMA_IRQHandler+0x1ec>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_DMA_IRQHandler+0xd2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a48      	ldr	r2, [pc, #288]	; (8005228 <HAL_DMA_IRQHandler+0x1f0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_DMA_IRQHandler+0xd6>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_DMA_IRQHandler+0xd8>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 842b 	beq.w	800596c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2208      	movs	r2, #8
 8005120:	409a      	lsls	r2, r3
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80a2 	beq.w	8005270 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2e      	ldr	r2, [pc, #184]	; (80051ec <HAL_DMA_IRQHandler+0x1b4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <HAL_DMA_IRQHandler+0x1b8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2b      	ldr	r2, [pc, #172]	; (80051f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2a      	ldr	r2, [pc, #168]	; (80051f8 <HAL_DMA_IRQHandler+0x1c0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <HAL_DMA_IRQHandler+0x1c4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a27      	ldr	r2, [pc, #156]	; (8005200 <HAL_DMA_IRQHandler+0x1c8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a25      	ldr	r2, [pc, #148]	; (8005204 <HAL_DMA_IRQHandler+0x1cc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a24      	ldr	r2, [pc, #144]	; (8005208 <HAL_DMA_IRQHandler+0x1d0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_DMA_IRQHandler+0x1d4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_DMA_IRQHandler+0x1d8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <HAL_DMA_IRQHandler+0x1dc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <HAL_DMA_IRQHandler+0x1e0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1c      	ldr	r2, [pc, #112]	; (800521c <HAL_DMA_IRQHandler+0x1e4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_DMA_IRQHandler+0x1e8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_DMA_IRQHandler+0x1ec>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_IRQHandler+0x194>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_DMA_IRQHandler+0x1f0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d12f      	bne.n	800522c <HAL_DMA_IRQHandler+0x1f4>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e02e      	b.n	8005240 <HAL_DMA_IRQHandler+0x208>
 80051e2:	bf00      	nop
 80051e4:	24000014 	.word	0x24000014
 80051e8:	1b4e81b5 	.word	0x1b4e81b5
 80051ec:	40020010 	.word	0x40020010
 80051f0:	40020028 	.word	0x40020028
 80051f4:	40020040 	.word	0x40020040
 80051f8:	40020058 	.word	0x40020058
 80051fc:	40020070 	.word	0x40020070
 8005200:	40020088 	.word	0x40020088
 8005204:	400200a0 	.word	0x400200a0
 8005208:	400200b8 	.word	0x400200b8
 800520c:	40020410 	.word	0x40020410
 8005210:	40020428 	.word	0x40020428
 8005214:	40020440 	.word	0x40020440
 8005218:	40020458 	.word	0x40020458
 800521c:	40020470 	.word	0x40020470
 8005220:	40020488 	.word	0x40020488
 8005224:	400204a0 	.word	0x400204a0
 8005228:	400204b8 	.word	0x400204b8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0204 	bic.w	r2, r2, #4
 8005252:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2208      	movs	r2, #8
 800525e:	409a      	lsls	r2, r3
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f043 0201 	orr.w	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06e      	beq.n	8005364 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a69      	ldr	r2, [pc, #420]	; (8005430 <HAL_DMA_IRQHandler+0x3f8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a67      	ldr	r2, [pc, #412]	; (8005434 <HAL_DMA_IRQHandler+0x3fc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a66      	ldr	r2, [pc, #408]	; (8005438 <HAL_DMA_IRQHandler+0x400>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a64      	ldr	r2, [pc, #400]	; (800543c <HAL_DMA_IRQHandler+0x404>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_DMA_IRQHandler+0x408>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a61      	ldr	r2, [pc, #388]	; (8005444 <HAL_DMA_IRQHandler+0x40c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a60      	ldr	r2, [pc, #384]	; (8005448 <HAL_DMA_IRQHandler+0x410>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5e      	ldr	r2, [pc, #376]	; (800544c <HAL_DMA_IRQHandler+0x414>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5d      	ldr	r2, [pc, #372]	; (8005450 <HAL_DMA_IRQHandler+0x418>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5b      	ldr	r2, [pc, #364]	; (8005454 <HAL_DMA_IRQHandler+0x41c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a5a      	ldr	r2, [pc, #360]	; (8005458 <HAL_DMA_IRQHandler+0x420>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_DMA_IRQHandler+0x424>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_DMA_IRQHandler+0x428>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a55      	ldr	r2, [pc, #340]	; (8005464 <HAL_DMA_IRQHandler+0x42c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a54      	ldr	r2, [pc, #336]	; (8005468 <HAL_DMA_IRQHandler+0x430>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMA_IRQHandler+0x2ee>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a52      	ldr	r2, [pc, #328]	; (800546c <HAL_DMA_IRQHandler+0x434>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10a      	bne.n	800533c <HAL_DMA_IRQHandler+0x304>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e003      	b.n	8005344 <HAL_DMA_IRQHandler+0x30c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00d      	beq.n	8005364 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f043 0202 	orr.w	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2204      	movs	r2, #4
 800536e:	409a      	lsls	r2, r3
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 808f 	beq.w	8005498 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <HAL_DMA_IRQHandler+0x3f8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d04a      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_DMA_IRQHandler+0x3fc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a29      	ldr	r2, [pc, #164]	; (8005438 <HAL_DMA_IRQHandler+0x400>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d040      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a27      	ldr	r2, [pc, #156]	; (800543c <HAL_DMA_IRQHandler+0x404>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d03b      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a26      	ldr	r2, [pc, #152]	; (8005440 <HAL_DMA_IRQHandler+0x408>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_DMA_IRQHandler+0x40c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a23      	ldr	r2, [pc, #140]	; (8005448 <HAL_DMA_IRQHandler+0x410>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a21      	ldr	r2, [pc, #132]	; (800544c <HAL_DMA_IRQHandler+0x414>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d027      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a20      	ldr	r2, [pc, #128]	; (8005450 <HAL_DMA_IRQHandler+0x418>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d022      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_DMA_IRQHandler+0x41c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01d      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_DMA_IRQHandler+0x420>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_DMA_IRQHandler+0x424>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_DMA_IRQHandler+0x428>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_DMA_IRQHandler+0x42c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a17      	ldr	r2, [pc, #92]	; (8005468 <HAL_DMA_IRQHandler+0x430>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_DMA_IRQHandler+0x3e2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <HAL_DMA_IRQHandler+0x434>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d12a      	bne.n	8005470 <HAL_DMA_IRQHandler+0x438>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e023      	b.n	8005478 <HAL_DMA_IRQHandler+0x440>
 8005430:	40020010 	.word	0x40020010
 8005434:	40020028 	.word	0x40020028
 8005438:	40020040 	.word	0x40020040
 800543c:	40020058 	.word	0x40020058
 8005440:	40020070 	.word	0x40020070
 8005444:	40020088 	.word	0x40020088
 8005448:	400200a0 	.word	0x400200a0
 800544c:	400200b8 	.word	0x400200b8
 8005450:	40020410 	.word	0x40020410
 8005454:	40020428 	.word	0x40020428
 8005458:	40020440 	.word	0x40020440
 800545c:	40020458 	.word	0x40020458
 8005460:	40020470 	.word	0x40020470
 8005464:	40020488 	.word	0x40020488
 8005468:	400204a0 	.word	0x400204a0
 800546c:	400204b8 	.word	0x400204b8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00d      	beq.n	8005498 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2204      	movs	r2, #4
 8005486:	409a      	lsls	r2, r3
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	2210      	movs	r2, #16
 80054a2:	409a      	lsls	r2, r3
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a6 	beq.w	80055fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a85      	ldr	r2, [pc, #532]	; (80056c8 <HAL_DMA_IRQHandler+0x690>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d04a      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a83      	ldr	r2, [pc, #524]	; (80056cc <HAL_DMA_IRQHandler+0x694>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d045      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a82      	ldr	r2, [pc, #520]	; (80056d0 <HAL_DMA_IRQHandler+0x698>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d040      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a80      	ldr	r2, [pc, #512]	; (80056d4 <HAL_DMA_IRQHandler+0x69c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d03b      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a7f      	ldr	r2, [pc, #508]	; (80056d8 <HAL_DMA_IRQHandler+0x6a0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d036      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7d      	ldr	r2, [pc, #500]	; (80056dc <HAL_DMA_IRQHandler+0x6a4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d031      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <HAL_DMA_IRQHandler+0x6a8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d02c      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a7a      	ldr	r2, [pc, #488]	; (80056e4 <HAL_DMA_IRQHandler+0x6ac>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d027      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a79      	ldr	r2, [pc, #484]	; (80056e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a77      	ldr	r2, [pc, #476]	; (80056ec <HAL_DMA_IRQHandler+0x6b4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d01d      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a76      	ldr	r2, [pc, #472]	; (80056f0 <HAL_DMA_IRQHandler+0x6b8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a74      	ldr	r2, [pc, #464]	; (80056f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a73      	ldr	r2, [pc, #460]	; (80056f8 <HAL_DMA_IRQHandler+0x6c0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a71      	ldr	r2, [pc, #452]	; (80056fc <HAL_DMA_IRQHandler+0x6c4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a70      	ldr	r2, [pc, #448]	; (8005700 <HAL_DMA_IRQHandler+0x6c8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_DMA_IRQHandler+0x516>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6e      	ldr	r2, [pc, #440]	; (8005704 <HAL_DMA_IRQHandler+0x6cc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10a      	bne.n	8005564 <HAL_DMA_IRQHandler+0x52c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e009      	b.n	8005578 <HAL_DMA_IRQHandler+0x540>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2301      	movne	r3, #1
 8005574:	2300      	moveq	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d03e      	beq.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2210      	movs	r2, #16
 8005586:	409a      	lsls	r2, r3
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d018      	beq.n	80055cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d024      	beq.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
 80055b8:	e01f      	b.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01b      	beq.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	4798      	blx	r3
 80055ca:	e016      	b.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0208 	bic.w	r2, r2, #8
 80055e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2220      	movs	r2, #32
 8005604:	409a      	lsls	r2, r3
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8110 	beq.w	8005830 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <HAL_DMA_IRQHandler+0x690>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d04a      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2b      	ldr	r2, [pc, #172]	; (80056cc <HAL_DMA_IRQHandler+0x694>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d045      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <HAL_DMA_IRQHandler+0x698>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d040      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <HAL_DMA_IRQHandler+0x69c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d03b      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <HAL_DMA_IRQHandler+0x6a0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d036      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a25      	ldr	r2, [pc, #148]	; (80056dc <HAL_DMA_IRQHandler+0x6a4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d031      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d02c      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_DMA_IRQHandler+0x6ac>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d027      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_DMA_IRQHandler+0x6b4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d01d      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_DMA_IRQHandler+0x6b8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <HAL_DMA_IRQHandler+0x6c0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a19      	ldr	r2, [pc, #100]	; (80056fc <HAL_DMA_IRQHandler+0x6c4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <HAL_DMA_IRQHandler+0x6c8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x678>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a16      	ldr	r2, [pc, #88]	; (8005704 <HAL_DMA_IRQHandler+0x6cc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d12b      	bne.n	8005708 <HAL_DMA_IRQHandler+0x6d0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	e02a      	b.n	800571c <HAL_DMA_IRQHandler+0x6e4>
 80056c6:	bf00      	nop
 80056c8:	40020010 	.word	0x40020010
 80056cc:	40020028 	.word	0x40020028
 80056d0:	40020040 	.word	0x40020040
 80056d4:	40020058 	.word	0x40020058
 80056d8:	40020070 	.word	0x40020070
 80056dc:	40020088 	.word	0x40020088
 80056e0:	400200a0 	.word	0x400200a0
 80056e4:	400200b8 	.word	0x400200b8
 80056e8:	40020410 	.word	0x40020410
 80056ec:	40020428 	.word	0x40020428
 80056f0:	40020440 	.word	0x40020440
 80056f4:	40020458 	.word	0x40020458
 80056f8:	40020470 	.word	0x40020470
 80056fc:	40020488 	.word	0x40020488
 8005700:	400204a0 	.word	0x400204a0
 8005704:	400204b8 	.word	0x400204b8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8087 	beq.w	8005830 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	2220      	movs	r2, #32
 800572c:	409a      	lsls	r2, r3
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b04      	cmp	r3, #4
 800573c:	d139      	bne.n	80057b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0216 	bic.w	r2, r2, #22
 800574c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <HAL_DMA_IRQHandler+0x736>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0208 	bic.w	r2, r2, #8
 800577c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	223f      	movs	r2, #63	; 0x3f
 8005788:	409a      	lsls	r2, r3
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 834a 	beq.w	8005e3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4798      	blx	r3
          }
          return;
 80057b0:	e344      	b.n	8005e3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d018      	beq.n	80057f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d108      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d02c      	beq.n	8005830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	4798      	blx	r3
 80057de:	e027      	b.n	8005830 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
 80057f0:	e01e      	b.n	8005830 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10f      	bne.n	8005820 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0210 	bic.w	r2, r2, #16
 800580e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8306 	beq.w	8005e46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8088 	beq.w	8005958 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a7a      	ldr	r2, [pc, #488]	; (8005a40 <HAL_DMA_IRQHandler+0xa08>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d04a      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a79      	ldr	r2, [pc, #484]	; (8005a44 <HAL_DMA_IRQHandler+0xa0c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d045      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a77      	ldr	r2, [pc, #476]	; (8005a48 <HAL_DMA_IRQHandler+0xa10>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d040      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a76      	ldr	r2, [pc, #472]	; (8005a4c <HAL_DMA_IRQHandler+0xa14>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d03b      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a74      	ldr	r2, [pc, #464]	; (8005a50 <HAL_DMA_IRQHandler+0xa18>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d036      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a73      	ldr	r2, [pc, #460]	; (8005a54 <HAL_DMA_IRQHandler+0xa1c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a71      	ldr	r2, [pc, #452]	; (8005a58 <HAL_DMA_IRQHandler+0xa20>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02c      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a70      	ldr	r2, [pc, #448]	; (8005a5c <HAL_DMA_IRQHandler+0xa24>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d027      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a6e      	ldr	r2, [pc, #440]	; (8005a60 <HAL_DMA_IRQHandler+0xa28>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <HAL_DMA_IRQHandler+0xa2c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d01d      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6b      	ldr	r2, [pc, #428]	; (8005a68 <HAL_DMA_IRQHandler+0xa30>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_DMA_IRQHandler+0xa34>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a68      	ldr	r2, [pc, #416]	; (8005a70 <HAL_DMA_IRQHandler+0xa38>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a67      	ldr	r2, [pc, #412]	; (8005a74 <HAL_DMA_IRQHandler+0xa3c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_DMA_IRQHandler+0xa40>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x8b8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a64      	ldr	r2, [pc, #400]	; (8005a7c <HAL_DMA_IRQHandler+0xa44>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <HAL_DMA_IRQHandler+0x8ca>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0201 	bic.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e007      	b.n	8005912 <HAL_DMA_IRQHandler+0x8da>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3301      	adds	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591a:	429a      	cmp	r2, r3
 800591c:	d307      	bcc.n	800592e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f2      	bne.n	8005912 <HAL_DMA_IRQHandler+0x8da>
 800592c:	e000      	b.n	8005930 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800592e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2203      	movs	r2, #3
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005946:	e003      	b.n	8005950 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8272 	beq.w	8005e46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	e26c      	b.n	8005e46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a43      	ldr	r2, [pc, #268]	; (8005a80 <HAL_DMA_IRQHandler+0xa48>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d022      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a42      	ldr	r2, [pc, #264]	; (8005a84 <HAL_DMA_IRQHandler+0xa4c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01d      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a40      	ldr	r2, [pc, #256]	; (8005a88 <HAL_DMA_IRQHandler+0xa50>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d018      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3f      	ldr	r2, [pc, #252]	; (8005a8c <HAL_DMA_IRQHandler+0xa54>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <HAL_DMA_IRQHandler+0xa58>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00e      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3c      	ldr	r2, [pc, #240]	; (8005a94 <HAL_DMA_IRQHandler+0xa5c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a3a      	ldr	r2, [pc, #232]	; (8005a98 <HAL_DMA_IRQHandler+0xa60>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d004      	beq.n	80059bc <HAL_DMA_IRQHandler+0x984>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a39      	ldr	r2, [pc, #228]	; (8005a9c <HAL_DMA_IRQHandler+0xa64>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x988>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_DMA_IRQHandler+0x98a>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 823f 	beq.w	8005e46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2204      	movs	r2, #4
 80059da:	409a      	lsls	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80cd 	beq.w	8005b80 <HAL_DMA_IRQHandler+0xb48>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80c7 	beq.w	8005b80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2204      	movs	r2, #4
 80059fc:	409a      	lsls	r2, r3
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d049      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8210 	beq.w	8005e40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a28:	e20a      	b.n	8005e40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8206 	beq.w	8005e40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a3c:	e200      	b.n	8005e40 <HAL_DMA_IRQHandler+0xe08>
 8005a3e:	bf00      	nop
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020028 	.word	0x40020028
 8005a48:	40020040 	.word	0x40020040
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	40020070 	.word	0x40020070
 8005a54:	40020088 	.word	0x40020088
 8005a58:	400200a0 	.word	0x400200a0
 8005a5c:	400200b8 	.word	0x400200b8
 8005a60:	40020410 	.word	0x40020410
 8005a64:	40020428 	.word	0x40020428
 8005a68:	40020440 	.word	0x40020440
 8005a6c:	40020458 	.word	0x40020458
 8005a70:	40020470 	.word	0x40020470
 8005a74:	40020488 	.word	0x40020488
 8005a78:	400204a0 	.word	0x400204a0
 8005a7c:	400204b8 	.word	0x400204b8
 8005a80:	58025408 	.word	0x58025408
 8005a84:	5802541c 	.word	0x5802541c
 8005a88:	58025430 	.word	0x58025430
 8005a8c:	58025444 	.word	0x58025444
 8005a90:	58025458 	.word	0x58025458
 8005a94:	5802546c 	.word	0x5802546c
 8005a98:	58025480 	.word	0x58025480
 8005a9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d160      	bne.n	8005b6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a8c      	ldr	r2, [pc, #560]	; (8005ce0 <HAL_DMA_IRQHandler+0xca8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d04a      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a8a      	ldr	r2, [pc, #552]	; (8005ce4 <HAL_DMA_IRQHandler+0xcac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d045      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a89      	ldr	r2, [pc, #548]	; (8005ce8 <HAL_DMA_IRQHandler+0xcb0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d040      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a87      	ldr	r2, [pc, #540]	; (8005cec <HAL_DMA_IRQHandler+0xcb4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d03b      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a86      	ldr	r2, [pc, #536]	; (8005cf0 <HAL_DMA_IRQHandler+0xcb8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d036      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a84      	ldr	r2, [pc, #528]	; (8005cf4 <HAL_DMA_IRQHandler+0xcbc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d031      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a83      	ldr	r2, [pc, #524]	; (8005cf8 <HAL_DMA_IRQHandler+0xcc0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d02c      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a81      	ldr	r2, [pc, #516]	; (8005cfc <HAL_DMA_IRQHandler+0xcc4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d027      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a80      	ldr	r2, [pc, #512]	; (8005d00 <HAL_DMA_IRQHandler+0xcc8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7e      	ldr	r2, [pc, #504]	; (8005d04 <HAL_DMA_IRQHandler+0xccc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01d      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a7d      	ldr	r2, [pc, #500]	; (8005d08 <HAL_DMA_IRQHandler+0xcd0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a7b      	ldr	r2, [pc, #492]	; (8005d0c <HAL_DMA_IRQHandler+0xcd4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a7a      	ldr	r2, [pc, #488]	; (8005d10 <HAL_DMA_IRQHandler+0xcd8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a78      	ldr	r2, [pc, #480]	; (8005d14 <HAL_DMA_IRQHandler+0xcdc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a77      	ldr	r2, [pc, #476]	; (8005d18 <HAL_DMA_IRQHandler+0xce0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_DMA_IRQHandler+0xb12>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a75      	ldr	r2, [pc, #468]	; (8005d1c <HAL_DMA_IRQHandler+0xce4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <HAL_DMA_IRQHandler+0xb24>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0208 	bic.w	r2, r2, #8
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e007      	b.n	8005b6c <HAL_DMA_IRQHandler+0xb34>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0204 	bic.w	r2, r2, #4
 8005b6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8165 	beq.w	8005e40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b7e:	e15f      	b.n	8005e40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	2202      	movs	r2, #2
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80c5 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xce8>
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80bf 	beq.w	8005d20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2202      	movs	r2, #2
 8005bac:	409a      	lsls	r2, r3
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 813a 	beq.w	8005e44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bd8:	e134      	b.n	8005e44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 8130 	beq.w	8005e44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bec:	e12a      	b.n	8005e44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d168      	bne.n	8005cca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a38      	ldr	r2, [pc, #224]	; (8005ce0 <HAL_DMA_IRQHandler+0xca8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d04a      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <HAL_DMA_IRQHandler+0xcac>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d045      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a35      	ldr	r2, [pc, #212]	; (8005ce8 <HAL_DMA_IRQHandler+0xcb0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d040      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a34      	ldr	r2, [pc, #208]	; (8005cec <HAL_DMA_IRQHandler+0xcb4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d03b      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a32      	ldr	r2, [pc, #200]	; (8005cf0 <HAL_DMA_IRQHandler+0xcb8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d036      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a31      	ldr	r2, [pc, #196]	; (8005cf4 <HAL_DMA_IRQHandler+0xcbc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d031      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <HAL_DMA_IRQHandler+0xcc0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02c      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2e      	ldr	r2, [pc, #184]	; (8005cfc <HAL_DMA_IRQHandler+0xcc4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d027      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <HAL_DMA_IRQHandler+0xcc8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d022      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <HAL_DMA_IRQHandler+0xccc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d01d      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <HAL_DMA_IRQHandler+0xcd0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d018      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <HAL_DMA_IRQHandler+0xcd4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <HAL_DMA_IRQHandler+0xcd8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a25      	ldr	r2, [pc, #148]	; (8005d14 <HAL_DMA_IRQHandler+0xcdc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a23      	ldr	r2, [pc, #140]	; (8005d18 <HAL_DMA_IRQHandler+0xce0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d004      	beq.n	8005c98 <HAL_DMA_IRQHandler+0xc60>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a22      	ldr	r2, [pc, #136]	; (8005d1c <HAL_DMA_IRQHandler+0xce4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <HAL_DMA_IRQHandler+0xc72>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0214 	bic.w	r2, r2, #20
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e007      	b.n	8005cba <HAL_DMA_IRQHandler+0xc82>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 020a 	bic.w	r2, r2, #10
 8005cb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80b8 	beq.w	8005e44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cdc:	e0b2      	b.n	8005e44 <HAL_DMA_IRQHandler+0xe0c>
 8005cde:	bf00      	nop
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020028 	.word	0x40020028
 8005ce8:	40020040 	.word	0x40020040
 8005cec:	40020058 	.word	0x40020058
 8005cf0:	40020070 	.word	0x40020070
 8005cf4:	40020088 	.word	0x40020088
 8005cf8:	400200a0 	.word	0x400200a0
 8005cfc:	400200b8 	.word	0x400200b8
 8005d00:	40020410 	.word	0x40020410
 8005d04:	40020428 	.word	0x40020428
 8005d08:	40020440 	.word	0x40020440
 8005d0c:	40020458 	.word	0x40020458
 8005d10:	40020470 	.word	0x40020470
 8005d14:	40020488 	.word	0x40020488
 8005d18:	400204a0 	.word	0x400204a0
 8005d1c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2208      	movs	r2, #8
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8088 	beq.w	8005e46 <HAL_DMA_IRQHandler+0xe0e>
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8082 	beq.w	8005e46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a41      	ldr	r2, [pc, #260]	; (8005e4c <HAL_DMA_IRQHandler+0xe14>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d04a      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <HAL_DMA_IRQHandler+0xe18>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d045      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3e      	ldr	r2, [pc, #248]	; (8005e54 <HAL_DMA_IRQHandler+0xe1c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d040      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3c      	ldr	r2, [pc, #240]	; (8005e58 <HAL_DMA_IRQHandler+0xe20>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d03b      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <HAL_DMA_IRQHandler+0xe24>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d036      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <HAL_DMA_IRQHandler+0xe28>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d031      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a38      	ldr	r2, [pc, #224]	; (8005e64 <HAL_DMA_IRQHandler+0xe2c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d02c      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a36      	ldr	r2, [pc, #216]	; (8005e68 <HAL_DMA_IRQHandler+0xe30>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d027      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a35      	ldr	r2, [pc, #212]	; (8005e6c <HAL_DMA_IRQHandler+0xe34>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d022      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a33      	ldr	r2, [pc, #204]	; (8005e70 <HAL_DMA_IRQHandler+0xe38>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01d      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <HAL_DMA_IRQHandler+0xe3c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d018      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a30      	ldr	r2, [pc, #192]	; (8005e78 <HAL_DMA_IRQHandler+0xe40>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2f      	ldr	r2, [pc, #188]	; (8005e7c <HAL_DMA_IRQHandler+0xe44>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00e      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <HAL_DMA_IRQHandler+0xe48>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <HAL_DMA_IRQHandler+0xe4c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_DMA_IRQHandler+0xdaa>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <HAL_DMA_IRQHandler+0xe50>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <HAL_DMA_IRQHandler+0xdbc>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 021c 	bic.w	r2, r2, #28
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e007      	b.n	8005e04 <HAL_DMA_IRQHandler+0xdcc>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 020e 	bic.w	r2, r2, #14
 8005e02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
 8005e3a:	e004      	b.n	8005e46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e3c:	bf00      	nop
 8005e3e:	e002      	b.n	8005e46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e46:	3728      	adds	r7, #40	; 0x28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40020010 	.word	0x40020010
 8005e50:	40020028 	.word	0x40020028
 8005e54:	40020040 	.word	0x40020040
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	40020070 	.word	0x40020070
 8005e60:	40020088 	.word	0x40020088
 8005e64:	400200a0 	.word	0x400200a0
 8005e68:	400200b8 	.word	0x400200b8
 8005e6c:	40020410 	.word	0x40020410
 8005e70:	40020428 	.word	0x40020428
 8005e74:	40020440 	.word	0x40020440
 8005e78:	40020458 	.word	0x40020458
 8005e7c:	40020470 	.word	0x40020470
 8005e80:	40020488 	.word	0x40020488
 8005e84:	400204a0 	.word	0x400204a0
 8005e88:	400204b8 	.word	0x400204b8

08005e8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <DMA_CalcBaseAndBitshift+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a41      	ldr	r2, [pc, #260]	; (8005fa8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a3f      	ldr	r2, [pc, #252]	; (8005fac <DMA_CalcBaseAndBitshift+0x120>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a3e      	ldr	r2, [pc, #248]	; (8005fb0 <DMA_CalcBaseAndBitshift+0x124>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a3c      	ldr	r2, [pc, #240]	; (8005fb4 <DMA_CalcBaseAndBitshift+0x128>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a3b      	ldr	r2, [pc, #236]	; (8005fb8 <DMA_CalcBaseAndBitshift+0x12c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a39      	ldr	r2, [pc, #228]	; (8005fbc <DMA_CalcBaseAndBitshift+0x130>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a38      	ldr	r2, [pc, #224]	; (8005fc0 <DMA_CalcBaseAndBitshift+0x134>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a36      	ldr	r2, [pc, #216]	; (8005fc4 <DMA_CalcBaseAndBitshift+0x138>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a35      	ldr	r2, [pc, #212]	; (8005fc8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a33      	ldr	r2, [pc, #204]	; (8005fcc <DMA_CalcBaseAndBitshift+0x140>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a32      	ldr	r2, [pc, #200]	; (8005fd0 <DMA_CalcBaseAndBitshift+0x144>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <DMA_CalcBaseAndBitshift+0x148>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <DMA_CalcBaseAndBitshift+0x14c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <DMA_CalcBaseAndBitshift+0x150>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <DMA_CalcBaseAndBitshift+0xa8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2c      	ldr	r2, [pc, #176]	; (8005fe0 <DMA_CalcBaseAndBitshift+0x154>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <DMA_CalcBaseAndBitshift+0xac>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <DMA_CalcBaseAndBitshift+0xae>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d024      	beq.n	8005f88 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	3b10      	subs	r3, #16
 8005f46:	4a27      	ldr	r2, [pc, #156]	; (8005fe4 <DMA_CalcBaseAndBitshift+0x158>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f58:	5cd3      	ldrb	r3, [r2, r3]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d908      	bls.n	8005f78 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <DMA_CalcBaseAndBitshift+0x160>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	1d1a      	adds	r2, r3, #4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	659a      	str	r2, [r3, #88]	; 0x58
 8005f76:	e00d      	b.n	8005f94 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <DMA_CalcBaseAndBitshift+0x160>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6593      	str	r3, [r2, #88]	; 0x58
 8005f86:	e005      	b.n	8005f94 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40020010 	.word	0x40020010
 8005fa8:	40020028 	.word	0x40020028
 8005fac:	40020040 	.word	0x40020040
 8005fb0:	40020058 	.word	0x40020058
 8005fb4:	40020070 	.word	0x40020070
 8005fb8:	40020088 	.word	0x40020088
 8005fbc:	400200a0 	.word	0x400200a0
 8005fc0:	400200b8 	.word	0x400200b8
 8005fc4:	40020410 	.word	0x40020410
 8005fc8:	40020428 	.word	0x40020428
 8005fcc:	40020440 	.word	0x40020440
 8005fd0:	40020458 	.word	0x40020458
 8005fd4:	40020470 	.word	0x40020470
 8005fd8:	40020488 	.word	0x40020488
 8005fdc:	400204a0 	.word	0x400204a0
 8005fe0:	400204b8 	.word	0x400204b8
 8005fe4:	aaaaaaab 	.word	0xaaaaaaab
 8005fe8:	08011a20 	.word	0x08011a20
 8005fec:	fffffc00 	.word	0xfffffc00

08005ff0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d120      	bne.n	8006046 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	2b03      	cmp	r3, #3
 800600a:	d858      	bhi.n	80060be <DMA_CheckFifoParam+0xce>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <DMA_CheckFifoParam+0x24>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006025 	.word	0x08006025
 8006018:	08006037 	.word	0x08006037
 800601c:	08006025 	.word	0x08006025
 8006020:	080060bf 	.word	0x080060bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d048      	beq.n	80060c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006034:	e045      	b.n	80060c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800603e:	d142      	bne.n	80060c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006044:	e03f      	b.n	80060c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d123      	bne.n	8006098 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	2b03      	cmp	r3, #3
 8006056:	d838      	bhi.n	80060ca <DMA_CheckFifoParam+0xda>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <DMA_CheckFifoParam+0x70>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006071 	.word	0x08006071
 8006064:	08006077 	.word	0x08006077
 8006068:	08006071 	.word	0x08006071
 800606c:	08006089 	.word	0x08006089
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
        break;
 8006074:	e030      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d025      	beq.n	80060ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006086:	e022      	b.n	80060ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006090:	d11f      	bne.n	80060d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006096:	e01c      	b.n	80060d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	2b02      	cmp	r3, #2
 800609e:	d902      	bls.n	80060a6 <DMA_CheckFifoParam+0xb6>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80060a4:	e018      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
        break;
 80060aa:	e015      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00e      	beq.n	80060d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
    break;
 80060bc:	e00b      	b.n	80060d6 <DMA_CheckFifoParam+0xe6>
        break;
 80060be:	bf00      	nop
 80060c0:	e00a      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        break;
 80060c2:	bf00      	nop
 80060c4:	e008      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        break;
 80060c6:	bf00      	nop
 80060c8:	e006      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        break;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
        break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <DMA_CheckFifoParam+0xe8>
    break;
 80060d6:	bf00      	nop
    }
  }

  return status;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop

080060e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a38      	ldr	r2, [pc, #224]	; (80061dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d022      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a36      	ldr	r2, [pc, #216]	; (80061e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01d      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a35      	ldr	r2, [pc, #212]	; (80061e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a33      	ldr	r2, [pc, #204]	; (80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a32      	ldr	r2, [pc, #200]	; (80061ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	; (80061f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01a      	beq.n	8006186 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	3b08      	subs	r3, #8
 8006158:	4a28      	ldr	r2, [pc, #160]	; (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4b26      	ldr	r3, [pc, #152]	; (8006200 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a24      	ldr	r2, [pc, #144]	; (8006204 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006174:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006184:	e024      	b.n	80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	3b10      	subs	r3, #16
 800618e:	4a1e      	ldr	r2, [pc, #120]	; (8006208 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d806      	bhi.n	80061ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d902      	bls.n	80061ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3308      	adds	r3, #8
 80061ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a16      	ldr	r2, [pc, #88]	; (8006218 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2201      	movs	r2, #1
 80061ca:	409a      	lsls	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	58025408 	.word	0x58025408
 80061e0:	5802541c 	.word	0x5802541c
 80061e4:	58025430 	.word	0x58025430
 80061e8:	58025444 	.word	0x58025444
 80061ec:	58025458 	.word	0x58025458
 80061f0:	5802546c 	.word	0x5802546c
 80061f4:	58025480 	.word	0x58025480
 80061f8:	58025494 	.word	0x58025494
 80061fc:	cccccccd 	.word	0xcccccccd
 8006200:	16009600 	.word	0x16009600
 8006204:	58025880 	.word	0x58025880
 8006208:	aaaaaaab 	.word	0xaaaaaaab
 800620c:	400204b8 	.word	0x400204b8
 8006210:	4002040f 	.word	0x4002040f
 8006214:	10008200 	.word	0x10008200
 8006218:	40020880 	.word	0x40020880

0800621c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d04a      	beq.n	80062c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d847      	bhi.n	80062c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d022      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d01d      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d013      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00e      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d009      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1c      	ldr	r2, [pc, #112]	; (80062ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80062a4:	671a      	str	r2, [r3, #112]	; 0x70
 80062a6:	e009      	b.n	80062bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80062ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	58025408 	.word	0x58025408
 80062d8:	5802541c 	.word	0x5802541c
 80062dc:	58025430 	.word	0x58025430
 80062e0:	58025444 	.word	0x58025444
 80062e4:	58025458 	.word	0x58025458
 80062e8:	5802546c 	.word	0x5802546c
 80062ec:	58025480 	.word	0x58025480
 80062f0:	58025494 	.word	0x58025494
 80062f4:	1600963f 	.word	0x1600963f
 80062f8:	58025940 	.word	0x58025940
 80062fc:	1000823f 	.word	0x1000823f
 8006300:	40020940 	.word	0x40020940

08006304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006312:	4b86      	ldr	r3, [pc, #536]	; (800652c <HAL_GPIO_Init+0x228>)
 8006314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006316:	e18c      	b.n	8006632 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	2101      	movs	r1, #1
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 817e 	beq.w	800662c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d005      	beq.n	8006348 <HAL_GPIO_Init+0x44>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d130      	bne.n	80063aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	2203      	movs	r2, #3
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4313      	orrs	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800637e:	2201      	movs	r2, #1
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	f003 0201 	and.w	r2, r3, #1
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d017      	beq.n	80063e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	2203      	movs	r2, #3
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d123      	bne.n	800643a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	08da      	lsrs	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3208      	adds	r2, #8
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4313      	orrs	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	08da      	lsrs	r2, r3, #3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3208      	adds	r2, #8
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	2203      	movs	r2, #3
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 0203 	and.w	r2, r3, #3
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80d8 	beq.w	800662c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800647c:	4b2c      	ldr	r3, [pc, #176]	; (8006530 <HAL_GPIO_Init+0x22c>)
 800647e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006482:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <HAL_GPIO_Init+0x22c>)
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800648c:	4b28      	ldr	r3, [pc, #160]	; (8006530 <HAL_GPIO_Init+0x22c>)
 800648e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800649a:	4a26      	ldr	r2, [pc, #152]	; (8006534 <HAL_GPIO_Init+0x230>)
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	3302      	adds	r3, #2
 80064a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	220f      	movs	r2, #15
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	43db      	mvns	r3, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4013      	ands	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_GPIO_Init+0x234>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d04a      	beq.n	800655c <HAL_GPIO_Init+0x258>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1c      	ldr	r2, [pc, #112]	; (800653c <HAL_GPIO_Init+0x238>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d02b      	beq.n	8006526 <HAL_GPIO_Init+0x222>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <HAL_GPIO_Init+0x23c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d025      	beq.n	8006522 <HAL_GPIO_Init+0x21e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <HAL_GPIO_Init+0x240>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <HAL_GPIO_Init+0x21a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a19      	ldr	r2, [pc, #100]	; (8006548 <HAL_GPIO_Init+0x244>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d019      	beq.n	800651a <HAL_GPIO_Init+0x216>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_GPIO_Init+0x248>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_GPIO_Init+0x212>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a17      	ldr	r2, [pc, #92]	; (8006550 <HAL_GPIO_Init+0x24c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00d      	beq.n	8006512 <HAL_GPIO_Init+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a16      	ldr	r2, [pc, #88]	; (8006554 <HAL_GPIO_Init+0x250>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d007      	beq.n	800650e <HAL_GPIO_Init+0x20a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <HAL_GPIO_Init+0x254>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_GPIO_Init+0x206>
 8006506:	2309      	movs	r3, #9
 8006508:	e029      	b.n	800655e <HAL_GPIO_Init+0x25a>
 800650a:	230a      	movs	r3, #10
 800650c:	e027      	b.n	800655e <HAL_GPIO_Init+0x25a>
 800650e:	2307      	movs	r3, #7
 8006510:	e025      	b.n	800655e <HAL_GPIO_Init+0x25a>
 8006512:	2306      	movs	r3, #6
 8006514:	e023      	b.n	800655e <HAL_GPIO_Init+0x25a>
 8006516:	2305      	movs	r3, #5
 8006518:	e021      	b.n	800655e <HAL_GPIO_Init+0x25a>
 800651a:	2304      	movs	r3, #4
 800651c:	e01f      	b.n	800655e <HAL_GPIO_Init+0x25a>
 800651e:	2303      	movs	r3, #3
 8006520:	e01d      	b.n	800655e <HAL_GPIO_Init+0x25a>
 8006522:	2302      	movs	r3, #2
 8006524:	e01b      	b.n	800655e <HAL_GPIO_Init+0x25a>
 8006526:	2301      	movs	r3, #1
 8006528:	e019      	b.n	800655e <HAL_GPIO_Init+0x25a>
 800652a:	bf00      	nop
 800652c:	58000080 	.word	0x58000080
 8006530:	58024400 	.word	0x58024400
 8006534:	58000400 	.word	0x58000400
 8006538:	58020000 	.word	0x58020000
 800653c:	58020400 	.word	0x58020400
 8006540:	58020800 	.word	0x58020800
 8006544:	58020c00 	.word	0x58020c00
 8006548:	58021000 	.word	0x58021000
 800654c:	58021400 	.word	0x58021400
 8006550:	58021800 	.word	0x58021800
 8006554:	58021c00 	.word	0x58021c00
 8006558:	58022400 	.word	0x58022400
 800655c:	2300      	movs	r3, #0
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	f002 0203 	and.w	r2, r2, #3
 8006564:	0092      	lsls	r2, r2, #2
 8006566:	4093      	lsls	r3, r2
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800656e:	4938      	ldr	r1, [pc, #224]	; (8006650 <HAL_GPIO_Init+0x34c>)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	3302      	adds	r3, #2
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	43db      	mvns	r3, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4013      	ands	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	43db      	mvns	r3, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4013      	ands	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800661e:	69ba      	ldr	r2, [r7, #24]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	3301      	adds	r3, #1
 8006630:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	f47f ae6b 	bne.w	8006318 <HAL_GPIO_Init+0x14>
  }
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3724      	adds	r7, #36	; 0x24
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	58000400 	.word	0x58000400

08006654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	807b      	strh	r3, [r7, #2]
 8006660:	4613      	mov	r3, r2
 8006662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006664:	787b      	ldrb	r3, [r7, #1]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006670:	e003      	b.n	800667a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006672:	887b      	ldrh	r3, [r7, #2]
 8006674:	041a      	lsls	r2, r3, #16
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	619a      	str	r2, [r3, #24]
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e07f      	b.n	800679a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fb fb8c 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	; 0x24
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	e006      	b.n	8006710 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800670e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d104      	bne.n	8006722 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006720:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6859      	ldr	r1, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <HAL_I2C_Init+0x11c>)
 800672e:	430b      	orrs	r3, r1
 8006730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69d9      	ldr	r1, [r3, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	02008000 	.word	0x02008000

080067a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d138      	bne.n	8006830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e032      	b.n	8006832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	; 0x24
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b20      	cmp	r3, #32
 8006852:	d139      	bne.n	80068c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800685e:	2302      	movs	r3, #2
 8006860:	e033      	b.n	80068ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2224      	movs	r2, #36	; 0x24
 800686e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e000      	b.n	80068ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d8:	b08f      	sub	sp, #60	; 0x3c
 80068da:	af0a      	add	r7, sp, #40	; 0x28
 80068dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e116      	b.n	8006b16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f009 fef4 	bl	80106f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2203      	movs	r2, #3
 800690c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f006 fe17 	bl	800d55a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	687e      	ldr	r6, [r7, #4]
 8006934:	466d      	mov	r5, sp
 8006936:	f106 0410 	add.w	r4, r6, #16
 800693a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800693c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800693e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006946:	e885 0003 	stmia.w	r5, {r0, r1}
 800694a:	1d33      	adds	r3, r6, #4
 800694c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800694e:	6838      	ldr	r0, [r7, #0]
 8006950:	f006 fce2 	bl	800d318 <USB_CoreInit>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e0d7      	b.n	8006b16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f006 fe05 	bl	800d57c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	e04a      	b.n	8006a0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006978:	7bfa      	ldrb	r2, [r7, #15]
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	333d      	adds	r3, #61	; 0x3d
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800698c:	7bfa      	ldrb	r2, [r7, #15]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	333c      	adds	r3, #60	; 0x3c
 800699c:	7bfa      	ldrb	r2, [r7, #15]
 800699e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069a0:	7bfa      	ldrb	r2, [r7, #15]
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	b298      	uxth	r0, r3
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	3342      	adds	r3, #66	; 0x42
 80069b4:	4602      	mov	r2, r0
 80069b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069b8:	7bfa      	ldrb	r2, [r7, #15]
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	4613      	mov	r3, r2
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	333f      	adds	r3, #63	; 0x3f
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069cc:	7bfa      	ldrb	r2, [r7, #15]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	3344      	adds	r3, #68	; 0x44
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	3348      	adds	r3, #72	; 0x48
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80069f4:	7bfa      	ldrb	r2, [r7, #15]
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	3350      	adds	r3, #80	; 0x50
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	73fb      	strb	r3, [r7, #15]
 8006a0e:	7bfa      	ldrb	r2, [r7, #15]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d3af      	bcc.n	8006978 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	e044      	b.n	8006aa8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a1e:	7bfa      	ldrb	r2, [r7, #15]
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006a46:	7bfa      	ldrb	r2, [r7, #15]
 8006a48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a60:	7bfa      	ldrb	r2, [r7, #15]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a76:	7bfa      	ldrb	r2, [r7, #15]
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a8c:	7bfa      	ldrb	r2, [r7, #15]
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	7bfa      	ldrb	r2, [r7, #15]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d3b5      	bcc.n	8006a1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	687e      	ldr	r6, [r7, #4]
 8006aba:	466d      	mov	r5, sp
 8006abc:	f106 0410 	add.w	r4, r6, #16
 8006ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ac8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006acc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ad0:	1d33      	adds	r3, r6, #4
 8006ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ad4:	6838      	ldr	r0, [r7, #0]
 8006ad6:	f006 fd9d 	bl	800d614 <USB_DevInit>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e014      	b.n	8006b16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d102      	bne.n	8006b0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f885 	bl	8007c14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f007 fe35 	bl	800e77e <USB_DevDisconnect>

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_PCD_Start+0x1c>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e020      	b.n	8006b7c <HAL_PCD_Start+0x5e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d109      	bne.n	8006b5e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d005      	beq.n	8006b5e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f006 fce8 	bl	800d538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f007 fde5 	bl	800e73c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b08d      	sub	sp, #52	; 0x34
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f007 fea3 	bl	800e8e6 <USB_GetMode>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 83be 	bne.w	8007324 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f007 fe07 	bl	800e7c0 <USB_ReadInterrupts>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 83b4 	beq.w	8007322 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f007 fdfe 	bl	800e7c0 <USB_ReadInterrupts>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d107      	bne.n	8006bde <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f002 0202 	and.w	r2, r2, #2
 8006bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f007 fdec 	bl	800e7c0 <USB_ReadInterrupts>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d161      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0210 	bic.w	r2, r2, #16
 8006c00:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f003 020f 	and.w	r2, r3, #15
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3304      	adds	r3, #4
 8006c20:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	0c5b      	lsrs	r3, r3, #17
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d124      	bne.n	8006c78 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d035      	beq.n	8006ca6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6a38      	ldr	r0, [r7, #32]
 8006c4e:	f007 fc23 	bl	800e498 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c5e:	441a      	add	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c70:	441a      	add	r2, r3
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	619a      	str	r2, [r3, #24]
 8006c76:	e016      	b.n	8006ca6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	0c5b      	lsrs	r3, r3, #17
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	2b06      	cmp	r3, #6
 8006c82:	d110      	bne.n	8006ca6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6a38      	ldr	r0, [r7, #32]
 8006c90:	f007 fc02 	bl	800e498 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ca0:	441a      	add	r2, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0210 	orr.w	r2, r2, #16
 8006cb4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f007 fd80 	bl	800e7c0 <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cca:	d16e      	bne.n	8006daa <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f007 fd86 	bl	800e7e6 <USB_ReadDevAllOutEpInterrupt>
 8006cda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006cdc:	e062      	b.n	8006da4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d057      	beq.n	8006d98 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f007 fdab 	bl	800e84e <USB_ReadDevOutEPInterrupt>
 8006cf8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	461a      	mov	r2, r3
 8006d12:	2301      	movs	r3, #1
 8006d14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fdd1 	bl	80078c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	461a      	mov	r2, r3
 8006d36:	2308      	movs	r3, #8
 8006d38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fecb 	bl	8007ad8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d58:	461a      	mov	r2, r3
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	2320      	movs	r3, #32
 8006d78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d199      	bne.n	8006cde <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f007 fd06 	bl	800e7c0 <USB_ReadInterrupts>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dbe:	f040 80c4 	bne.w	8006f4a <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f007 fd27 	bl	800e81a <USB_ReadDevAllInEpInterrupt>
 8006dcc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006dd2:	e0b6      	b.n	8006f42 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 80ab 	beq.w	8006f36 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f007 fd4d 	bl	800e88a <USB_ReadDevInEPInterrupt>
 8006df0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d057      	beq.n	8006eac <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	2201      	movs	r2, #1
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	69f9      	ldr	r1, [r7, #28]
 8006e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2301      	movs	r3, #1
 8006e30:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d132      	bne.n	8006ea0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	3348      	adds	r3, #72	; 0x48
 8006e4a:	6819      	ldr	r1, [r3, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4403      	add	r3, r0
 8006e5a:	3344      	adds	r3, #68	; 0x44
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4419      	add	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4403      	add	r3, r0
 8006e6e:	3348      	adds	r3, #72	; 0x48
 8006e70:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d113      	bne.n	8006ea0 <HAL_PCD_IRQHandler+0x31c>
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	1a9b      	subs	r3, r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	3350      	adds	r3, #80	; 0x50
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	f007 fd56 	bl	800e94c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f009 fc91 	bl	80107ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2310      	movs	r3, #16
 8006ee2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	461a      	mov	r2, r3
 8006efc:	2340      	movs	r3, #64	; 0x40
 8006efe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00c      	beq.n	8006f24 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006f0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f0c:	6a38      	ldr	r0, [r7, #32]
 8006f0e:	f006 fcdf 	bl	800d8d0 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2302      	movs	r3, #2
 8006f22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fc38 	bl	80077a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	3301      	adds	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f af45 	bne.w	8006dd4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f007 fc36 	bl	800e7c0 <USB_ReadInterrupts>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5e:	d122      	bne.n	8006fa6 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d108      	bne.n	8006f90 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fe67 	bl	8007c5c <HAL_PCDEx_LPM_Callback>
 8006f8e:	e002      	b.n	8006f96 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f009 fc93 	bl	80108bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f007 fc08 	bl	800e7c0 <USB_ReadInterrupts>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fba:	d112      	bne.n	8006fe2 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d102      	bne.n	8006fd2 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f009 fc4f 	bl	8010870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f007 fbea 	bl	800e7c0 <USB_ReadInterrupts>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff6:	d121      	bne.n	800703c <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007006:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d111      	bne.n	8007036 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	f003 020f 	and.w	r2, r3, #15
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fe14 	bl	8007c5c <HAL_PCDEx_LPM_Callback>
 8007034:	e002      	b.n	800703c <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f009 fc1a 	bl	8010870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f007 fbbd 	bl	800e7c0 <USB_ReadInterrupts>
 8007046:	4603      	mov	r3, r0
 8007048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800704c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007050:	f040 80b7 	bne.w	80071c2 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007062:	f023 0301 	bic.w	r3, r3, #1
 8007066:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2110      	movs	r1, #16
 800706e:	4618      	mov	r0, r3
 8007070:	f006 fc2e 	bl	800d8d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007074:	2300      	movs	r3, #0
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007078:	e046      	b.n	8007108 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	461a      	mov	r2, r3
 8007088:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800708c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	461a      	mov	r2, r3
 80070bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007100:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	3301      	adds	r3, #1
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	d3b3      	bcc.n	800707a <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007120:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007124:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f043 030b 	orr.w	r3, r3, #11
 8007142:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007154:	f043 030b 	orr.w	r3, r3, #11
 8007158:	6453      	str	r3, [r2, #68]	; 0x44
 800715a:	e015      	b.n	8007188 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	695a      	ldr	r2, [r3, #20]
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	4619      	mov	r1, r3
 800716c:	f242 032b 	movw	r3, #8235	; 0x202b
 8007170:	4313      	orrs	r3, r2
 8007172:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007182:	f043 030b 	orr.w	r3, r3, #11
 8007186:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007196:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800719a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071ac:	461a      	mov	r2, r3
 80071ae:	f007 fbcd 	bl	800e94c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80071c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f007 fafa 	bl	800e7c0 <USB_ReadInterrupts>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d6:	d124      	bne.n	8007222 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f007 fb91 	bl	800e904 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f006 fbeb 	bl	800d9c2 <USB_GetDevSpeed>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681c      	ldr	r4, [r3, #0]
 80071f8:	f001 fc62 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 80071fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	4620      	mov	r0, r4
 8007208:	f006 f8f4 	bl	800d3f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f009 fb06 	bl	801081e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007220:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f007 faca 	bl	800e7c0 <USB_ReadInterrupts>
 800722c:	4603      	mov	r3, r0
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b08      	cmp	r3, #8
 8007234:	d10a      	bne.n	800724c <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f009 fae3 	bl	8010802 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695a      	ldr	r2, [r3, #20]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f002 0208 	and.w	r2, r2, #8
 800724a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f007 fab5 	bl	800e7c0 <USB_ReadInterrupts>
 8007256:	4603      	mov	r3, r0
 8007258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800725c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007260:	d10f      	bne.n	8007282 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	b2db      	uxtb	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f009 fb45 	bl	80108fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f007 fa9a 	bl	800e7c0 <USB_ReadInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007296:	d10f      	bne.n	80072b8 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f009 fb18 	bl	80108d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695a      	ldr	r2, [r3, #20]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80072b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f007 fa7f 	bl	800e7c0 <USB_ReadInterrupts>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072cc:	d10a      	bne.n	80072e4 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f009 fb26 	bl	8010920 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80072e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f007 fa69 	bl	800e7c0 <USB_ReadInterrupts>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d115      	bne.n	8007324 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f009 fb16 	bl	801093c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	430a      	orrs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]
 8007320:	e000      	b.n	8007324 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8007322:	bf00      	nop
    }
  }
}
 8007324:	3734      	adds	r7, #52	; 0x34
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}

0800732a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_PCD_SetAddress+0x1a>
 8007340:	2302      	movs	r3, #2
 8007342:	e013      	b.n	800736c <HAL_PCD_SetAddress+0x42>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	4611      	mov	r1, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f007 f9c7 	bl	800e6f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	4603      	mov	r3, r0
 8007384:	70fb      	strb	r3, [r7, #3]
 8007386:	460b      	mov	r3, r1
 8007388:	803b      	strh	r3, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da0f      	bge.n	80073ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	3338      	adds	r3, #56	; 0x38
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4413      	add	r3, r2
 80073ae:	3304      	adds	r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	705a      	strb	r2, [r3, #1]
 80073b8:	e00f      	b.n	80073da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 020f 	and.w	r2, r3, #15
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	3304      	adds	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073e6:	883a      	ldrh	r2, [r7, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	78ba      	ldrb	r2, [r7, #2]
 80073f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007404:	78bb      	ldrb	r3, [r7, #2]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d102      	bne.n	8007410 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_PCD_EP_Open+0xaa>
 800741a:	2302      	movs	r3, #2
 800741c:	e00e      	b.n	800743c <HAL_PCD_EP_Open+0xc8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	4618      	mov	r0, r3
 800742e:	f006 faed 	bl	800da0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800743a:	7afb      	ldrb	r3, [r7, #11]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007454:	2b00      	cmp	r3, #0
 8007456:	da0f      	bge.n	8007478 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	f003 020f 	and.w	r2, r3, #15
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	3338      	adds	r3, #56	; 0x38
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	4413      	add	r3, r2
 800746c:	3304      	adds	r3, #4
 800746e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	705a      	strb	r2, [r3, #1]
 8007476:	e00f      	b.n	8007498 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	4613      	mov	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	3304      	adds	r3, #4
 8007490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_PCD_EP_Close+0x6e>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e00e      	b.n	80074d0 <HAL_PCD_EP_Close+0x8c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f006 fb2b 	bl	800db1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	460b      	mov	r3, r1
 80074e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074e8:	7afb      	ldrb	r3, [r7, #11]
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	4613      	mov	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	3304      	adds	r3, #4
 8007500:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2200      	movs	r2, #0
 8007512:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2200      	movs	r2, #0
 8007518:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	f003 030f 	and.w	r3, r3, #15
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d102      	bne.n	8007534 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6979      	ldr	r1, [r7, #20]
 800754c:	f006 fe0e 	bl	800e16c <USB_EP0StartXfer>
 8007550:	e008      	b.n	8007564 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6979      	ldr	r1, [r7, #20]
 8007560:	f006 fbb8 	bl	800dcd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	00db      	lsls	r3, r3, #3
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007590:	681b      	ldr	r3, [r3, #0]
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	460b      	mov	r3, r1
 80075ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	f003 020f 	and.w	r2, r3, #15
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	1a9b      	subs	r3, r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	3338      	adds	r3, #56	; 0x38
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2200      	movs	r2, #0
 80075d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2201      	movs	r2, #1
 80075dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	461a      	mov	r2, r3
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	f006 fdac 	bl	800e16c <USB_EP0StartXfer>
 8007614:	e008      	b.n	8007628 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	461a      	mov	r2, r3
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	f006 fb56 	bl	800dcd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d901      	bls.n	8007650 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e050      	b.n	80076f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	da0f      	bge.n	8007678 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	f003 020f 	and.w	r2, r3, #15
 800765e:	4613      	mov	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3338      	adds	r3, #56	; 0x38
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	705a      	strb	r2, [r3, #1]
 8007676:	e00d      	b.n	8007694 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	4613      	mov	r3, r2
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	3304      	adds	r3, #4
 800768c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_PCD_EP_SetStall+0x82>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e01e      	b.n	80076f2 <HAL_PCD_EP_SetStall+0xc0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f006 ff40 	bl	800e548 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	b2d9      	uxtb	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076e2:	461a      	mov	r2, r3
 80076e4:	f007 f932 	bl	800e94c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 020f 	and.w	r2, r3, #15
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d901      	bls.n	8007718 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e042      	b.n	800779e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da0f      	bge.n	8007740 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	f003 020f 	and.w	r2, r3, #15
 8007726:	4613      	mov	r3, r2
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	3338      	adds	r3, #56	; 0x38
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	3304      	adds	r3, #4
 8007736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	705a      	strb	r2, [r3, #1]
 800773e:	e00f      	b.n	8007760 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	4613      	mov	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	3304      	adds	r3, #4
 8007758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_PCD_EP_ClrStall+0x86>
 800777c:	2302      	movs	r3, #2
 800777e:	e00e      	b.n	800779e <HAL_PCD_EP_ClrStall+0xa4>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68f9      	ldr	r1, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	f006 ff48 	bl	800e624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b08a      	sub	sp, #40	; 0x28
 80077aa:	af02      	add	r7, sp, #8
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	3338      	adds	r3, #56	; 0x38
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	3304      	adds	r3, #4
 80077cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	699a      	ldr	r2, [r3, #24]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d901      	bls.n	80077de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e06c      	b.n	80078b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d902      	bls.n	80077fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	3303      	adds	r3, #3
 80077fe:	089b      	lsrs	r3, r3, #2
 8007800:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007802:	e02b      	b.n	800785c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	429a      	cmp	r2, r3
 8007818:	d902      	bls.n	8007820 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3303      	adds	r3, #3
 8007824:	089b      	lsrs	r3, r3, #2
 8007826:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68d9      	ldr	r1, [r3, #12]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	b2da      	uxtb	r2, r3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007838:	b2db      	uxtb	r3, r3
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4603      	mov	r3, r0
 800783e:	6978      	ldr	r0, [r7, #20]
 8007840:	f006 fdec 	bl	800e41c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	441a      	add	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	441a      	add	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	b29b      	uxth	r3, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	429a      	cmp	r2, r3
 8007870:	d809      	bhi.n	8007886 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800787a:	429a      	cmp	r2, r3
 800787c:	d203      	bcs.n	8007886 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1be      	bne.n	8007804 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d811      	bhi.n	80078b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2201      	movs	r2, #1
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	43db      	mvns	r3, r3
 80078ac:	6939      	ldr	r1, [r7, #16]
 80078ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b2:	4013      	ands	r3, r2
 80078b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	333c      	adds	r3, #60	; 0x3c
 80078d8:	3304      	adds	r3, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	f040 80a0 	bne.w	8007a38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d015      	beq.n	800792e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a72      	ldr	r2, [pc, #456]	; (8007ad0 <PCD_EP_OutXfrComplete_int+0x210>)
 8007906:	4293      	cmp	r3, r2
 8007908:	f240 80dd 	bls.w	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80d7 	beq.w	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	461a      	mov	r2, r3
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	6093      	str	r3, [r2, #8]
 800792c:	e0cb      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	461a      	mov	r2, r3
 8007946:	2320      	movs	r3, #32
 8007948:	6093      	str	r3, [r2, #8]
 800794a:	e0bc      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 80b7 	bne.w	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4a5d      	ldr	r2, [pc, #372]	; (8007ad0 <PCD_EP_OutXfrComplete_int+0x210>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d90f      	bls.n	8007980 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	461a      	mov	r2, r3
 8007978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800797c:	6093      	str	r3, [r2, #8]
 800797e:	e0a2      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	1a9b      	subs	r3, r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007992:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	0159      	lsls	r1, r3, #5
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	440b      	add	r3, r1
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80079a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4403      	add	r3, r0
 80079b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80079ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4403      	add	r3, r0
 80079de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4419      	add	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	1a9b      	subs	r3, r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4403      	add	r3, r0
 80079f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d114      	bne.n	8007a2a <PCD_EP_OutXfrComplete_int+0x16a>
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d108      	bne.n	8007a2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a22:	461a      	mov	r2, r3
 8007a24:	2101      	movs	r1, #1
 8007a26:	f006 ff91 	bl	800e94c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f008 feb1 	bl	8010798 <HAL_PCD_DataOutStageCallback>
 8007a36:	e046      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a26      	ldr	r2, [pc, #152]	; (8007ad4 <PCD_EP_OutXfrComplete_int+0x214>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d124      	bne.n	8007a8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	461a      	mov	r2, r3
 8007a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5c:	6093      	str	r3, [r2, #8]
 8007a5e:	e032      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a76:	461a      	mov	r2, r3
 8007a78:	2320      	movs	r3, #32
 8007a7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f008 fe88 	bl	8010798 <HAL_PCD_DataOutStageCallback>
 8007a88:	e01d      	b.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d114      	bne.n	8007aba <PCD_EP_OutXfrComplete_int+0x1fa>
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d108      	bne.n	8007aba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f006 ff49 	bl	800e94c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f008 fe69 	bl	8010798 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	4f54300a 	.word	0x4f54300a
 8007ad4:	4f54310a 	.word	0x4f54310a

08007ad8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	333c      	adds	r3, #60	; 0x3c
 8007af0:	3304      	adds	r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d90e      	bls.n	8007b2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	461a      	mov	r2, r3
 8007b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f008 fe21 	bl	8010774 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d90c      	bls.n	8007b54 <PCD_EP_OutSetupPacket_int+0x7c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d108      	bne.n	8007b54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	2101      	movs	r1, #1
 8007b50:	f006 fefc 	bl	800e94c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	4f54300a 	.word	0x4f54300a

08007b64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70fb      	strb	r3, [r7, #3]
 8007b70:	4613      	mov	r3, r2
 8007b72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007b82:	883b      	ldrh	r3, [r7, #0]
 8007b84:	0419      	lsls	r1, r3, #16
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007b90:	e028      	b.n	8007be4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e00d      	b.n	8007bc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	3340      	adds	r3, #64	; 0x40
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	0c1b      	lsrs	r3, r3, #16
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4413      	add	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
 8007bc2:	7bfa      	ldrb	r2, [r7, #15]
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d3ec      	bcc.n	8007ba6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007bcc:	883b      	ldrh	r3, [r7, #0]
 8007bce:	0418      	lsls	r0, r3, #16
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	4302      	orrs	r2, r0
 8007bdc:	3340      	adds	r3, #64	; 0x40
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	887a      	ldrh	r2, [r7, #2]
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <HAL_PCDEx_ActivateLPM+0x44>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	10000003 	.word	0x10000003

08007c5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c7c:	4b19      	ldr	r3, [pc, #100]	; (8007ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d00a      	beq.n	8007c9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c88:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d001      	beq.n	8007c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e01f      	b.n	8007cda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e01d      	b.n	8007cda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f023 0207 	bic.w	r2, r3, #7
 8007ca6:	490f      	ldr	r1, [pc, #60]	; (8007ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007cae:	f7fa fef7 	bl	8002aa0 <HAL_GetTick>
 8007cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cb4:	e009      	b.n	8007cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007cb6:	f7fa fef3 	bl	8002aa0 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cc4:	d901      	bls.n	8007cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e007      	b.n	8007cda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd6:	d1ee      	bne.n	8007cb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	58024800 	.word	0x58024800

08007ce8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cf6:	60d3      	str	r3, [r2, #12]
}
 8007cf8:	bf00      	nop
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	58024800 	.word	0x58024800

08007d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08c      	sub	sp, #48	; 0x30
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e397      	b.n	800844a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8087 	beq.w	8007e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d28:	4b9e      	ldr	r3, [pc, #632]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d32:	4b9c      	ldr	r3, [pc, #624]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	d007      	beq.n	8007d4e <HAL_RCC_OscConfig+0x46>
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2b18      	cmp	r3, #24
 8007d42:	d110      	bne.n	8007d66 <HAL_RCC_OscConfig+0x5e>
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d10b      	bne.n	8007d66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d4e:	4b95      	ldr	r3, [pc, #596]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d06c      	beq.n	8007e34 <HAL_RCC_OscConfig+0x12c>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d168      	bne.n	8007e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e371      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d6e:	d106      	bne.n	8007d7e <HAL_RCC_OscConfig+0x76>
 8007d70:	4b8c      	ldr	r3, [pc, #560]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a8b      	ldr	r2, [pc, #556]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	e02e      	b.n	8007ddc <HAL_RCC_OscConfig+0xd4>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <HAL_RCC_OscConfig+0x98>
 8007d86:	4b87      	ldr	r3, [pc, #540]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a86      	ldr	r2, [pc, #536]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	4b84      	ldr	r3, [pc, #528]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a83      	ldr	r2, [pc, #524]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e01d      	b.n	8007ddc <HAL_RCC_OscConfig+0xd4>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da8:	d10c      	bne.n	8007dc4 <HAL_RCC_OscConfig+0xbc>
 8007daa:	4b7e      	ldr	r3, [pc, #504]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a7d      	ldr	r2, [pc, #500]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	4b7b      	ldr	r3, [pc, #492]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a7a      	ldr	r2, [pc, #488]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	e00b      	b.n	8007ddc <HAL_RCC_OscConfig+0xd4>
 8007dc4:	4b77      	ldr	r3, [pc, #476]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a76      	ldr	r2, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	4b74      	ldr	r3, [pc, #464]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a73      	ldr	r2, [pc, #460]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d013      	beq.n	8007e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fa fe5c 	bl	8002aa0 <HAL_GetTick>
 8007de8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dec:	f7fa fe58 	bl	8002aa0 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b64      	cmp	r3, #100	; 0x64
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e325      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dfe:	4b69      	ldr	r3, [pc, #420]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f0      	beq.n	8007dec <HAL_RCC_OscConfig+0xe4>
 8007e0a:	e014      	b.n	8007e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fa fe48 	bl	8002aa0 <HAL_GetTick>
 8007e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e14:	f7fa fe44 	bl	8002aa0 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b64      	cmp	r3, #100	; 0x64
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e311      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e26:	4b5f      	ldr	r3, [pc, #380]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x10c>
 8007e32:	e000      	b.n	8007e36 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 808a 	beq.w	8007f58 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e44:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e4e:	4b55      	ldr	r3, [pc, #340]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <HAL_RCC_OscConfig+0x162>
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	2b18      	cmp	r3, #24
 8007e5e:	d137      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x1c8>
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d132      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e6a:	4b4e      	ldr	r3, [pc, #312]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_RCC_OscConfig+0x17a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e2e3      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e82:	4b48      	ldr	r3, [pc, #288]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f023 0219 	bic.w	r2, r3, #25
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	4945      	ldr	r1, [pc, #276]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e94:	f7fa fe04 	bl	8002aa0 <HAL_GetTick>
 8007e98:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e9c:	f7fa fe00 	bl	8002aa0 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e2cd      	b.n	800844a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eae:	4b3d      	ldr	r3, [pc, #244]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eba:	4b3a      	ldr	r3, [pc, #232]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	061b      	lsls	r3, r3, #24
 8007ec8:	4936      	ldr	r1, [pc, #216]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ece:	e043      	b.n	8007f58 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d026      	beq.n	8007f26 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ed8:	4b32      	ldr	r3, [pc, #200]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f023 0219 	bic.w	r2, r3, #25
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	492f      	ldr	r1, [pc, #188]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eea:	f7fa fdd9 	bl	8002aa0 <HAL_GetTick>
 8007eee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef2:	f7fa fdd5 	bl	8002aa0 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e2a2      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f04:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d0f0      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f10:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	061b      	lsls	r3, r3, #24
 8007f1e:	4921      	ldr	r1, [pc, #132]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	604b      	str	r3, [r1, #4]
 8007f24:	e018      	b.n	8007f58 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f26:	4b1f      	ldr	r3, [pc, #124]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f32:	f7fa fdb5 	bl	8002aa0 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f3a:	f7fa fdb1 	bl	8002aa0 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e27e      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f4c:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f0      	bne.n	8007f3a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d06d      	beq.n	8008040 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d007      	beq.n	8007f8a <HAL_RCC_OscConfig+0x282>
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b18      	cmp	r3, #24
 8007f7e:	d11e      	bne.n	8007fbe <HAL_RCC_OscConfig+0x2b6>
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d119      	bne.n	8007fbe <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f8a:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <HAL_RCC_OscConfig+0x29c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d008      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x2a0>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d004      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e253      	b.n	800844a <HAL_RCC_OscConfig+0x742>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fa8:	4ba3      	ldr	r3, [pc, #652]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	49a0      	ldr	r1, [pc, #640]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fbc:	e040      	b.n	8008040 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d023      	beq.n	800800e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fc6:	4b9c      	ldr	r3, [pc, #624]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a9b      	ldr	r2, [pc, #620]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd2:	f7fa fd65 	bl	8002aa0 <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fd8:	e008      	b.n	8007fec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fda:	f7fa fd61 	bl	8002aa0 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d901      	bls.n	8007fec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e22e      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fec:	4b92      	ldr	r3, [pc, #584]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0f0      	beq.n	8007fda <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff8:	4b8f      	ldr	r3, [pc, #572]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	061b      	lsls	r3, r3, #24
 8008006:	498c      	ldr	r1, [pc, #560]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008008:	4313      	orrs	r3, r2
 800800a:	60cb      	str	r3, [r1, #12]
 800800c:	e018      	b.n	8008040 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800800e:	4b8a      	ldr	r3, [pc, #552]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a89      	ldr	r2, [pc, #548]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801a:	f7fa fd41 	bl	8002aa0 <HAL_GetTick>
 800801e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008022:	f7fa fd3d 	bl	8002aa0 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e20a      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008034:	4b80      	ldr	r3, [pc, #512]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f0      	bne.n	8008022 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d036      	beq.n	80080ba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d019      	beq.n	8008088 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008054:	4b78      	ldr	r3, [pc, #480]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008058:	4a77      	ldr	r2, [pc, #476]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008060:	f7fa fd1e 	bl	8002aa0 <HAL_GetTick>
 8008064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008068:	f7fa fd1a 	bl	8002aa0 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e1e7      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800807a:	4b6f      	ldr	r3, [pc, #444]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800807c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f0      	beq.n	8008068 <HAL_RCC_OscConfig+0x360>
 8008086:	e018      	b.n	80080ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008088:	4b6b      	ldr	r3, [pc, #428]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800808a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808c:	4a6a      	ldr	r2, [pc, #424]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fa fd04 	bl	8002aa0 <HAL_GetTick>
 8008098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800809a:	e008      	b.n	80080ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800809c:	f7fa fd00 	bl	8002aa0 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d901      	bls.n	80080ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e1cd      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080ae:	4b62      	ldr	r3, [pc, #392]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80080b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f0      	bne.n	800809c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d036      	beq.n	8008134 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d019      	beq.n	8008102 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080ce:	4b5a      	ldr	r3, [pc, #360]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a59      	ldr	r2, [pc, #356]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80080d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080da:	f7fa fce1 	bl	8002aa0 <HAL_GetTick>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080e2:	f7fa fcdd 	bl	8002aa0 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e1aa      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080f4:	4b50      	ldr	r3, [pc, #320]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f0      	beq.n	80080e2 <HAL_RCC_OscConfig+0x3da>
 8008100:	e018      	b.n	8008134 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008102:	4b4d      	ldr	r3, [pc, #308]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a4c      	ldr	r2, [pc, #304]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800810c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800810e:	f7fa fcc7 	bl	8002aa0 <HAL_GetTick>
 8008112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008116:	f7fa fcc3 	bl	8002aa0 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e190      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008128:	4b43      	ldr	r3, [pc, #268]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f0      	bne.n	8008116 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8085 	beq.w	800824c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008142:	4b3e      	ldr	r3, [pc, #248]	; (800823c <HAL_RCC_OscConfig+0x534>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a3d      	ldr	r2, [pc, #244]	; (800823c <HAL_RCC_OscConfig+0x534>)
 8008148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800814e:	f7fa fca7 	bl	8002aa0 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008156:	f7fa fca3 	bl	8002aa0 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b64      	cmp	r3, #100	; 0x64
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e170      	b.n	800844a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008168:	4b34      	ldr	r3, [pc, #208]	; (800823c <HAL_RCC_OscConfig+0x534>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f0      	beq.n	8008156 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d106      	bne.n	800818a <HAL_RCC_OscConfig+0x482>
 800817c:	4b2e      	ldr	r3, [pc, #184]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800817e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008180:	4a2d      	ldr	r2, [pc, #180]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	6713      	str	r3, [r2, #112]	; 0x70
 8008188:	e02d      	b.n	80081e6 <HAL_RCC_OscConfig+0x4de>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10c      	bne.n	80081ac <HAL_RCC_OscConfig+0x4a4>
 8008192:	4b29      	ldr	r3, [pc, #164]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a28      	ldr	r2, [pc, #160]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
 800819e:	4b26      	ldr	r3, [pc, #152]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	4a25      	ldr	r2, [pc, #148]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081a4:	f023 0304 	bic.w	r3, r3, #4
 80081a8:	6713      	str	r3, [r2, #112]	; 0x70
 80081aa:	e01c      	b.n	80081e6 <HAL_RCC_OscConfig+0x4de>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	d10c      	bne.n	80081ce <HAL_RCC_OscConfig+0x4c6>
 80081b4:	4b20      	ldr	r3, [pc, #128]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b8:	4a1f      	ldr	r2, [pc, #124]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081ba:	f043 0304 	orr.w	r3, r3, #4
 80081be:	6713      	str	r3, [r2, #112]	; 0x70
 80081c0:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	6713      	str	r3, [r2, #112]	; 0x70
 80081cc:	e00b      	b.n	80081e6 <HAL_RCC_OscConfig+0x4de>
 80081ce:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d2:	4a19      	ldr	r2, [pc, #100]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081d4:	f023 0301 	bic.w	r3, r3, #1
 80081d8:	6713      	str	r3, [r2, #112]	; 0x70
 80081da:	4b17      	ldr	r3, [pc, #92]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	4a16      	ldr	r2, [pc, #88]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 80081e0:	f023 0304 	bic.w	r3, r3, #4
 80081e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d015      	beq.n	800821a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ee:	f7fa fc57 	bl	8002aa0 <HAL_GetTick>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081f4:	e00a      	b.n	800820c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081f6:	f7fa fc53 	bl	8002aa0 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	4293      	cmp	r3, r2
 8008206:	d901      	bls.n	800820c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e11e      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_RCC_OscConfig+0x530>)
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0ee      	beq.n	80081f6 <HAL_RCC_OscConfig+0x4ee>
 8008218:	e018      	b.n	800824c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821a:	f7fa fc41 	bl	8002aa0 <HAL_GetTick>
 800821e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008220:	e00e      	b.n	8008240 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008222:	f7fa fc3d 	bl	8002aa0 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008230:	4293      	cmp	r3, r2
 8008232:	d905      	bls.n	8008240 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e108      	b.n	800844a <HAL_RCC_OscConfig+0x742>
 8008238:	58024400 	.word	0x58024400
 800823c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008240:	4b84      	ldr	r3, [pc, #528]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1ea      	bne.n	8008222 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80f9 	beq.w	8008448 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008256:	4b7f      	ldr	r3, [pc, #508]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800825e:	2b18      	cmp	r3, #24
 8008260:	f000 80b4 	beq.w	80083cc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b02      	cmp	r3, #2
 800826a:	f040 8095 	bne.w	8008398 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800826e:	4b79      	ldr	r3, [pc, #484]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a78      	ldr	r2, [pc, #480]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827a:	f7fa fc11 	bl	8002aa0 <HAL_GetTick>
 800827e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008282:	f7fa fc0d 	bl	8002aa0 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e0da      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008294:	4b6f      	ldr	r3, [pc, #444]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f0      	bne.n	8008282 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082a0:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a4:	4b6c      	ldr	r3, [pc, #432]	; (8008458 <HAL_RCC_OscConfig+0x750>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082b0:	0112      	lsls	r2, r2, #4
 80082b2:	430a      	orrs	r2, r1
 80082b4:	4967      	ldr	r1, [pc, #412]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	628b      	str	r3, [r1, #40]	; 0x28
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	3b01      	subs	r3, #1
 80082c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	3b01      	subs	r3, #1
 80082ca:	025b      	lsls	r3, r3, #9
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	3b01      	subs	r3, #1
 80082d6:	041b      	lsls	r3, r3, #16
 80082d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	3b01      	subs	r3, #1
 80082e4:	061b      	lsls	r3, r3, #24
 80082e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082ea:	495a      	ldr	r1, [pc, #360]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80082f0:	4b58      	ldr	r3, [pc, #352]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	4a57      	ldr	r2, [pc, #348]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082f6:	f023 0301 	bic.w	r3, r3, #1
 80082fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082fc:	4b55      	ldr	r3, [pc, #340]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80082fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008300:	4b56      	ldr	r3, [pc, #344]	; (800845c <HAL_RCC_OscConfig+0x754>)
 8008302:	4013      	ands	r3, r2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008308:	00d2      	lsls	r2, r2, #3
 800830a:	4952      	ldr	r1, [pc, #328]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800830c:	4313      	orrs	r3, r2
 800830e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008310:	4b50      	ldr	r3, [pc, #320]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	f023 020c 	bic.w	r2, r3, #12
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	494d      	ldr	r1, [pc, #308]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008322:	4b4c      	ldr	r3, [pc, #304]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	f023 0202 	bic.w	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	4949      	ldr	r1, [pc, #292]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008334:	4b47      	ldr	r3, [pc, #284]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	4a46      	ldr	r2, [pc, #280]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800833a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800833e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008340:	4b44      	ldr	r3, [pc, #272]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a43      	ldr	r2, [pc, #268]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800834a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800834c:	4b41      	ldr	r3, [pc, #260]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a40      	ldr	r2, [pc, #256]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008358:	4b3e      	ldr	r3, [pc, #248]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008364:	4b3b      	ldr	r3, [pc, #236]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a3a      	ldr	r2, [pc, #232]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800836a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800836e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fa fb96 	bl	8002aa0 <HAL_GetTick>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008378:	f7fa fb92 	bl	8002aa0 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e05f      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800838a:	4b32      	ldr	r3, [pc, #200]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f0      	beq.n	8008378 <HAL_RCC_OscConfig+0x670>
 8008396:	e057      	b.n	8008448 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008398:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2d      	ldr	r2, [pc, #180]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 800839e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fa fb7c 	bl	8002aa0 <HAL_GetTick>
 80083a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ac:	f7fa fb78 	bl	8002aa0 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e045      	b.n	800844a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083be:	4b25      	ldr	r3, [pc, #148]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0x6a4>
 80083ca:	e03d      	b.n	8008448 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083cc:	4b21      	ldr	r3, [pc, #132]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80083ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083d2:	4b20      	ldr	r3, [pc, #128]	; (8008454 <HAL_RCC_OscConfig+0x74c>)
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d031      	beq.n	8008444 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f003 0203 	and.w	r2, r3, #3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d12a      	bne.n	8008444 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	091b      	lsrs	r3, r3, #4
 80083f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d122      	bne.n	8008444 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d11a      	bne.n	8008444 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	0a5b      	lsrs	r3, r3, #9
 8008412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800841c:	429a      	cmp	r2, r3
 800841e:	d111      	bne.n	8008444 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0c1b      	lsrs	r3, r3, #16
 8008424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800842e:	429a      	cmp	r2, r3
 8008430:	d108      	bne.n	8008444 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	0e1b      	lsrs	r3, r3, #24
 8008436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	d001      	beq.n	8008448 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3730      	adds	r7, #48	; 0x30
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400
 8008458:	fffffc0c 	.word	0xfffffc0c
 800845c:	ffff0007 	.word	0xffff0007

08008460 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e19c      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008474:	4b8a      	ldr	r3, [pc, #552]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d910      	bls.n	80084a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008482:	4b87      	ldr	r3, [pc, #540]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f023 020f 	bic.w	r2, r3, #15
 800848a:	4985      	ldr	r1, [pc, #532]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b83      	ldr	r3, [pc, #524]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e184      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	4b7b      	ldr	r3, [pc, #492]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084bc:	429a      	cmp	r2, r3
 80084be:	d908      	bls.n	80084d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084c0:	4b78      	ldr	r3, [pc, #480]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	4975      	ldr	r1, [pc, #468]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695a      	ldr	r2, [r3, #20]
 80084e2:	4b70      	ldr	r3, [pc, #448]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d908      	bls.n	8008500 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80084ee:	4b6d      	ldr	r3, [pc, #436]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	496a      	ldr	r1, [pc, #424]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	4b64      	ldr	r3, [pc, #400]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008518:	429a      	cmp	r2, r3
 800851a:	d908      	bls.n	800852e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800851c:	4b61      	ldr	r3, [pc, #388]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	495e      	ldr	r1, [pc, #376]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800852a:	4313      	orrs	r3, r2
 800852c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008546:	429a      	cmp	r2, r3
 8008548:	d908      	bls.n	800855c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800854a:	4b56      	ldr	r3, [pc, #344]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4953      	ldr	r1, [pc, #332]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008558:	4313      	orrs	r3, r2
 800855a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	4b4d      	ldr	r3, [pc, #308]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	429a      	cmp	r2, r3
 8008576:	d908      	bls.n	800858a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008578:	4b4a      	ldr	r3, [pc, #296]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f023 020f 	bic.w	r2, r3, #15
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	4947      	ldr	r1, [pc, #284]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008586:	4313      	orrs	r3, r2
 8008588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d055      	beq.n	8008642 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008596:	4b43      	ldr	r3, [pc, #268]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	4940      	ldr	r1, [pc, #256]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d107      	bne.n	80085c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085b0:	4b3c      	ldr	r3, [pc, #240]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d121      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e0f6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d107      	bne.n	80085d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085c8:	4b36      	ldr	r3, [pc, #216]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d115      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0ea      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d107      	bne.n	80085f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085e0:	4b30      	ldr	r3, [pc, #192]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0de      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085f0:	4b2c      	ldr	r3, [pc, #176]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e0d6      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008600:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f023 0207 	bic.w	r2, r3, #7
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4925      	ldr	r1, [pc, #148]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800860e:	4313      	orrs	r3, r2
 8008610:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008612:	f7fa fa45 	bl	8002aa0 <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008618:	e00a      	b.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861a:	f7fa fa41 	bl	8002aa0 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f241 3288 	movw	r2, #5000	; 0x1388
 8008628:	4293      	cmp	r3, r2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e0be      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008630:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	429a      	cmp	r2, r3
 8008640:	d1eb      	bne.n	800861a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	429a      	cmp	r2, r3
 800865c:	d208      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f023 020f 	bic.w	r2, r3, #15
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	490e      	ldr	r1, [pc, #56]	; (80086a4 <HAL_RCC_ClockConfig+0x244>)
 800866c:	4313      	orrs	r3, r2
 800866e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d214      	bcs.n	80086a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f023 020f 	bic.w	r2, r3, #15
 8008686:	4906      	ldr	r1, [pc, #24]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800868e:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <HAL_RCC_ClockConfig+0x240>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d005      	beq.n	80086a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e086      	b.n	80087ae <HAL_RCC_ClockConfig+0x34e>
 80086a0:	52002000 	.word	0x52002000
 80086a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691a      	ldr	r2, [r3, #16]
 80086b8:	4b3f      	ldr	r3, [pc, #252]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d208      	bcs.n	80086d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086c4:	4b3c      	ldr	r3, [pc, #240]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	4939      	ldr	r1, [pc, #228]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	4b34      	ldr	r3, [pc, #208]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d208      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086f2:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	492e      	ldr	r1, [pc, #184]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008700:	4313      	orrs	r3, r2
 8008702:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699a      	ldr	r2, [r3, #24]
 8008714:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800871c:	429a      	cmp	r2, r3
 800871e:	d208      	bcs.n	8008732 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008720:	4b25      	ldr	r3, [pc, #148]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	4922      	ldr	r1, [pc, #136]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800872e:	4313      	orrs	r3, r2
 8008730:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	4b1d      	ldr	r3, [pc, #116]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800874a:	429a      	cmp	r2, r3
 800874c:	d208      	bcs.n	8008760 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	4917      	ldr	r1, [pc, #92]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 800875c:	4313      	orrs	r3, r2
 800875e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008760:	f000 f834 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	0a1b      	lsrs	r3, r3, #8
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	4912      	ldr	r1, [pc, #72]	; (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	f003 031f 	and.w	r3, r3, #31
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
 800877c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <HAL_RCC_ClockConfig+0x358>)
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	4a0d      	ldr	r2, [pc, #52]	; (80087bc <HAL_RCC_ClockConfig+0x35c>)
 8008788:	5cd3      	ldrb	r3, [r2, r3]
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	4a0a      	ldr	r2, [pc, #40]	; (80087c0 <HAL_RCC_ClockConfig+0x360>)
 8008796:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008798:	4a0a      	ldr	r2, [pc, #40]	; (80087c4 <HAL_RCC_ClockConfig+0x364>)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800879e:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <HAL_RCC_ClockConfig+0x368>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fa f932 	bl	8002a0c <HAL_InitTick>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	58024400 	.word	0x58024400
 80087bc:	08011a10 	.word	0x08011a10
 80087c0:	24000018 	.word	0x24000018
 80087c4:	24000014 	.word	0x24000014
 80087c8:	2400001c 	.word	0x2400001c

080087cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b089      	sub	sp, #36	; 0x24
 80087d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087d2:	4bb3      	ldr	r3, [pc, #716]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087da:	2b18      	cmp	r3, #24
 80087dc:	f200 8155 	bhi.w	8008a8a <HAL_RCC_GetSysClockFreq+0x2be>
 80087e0:	a201      	add	r2, pc, #4	; (adr r2, 80087e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	0800884d 	.word	0x0800884d
 80087ec:	08008a8b 	.word	0x08008a8b
 80087f0:	08008a8b 	.word	0x08008a8b
 80087f4:	08008a8b 	.word	0x08008a8b
 80087f8:	08008a8b 	.word	0x08008a8b
 80087fc:	08008a8b 	.word	0x08008a8b
 8008800:	08008a8b 	.word	0x08008a8b
 8008804:	08008a8b 	.word	0x08008a8b
 8008808:	08008873 	.word	0x08008873
 800880c:	08008a8b 	.word	0x08008a8b
 8008810:	08008a8b 	.word	0x08008a8b
 8008814:	08008a8b 	.word	0x08008a8b
 8008818:	08008a8b 	.word	0x08008a8b
 800881c:	08008a8b 	.word	0x08008a8b
 8008820:	08008a8b 	.word	0x08008a8b
 8008824:	08008a8b 	.word	0x08008a8b
 8008828:	08008879 	.word	0x08008879
 800882c:	08008a8b 	.word	0x08008a8b
 8008830:	08008a8b 	.word	0x08008a8b
 8008834:	08008a8b 	.word	0x08008a8b
 8008838:	08008a8b 	.word	0x08008a8b
 800883c:	08008a8b 	.word	0x08008a8b
 8008840:	08008a8b 	.word	0x08008a8b
 8008844:	08008a8b 	.word	0x08008a8b
 8008848:	0800887f 	.word	0x0800887f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884c:	4b94      	ldr	r3, [pc, #592]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008858:	4b91      	ldr	r3, [pc, #580]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	4a90      	ldr	r2, [pc, #576]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800886a:	e111      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800886c:	4b8d      	ldr	r3, [pc, #564]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800886e:	61bb      	str	r3, [r7, #24]
    break;
 8008870:	e10e      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008872:	4b8d      	ldr	r3, [pc, #564]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008874:	61bb      	str	r3, [r7, #24]
    break;
 8008876:	e10b      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008878:	4b8c      	ldr	r3, [pc, #560]	; (8008aac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800887a:	61bb      	str	r3, [r7, #24]
    break;
 800887c:	e108      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800887e:	4b88      	ldr	r3, [pc, #544]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008888:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008892:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008894:	4b82      	ldr	r3, [pc, #520]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800889e:	4b80      	ldr	r3, [pc, #512]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80e1 	beq.w	8008a84 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	f000 8083 	beq.w	80089d0 <HAL_RCC_GetSysClockFreq+0x204>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	f200 80a1 	bhi.w	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_RCC_GetSysClockFreq+0x114>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d056      	beq.n	800898c <HAL_RCC_GetSysClockFreq+0x1c0>
 80088de:	e099      	b.n	8008a14 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e0:	4b6f      	ldr	r3, [pc, #444]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d02d      	beq.n	8008948 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088ec:	4b6c      	ldr	r3, [pc, #432]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	08db      	lsrs	r3, r3, #3
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	4a6b      	ldr	r2, [pc, #428]	; (8008aa4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088f8:	fa22 f303 	lsr.w	r3, r2, r3
 80088fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a02 	vldr	s12, [r7, #8]
 800892a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008946:	e087      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ab4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b51      	ldr	r3, [pc, #324]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a02 	vldr	s12, [r7, #8]
 800896e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800898a:	e065      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800899a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899e:	4b40      	ldr	r3, [pc, #256]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80089b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ce:	e043      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089da:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008abc <HAL_RCC_GetSysClockFreq+0x2f0>
 80089de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e2:	4b2f      	ldr	r3, [pc, #188]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a12:	e021      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ab8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a26:	4b1e      	ldr	r3, [pc, #120]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ab0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a56:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a58:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a62:	3301      	adds	r3, #1
 8008a64:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	ee07 3a90 	vmov	s15, r3
 8008a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a7c:	ee17 3a90 	vmov	r3, s15
 8008a80:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a82:	e005      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
    break;
 8008a88:	e002      	b.n	8008a90 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008a8a:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a8c:	61bb      	str	r3, [r7, #24]
    break;
 8008a8e:	bf00      	nop
  }

  return sysclockfreq;
 8008a90:	69bb      	ldr	r3, [r7, #24]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	003d0900 	.word	0x003d0900
 8008aac:	017d7840 	.word	0x017d7840
 8008ab0:	46000000 	.word	0x46000000
 8008ab4:	4c742400 	.word	0x4c742400
 8008ab8:	4a742400 	.word	0x4a742400
 8008abc:	4bbebc20 	.word	0x4bbebc20

08008ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ac6:	f7ff fe81 	bl	80087cc <HAL_RCC_GetSysClockFreq>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	0a1b      	lsrs	r3, r3, #8
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	490f      	ldr	r1, [pc, #60]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ad8:	5ccb      	ldrb	r3, [r1, r3]
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ae4:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <HAL_RCC_GetHCLKFreq+0x54>)
 8008aee:	5cd3      	ldrb	r3, [r2, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	fa22 f303 	lsr.w	r3, r2, r3
 8008afa:	4a07      	ldr	r2, [pc, #28]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008afc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008afe:	4a07      	ldr	r2, [pc, #28]	; (8008b1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b04:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	58024400 	.word	0x58024400
 8008b14:	08011a10 	.word	0x08011a10
 8008b18:	24000018 	.word	0x24000018
 8008b1c:	24000014 	.word	0x24000014

08008b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b24:	f7ff ffcc 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4904      	ldr	r1, [pc, #16]	; (8008b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	58024400 	.word	0x58024400
 8008b48:	08011a10 	.word	0x08011a10

08008b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008b50:	f7ff ffb6 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4904      	ldr	r1, [pc, #16]	; (8008b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	58024400 	.word	0x58024400
 8008b74:	08011a10 	.word	0x08011a10

08008b78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b84:	2300      	movs	r3, #0
 8008b86:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d03f      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b9c:	d02a      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ba2:	d824      	bhi.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ba8:	d018      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bae:	d81e      	bhi.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb8:	d007      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008bba:	e018      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bbc:	4bab      	ldr	r3, [pc, #684]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4aaa      	ldr	r2, [pc, #680]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bc8:	e015      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	2102      	movs	r1, #2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 feff 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bda:	e00c      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3324      	adds	r3, #36	; 0x24
 8008be0:	2102      	movs	r1, #2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 ffa8 	bl	800ab38 <RCCEx_PLL3_Config>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008bec:	e003      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d109      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bfc:	4b9b      	ldr	r3, [pc, #620]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c08:	4998      	ldr	r1, [pc, #608]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8008c0e:	e001      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d03d      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d826      	bhi.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c53 	.word	0x08008c53
 8008c38:	08008c65 	.word	0x08008c65
 8008c3c:	08008c7d 	.word	0x08008c7d
 8008c40:	08008c7d 	.word	0x08008c7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c44:	4b89      	ldr	r3, [pc, #548]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	4a88      	ldr	r2, [pc, #544]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c50:	e015      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3304      	adds	r3, #4
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 febb 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c62:	e00c      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3324      	adds	r3, #36	; 0x24
 8008c68:	2100      	movs	r1, #0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 ff64 	bl	800ab38 <RCCEx_PLL3_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c74:	e003      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7a:	e000      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d109      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c84:	4b79      	ldr	r3, [pc, #484]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c88:	f023 0207 	bic.w	r2, r3, #7
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	4976      	ldr	r1, [pc, #472]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	650b      	str	r3, [r1, #80]	; 0x50
 8008c96:	e001      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d051      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008cb2:	d036      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008cb4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008cb8:	d830      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cbe:	d032      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008cc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cc4:	d82a      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cca:	d02e      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008ccc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cd0:	d824      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd6:	d018      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cdc:	d81e      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ce6:	d007      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008ce8:	e018      	b.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cea:	4b60      	ldr	r3, [pc, #384]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	4a5f      	ldr	r2, [pc, #380]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cf6:	e019      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 fe68 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d08:	e010      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3324      	adds	r3, #36	; 0x24
 8008d0e:	2100      	movs	r1, #0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 ff11 	bl	800ab38 <RCCEx_PLL3_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d1a:	e007      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d20:	e004      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d22:	bf00      	nop
 8008d24:	e002      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d26:	bf00      	nop
 8008d28:	e000      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d32:	4b4e      	ldr	r3, [pc, #312]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d36:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d40:	494a      	ldr	r1, [pc, #296]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	658b      	str	r3, [r1, #88]	; 0x58
 8008d46:	e001      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d051      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d5e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d62:	d036      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008d64:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d68:	d830      	bhi.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d6e:	d032      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d74:	d82a      	bhi.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d7a:	d02e      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008d7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d80:	d824      	bhi.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d86:	d018      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d8c:	d81e      	bhi.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d96:	d007      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008d98:	e018      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d9a:	4b34      	ldr	r3, [pc, #208]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a33      	ldr	r2, [pc, #204]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008da6:	e019      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3304      	adds	r3, #4
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fe10 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008db8:	e010      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3324      	adds	r3, #36	; 0x24
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 feb9 	bl	800ab38 <RCCEx_PLL3_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dca:	e007      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]
      break;
 8008dd0:	e004      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008dd2:	bf00      	nop
 8008dd4:	e002      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008dd6:	bf00      	nop
 8008dd8:	e000      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008de2:	4b22      	ldr	r3, [pc, #136]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008df0:	491e      	ldr	r1, [pc, #120]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	658b      	str	r3, [r1, #88]	; 0x58
 8008df6:	e001      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d035      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0c:	2b30      	cmp	r3, #48	; 0x30
 8008e0e:	d01c      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e10:	2b30      	cmp	r3, #48	; 0x30
 8008e12:	d817      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	d00c      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d813      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d016      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d10f      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e30:	e00e      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	3304      	adds	r3, #4
 8008e36:	2102      	movs	r1, #2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fdcb 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e42:	e005      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	75fb      	strb	r3, [r7, #23]
      break;
 8008e48:	e002      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e000      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8008e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10c      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e62:	4902      	ldr	r1, [pc, #8]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e68:	e004      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008e6a:	bf00      	nop
 8008e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d047      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e88:	d030      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e8e:	d82a      	bhi.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e94:	d02c      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008e96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e9a:	d824      	bhi.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea0:	d018      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea6:	d81e      	bhi.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008eb2:	e018      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4bac      	ldr	r3, [pc, #688]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	4aab      	ldr	r2, [pc, #684]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ec0:	e017      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fd83 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ed2:	e00e      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3324      	adds	r3, #36	; 0x24
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 fe2c 	bl	800ab38 <RCCEx_PLL3_Config>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ee4:	e005      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eea:	e002      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008eec:	bf00      	nop
 8008eee:	e000      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d109      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ef8:	4b9b      	ldr	r3, [pc, #620]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	4998      	ldr	r1, [pc, #608]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	650b      	str	r3, [r1, #80]	; 0x50
 8008f0a:	e001      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d049      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f24:	d02e      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f2a:	d828      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f30:	d02a      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008f32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f36:	d822      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f3c:	d026      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f42:	d81c      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f48:	d010      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f4e:	d816      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01d      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f58:	d111      	bne.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	2101      	movs	r1, #1
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 fd37 	bl	800a9d4 <RCCEx_PLL2_Config>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f6a:	e012      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3324      	adds	r3, #36	; 0x24
 8008f70:	2101      	movs	r1, #1
 8008f72:	4618      	mov	r0, r3
 8008f74:	f001 fde0 	bl	800ab38 <RCCEx_PLL3_Config>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f7c:	e009      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	75fb      	strb	r3, [r7, #23]
      break;
 8008f82:	e006      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f84:	bf00      	nop
 8008f86:	e004      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f88:	bf00      	nop
 8008f8a:	e002      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e000      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f98:	4b73      	ldr	r3, [pc, #460]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa4:	4970      	ldr	r1, [pc, #448]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8008faa:	e001      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d04b      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fc6:	d02e      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fcc:	d828      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd2:	d02a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd8:	d822      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fde:	d026      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008fe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fe4:	d81c      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fea:	d010      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff0:	d816      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d01d      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ffa:	d111      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3304      	adds	r3, #4
 8009000:	2101      	movs	r1, #1
 8009002:	4618      	mov	r0, r3
 8009004:	f001 fce6 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800900c:	e012      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3324      	adds	r3, #36	; 0x24
 8009012:	2101      	movs	r1, #1
 8009014:	4618      	mov	r0, r3
 8009016:	f001 fd8f 	bl	800ab38 <RCCEx_PLL3_Config>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800901e:	e009      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
      break;
 8009024:	e006      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009026:	bf00      	nop
 8009028:	e004      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800902a:	bf00      	nop
 800902c:	e002      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800902e:	bf00      	nop
 8009030:	e000      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800903a:	4b4b      	ldr	r3, [pc, #300]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009048:	4947      	ldr	r1, [pc, #284]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800904a:	4313      	orrs	r3, r2
 800904c:	658b      	str	r3, [r1, #88]	; 0x58
 800904e:	e001      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d02f      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009068:	d00e      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800906a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906e:	d814      	bhi.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d015      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009078:	d10f      	bne.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800907a:	4b3b      	ldr	r3, [pc, #236]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	4a3a      	ldr	r2, [pc, #232]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009086:	e00c      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	2101      	movs	r1, #1
 800908e:	4618      	mov	r0, r3
 8009090:	f001 fca0 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009094:	4603      	mov	r3, r0
 8009096:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009098:	e003      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	75fb      	strb	r3, [r7, #23]
      break;
 800909e:	e000      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80090a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090a8:	4b2f      	ldr	r3, [pc, #188]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090b4:	492c      	ldr	r1, [pc, #176]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	650b      	str	r3, [r1, #80]	; 0x50
 80090ba:	e001      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
 80090be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d032      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d81b      	bhi.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80090d4:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	08009113 	.word	0x08009113
 80090e0:	080090ed 	.word	0x080090ed
 80090e4:	080090fb 	.word	0x080090fb
 80090e8:	08009113 	.word	0x08009113
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4b1e      	ldr	r3, [pc, #120]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a1d      	ldr	r2, [pc, #116]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090f8:	e00c      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3304      	adds	r3, #4
 80090fe:	2102      	movs	r1, #2
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fc67 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800910a:	e003      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
      break;
 8009110:	e000      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800911a:	4b13      	ldr	r3, [pc, #76]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800911c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911e:	f023 0203 	bic.w	r2, r3, #3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009126:	4910      	ldr	r1, [pc, #64]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009128:	4313      	orrs	r3, r2
 800912a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800912c:	e001      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 808a 	beq.w	8009254 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a09      	ldr	r2, [pc, #36]	; (800916c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800914a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800914c:	f7f9 fca8 	bl	8002aa0 <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009152:	e00d      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009154:	f7f9 fca4 	bl	8002aa0 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b64      	cmp	r3, #100	; 0x64
 8009160:	d906      	bls.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	75fb      	strb	r3, [r7, #23]
        break;
 8009166:	e009      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009168:	58024400 	.word	0x58024400
 800916c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009170:	4bb9      	ldr	r3, [pc, #740]	; (8009458 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0eb      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d166      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009182:	4bb6      	ldr	r3, [pc, #728]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009184:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800918c:	4053      	eors	r3, r2
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d013      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009196:	4bb1      	ldr	r3, [pc, #708]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091a0:	4bae      	ldr	r3, [pc, #696]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a4:	4aad      	ldr	r2, [pc, #692]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091ac:	4bab      	ldr	r3, [pc, #684]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b0:	4aaa      	ldr	r2, [pc, #680]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091b8:	4aa8      	ldr	r2, [pc, #672]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d115      	bne.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7f9 fc69 	bl	8002aa0 <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d0:	e00b      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d2:	f7f9 fc65 	bl	8002aa0 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d902      	bls.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	75fb      	strb	r3, [r7, #23]
            break;
 80091e8:	e005      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ea:	4b9c      	ldr	r3, [pc, #624]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0ed      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d126      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800920a:	d10d      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800920c:	4b93      	ldr	r3, [pc, #588]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800921a:	0919      	lsrs	r1, r3, #4
 800921c:	4b90      	ldr	r3, [pc, #576]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800921e:	400b      	ands	r3, r1
 8009220:	498e      	ldr	r1, [pc, #568]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009222:	4313      	orrs	r3, r2
 8009224:	610b      	str	r3, [r1, #16]
 8009226:	e005      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009228:	4b8c      	ldr	r3, [pc, #560]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	4a8b      	ldr	r2, [pc, #556]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800922e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009232:	6113      	str	r3, [r2, #16]
 8009234:	4b89      	ldr	r3, [pc, #548]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800923e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009242:	4986      	ldr	r1, [pc, #536]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009244:	4313      	orrs	r3, r2
 8009246:	670b      	str	r3, [r1, #112]	; 0x70
 8009248:	e004      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	75bb      	strb	r3, [r7, #22]
 800924e:	e001      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d07e      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009264:	2b28      	cmp	r3, #40	; 0x28
 8009266:	d867      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009268:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	0800933f 	.word	0x0800933f
 8009274:	08009339 	.word	0x08009339
 8009278:	08009339 	.word	0x08009339
 800927c:	08009339 	.word	0x08009339
 8009280:	08009339 	.word	0x08009339
 8009284:	08009339 	.word	0x08009339
 8009288:	08009339 	.word	0x08009339
 800928c:	08009339 	.word	0x08009339
 8009290:	08009315 	.word	0x08009315
 8009294:	08009339 	.word	0x08009339
 8009298:	08009339 	.word	0x08009339
 800929c:	08009339 	.word	0x08009339
 80092a0:	08009339 	.word	0x08009339
 80092a4:	08009339 	.word	0x08009339
 80092a8:	08009339 	.word	0x08009339
 80092ac:	08009339 	.word	0x08009339
 80092b0:	08009327 	.word	0x08009327
 80092b4:	08009339 	.word	0x08009339
 80092b8:	08009339 	.word	0x08009339
 80092bc:	08009339 	.word	0x08009339
 80092c0:	08009339 	.word	0x08009339
 80092c4:	08009339 	.word	0x08009339
 80092c8:	08009339 	.word	0x08009339
 80092cc:	08009339 	.word	0x08009339
 80092d0:	0800933f 	.word	0x0800933f
 80092d4:	08009339 	.word	0x08009339
 80092d8:	08009339 	.word	0x08009339
 80092dc:	08009339 	.word	0x08009339
 80092e0:	08009339 	.word	0x08009339
 80092e4:	08009339 	.word	0x08009339
 80092e8:	08009339 	.word	0x08009339
 80092ec:	08009339 	.word	0x08009339
 80092f0:	0800933f 	.word	0x0800933f
 80092f4:	08009339 	.word	0x08009339
 80092f8:	08009339 	.word	0x08009339
 80092fc:	08009339 	.word	0x08009339
 8009300:	08009339 	.word	0x08009339
 8009304:	08009339 	.word	0x08009339
 8009308:	08009339 	.word	0x08009339
 800930c:	08009339 	.word	0x08009339
 8009310:	0800933f 	.word	0x0800933f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	2101      	movs	r1, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f001 fb5a 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009324:	e00c      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3324      	adds	r3, #36	; 0x24
 800932a:	2101      	movs	r1, #1
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fc03 	bl	800ab38 <RCCEx_PLL3_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009336:	e003      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	e000      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800933e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d109      	bne.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009346:	4b45      	ldr	r3, [pc, #276]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	4942      	ldr	r1, [pc, #264]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009354:	4313      	orrs	r3, r2
 8009356:	654b      	str	r3, [r1, #84]	; 0x54
 8009358:	e001      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d037      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	2b05      	cmp	r3, #5
 8009370:	d820      	bhi.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009372:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093bb 	.word	0x080093bb
 800937c:	08009391 	.word	0x08009391
 8009380:	080093a3 	.word	0x080093a3
 8009384:	080093bb 	.word	0x080093bb
 8009388:	080093bb 	.word	0x080093bb
 800938c:	080093bb 	.word	0x080093bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3304      	adds	r3, #4
 8009394:	2101      	movs	r1, #1
 8009396:	4618      	mov	r0, r3
 8009398:	f001 fb1c 	bl	800a9d4 <RCCEx_PLL2_Config>
 800939c:	4603      	mov	r3, r0
 800939e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093a0:	e00c      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3324      	adds	r3, #36	; 0x24
 80093a6:	2101      	movs	r1, #1
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 fbc5 	bl	800ab38 <RCCEx_PLL3_Config>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093b2:	e003      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
      break;
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80093ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093c2:	4b26      	ldr	r3, [pc, #152]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f023 0207 	bic.w	r2, r3, #7
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	4923      	ldr	r1, [pc, #140]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	654b      	str	r3, [r1, #84]	; 0x54
 80093d4:	e001      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d040      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ec:	2b05      	cmp	r3, #5
 80093ee:	d821      	bhi.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	0800943b 	.word	0x0800943b
 80093fc:	08009411 	.word	0x08009411
 8009400:	08009423 	.word	0x08009423
 8009404:	0800943b 	.word	0x0800943b
 8009408:	0800943b 	.word	0x0800943b
 800940c:	0800943b 	.word	0x0800943b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3304      	adds	r3, #4
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fadc 	bl	800a9d4 <RCCEx_PLL2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009420:	e00c      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	3324      	adds	r3, #36	; 0x24
 8009426:	2101      	movs	r1, #1
 8009428:	4618      	mov	r0, r3
 800942a:	f001 fb85 	bl	800ab38 <RCCEx_PLL3_Config>
 800942e:	4603      	mov	r3, r0
 8009430:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009432:	e003      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
      break;
 8009438:	e000      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800943a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d110      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009446:	f023 0207 	bic.w	r2, r3, #7
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009450:	4902      	ldr	r1, [pc, #8]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009452:	4313      	orrs	r3, r2
 8009454:	658b      	str	r3, [r1, #88]	; 0x58
 8009456:	e007      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009458:	58024800 	.word	0x58024800
 800945c:	58024400 	.word	0x58024400
 8009460:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d04b      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800947e:	d02e      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009484:	d828      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948a:	d02a      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800948c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009490:	d822      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009496:	d026      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009498:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800949c:	d81c      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800949e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a2:	d010      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a8:	d816      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01d      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x972>
 80094ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094b2:	d111      	bne.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fa8a 	bl	800a9d4 <RCCEx_PLL2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094c4:	e012      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3324      	adds	r3, #36	; 0x24
 80094ca:	2102      	movs	r1, #2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 fb33 	bl	800ab38 <RCCEx_PLL3_Config>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094d6:	e009      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	75fb      	strb	r3, [r7, #23]
      break;
 80094dc:	e006      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80094de:	bf00      	nop
 80094e0:	e004      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80094e2:	bf00      	nop
 80094e4:	e002      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80094e6:	bf00      	nop
 80094e8:	e000      	b.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80094ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10a      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094f2:	4bb2      	ldr	r3, [pc, #712]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80094f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009500:	49ae      	ldr	r1, [pc, #696]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009502:	4313      	orrs	r3, r2
 8009504:	654b      	str	r3, [r1, #84]	; 0x54
 8009506:	e001      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d04b      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800951e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009522:	d02e      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009524:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009528:	d828      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952e:	d02a      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009534:	d822      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800953a:	d026      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800953c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009540:	d81c      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009546:	d010      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800954c:	d816      	bhi.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01d      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009556:	d111      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fa38 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009568:	e012      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	3324      	adds	r3, #36	; 0x24
 800956e:	2102      	movs	r1, #2
 8009570:	4618      	mov	r0, r3
 8009572:	f001 fae1 	bl	800ab38 <RCCEx_PLL3_Config>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800957a:	e009      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	75fb      	strb	r3, [r7, #23]
      break;
 8009580:	e006      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009582:	bf00      	nop
 8009584:	e004      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009586:	bf00      	nop
 8009588:	e002      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800958a:	bf00      	nop
 800958c:	e000      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800958e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009596:	4b89      	ldr	r3, [pc, #548]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a4:	4985      	ldr	r1, [pc, #532]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	658b      	str	r3, [r1, #88]	; 0x58
 80095aa:	e001      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d04b      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095c6:	d02e      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80095c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095cc:	d828      	bhi.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80095ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d2:	d02a      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d8:	d822      	bhi.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80095da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095de:	d026      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80095e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095e4:	d81c      	bhi.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80095e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095ea:	d010      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80095ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f0:	d816      	bhi.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01d      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80095f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fa:	d111      	bne.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3304      	adds	r3, #4
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f9e6 	bl	800a9d4 <RCCEx_PLL2_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800960c:	e012      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3324      	adds	r3, #36	; 0x24
 8009612:	2102      	movs	r1, #2
 8009614:	4618      	mov	r0, r3
 8009616:	f001 fa8f 	bl	800ab38 <RCCEx_PLL3_Config>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800961e:	e009      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	75fb      	strb	r3, [r7, #23]
      break;
 8009624:	e006      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009626:	bf00      	nop
 8009628:	e004      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800962a:	bf00      	nop
 800962c:	e002      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800962e:	bf00      	nop
 8009630:	e000      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800963a:	4b60      	ldr	r3, [pc, #384]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009648:	495c      	ldr	r1, [pc, #368]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800964a:	4313      	orrs	r3, r2
 800964c:	658b      	str	r3, [r1, #88]	; 0x58
 800964e:	e001      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	2b00      	cmp	r3, #0
 800965e:	d018      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009668:	d10a      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3324      	adds	r3, #36	; 0x24
 800966e:	2102      	movs	r1, #2
 8009670:	4618      	mov	r0, r3
 8009672:	f001 fa61 	bl	800ab38 <RCCEx_PLL3_Config>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009680:	4b4e      	ldr	r3, [pc, #312]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800968c:	494b      	ldr	r1, [pc, #300]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800968e:	4313      	orrs	r3, r2
 8009690:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0310 	and.w	r3, r3, #16
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01a      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096a8:	d10a      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3324      	adds	r3, #36	; 0x24
 80096ae:	2102      	movs	r1, #2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 fa41 	bl	800ab38 <RCCEx_PLL3_Config>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096c0:	4b3e      	ldr	r3, [pc, #248]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	493b      	ldr	r1, [pc, #236]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d034      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ea:	d01d      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80096ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f0:	d817      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80096f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fa:	d009      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80096fc:	e011      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3304      	adds	r3, #4
 8009702:	2100      	movs	r1, #0
 8009704:	4618      	mov	r0, r3
 8009706:	f001 f965 	bl	800a9d4 <RCCEx_PLL2_Config>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800970e:	e00c      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3324      	adds	r3, #36	; 0x24
 8009714:	2102      	movs	r1, #2
 8009716:	4618      	mov	r0, r3
 8009718:	f001 fa0e 	bl	800ab38 <RCCEx_PLL3_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009720:	e003      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
      break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009730:	4b22      	ldr	r3, [pc, #136]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800973e:	491f      	ldr	r1, [pc, #124]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009740:	4313      	orrs	r3, r2
 8009742:	658b      	str	r3, [r1, #88]	; 0x58
 8009744:	e001      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d036      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800975c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009760:	d01c      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009766:	d816      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800976c:	d003      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800976e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009772:	d007      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009774:	e00f      	b.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977a:	4a10      	ldr	r2, [pc, #64]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800977c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009782:	e00c      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	2101      	movs	r1, #1
 800978a:	4618      	mov	r0, r3
 800978c:	f001 f9d4 	bl	800ab38 <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009794:	e003      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	75fb      	strb	r3, [r7, #23]
      break;
 800979a:	e000      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800979c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10d      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80097a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b2:	4902      	ldr	r1, [pc, #8]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	654b      	str	r3, [r1, #84]	; 0x54
 80097b8:	e004      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80097ba:	bf00      	nop
 80097bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d029      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80097d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097dc:	d007      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80097de:	e00f      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e0:	4b61      	ldr	r3, [pc, #388]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	4a60      	ldr	r2, [pc, #384]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80097e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097ec:	e00b      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3304      	adds	r3, #4
 80097f2:	2102      	movs	r1, #2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 f8ed 	bl	800a9d4 <RCCEx_PLL2_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097fe:	e002      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]
      break;
 8009804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d109      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800980c:	4b56      	ldr	r3, [pc, #344]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800980e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009818:	4953      	ldr	r1, [pc, #332]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800981a:	4313      	orrs	r3, r2
 800981c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800981e:	e001      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00a      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3324      	adds	r3, #36	; 0x24
 8009834:	2102      	movs	r1, #2
 8009836:	4618      	mov	r0, r3
 8009838:	f001 f97e 	bl	800ab38 <RCCEx_PLL3_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d030      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800985a:	d017      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800985c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009860:	d811      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009866:	d013      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986c:	d80b      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d010      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009876:	d106      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009878:	4b3b      	ldr	r3, [pc, #236]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4a3a      	ldr	r2, [pc, #232]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800987e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009884:	e007      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]
      break;
 800988a:	e004      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800988c:	bf00      	nop
 800988e:	e002      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009890:	bf00      	nop
 8009892:	e000      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8009894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d109      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800989c:	4b32      	ldr	r3, [pc, #200]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800989e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a8:	492f      	ldr	r1, [pc, #188]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	654b      	str	r3, [r1, #84]	; 0x54
 80098ae:	e001      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098c0:	4b29      	ldr	r3, [pc, #164]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098cc:	4926      	ldr	r1, [pc, #152]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d008      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098de:	4b22      	ldr	r3, [pc, #136]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ea:	491f      	ldr	r1, [pc, #124]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00d      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098fc:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	4a19      	ldr	r2, [pc, #100]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009906:	6113      	str	r3, [r2, #16]
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009912:	4915      	ldr	r1, [pc, #84]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009914:	4313      	orrs	r3, r2
 8009916:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	da08      	bge.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009924:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800992c:	490e      	ldr	r1, [pc, #56]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800992e:	4313      	orrs	r3, r2
 8009930:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d009      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800993e:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800994c:	4906      	ldr	r1, [pc, #24]	; (8009968 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800994e:	4313      	orrs	r3, r2
 8009950:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009952:	7dbb      	ldrb	r3, [r7, #22]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	58024400 	.word	0x58024400

0800996c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b090      	sub	sp, #64	; 0x40
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800997a:	f040 8089 	bne.w	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800997e:	4b95      	ldr	r3, [pc, #596]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	633b      	str	r3, [r7, #48]	; 0x30
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	2b04      	cmp	r3, #4
 800998c:	d87d      	bhi.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099a9 	.word	0x080099a9
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099f1 	.word	0x080099f1
 80099a0:	08009a85 	.word	0x08009a85
 80099a4:	08009a15 	.word	0x08009a15

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099a8:	4b8a      	ldr	r3, [pc, #552]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b4:	d107      	bne.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 feb8 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099c4:	e3ed      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ca:	e3ea      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099cc:	4b81      	ldr	r3, [pc, #516]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099d8:	d107      	bne.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099da:	f107 0318 	add.w	r3, r7, #24
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fbfe 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80099e8:	e3db      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ee:	e3d8      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099f0:	4b78      	ldr	r3, [pc, #480]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099fc:	d107      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fd40 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a0c:	e3c9      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a12:	e3c6      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a14:	4b6f      	ldr	r3, [pc, #444]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a1e:	4b6d      	ldr	r3, [pc, #436]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0304 	and.w	r3, r3, #4
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d10c      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d109      	bne.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a30:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	08db      	lsrs	r3, r3, #3
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	4a67      	ldr	r2, [pc, #412]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a42:	e01e      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a44:	4b63      	ldr	r3, [pc, #396]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a50:	d106      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a58:	d102      	bne.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009a5a:	4b60      	ldr	r3, [pc, #384]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5e:	e010      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a60:	4b5c      	ldr	r3, [pc, #368]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a6c:	d106      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a74:	d102      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009a76:	4b5a      	ldr	r3, [pc, #360]	; (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a7a:	e002      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009a80:	e38f      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009a82:	e38e      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a84:	4b57      	ldr	r3, [pc, #348]	; (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a88:	e38b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a8e:	e388      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a96:	f040 80a7 	bne.w	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009a9a:	4b4e      	ldr	r3, [pc, #312]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009aa2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009aaa:	d054      	beq.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ab2:	f200 808b 	bhi.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009abc:	f000 8083 	beq.w	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ac6:	f200 8081 	bhi.w	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ad0:	d02f      	beq.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ad8:	d878      	bhi.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d004      	beq.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ae6:	d012      	beq.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8009ae8:	e070      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009aea:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009af6:	d107      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fe17 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b06:	e34c      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0c:	e349      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b1a:	d107      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1c:	f107 0318 	add.w	r3, r7, #24
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 fb5d 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b2a:	e33a      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b30:	e337      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b32:	4b28      	ldr	r3, [pc, #160]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b3e:	d107      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 fc9f 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b4e:	e328      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b54:	e325      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b56:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b5e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b60:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d10c      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8009b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b72:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	08db      	lsrs	r3, r3, #3
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	4a16      	ldr	r2, [pc, #88]	; (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b84:	e01e      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b92:	d106      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b9a:	d102      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009b9c:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ba0:	e010      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bae:	d106      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb6:	d102      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009bb8:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009bc2:	e2ee      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009bc4:	e2ed      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bca:	e2ea      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bd0:	e2e7      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009bd2:	bf00      	nop
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	03d09000 	.word	0x03d09000
 8009bdc:	003d0900 	.word	0x003d0900
 8009be0:	017d7840 	.word	0x017d7840
 8009be4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bee:	f040 809c 	bne.w	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009bf2:	4b9e      	ldr	r3, [pc, #632]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c02:	d054      	beq.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c0a:	f200 808b 	bhi.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c14:	f000 8083 	beq.w	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c1e:	f200 8081 	bhi.w	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c28:	d02f      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c30:	d878      	bhi.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c3e:	d012      	beq.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009c40:	e070      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c42:	4b8a      	ldr	r3, [pc, #552]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c4e:	d107      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fd6b 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009c5e:	e2a0      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c64:	e29d      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c66:	4b81      	ldr	r3, [pc, #516]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c72:	d107      	bne.n	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c74:	f107 0318 	add.w	r3, r7, #24
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fab1 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009c82:	e28e      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c88:	e28b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c8a:	4b78      	ldr	r3, [pc, #480]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c96:	d107      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c98:	f107 030c 	add.w	r3, r7, #12
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 fbf3 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ca6:	e27c      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cac:	e279      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009cae:	4b6f      	ldr	r3, [pc, #444]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cb6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cb8:	4b6c      	ldr	r3, [pc, #432]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d10c      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d109      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009cca:	4b68      	ldr	r3, [pc, #416]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	08db      	lsrs	r3, r3, #3
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	4a66      	ldr	r2, [pc, #408]	; (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cdc:	e01e      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cde:	4b63      	ldr	r3, [pc, #396]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cea:	d106      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cf2:	d102      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009cf4:	4b5f      	ldr	r3, [pc, #380]	; (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf8:	e010      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cfa:	4b5c      	ldr	r3, [pc, #368]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d06:	d106      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d0e:	d102      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d10:	4b59      	ldr	r3, [pc, #356]	; (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d14:	e002      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d1a:	e242      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009d1c:	e241      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d1e:	4b57      	ldr	r3, [pc, #348]	; (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d22:	e23e      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d28:	e23b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d30:	f040 80a6 	bne.w	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009d34:	4b4d      	ldr	r3, [pc, #308]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009d3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d44:	d054      	beq.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d4c:	f200 808b 	bhi.w	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d56:	f000 8083 	beq.w	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d60:	f200 8081 	bhi.w	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d6a:	d02f      	beq.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d72:	d878      	bhi.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d80:	d012      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009d82:	e070      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d84:	4b39      	ldr	r3, [pc, #228]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d90:	d107      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 fcca 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009da0:	e1ff      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da6:	e1fc      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009da8:	4b30      	ldr	r3, [pc, #192]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009db4:	d107      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db6:	f107 0318 	add.w	r3, r7, #24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fa10 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009dc4:	e1ed      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dca:	e1ea      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dcc:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dd8:	d107      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dda:	f107 030c 	add.w	r3, r7, #12
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fb52 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009de8:	e1db      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dee:	e1d8      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009df0:	4b1e      	ldr	r3, [pc, #120]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d10c      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8009e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e0c:	4b17      	ldr	r3, [pc, #92]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	08db      	lsrs	r3, r3, #3
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	4a16      	ldr	r2, [pc, #88]	; (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009e18:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e1e:	e01e      	b.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e20:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e2c:	d106      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e34:	d102      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e36:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3a:	e010      	b.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e48:	d106      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e50:	d102      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e56:	e002      	b.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e5c:	e1a1      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e5e:	e1a0      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e64:	e19d      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e6a:	e19a      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	03d09000 	.word	0x03d09000
 8009e74:	003d0900 	.word	0x003d0900
 8009e78:	017d7840 	.word	0x017d7840
 8009e7c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e86:	d173      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009e88:	4b9a      	ldr	r3, [pc, #616]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e98:	d02f      	beq.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea0:	d863      	bhi.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d012      	beq.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009eb0:	e05b      	b.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eb2:	4b90      	ldr	r3, [pc, #576]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ebe:	d107      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec0:	f107 0318 	add.w	r3, r7, #24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 f98b 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ece:	e168      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ed4:	e165      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ed6:	4b87      	ldr	r3, [pc, #540]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ee2:	d107      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee4:	f107 030c 	add.w	r3, r7, #12
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 facd 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ef2:	e156      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ef8:	e153      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009efa:	4b7e      	ldr	r3, [pc, #504]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f04:	4b7b      	ldr	r3, [pc, #492]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d10c      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8009f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d109      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f16:	4b77      	ldr	r3, [pc, #476]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	08db      	lsrs	r3, r3, #3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	4a75      	ldr	r2, [pc, #468]	; (800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f28:	e01e      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f2a:	4b72      	ldr	r3, [pc, #456]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f36:	d106      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f3e:	d102      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009f40:	4b6e      	ldr	r3, [pc, #440]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f44:	e010      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f46:	4b6b      	ldr	r3, [pc, #428]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f52:	d106      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f5a:	d102      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009f5c:	4b68      	ldr	r3, [pc, #416]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f60:	e002      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009f66:	e11c      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009f68:	e11b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f6e:	e118      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f76:	d133      	bne.n	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009f78:	4b5e      	ldr	r3, [pc, #376]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8e:	d012      	beq.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009f90:	e023      	b.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f92:	4b58      	ldr	r3, [pc, #352]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fbc3 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fae:	e0f8      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fb4:	e0f5      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fb6:	4b4f      	ldr	r3, [pc, #316]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fc2:	d107      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc4:	f107 0318 	add.w	r3, r7, #24
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f909 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fd2:	e0e6      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd8:	e0e3      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fde:	e0e0      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fe6:	f040 808d 	bne.w	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009fea:	4b42      	ldr	r3, [pc, #264]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ff2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ffa:	d06b      	beq.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a002:	d874      	bhi.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a00a:	d056      	beq.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a012:	d86c      	bhi.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a01a:	d03b      	beq.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a022:	d864      	bhi.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a02a:	d021      	beq.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a032:	d85c      	bhi.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a040:	d004      	beq.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800a042:	e054      	b.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a044:	f000 f8b6 	bl	800a1b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a048:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a04a:	e0aa      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a04c:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a058:	d107      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05a:	f107 0318 	add.w	r3, r7, #24
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f8be 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a068:	e09b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a06e:	e098      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a070:	4b20      	ldr	r3, [pc, #128]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a07c:	d107      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a07e:	f107 030c 	add.w	r3, r7, #12
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fa00 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a08c:	e089      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a08e:	2300      	movs	r3, #0
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a092:	e086      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a094:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d109      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0a0:	4b14      	ldr	r3, [pc, #80]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	08db      	lsrs	r3, r3, #3
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	4a13      	ldr	r2, [pc, #76]	; (800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0b2:	e076      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b8:	e073      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c6:	d102      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0cc:	e069      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0d2:	e066      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0d4:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800a0e2:	4b07      	ldr	r3, [pc, #28]	; (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0e6:	e05c      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ec:	e059      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0f2:	e056      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	03d09000 	.word	0x03d09000
 800a0fc:	003d0900 	.word	0x003d0900
 800a100:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a10a:	d148      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a10c:	4b27      	ldr	r3, [pc, #156]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a114:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a11c:	d02a      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a124:	d838      	bhi.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d004      	beq.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a132:	d00d      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a134:	e030      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a136:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a13e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a142:	d102      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a144:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a148:	e02b      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a14e:	e028      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a150:	4b16      	ldr	r3, [pc, #88]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a15c:	d107      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a15e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fae4 	bl	800a730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a16c:	e019      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a172:	e016      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a174:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a17c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a180:	d107      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a182:	f107 0318 	add.w	r3, r7, #24
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f82a 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a190:	e007      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a196:	e004      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a19c:	e001      	b.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3740      	adds	r7, #64	; 0x40
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	017d7840 	.word	0x017d7840

0800a1b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a1b8:	f7fe fc82 	bl	8008ac0 <HAL_RCC_GetHCLKFreq>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	091b      	lsrs	r3, r3, #4
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	4904      	ldr	r1, [pc, #16]	; (800a1dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a1ca:	5ccb      	ldrb	r3, [r1, r3]
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	08011a10 	.word	0x08011a10

0800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b089      	sub	sp, #36	; 0x24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1e8:	4ba1      	ldr	r3, [pc, #644]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a1f2:	4b9f      	ldr	r3, [pc, #636]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f6:	0b1b      	lsrs	r3, r3, #12
 800a1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a1fe:	4b9c      	ldr	r3, [pc, #624]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	091b      	lsrs	r3, r3, #4
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a20a:	4b99      	ldr	r3, [pc, #612]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20e:	08db      	lsrs	r3, r3, #3
 800a210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	fb02 f303 	mul.w	r3, r2, r3
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8111 	beq.w	800a450 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	2b02      	cmp	r3, #2
 800a232:	f000 8083 	beq.w	800a33c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	f200 80a1 	bhi.w	800a380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d056      	beq.n	800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a24a:	e099      	b.n	800a380 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a24c:	4b88      	ldr	r3, [pc, #544]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0320 	and.w	r3, r3, #32
 800a254:	2b00      	cmp	r3, #0
 800a256:	d02d      	beq.n	800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a258:	4b85      	ldr	r3, [pc, #532]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	08db      	lsrs	r3, r3, #3
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	4a84      	ldr	r2, [pc, #528]	; (800a474 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
 800a268:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	ee07 3a90 	vmov	s15, r3
 800a270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a282:	4b7b      	ldr	r3, [pc, #492]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a292:	ed97 6a03 	vldr	s12, [r7, #12]
 800a296:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a2b2:	e087      	b.n	800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a47c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c6:	4b6a      	ldr	r3, [pc, #424]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2f6:	e065      	b.n	800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30a:	4b59      	ldr	r3, [pc, #356]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a31e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a33a:	e043      	b.n	800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	ee07 3a90 	vmov	s15, r3
 800a342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a346:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a34a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a34e:	4b48      	ldr	r3, [pc, #288]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a356:	ee07 3a90 	vmov	s15, r3
 800a35a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a362:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a36a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a37e:	e021      	b.n	800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a38e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a392:	4b37      	ldr	r3, [pc, #220]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39a:	ee07 3a90 	vmov	s15, r3
 800a39e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a478 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a3c4:	4b2a      	ldr	r3, [pc, #168]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	0a5b      	lsrs	r3, r3, #9
 800a3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ea:	ee17 2a90 	vmov	r2, s15
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fc:	ee07 3a90 	vmov	s15, r3
 800a400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a418:	ee17 2a90 	vmov	r2, s15
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a424:	0e1b      	lsrs	r3, r3, #24
 800a426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a43a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a446:	ee17 2a90 	vmov	r2, s15
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a44e:	e008      	b.n	800a462 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	609a      	str	r2, [r3, #8]
}
 800a462:	bf00      	nop
 800a464:	3724      	adds	r7, #36	; 0x24
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
 800a474:	03d09000 	.word	0x03d09000
 800a478:	46000000 	.word	0x46000000
 800a47c:	4c742400 	.word	0x4c742400
 800a480:	4a742400 	.word	0x4a742400
 800a484:	4bbebc20 	.word	0x4bbebc20

0800a488 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a488:	b480      	push	{r7}
 800a48a:	b089      	sub	sp, #36	; 0x24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a490:	4ba1      	ldr	r3, [pc, #644]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a49a:	4b9f      	ldr	r3, [pc, #636]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49e:	0d1b      	lsrs	r3, r3, #20
 800a4a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4a6:	4b9c      	ldr	r3, [pc, #624]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a4b2:	4b99      	ldr	r3, [pc, #612]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8111 	beq.w	800a6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	f000 8083 	beq.w	800a5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	f200 80a1 	bhi.w	800a628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d056      	beq.n	800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a4f2:	e099      	b.n	800a628 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f4:	4b88      	ldr	r3, [pc, #544]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02d      	beq.n	800a55c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a500:	4b85      	ldr	r3, [pc, #532]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	08db      	lsrs	r3, r3, #3
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	4a84      	ldr	r2, [pc, #528]	; (800a71c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a50c:	fa22 f303 	lsr.w	r3, r2, r3
 800a510:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	ee07 3a90 	vmov	s15, r3
 800a518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52a:	4b7b      	ldr	r3, [pc, #492]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a53e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a556:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a55a:	e087      	b.n	800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56e:	4b6a      	ldr	r3, [pc, #424]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a582:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a59e:	e065      	b.n	800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b2:	4b59      	ldr	r3, [pc, #356]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5e2:	e043      	b.n	800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a72c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f6:	4b48      	ldr	r3, [pc, #288]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a606:	ed97 6a03 	vldr	s12, [r7, #12]
 800a60a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a626:	e021      	b.n	800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a632:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63a:	4b37      	ldr	r3, [pc, #220]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a64e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a720 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a66a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a670:	0a5b      	lsrs	r3, r3, #9
 800a672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a69a:	4b1f      	ldr	r3, [pc, #124]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	0c1b      	lsrs	r3, r3, #16
 800a6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a6c8:	4b13      	ldr	r3, [pc, #76]	; (800a718 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	0e1b      	lsrs	r3, r3, #24
 800a6ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ee:	ee17 2a90 	vmov	r2, s15
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a6f6:	e008      	b.n	800a70a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	609a      	str	r2, [r3, #8]
}
 800a70a:	bf00      	nop
 800a70c:	3724      	adds	r7, #36	; 0x24
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	58024400 	.word	0x58024400
 800a71c:	03d09000 	.word	0x03d09000
 800a720:	46000000 	.word	0x46000000
 800a724:	4c742400 	.word	0x4c742400
 800a728:	4a742400 	.word	0x4a742400
 800a72c:	4bbebc20 	.word	0x4bbebc20

0800a730 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	; 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a738:	4ba0      	ldr	r3, [pc, #640]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a742:	4b9e      	ldr	r3, [pc, #632]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	091b      	lsrs	r3, r3, #4
 800a748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a74c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a74e:	4b9b      	ldr	r3, [pc, #620]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a758:	4b98      	ldr	r3, [pc, #608]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	fb02 f303 	mul.w	r3, r2, r3
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a770:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 8111 	beq.w	800a99e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	f000 8083 	beq.w	800a88a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2b02      	cmp	r3, #2
 800a788:	f200 80a1 	bhi.w	800a8ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d056      	beq.n	800a846 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a798:	e099      	b.n	800a8ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a79a:	4b88      	ldr	r3, [pc, #544]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d02d      	beq.n	800a802 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7a6:	4b85      	ldr	r3, [pc, #532]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	08db      	lsrs	r3, r3, #3
 800a7ac:	f003 0303 	and.w	r3, r3, #3
 800a7b0:	4a83      	ldr	r2, [pc, #524]	; (800a9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d0:	4b7a      	ldr	r3, [pc, #488]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a800:	e087      	b.n	800a912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	ee07 3a90 	vmov	s15, r3
 800a808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a814:	4b69      	ldr	r3, [pc, #420]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81c:	ee07 3a90 	vmov	s15, r3
 800a820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a824:	ed97 6a03 	vldr	s12, [r7, #12]
 800a828:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a82c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a844:	e065      	b.n	800a912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	ee07 3a90 	vmov	s15, r3
 800a84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a850:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a9cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a858:	4b58      	ldr	r3, [pc, #352]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a860:	ee07 3a90 	vmov	s15, r3
 800a864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a868:	ed97 6a03 	vldr	s12, [r7, #12]
 800a86c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a87c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a880:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a888:	e043      	b.n	800a912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	ee07 3a90 	vmov	s15, r3
 800a890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a894:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89c:	4b47      	ldr	r3, [pc, #284]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a4:	ee07 3a90 	vmov	s15, r3
 800a8a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8cc:	e021      	b.n	800a912 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	ee07 3a90 	vmov	s15, r3
 800a8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e0:	4b36      	ldr	r3, [pc, #216]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e8:	ee07 3a90 	vmov	s15, r3
 800a8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a910:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a912:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	0a5b      	lsrs	r3, r3, #9
 800a918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a92c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a938:	ee17 2a90 	vmov	r2, s15
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a940:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	0c1b      	lsrs	r3, r3, #16
 800a946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94a:	ee07 3a90 	vmov	s15, r3
 800a94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a95a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a95e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a966:	ee17 2a90 	vmov	r2, s15
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a96e:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	0e1b      	lsrs	r3, r3, #24
 800a974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a978:	ee07 3a90 	vmov	s15, r3
 800a97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a984:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a988:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a994:	ee17 2a90 	vmov	r2, s15
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a99c:	e008      	b.n	800a9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	609a      	str	r2, [r3, #8]
}
 800a9b0:	bf00      	nop
 800a9b2:	3724      	adds	r7, #36	; 0x24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	58024400 	.word	0x58024400
 800a9c0:	03d09000 	.word	0x03d09000
 800a9c4:	46000000 	.word	0x46000000
 800a9c8:	4c742400 	.word	0x4c742400
 800a9cc:	4a742400 	.word	0x4a742400
 800a9d0:	4bbebc20 	.word	0x4bbebc20

0800a9d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a9e2:	4b53      	ldr	r3, [pc, #332]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	f003 0303 	and.w	r3, r3, #3
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d101      	bne.n	800a9f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e099      	b.n	800ab26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a9f2:	4b4f      	ldr	r3, [pc, #316]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a4e      	ldr	r2, [pc, #312]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800a9f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9fe:	f7f8 f84f 	bl	8002aa0 <HAL_GetTick>
 800aa02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa04:	e008      	b.n	800aa18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa06:	f7f8 f84b 	bl	8002aa0 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d901      	bls.n	800aa18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e086      	b.n	800ab26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa18:	4b45      	ldr	r3, [pc, #276]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1f0      	bne.n	800aa06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aa24:	4b42      	ldr	r3, [pc, #264]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	031b      	lsls	r3, r3, #12
 800aa32:	493f      	ldr	r1, [pc, #252]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	628b      	str	r3, [r1, #40]	; 0x28
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	3b01      	subs	r3, #1
 800aa48:	025b      	lsls	r3, r3, #9
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	041b      	lsls	r3, r3, #16
 800aa56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	061b      	lsls	r3, r3, #24
 800aa64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa68:	4931      	ldr	r1, [pc, #196]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa6e:	4b30      	ldr	r3, [pc, #192]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	492d      	ldr	r1, [pc, #180]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa80:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa84:	f023 0220 	bic.w	r2, r3, #32
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	4928      	ldr	r1, [pc, #160]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aa92:	4b27      	ldr	r3, [pc, #156]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	4a26      	ldr	r2, [pc, #152]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aa98:	f023 0310 	bic.w	r3, r3, #16
 800aa9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa9e:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaa2:	4b24      	ldr	r3, [pc, #144]	; (800ab34 <RCCEx_PLL2_Config+0x160>)
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	69d2      	ldr	r2, [r2, #28]
 800aaaa:	00d2      	lsls	r2, r2, #3
 800aaac:	4920      	ldr	r1, [pc, #128]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aab2:	4b1f      	ldr	r3, [pc, #124]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	4a1e      	ldr	r2, [pc, #120]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aab8:	f043 0310 	orr.w	r3, r3, #16
 800aabc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aac4:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	4a19      	ldr	r2, [pc, #100]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aace:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aad0:	e00f      	b.n	800aaf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d106      	bne.n	800aae6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aad8:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	4a14      	ldr	r2, [pc, #80]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aae4:	e005      	b.n	800aaf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	4a11      	ldr	r2, [pc, #68]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aaf2:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a0e      	ldr	r2, [pc, #56]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800aaf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aafc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aafe:	f7f7 ffcf 	bl	8002aa0 <HAL_GetTick>
 800ab02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab04:	e008      	b.n	800ab18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab06:	f7f7 ffcb 	bl	8002aa0 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d901      	bls.n	800ab18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e006      	b.n	800ab26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <RCCEx_PLL2_Config+0x15c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0f0      	beq.n	800ab06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400
 800ab34:	ffff0007 	.word	0xffff0007

0800ab38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab46:	4b53      	ldr	r3, [pc, #332]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4a:	f003 0303 	and.w	r3, r3, #3
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d101      	bne.n	800ab56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e099      	b.n	800ac8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab56:	4b4f      	ldr	r3, [pc, #316]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a4e      	ldr	r2, [pc, #312]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab62:	f7f7 ff9d 	bl	8002aa0 <HAL_GetTick>
 800ab66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab68:	e008      	b.n	800ab7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ab6a:	f7f7 ff99 	bl	8002aa0 <HAL_GetTick>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d901      	bls.n	800ab7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e086      	b.n	800ac8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab7c:	4b45      	ldr	r3, [pc, #276]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1f0      	bne.n	800ab6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab88:	4b42      	ldr	r3, [pc, #264]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	051b      	lsls	r3, r3, #20
 800ab96:	493f      	ldr	r1, [pc, #252]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	628b      	str	r3, [r1, #40]	; 0x28
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	3b01      	subs	r3, #1
 800abac:	025b      	lsls	r3, r3, #9
 800abae:	b29b      	uxth	r3, r3
 800abb0:	431a      	orrs	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	041b      	lsls	r3, r3, #16
 800abba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	061b      	lsls	r3, r3, #24
 800abc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abcc:	4931      	ldr	r1, [pc, #196]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800abd2:	4b30      	ldr	r3, [pc, #192]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	492d      	ldr	r1, [pc, #180]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abe0:	4313      	orrs	r3, r2
 800abe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800abe4:	4b2b      	ldr	r3, [pc, #172]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	4928      	ldr	r1, [pc, #160]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800abf6:	4b27      	ldr	r3, [pc, #156]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	4a26      	ldr	r2, [pc, #152]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800abfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac06:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <RCCEx_PLL3_Config+0x160>)
 800ac08:	4013      	ands	r3, r2
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	69d2      	ldr	r2, [r2, #28]
 800ac0e:	00d2      	lsls	r2, r2, #3
 800ac10:	4920      	ldr	r1, [pc, #128]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ac16:	4b1f      	ldr	r3, [pc, #124]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	4a1e      	ldr	r2, [pc, #120]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	4a19      	ldr	r2, [pc, #100]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ac32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac34:	e00f      	b.n	800ac56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d106      	bne.n	800ac4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ac3c:	4b15      	ldr	r3, [pc, #84]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac48:	e005      	b.n	800ac56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ac4a:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4e:	4a11      	ldr	r2, [pc, #68]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a0e      	ldr	r2, [pc, #56]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac62:	f7f7 ff1d 	bl	8002aa0 <HAL_GetTick>
 800ac66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac68:	e008      	b.n	800ac7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ac6a:	f7f7 ff19 	bl	8002aa0 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d901      	bls.n	800ac7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e006      	b.n	800ac8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac7c:	4b05      	ldr	r3, [pc, #20]	; (800ac94 <RCCEx_PLL3_Config+0x15c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0f0      	beq.n	800ac6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	58024400 	.word	0x58024400
 800ac98:	ffff0007 	.word	0xffff0007

0800ac9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e0f1      	b.n	800ae92 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a78      	ldr	r2, [pc, #480]	; (800ae9c <HAL_SPI_Init+0x200>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00f      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a77      	ldr	r2, [pc, #476]	; (800aea0 <HAL_SPI_Init+0x204>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00a      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a75      	ldr	r2, [pc, #468]	; (800aea4 <HAL_SPI_Init+0x208>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d005      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d901      	bls.n	800acde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e0d9      	b.n	800ae92 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f8e2 	bl	800aea8 <SPI_GetPacketSize>
 800ace4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a6c      	ldr	r2, [pc, #432]	; (800ae9c <HAL_SPI_Init+0x200>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d00c      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a6a      	ldr	r2, [pc, #424]	; (800aea0 <HAL_SPI_Init+0x204>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d007      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a69      	ldr	r2, [pc, #420]	; (800aea4 <HAL_SPI_Init+0x208>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d002      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	d811      	bhi.n	800ad2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad0e:	4a63      	ldr	r2, [pc, #396]	; (800ae9c <HAL_SPI_Init+0x200>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d009      	beq.n	800ad28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a61      	ldr	r2, [pc, #388]	; (800aea0 <HAL_SPI_Init+0x204>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <HAL_SPI_Init+0x8c>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a60      	ldr	r2, [pc, #384]	; (800aea4 <HAL_SPI_Init+0x208>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d104      	bne.n	800ad32 <HAL_SPI_Init+0x96>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b10      	cmp	r3, #16
 800ad2c:	d901      	bls.n	800ad32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e0af      	b.n	800ae92 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f7 f8a6 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 0201 	bic.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ad6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad78:	d119      	bne.n	800adae <HAL_SPI_Init+0x112>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad82:	d103      	bne.n	800ad8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10c      	bne.n	800adae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad9c:	d107      	bne.n	800adae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800adac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69da      	ldr	r2, [r3, #28]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb6:	431a      	orrs	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	431a      	orrs	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc0:	ea42 0103 	orr.w	r1, r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68da      	ldr	r2, [r3, #12]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	431a      	orrs	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae02:	431a      	orrs	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae0e:	ea42 0103 	orr.w	r1, r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d113      	bne.n	800ae4e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae38:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae4c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0201 	bic.w	r2, r2, #1
 800ae5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	40013000 	.word	0x40013000
 800aea0:	40003800 	.word	0x40003800
 800aea4:	40003c00 	.word	0x40003c00

0800aea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	3301      	adds	r3, #1
 800aec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	3307      	adds	r3, #7
 800aec6:	08db      	lsrs	r3, r3, #3
 800aec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	fb02 f303 	mul.w	r3, r2, r3
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e049      	b.n	800af84 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7f7 f9fb 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2202      	movs	r2, #2
 800af0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3304      	adds	r3, #4
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f000 fb3f 	bl	800b5a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2201      	movs	r2, #1
 800af4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2201      	movs	r2, #1
 800af66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e049      	b.n	800b032 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d106      	bne.n	800afb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7f7 fa50 	bl	8002458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4619      	mov	r1, r3
 800afca:	4610      	mov	r0, r2
 800afcc:	f000 fae8 	bl	800b5a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e08f      	b.n	800b170 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f7f6 ffcd 	bl	8002004 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2202      	movs	r2, #2
 800b06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6899      	ldr	r1, [r3, #8]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b3e      	ldr	r3, [pc, #248]	; (800b178 <HAL_TIM_Encoder_Init+0x13c>)
 800b07e:	400b      	ands	r3, r1
 800b080:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3304      	adds	r3, #4
 800b08a:	4619      	mov	r1, r3
 800b08c:	4610      	mov	r0, r2
 800b08e:	f000 fa87 	bl	800b5a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	4b31      	ldr	r3, [pc, #196]	; (800b17c <HAL_TIM_Encoder_Init+0x140>)
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4b2b      	ldr	r3, [pc, #172]	; (800b180 <HAL_TIM_Encoder_Init+0x144>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <HAL_TIM_Encoder_Init+0x148>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	021b      	lsls	r3, r3, #8
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	011a      	lsls	r2, r3, #4
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	031b      	lsls	r3, r3, #12
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	4313      	orrs	r3, r2
 800b102:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b10a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b112:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	011b      	lsls	r3, r3, #4
 800b11e:	4313      	orrs	r3, r2
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	fffebff8 	.word	0xfffebff8
 800b17c:	fffffcfc 	.word	0xfffffcfc
 800b180:	fffff3f3 	.word	0xfffff3f3
 800b184:	ffff0f0f 	.word	0xffff0f0f

0800b188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	e0ff      	b.n	800b3a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b14      	cmp	r3, #20
 800b1b2:	f200 80f0 	bhi.w	800b396 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b211 	.word	0x0800b211
 800b1c0:	0800b397 	.word	0x0800b397
 800b1c4:	0800b397 	.word	0x0800b397
 800b1c8:	0800b397 	.word	0x0800b397
 800b1cc:	0800b251 	.word	0x0800b251
 800b1d0:	0800b397 	.word	0x0800b397
 800b1d4:	0800b397 	.word	0x0800b397
 800b1d8:	0800b397 	.word	0x0800b397
 800b1dc:	0800b293 	.word	0x0800b293
 800b1e0:	0800b397 	.word	0x0800b397
 800b1e4:	0800b397 	.word	0x0800b397
 800b1e8:	0800b397 	.word	0x0800b397
 800b1ec:	0800b2d3 	.word	0x0800b2d3
 800b1f0:	0800b397 	.word	0x0800b397
 800b1f4:	0800b397 	.word	0x0800b397
 800b1f8:	0800b397 	.word	0x0800b397
 800b1fc:	0800b315 	.word	0x0800b315
 800b200:	0800b397 	.word	0x0800b397
 800b204:	0800b397 	.word	0x0800b397
 800b208:	0800b397 	.word	0x0800b397
 800b20c:	0800b355 	.word	0x0800b355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68b9      	ldr	r1, [r7, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fa68 	bl	800b6ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	699a      	ldr	r2, [r3, #24]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f042 0208 	orr.w	r2, r2, #8
 800b22a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f022 0204 	bic.w	r2, r2, #4
 800b23a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6999      	ldr	r1, [r3, #24]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	691a      	ldr	r2, [r3, #16]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	619a      	str	r2, [r3, #24]
      break;
 800b24e:	e0a5      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fad8 	bl	800b80c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	699a      	ldr	r2, [r3, #24]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b26a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b27a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6999      	ldr	r1, [r3, #24]
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	021a      	lsls	r2, r3, #8
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	619a      	str	r2, [r3, #24]
      break;
 800b290:	e084      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fb41 	bl	800b920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	69da      	ldr	r2, [r3, #28]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f042 0208 	orr.w	r2, r2, #8
 800b2ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	69da      	ldr	r2, [r3, #28]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0204 	bic.w	r2, r2, #4
 800b2bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	69d9      	ldr	r1, [r3, #28]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	691a      	ldr	r2, [r3, #16]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	61da      	str	r2, [r3, #28]
      break;
 800b2d0:	e064      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68b9      	ldr	r1, [r7, #8]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fba9 	bl	800ba30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	69da      	ldr	r2, [r3, #28]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	69d9      	ldr	r1, [r3, #28]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	021a      	lsls	r2, r3, #8
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	61da      	str	r2, [r3, #28]
      break;
 800b312:	e043      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68b9      	ldr	r1, [r7, #8]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fbf2 	bl	800bb04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f042 0208 	orr.w	r2, r2, #8
 800b32e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 0204 	bic.w	r2, r2, #4
 800b33e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	691a      	ldr	r2, [r3, #16]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b352:	e023      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68b9      	ldr	r1, [r7, #8]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fc36 	bl	800bbcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b37e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	021a      	lsls	r2, r3, #8
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b394:	e002      	b.n	800b39c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	75fb      	strb	r3, [r7, #23]
      break;
 800b39a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop

0800b3b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_TIM_ConfigClockSource+0x1c>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e0dc      	b.n	800b586 <HAL_TIM_ConfigClockSource+0x1d6>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	4b6a      	ldr	r3, [pc, #424]	; (800b590 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a64      	ldr	r2, [pc, #400]	; (800b594 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b402:	4293      	cmp	r3, r2
 800b404:	f000 80a9 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b408:	4a62      	ldr	r2, [pc, #392]	; (800b594 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	f200 80ae 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b410:	4a61      	ldr	r2, [pc, #388]	; (800b598 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b412:	4293      	cmp	r3, r2
 800b414:	f000 80a1 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b418:	4a5f      	ldr	r2, [pc, #380]	; (800b598 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	f200 80a6 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b420:	4a5e      	ldr	r2, [pc, #376]	; (800b59c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b422:	4293      	cmp	r3, r2
 800b424:	f000 8099 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b428:	4a5c      	ldr	r2, [pc, #368]	; (800b59c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	f200 809e 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b430:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b434:	f000 8091 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b438:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b43c:	f200 8096 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b444:	f000 8089 	beq.w	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b44c:	f200 808e 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b454:	d03e      	beq.n	800b4d4 <HAL_TIM_ConfigClockSource+0x124>
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b45a:	f200 8087 	bhi.w	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b462:	f000 8086 	beq.w	800b572 <HAL_TIM_ConfigClockSource+0x1c2>
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	d87f      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b46c:	2b70      	cmp	r3, #112	; 0x70
 800b46e:	d01a      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0xf6>
 800b470:	2b70      	cmp	r3, #112	; 0x70
 800b472:	d87b      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b474:	2b60      	cmp	r3, #96	; 0x60
 800b476:	d050      	beq.n	800b51a <HAL_TIM_ConfigClockSource+0x16a>
 800b478:	2b60      	cmp	r3, #96	; 0x60
 800b47a:	d877      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b47c:	2b50      	cmp	r3, #80	; 0x50
 800b47e:	d03c      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0x14a>
 800b480:	2b50      	cmp	r3, #80	; 0x50
 800b482:	d873      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b484:	2b40      	cmp	r3, #64	; 0x40
 800b486:	d058      	beq.n	800b53a <HAL_TIM_ConfigClockSource+0x18a>
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d86f      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b48c:	2b30      	cmp	r3, #48	; 0x30
 800b48e:	d064      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b490:	2b30      	cmp	r3, #48	; 0x30
 800b492:	d86b      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b494:	2b20      	cmp	r3, #32
 800b496:	d060      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b498:	2b20      	cmp	r3, #32
 800b49a:	d867      	bhi.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05c      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b4a0:	2b10      	cmp	r3, #16
 800b4a2:	d05a      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x1aa>
 800b4a4:	e062      	b.n	800b56c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6899      	ldr	r1, [r3, #8]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	f000 fc6d 	bl	800bd94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	609a      	str	r2, [r3, #8]
      break;
 800b4d2:	e04f      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6818      	ldr	r0, [r3, #0]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6899      	ldr	r1, [r3, #8]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f000 fc56 	bl	800bd94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689a      	ldr	r2, [r3, #8]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4f6:	609a      	str	r2, [r3, #8]
      break;
 800b4f8:	e03c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	6859      	ldr	r1, [r3, #4]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	461a      	mov	r2, r3
 800b508:	f000 fbc6 	bl	800bc98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2150      	movs	r1, #80	; 0x50
 800b512:	4618      	mov	r0, r3
 800b514:	f000 fc20 	bl	800bd58 <TIM_ITRx_SetConfig>
      break;
 800b518:	e02c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	461a      	mov	r2, r3
 800b528:	f000 fbe5 	bl	800bcf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2160      	movs	r1, #96	; 0x60
 800b532:	4618      	mov	r0, r3
 800b534:	f000 fc10 	bl	800bd58 <TIM_ITRx_SetConfig>
      break;
 800b538:	e01c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6859      	ldr	r1, [r3, #4]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	461a      	mov	r2, r3
 800b548:	f000 fba6 	bl	800bc98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2140      	movs	r1, #64	; 0x40
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fc00 	bl	800bd58 <TIM_ITRx_SetConfig>
      break;
 800b558:	e00c      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f000 fbf7 	bl	800bd58 <TIM_ITRx_SetConfig>
      break;
 800b56a:	e003      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	73fb      	strb	r3, [r7, #15]
      break;
 800b570:	e000      	b.n	800b574 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b572:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b584:	7bfb      	ldrb	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	ffceff88 	.word	0xffceff88
 800b594:	00100040 	.word	0x00100040
 800b598:	00100030 	.word	0x00100030
 800b59c:	00100020 	.word	0x00100020

0800b5a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a44      	ldr	r2, [pc, #272]	; (800b6c4 <TIM_Base_SetConfig+0x124>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d013      	beq.n	800b5e0 <TIM_Base_SetConfig+0x40>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5be:	d00f      	beq.n	800b5e0 <TIM_Base_SetConfig+0x40>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a41      	ldr	r2, [pc, #260]	; (800b6c8 <TIM_Base_SetConfig+0x128>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d00b      	beq.n	800b5e0 <TIM_Base_SetConfig+0x40>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a40      	ldr	r2, [pc, #256]	; (800b6cc <TIM_Base_SetConfig+0x12c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d007      	beq.n	800b5e0 <TIM_Base_SetConfig+0x40>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a3f      	ldr	r2, [pc, #252]	; (800b6d0 <TIM_Base_SetConfig+0x130>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d003      	beq.n	800b5e0 <TIM_Base_SetConfig+0x40>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a3e      	ldr	r2, [pc, #248]	; (800b6d4 <TIM_Base_SetConfig+0x134>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d108      	bne.n	800b5f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a33      	ldr	r2, [pc, #204]	; (800b6c4 <TIM_Base_SetConfig+0x124>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d027      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b600:	d023      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a30      	ldr	r2, [pc, #192]	; (800b6c8 <TIM_Base_SetConfig+0x128>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d01f      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a2f      	ldr	r2, [pc, #188]	; (800b6cc <TIM_Base_SetConfig+0x12c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d01b      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a2e      	ldr	r2, [pc, #184]	; (800b6d0 <TIM_Base_SetConfig+0x130>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d017      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a2d      	ldr	r2, [pc, #180]	; (800b6d4 <TIM_Base_SetConfig+0x134>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d013      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a2c      	ldr	r2, [pc, #176]	; (800b6d8 <TIM_Base_SetConfig+0x138>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d00f      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a2b      	ldr	r2, [pc, #172]	; (800b6dc <TIM_Base_SetConfig+0x13c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d00b      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a2a      	ldr	r2, [pc, #168]	; (800b6e0 <TIM_Base_SetConfig+0x140>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d007      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a29      	ldr	r2, [pc, #164]	; (800b6e4 <TIM_Base_SetConfig+0x144>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_Base_SetConfig+0xaa>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a28      	ldr	r2, [pc, #160]	; (800b6e8 <TIM_Base_SetConfig+0x148>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d108      	bne.n	800b65c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	4313      	orrs	r3, r2
 800b65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	4313      	orrs	r3, r2
 800b668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a10      	ldr	r2, [pc, #64]	; (800b6c4 <TIM_Base_SetConfig+0x124>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00f      	beq.n	800b6a8 <TIM_Base_SetConfig+0x108>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <TIM_Base_SetConfig+0x134>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00b      	beq.n	800b6a8 <TIM_Base_SetConfig+0x108>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a11      	ldr	r2, [pc, #68]	; (800b6d8 <TIM_Base_SetConfig+0x138>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d007      	beq.n	800b6a8 <TIM_Base_SetConfig+0x108>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a10      	ldr	r2, [pc, #64]	; (800b6dc <TIM_Base_SetConfig+0x13c>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d003      	beq.n	800b6a8 <TIM_Base_SetConfig+0x108>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <TIM_Base_SetConfig+0x140>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d103      	bne.n	800b6b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	691a      	ldr	r2, [r3, #16]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	615a      	str	r2, [r3, #20]
}
 800b6b6:	bf00      	nop
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	40010000 	.word	0x40010000
 800b6c8:	40000400 	.word	0x40000400
 800b6cc:	40000800 	.word	0x40000800
 800b6d0:	40000c00 	.word	0x40000c00
 800b6d4:	40010400 	.word	0x40010400
 800b6d8:	40014000 	.word	0x40014000
 800b6dc:	40014400 	.word	0x40014400
 800b6e0:	40014800 	.word	0x40014800
 800b6e4:	4000e000 	.word	0x4000e000
 800b6e8:	4000e400 	.word	0x4000e400

0800b6ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	f023 0201 	bic.w	r2, r3, #1
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4b37      	ldr	r3, [pc, #220]	; (800b7f4 <TIM_OC1_SetConfig+0x108>)
 800b718:	4013      	ands	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f023 0303 	bic.w	r3, r3, #3
 800b722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f023 0302 	bic.w	r3, r3, #2
 800b734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a2d      	ldr	r2, [pc, #180]	; (800b7f8 <TIM_OC1_SetConfig+0x10c>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d00f      	beq.n	800b768 <TIM_OC1_SetConfig+0x7c>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a2c      	ldr	r2, [pc, #176]	; (800b7fc <TIM_OC1_SetConfig+0x110>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00b      	beq.n	800b768 <TIM_OC1_SetConfig+0x7c>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a2b      	ldr	r2, [pc, #172]	; (800b800 <TIM_OC1_SetConfig+0x114>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d007      	beq.n	800b768 <TIM_OC1_SetConfig+0x7c>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a2a      	ldr	r2, [pc, #168]	; (800b804 <TIM_OC1_SetConfig+0x118>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d003      	beq.n	800b768 <TIM_OC1_SetConfig+0x7c>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a29      	ldr	r2, [pc, #164]	; (800b808 <TIM_OC1_SetConfig+0x11c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d10c      	bne.n	800b782 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	f023 0308 	bic.w	r3, r3, #8
 800b76e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	4313      	orrs	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f023 0304 	bic.w	r3, r3, #4
 800b780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a1c      	ldr	r2, [pc, #112]	; (800b7f8 <TIM_OC1_SetConfig+0x10c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00f      	beq.n	800b7aa <TIM_OC1_SetConfig+0xbe>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a1b      	ldr	r2, [pc, #108]	; (800b7fc <TIM_OC1_SetConfig+0x110>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d00b      	beq.n	800b7aa <TIM_OC1_SetConfig+0xbe>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a1a      	ldr	r2, [pc, #104]	; (800b800 <TIM_OC1_SetConfig+0x114>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d007      	beq.n	800b7aa <TIM_OC1_SetConfig+0xbe>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <TIM_OC1_SetConfig+0x118>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d003      	beq.n	800b7aa <TIM_OC1_SetConfig+0xbe>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a18      	ldr	r2, [pc, #96]	; (800b808 <TIM_OC1_SetConfig+0x11c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d111      	bne.n	800b7ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	621a      	str	r2, [r3, #32]
}
 800b7e8:	bf00      	nop
 800b7ea:	371c      	adds	r7, #28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	fffeff8f 	.word	0xfffeff8f
 800b7f8:	40010000 	.word	0x40010000
 800b7fc:	40010400 	.word	0x40010400
 800b800:	40014000 	.word	0x40014000
 800b804:	40014400 	.word	0x40014400
 800b808:	40014800 	.word	0x40014800

0800b80c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	f023 0210 	bic.w	r2, r3, #16
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4b34      	ldr	r3, [pc, #208]	; (800b908 <TIM_OC2_SetConfig+0xfc>)
 800b838:	4013      	ands	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f023 0320 	bic.w	r3, r3, #32
 800b856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a29      	ldr	r2, [pc, #164]	; (800b90c <TIM_OC2_SetConfig+0x100>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d003      	beq.n	800b874 <TIM_OC2_SetConfig+0x68>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a28      	ldr	r2, [pc, #160]	; (800b910 <TIM_OC2_SetConfig+0x104>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d10d      	bne.n	800b890 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b87a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	4313      	orrs	r3, r2
 800b886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b88e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a1e      	ldr	r2, [pc, #120]	; (800b90c <TIM_OC2_SetConfig+0x100>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d00f      	beq.n	800b8b8 <TIM_OC2_SetConfig+0xac>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a1d      	ldr	r2, [pc, #116]	; (800b910 <TIM_OC2_SetConfig+0x104>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d00b      	beq.n	800b8b8 <TIM_OC2_SetConfig+0xac>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a1c      	ldr	r2, [pc, #112]	; (800b914 <TIM_OC2_SetConfig+0x108>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d007      	beq.n	800b8b8 <TIM_OC2_SetConfig+0xac>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a1b      	ldr	r2, [pc, #108]	; (800b918 <TIM_OC2_SetConfig+0x10c>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d003      	beq.n	800b8b8 <TIM_OC2_SetConfig+0xac>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a1a      	ldr	r2, [pc, #104]	; (800b91c <TIM_OC2_SetConfig+0x110>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d113      	bne.n	800b8e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	621a      	str	r2, [r3, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	371c      	adds	r7, #28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	feff8fff 	.word	0xfeff8fff
 800b90c:	40010000 	.word	0x40010000
 800b910:	40010400 	.word	0x40010400
 800b914:	40014000 	.word	0x40014000
 800b918:	40014400 	.word	0x40014400
 800b91c:	40014800 	.word	0x40014800

0800b920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	69db      	ldr	r3, [r3, #28]
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4b33      	ldr	r3, [pc, #204]	; (800ba18 <TIM_OC3_SetConfig+0xf8>)
 800b94c:	4013      	ands	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f023 0303 	bic.w	r3, r3, #3
 800b956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	4313      	orrs	r3, r2
 800b974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a28      	ldr	r2, [pc, #160]	; (800ba1c <TIM_OC3_SetConfig+0xfc>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d003      	beq.n	800b986 <TIM_OC3_SetConfig+0x66>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a27      	ldr	r2, [pc, #156]	; (800ba20 <TIM_OC3_SetConfig+0x100>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d10d      	bne.n	800b9a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b98c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	021b      	lsls	r3, r3, #8
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	4313      	orrs	r3, r2
 800b998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a1d      	ldr	r2, [pc, #116]	; (800ba1c <TIM_OC3_SetConfig+0xfc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00f      	beq.n	800b9ca <TIM_OC3_SetConfig+0xaa>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a1c      	ldr	r2, [pc, #112]	; (800ba20 <TIM_OC3_SetConfig+0x100>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d00b      	beq.n	800b9ca <TIM_OC3_SetConfig+0xaa>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a1b      	ldr	r2, [pc, #108]	; (800ba24 <TIM_OC3_SetConfig+0x104>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d007      	beq.n	800b9ca <TIM_OC3_SetConfig+0xaa>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a1a      	ldr	r2, [pc, #104]	; (800ba28 <TIM_OC3_SetConfig+0x108>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d003      	beq.n	800b9ca <TIM_OC3_SetConfig+0xaa>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a19      	ldr	r2, [pc, #100]	; (800ba2c <TIM_OC3_SetConfig+0x10c>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d113      	bne.n	800b9f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	621a      	str	r2, [r3, #32]
}
 800ba0c:	bf00      	nop
 800ba0e:	371c      	adds	r7, #28
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	fffeff8f 	.word	0xfffeff8f
 800ba1c:	40010000 	.word	0x40010000
 800ba20:	40010400 	.word	0x40010400
 800ba24:	40014000 	.word	0x40014000
 800ba28:	40014400 	.word	0x40014400
 800ba2c:	40014800 	.word	0x40014800

0800ba30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b087      	sub	sp, #28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a1b      	ldr	r3, [r3, #32]
 800ba3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	4b24      	ldr	r3, [pc, #144]	; (800baec <TIM_OC4_SetConfig+0xbc>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	021b      	lsls	r3, r3, #8
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	031b      	lsls	r3, r3, #12
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a19      	ldr	r2, [pc, #100]	; (800baf0 <TIM_OC4_SetConfig+0xc0>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <TIM_OC4_SetConfig+0x80>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a18      	ldr	r2, [pc, #96]	; (800baf4 <TIM_OC4_SetConfig+0xc4>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_OC4_SetConfig+0x80>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a17      	ldr	r2, [pc, #92]	; (800baf8 <TIM_OC4_SetConfig+0xc8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_OC4_SetConfig+0x80>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a16      	ldr	r2, [pc, #88]	; (800bafc <TIM_OC4_SetConfig+0xcc>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_OC4_SetConfig+0x80>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a15      	ldr	r2, [pc, #84]	; (800bb00 <TIM_OC4_SetConfig+0xd0>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d109      	bne.n	800bac4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	019b      	lsls	r3, r3, #6
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	621a      	str	r2, [r3, #32]
}
 800bade:	bf00      	nop
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	feff8fff 	.word	0xfeff8fff
 800baf0:	40010000 	.word	0x40010000
 800baf4:	40010400 	.word	0x40010400
 800baf8:	40014000 	.word	0x40014000
 800bafc:	40014400 	.word	0x40014400
 800bb00:	40014800 	.word	0x40014800

0800bb04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <TIM_OC5_SetConfig+0xb0>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	041b      	lsls	r3, r3, #16
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a18      	ldr	r2, [pc, #96]	; (800bbb8 <TIM_OC5_SetConfig+0xb4>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00f      	beq.n	800bb7a <TIM_OC5_SetConfig+0x76>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <TIM_OC5_SetConfig+0xb8>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00b      	beq.n	800bb7a <TIM_OC5_SetConfig+0x76>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a16      	ldr	r2, [pc, #88]	; (800bbc0 <TIM_OC5_SetConfig+0xbc>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d007      	beq.n	800bb7a <TIM_OC5_SetConfig+0x76>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a15      	ldr	r2, [pc, #84]	; (800bbc4 <TIM_OC5_SetConfig+0xc0>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d003      	beq.n	800bb7a <TIM_OC5_SetConfig+0x76>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a14      	ldr	r2, [pc, #80]	; (800bbc8 <TIM_OC5_SetConfig+0xc4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d109      	bne.n	800bb8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	021b      	lsls	r3, r3, #8
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	693a      	ldr	r2, [r7, #16]
 800bba6:	621a      	str	r2, [r3, #32]
}
 800bba8:	bf00      	nop
 800bbaa:	371c      	adds	r7, #28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	fffeff8f 	.word	0xfffeff8f
 800bbb8:	40010000 	.word	0x40010000
 800bbbc:	40010400 	.word	0x40010400
 800bbc0:	40014000 	.word	0x40014000
 800bbc4:	40014400 	.word	0x40014400
 800bbc8:	40014800 	.word	0x40014800

0800bbcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4b22      	ldr	r3, [pc, #136]	; (800bc80 <TIM_OC6_SetConfig+0xb4>)
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	051b      	lsls	r3, r3, #20
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a19      	ldr	r2, [pc, #100]	; (800bc84 <TIM_OC6_SetConfig+0xb8>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d00f      	beq.n	800bc44 <TIM_OC6_SetConfig+0x78>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a18      	ldr	r2, [pc, #96]	; (800bc88 <TIM_OC6_SetConfig+0xbc>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d00b      	beq.n	800bc44 <TIM_OC6_SetConfig+0x78>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <TIM_OC6_SetConfig+0xc0>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d007      	beq.n	800bc44 <TIM_OC6_SetConfig+0x78>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <TIM_OC6_SetConfig+0xc4>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d003      	beq.n	800bc44 <TIM_OC6_SetConfig+0x78>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a15      	ldr	r2, [pc, #84]	; (800bc94 <TIM_OC6_SetConfig+0xc8>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d109      	bne.n	800bc58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	029b      	lsls	r3, r3, #10
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	621a      	str	r2, [r3, #32]
}
 800bc72:	bf00      	nop
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	feff8fff 	.word	0xfeff8fff
 800bc84:	40010000 	.word	0x40010000
 800bc88:	40010400 	.word	0x40010400
 800bc8c:	40014000 	.word	0x40014000
 800bc90:	40014400 	.word	0x40014400
 800bc94:	40014800 	.word	0x40014800

0800bc98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	f023 0201 	bic.w	r2, r3, #1
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bcc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f023 030a 	bic.w	r3, r3, #10
 800bcd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	621a      	str	r2, [r3, #32]
}
 800bcea:	bf00      	nop
 800bcec:	371c      	adds	r7, #28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b087      	sub	sp, #28
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	f023 0210 	bic.w	r2, r3, #16
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	031b      	lsls	r3, r3, #12
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	011b      	lsls	r3, r3, #4
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	621a      	str	r2, [r3, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
	...

0800bd58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4b09      	ldr	r3, [pc, #36]	; (800bd90 <TIM_ITRx_SetConfig+0x38>)
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	f043 0307 	orr.w	r3, r3, #7
 800bd7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	609a      	str	r2, [r3, #8]
}
 800bd82:	bf00      	nop
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	ffcfff8f 	.word	0xffcfff8f

0800bd94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b087      	sub	sp, #28
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	021a      	lsls	r2, r3, #8
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	697a      	ldr	r2, [r7, #20]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	609a      	str	r2, [r3, #8]
}
 800bdc8:	bf00      	nop
 800bdca:	371c      	adds	r7, #28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e077      	b.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a35      	ldr	r2, [pc, #212]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d004      	beq.n	800be20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a34      	ldr	r2, [pc, #208]	; (800beec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d108      	bne.n	800be32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	4313      	orrs	r3, r2
 800be30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	4313      	orrs	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a25      	ldr	r2, [pc, #148]	; (800bee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d02c      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be5e:	d027      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a22      	ldr	r2, [pc, #136]	; (800bef0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d022      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a21      	ldr	r2, [pc, #132]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d01d      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d018      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a1a      	ldr	r2, [pc, #104]	; (800beec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d013      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a1b      	ldr	r2, [pc, #108]	; (800befc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00e      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a1a      	ldr	r2, [pc, #104]	; (800bf00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d009      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a18      	ldr	r2, [pc, #96]	; (800bf04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d004      	beq.n	800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d10c      	bne.n	800beca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3714      	adds	r7, #20
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	40010000 	.word	0x40010000
 800beec:	40010400 	.word	0x40010400
 800bef0:	40000400 	.word	0x40000400
 800bef4:	40000800 	.word	0x40000800
 800bef8:	40000c00 	.word	0x40000c00
 800befc:	40001800 	.word	0x40001800
 800bf00:	40014000 	.word	0x40014000
 800bf04:	4000e000 	.word	0x4000e000
 800bf08:	4000e400 	.word	0x4000e400

0800bf0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d101      	bne.n	800bf28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bf24:	2302      	movs	r3, #2
 800bf26:	e087      	b.n	800c038 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	041b      	lsls	r3, r3, #16
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a27      	ldr	r2, [pc, #156]	; (800c044 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d004      	beq.n	800bfb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a25      	ldr	r2, [pc, #148]	; (800c048 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d106      	bne.n	800bfc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a1e      	ldr	r2, [pc, #120]	; (800c044 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d004      	beq.n	800bfd8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a1d      	ldr	r2, [pc, #116]	; (800c048 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d126      	bne.n	800c026 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe2:	051b      	lsls	r3, r3, #20
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	4313      	orrs	r3, r2
 800c002:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a0e      	ldr	r2, [pc, #56]	; (800c044 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d004      	beq.n	800c018 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a0d      	ldr	r2, [pc, #52]	; (800c048 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d106      	bne.n	800c026 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	40010000 	.word	0x40010000
 800c048:	40010400 	.word	0x40010400

0800c04c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e042      	b.n	800c0e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c064:	2b00      	cmp	r3, #0
 800c066:	d106      	bne.n	800c076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7f6 faef 	bl	8002654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2224      	movs	r2, #36	; 0x24
 800c07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f022 0201 	bic.w	r2, r2, #1
 800c08c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f82c 	bl	800c0ec <UART_SetConfig>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d101      	bne.n	800c09e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e022      	b.n	800c0e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fe7e 	bl	800cda8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689a      	ldr	r2, [r3, #8]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f042 0201 	orr.w	r2, r2, #1
 800c0da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 ff05 	bl	800ceec <UART_CheckIdleState>
 800c0e2:	4603      	mov	r3, r0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0ec:	b5b0      	push	{r4, r5, r7, lr}
 800c0ee:	b08e      	sub	sp, #56	; 0x38
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689a      	ldr	r2, [r3, #8]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	431a      	orrs	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	4313      	orrs	r3, r2
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	4bbf      	ldr	r3, [pc, #764]	; (800c418 <UART_SetConfig+0x32c>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6812      	ldr	r2, [r2, #0]
 800c120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c122:	430b      	orrs	r3, r1
 800c124:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	68da      	ldr	r2, [r3, #12]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4ab5      	ldr	r2, [pc, #724]	; (800c41c <UART_SetConfig+0x330>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d004      	beq.n	800c156 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a1b      	ldr	r3, [r3, #32]
 800c150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c152:	4313      	orrs	r3, r2
 800c154:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	689a      	ldr	r2, [r3, #8]
 800c15c:	4bb0      	ldr	r3, [pc, #704]	; (800c420 <UART_SetConfig+0x334>)
 800c15e:	4013      	ands	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	6812      	ldr	r2, [r2, #0]
 800c164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c166:	430b      	orrs	r3, r1
 800c168:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	f023 010f 	bic.w	r1, r3, #15
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4aa7      	ldr	r2, [pc, #668]	; (800c424 <UART_SetConfig+0x338>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d176      	bne.n	800c278 <UART_SetConfig+0x18c>
 800c18a:	4ba7      	ldr	r3, [pc, #668]	; (800c428 <UART_SetConfig+0x33c>)
 800c18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c192:	2b28      	cmp	r3, #40	; 0x28
 800c194:	d86c      	bhi.n	800c270 <UART_SetConfig+0x184>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <UART_SetConfig+0xb0>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c241 	.word	0x0800c241
 800c1a0:	0800c271 	.word	0x0800c271
 800c1a4:	0800c271 	.word	0x0800c271
 800c1a8:	0800c271 	.word	0x0800c271
 800c1ac:	0800c271 	.word	0x0800c271
 800c1b0:	0800c271 	.word	0x0800c271
 800c1b4:	0800c271 	.word	0x0800c271
 800c1b8:	0800c271 	.word	0x0800c271
 800c1bc:	0800c249 	.word	0x0800c249
 800c1c0:	0800c271 	.word	0x0800c271
 800c1c4:	0800c271 	.word	0x0800c271
 800c1c8:	0800c271 	.word	0x0800c271
 800c1cc:	0800c271 	.word	0x0800c271
 800c1d0:	0800c271 	.word	0x0800c271
 800c1d4:	0800c271 	.word	0x0800c271
 800c1d8:	0800c271 	.word	0x0800c271
 800c1dc:	0800c251 	.word	0x0800c251
 800c1e0:	0800c271 	.word	0x0800c271
 800c1e4:	0800c271 	.word	0x0800c271
 800c1e8:	0800c271 	.word	0x0800c271
 800c1ec:	0800c271 	.word	0x0800c271
 800c1f0:	0800c271 	.word	0x0800c271
 800c1f4:	0800c271 	.word	0x0800c271
 800c1f8:	0800c271 	.word	0x0800c271
 800c1fc:	0800c259 	.word	0x0800c259
 800c200:	0800c271 	.word	0x0800c271
 800c204:	0800c271 	.word	0x0800c271
 800c208:	0800c271 	.word	0x0800c271
 800c20c:	0800c271 	.word	0x0800c271
 800c210:	0800c271 	.word	0x0800c271
 800c214:	0800c271 	.word	0x0800c271
 800c218:	0800c271 	.word	0x0800c271
 800c21c:	0800c261 	.word	0x0800c261
 800c220:	0800c271 	.word	0x0800c271
 800c224:	0800c271 	.word	0x0800c271
 800c228:	0800c271 	.word	0x0800c271
 800c22c:	0800c271 	.word	0x0800c271
 800c230:	0800c271 	.word	0x0800c271
 800c234:	0800c271 	.word	0x0800c271
 800c238:	0800c271 	.word	0x0800c271
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2301      	movs	r3, #1
 800c242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c246:	e326      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24e:	e322      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c256:	e31e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25e:	e31a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c266:	e316      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26e:	e312      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c270:	2380      	movs	r3, #128	; 0x80
 800c272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c276:	e30e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a6b      	ldr	r2, [pc, #428]	; (800c42c <UART_SetConfig+0x340>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d130      	bne.n	800c2e4 <UART_SetConfig+0x1f8>
 800c282:	4b69      	ldr	r3, [pc, #420]	; (800c428 <UART_SetConfig+0x33c>)
 800c284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d826      	bhi.n	800c2dc <UART_SetConfig+0x1f0>
 800c28e:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <UART_SetConfig+0x1a8>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b2:	e2f0      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ba:	e2ec      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c2:	e2e8      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e2e4      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e2e0      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e2dc      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	e2d8      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a51      	ldr	r2, [pc, #324]	; (800c430 <UART_SetConfig+0x344>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d130      	bne.n	800c350 <UART_SetConfig+0x264>
 800c2ee:	4b4e      	ldr	r3, [pc, #312]	; (800c428 <UART_SetConfig+0x33c>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d826      	bhi.n	800c348 <UART_SetConfig+0x25c>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <UART_SetConfig+0x214>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c319 	.word	0x0800c319
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c329 	.word	0x0800c329
 800c30c:	0800c331 	.word	0x0800c331
 800c310:	0800c339 	.word	0x0800c339
 800c314:	0800c341 	.word	0x0800c341
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e2ba      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c320:	2304      	movs	r3, #4
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e2b6      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c328:	2308      	movs	r3, #8
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e2b2      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c330:	2310      	movs	r3, #16
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e2ae      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c338:	2320      	movs	r3, #32
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	e2aa      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c340:	2340      	movs	r3, #64	; 0x40
 800c342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c346:	e2a6      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c348:	2380      	movs	r3, #128	; 0x80
 800c34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c34e:	e2a2      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a37      	ldr	r2, [pc, #220]	; (800c434 <UART_SetConfig+0x348>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d130      	bne.n	800c3bc <UART_SetConfig+0x2d0>
 800c35a:	4b33      	ldr	r3, [pc, #204]	; (800c428 <UART_SetConfig+0x33c>)
 800c35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	2b05      	cmp	r3, #5
 800c364:	d826      	bhi.n	800c3b4 <UART_SetConfig+0x2c8>
 800c366:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <UART_SetConfig+0x280>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c385 	.word	0x0800c385
 800c370:	0800c38d 	.word	0x0800c38d
 800c374:	0800c395 	.word	0x0800c395
 800c378:	0800c39d 	.word	0x0800c39d
 800c37c:	0800c3a5 	.word	0x0800c3a5
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	2300      	movs	r3, #0
 800c386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38a:	e284      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c38c:	2304      	movs	r3, #4
 800c38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c392:	e280      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c394:	2308      	movs	r3, #8
 800c396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39a:	e27c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c39c:	2310      	movs	r3, #16
 800c39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a2:	e278      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3aa:	e274      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b2:	e270      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ba:	e26c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a1d      	ldr	r2, [pc, #116]	; (800c438 <UART_SetConfig+0x34c>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d142      	bne.n	800c44c <UART_SetConfig+0x360>
 800c3c6:	4b18      	ldr	r3, [pc, #96]	; (800c428 <UART_SetConfig+0x33c>)
 800c3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ca:	f003 0307 	and.w	r3, r3, #7
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	d838      	bhi.n	800c444 <UART_SetConfig+0x358>
 800c3d2:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <UART_SetConfig+0x2ec>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c3f1 	.word	0x0800c3f1
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c401 	.word	0x0800c401
 800c3e4:	0800c409 	.word	0x0800c409
 800c3e8:	0800c411 	.word	0x0800c411
 800c3ec:	0800c43d 	.word	0x0800c43d
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3f6:	e24e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fe:	e24a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c400:	2308      	movs	r3, #8
 800c402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c406:	e246      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c408:	2310      	movs	r3, #16
 800c40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40e:	e242      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c410:	2320      	movs	r3, #32
 800c412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c416:	e23e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c418:	cfff69f3 	.word	0xcfff69f3
 800c41c:	58000c00 	.word	0x58000c00
 800c420:	11fff4ff 	.word	0x11fff4ff
 800c424:	40011000 	.word	0x40011000
 800c428:	58024400 	.word	0x58024400
 800c42c:	40004400 	.word	0x40004400
 800c430:	40004800 	.word	0x40004800
 800c434:	40004c00 	.word	0x40004c00
 800c438:	40005000 	.word	0x40005000
 800c43c:	2340      	movs	r3, #64	; 0x40
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e228      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c444:	2380      	movs	r3, #128	; 0x80
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e224      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4ab1      	ldr	r2, [pc, #708]	; (800c718 <UART_SetConfig+0x62c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d176      	bne.n	800c544 <UART_SetConfig+0x458>
 800c456:	4bb1      	ldr	r3, [pc, #708]	; (800c71c <UART_SetConfig+0x630>)
 800c458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c45e:	2b28      	cmp	r3, #40	; 0x28
 800c460:	d86c      	bhi.n	800c53c <UART_SetConfig+0x450>
 800c462:	a201      	add	r2, pc, #4	; (adr r2, 800c468 <UART_SetConfig+0x37c>)
 800c464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c468:	0800c50d 	.word	0x0800c50d
 800c46c:	0800c53d 	.word	0x0800c53d
 800c470:	0800c53d 	.word	0x0800c53d
 800c474:	0800c53d 	.word	0x0800c53d
 800c478:	0800c53d 	.word	0x0800c53d
 800c47c:	0800c53d 	.word	0x0800c53d
 800c480:	0800c53d 	.word	0x0800c53d
 800c484:	0800c53d 	.word	0x0800c53d
 800c488:	0800c515 	.word	0x0800c515
 800c48c:	0800c53d 	.word	0x0800c53d
 800c490:	0800c53d 	.word	0x0800c53d
 800c494:	0800c53d 	.word	0x0800c53d
 800c498:	0800c53d 	.word	0x0800c53d
 800c49c:	0800c53d 	.word	0x0800c53d
 800c4a0:	0800c53d 	.word	0x0800c53d
 800c4a4:	0800c53d 	.word	0x0800c53d
 800c4a8:	0800c51d 	.word	0x0800c51d
 800c4ac:	0800c53d 	.word	0x0800c53d
 800c4b0:	0800c53d 	.word	0x0800c53d
 800c4b4:	0800c53d 	.word	0x0800c53d
 800c4b8:	0800c53d 	.word	0x0800c53d
 800c4bc:	0800c53d 	.word	0x0800c53d
 800c4c0:	0800c53d 	.word	0x0800c53d
 800c4c4:	0800c53d 	.word	0x0800c53d
 800c4c8:	0800c525 	.word	0x0800c525
 800c4cc:	0800c53d 	.word	0x0800c53d
 800c4d0:	0800c53d 	.word	0x0800c53d
 800c4d4:	0800c53d 	.word	0x0800c53d
 800c4d8:	0800c53d 	.word	0x0800c53d
 800c4dc:	0800c53d 	.word	0x0800c53d
 800c4e0:	0800c53d 	.word	0x0800c53d
 800c4e4:	0800c53d 	.word	0x0800c53d
 800c4e8:	0800c52d 	.word	0x0800c52d
 800c4ec:	0800c53d 	.word	0x0800c53d
 800c4f0:	0800c53d 	.word	0x0800c53d
 800c4f4:	0800c53d 	.word	0x0800c53d
 800c4f8:	0800c53d 	.word	0x0800c53d
 800c4fc:	0800c53d 	.word	0x0800c53d
 800c500:	0800c53d 	.word	0x0800c53d
 800c504:	0800c53d 	.word	0x0800c53d
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	2301      	movs	r3, #1
 800c50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c512:	e1c0      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c514:	2304      	movs	r3, #4
 800c516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c51a:	e1bc      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c51c:	2308      	movs	r3, #8
 800c51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c522:	e1b8      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c524:	2310      	movs	r3, #16
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e1b4      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c52c:	2320      	movs	r3, #32
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e1b0      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e1ac      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c53c:	2380      	movs	r3, #128	; 0x80
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e1a8      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a75      	ldr	r2, [pc, #468]	; (800c720 <UART_SetConfig+0x634>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d130      	bne.n	800c5b0 <UART_SetConfig+0x4c4>
 800c54e:	4b73      	ldr	r3, [pc, #460]	; (800c71c <UART_SetConfig+0x630>)
 800c550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b05      	cmp	r3, #5
 800c558:	d826      	bhi.n	800c5a8 <UART_SetConfig+0x4bc>
 800c55a:	a201      	add	r2, pc, #4	; (adr r2, 800c560 <UART_SetConfig+0x474>)
 800c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c560:	0800c579 	.word	0x0800c579
 800c564:	0800c581 	.word	0x0800c581
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	2300      	movs	r3, #0
 800c57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57e:	e18a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c580:	2304      	movs	r3, #4
 800c582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c586:	e186      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c588:	2308      	movs	r3, #8
 800c58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58e:	e182      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c590:	2310      	movs	r3, #16
 800c592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c596:	e17e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c598:	2320      	movs	r3, #32
 800c59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59e:	e17a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5a0:	2340      	movs	r3, #64	; 0x40
 800c5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5a6:	e176      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5a8:	2380      	movs	r3, #128	; 0x80
 800c5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ae:	e172      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a5b      	ldr	r2, [pc, #364]	; (800c724 <UART_SetConfig+0x638>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d130      	bne.n	800c61c <UART_SetConfig+0x530>
 800c5ba:	4b58      	ldr	r3, [pc, #352]	; (800c71c <UART_SetConfig+0x630>)
 800c5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d826      	bhi.n	800c614 <UART_SetConfig+0x528>
 800c5c6:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <UART_SetConfig+0x4e0>)
 800c5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5cc:	0800c5e5 	.word	0x0800c5e5
 800c5d0:	0800c5ed 	.word	0x0800c5ed
 800c5d4:	0800c5f5 	.word	0x0800c5f5
 800c5d8:	0800c5fd 	.word	0x0800c5fd
 800c5dc:	0800c605 	.word	0x0800c605
 800c5e0:	0800c60d 	.word	0x0800c60d
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ea:	e154      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f2:	e150      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5f4:	2308      	movs	r3, #8
 800c5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5fa:	e14c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c5fc:	2310      	movs	r3, #16
 800c5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c602:	e148      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c604:	2320      	movs	r3, #32
 800c606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c60a:	e144      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c60c:	2340      	movs	r3, #64	; 0x40
 800c60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c612:	e140      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c614:	2380      	movs	r3, #128	; 0x80
 800c616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c61a:	e13c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a41      	ldr	r2, [pc, #260]	; (800c728 <UART_SetConfig+0x63c>)
 800c622:	4293      	cmp	r3, r2
 800c624:	f040 8082 	bne.w	800c72c <UART_SetConfig+0x640>
 800c628:	4b3c      	ldr	r3, [pc, #240]	; (800c71c <UART_SetConfig+0x630>)
 800c62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c62c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c630:	2b28      	cmp	r3, #40	; 0x28
 800c632:	d86d      	bhi.n	800c710 <UART_SetConfig+0x624>
 800c634:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <UART_SetConfig+0x550>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c6e1 	.word	0x0800c6e1
 800c640:	0800c711 	.word	0x0800c711
 800c644:	0800c711 	.word	0x0800c711
 800c648:	0800c711 	.word	0x0800c711
 800c64c:	0800c711 	.word	0x0800c711
 800c650:	0800c711 	.word	0x0800c711
 800c654:	0800c711 	.word	0x0800c711
 800c658:	0800c711 	.word	0x0800c711
 800c65c:	0800c6e9 	.word	0x0800c6e9
 800c660:	0800c711 	.word	0x0800c711
 800c664:	0800c711 	.word	0x0800c711
 800c668:	0800c711 	.word	0x0800c711
 800c66c:	0800c711 	.word	0x0800c711
 800c670:	0800c711 	.word	0x0800c711
 800c674:	0800c711 	.word	0x0800c711
 800c678:	0800c711 	.word	0x0800c711
 800c67c:	0800c6f1 	.word	0x0800c6f1
 800c680:	0800c711 	.word	0x0800c711
 800c684:	0800c711 	.word	0x0800c711
 800c688:	0800c711 	.word	0x0800c711
 800c68c:	0800c711 	.word	0x0800c711
 800c690:	0800c711 	.word	0x0800c711
 800c694:	0800c711 	.word	0x0800c711
 800c698:	0800c711 	.word	0x0800c711
 800c69c:	0800c6f9 	.word	0x0800c6f9
 800c6a0:	0800c711 	.word	0x0800c711
 800c6a4:	0800c711 	.word	0x0800c711
 800c6a8:	0800c711 	.word	0x0800c711
 800c6ac:	0800c711 	.word	0x0800c711
 800c6b0:	0800c711 	.word	0x0800c711
 800c6b4:	0800c711 	.word	0x0800c711
 800c6b8:	0800c711 	.word	0x0800c711
 800c6bc:	0800c701 	.word	0x0800c701
 800c6c0:	0800c711 	.word	0x0800c711
 800c6c4:	0800c711 	.word	0x0800c711
 800c6c8:	0800c711 	.word	0x0800c711
 800c6cc:	0800c711 	.word	0x0800c711
 800c6d0:	0800c711 	.word	0x0800c711
 800c6d4:	0800c711 	.word	0x0800c711
 800c6d8:	0800c711 	.word	0x0800c711
 800c6dc:	0800c709 	.word	0x0800c709
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6e6:	e0d6      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c6e8:	2304      	movs	r3, #4
 800c6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ee:	e0d2      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c6f0:	2308      	movs	r3, #8
 800c6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f6:	e0ce      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c6f8:	2310      	movs	r3, #16
 800c6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6fe:	e0ca      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c700:	2320      	movs	r3, #32
 800c702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c706:	e0c6      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c708:	2340      	movs	r3, #64	; 0x40
 800c70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70e:	e0c2      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c710:	2380      	movs	r3, #128	; 0x80
 800c712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c716:	e0be      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c718:	40011400 	.word	0x40011400
 800c71c:	58024400 	.word	0x58024400
 800c720:	40007800 	.word	0x40007800
 800c724:	40007c00 	.word	0x40007c00
 800c728:	40011800 	.word	0x40011800
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4aad      	ldr	r2, [pc, #692]	; (800c9e8 <UART_SetConfig+0x8fc>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d176      	bne.n	800c824 <UART_SetConfig+0x738>
 800c736:	4bad      	ldr	r3, [pc, #692]	; (800c9ec <UART_SetConfig+0x900>)
 800c738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c73a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c73e:	2b28      	cmp	r3, #40	; 0x28
 800c740:	d86c      	bhi.n	800c81c <UART_SetConfig+0x730>
 800c742:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <UART_SetConfig+0x65c>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c7ed 	.word	0x0800c7ed
 800c74c:	0800c81d 	.word	0x0800c81d
 800c750:	0800c81d 	.word	0x0800c81d
 800c754:	0800c81d 	.word	0x0800c81d
 800c758:	0800c81d 	.word	0x0800c81d
 800c75c:	0800c81d 	.word	0x0800c81d
 800c760:	0800c81d 	.word	0x0800c81d
 800c764:	0800c81d 	.word	0x0800c81d
 800c768:	0800c7f5 	.word	0x0800c7f5
 800c76c:	0800c81d 	.word	0x0800c81d
 800c770:	0800c81d 	.word	0x0800c81d
 800c774:	0800c81d 	.word	0x0800c81d
 800c778:	0800c81d 	.word	0x0800c81d
 800c77c:	0800c81d 	.word	0x0800c81d
 800c780:	0800c81d 	.word	0x0800c81d
 800c784:	0800c81d 	.word	0x0800c81d
 800c788:	0800c7fd 	.word	0x0800c7fd
 800c78c:	0800c81d 	.word	0x0800c81d
 800c790:	0800c81d 	.word	0x0800c81d
 800c794:	0800c81d 	.word	0x0800c81d
 800c798:	0800c81d 	.word	0x0800c81d
 800c79c:	0800c81d 	.word	0x0800c81d
 800c7a0:	0800c81d 	.word	0x0800c81d
 800c7a4:	0800c81d 	.word	0x0800c81d
 800c7a8:	0800c805 	.word	0x0800c805
 800c7ac:	0800c81d 	.word	0x0800c81d
 800c7b0:	0800c81d 	.word	0x0800c81d
 800c7b4:	0800c81d 	.word	0x0800c81d
 800c7b8:	0800c81d 	.word	0x0800c81d
 800c7bc:	0800c81d 	.word	0x0800c81d
 800c7c0:	0800c81d 	.word	0x0800c81d
 800c7c4:	0800c81d 	.word	0x0800c81d
 800c7c8:	0800c80d 	.word	0x0800c80d
 800c7cc:	0800c81d 	.word	0x0800c81d
 800c7d0:	0800c81d 	.word	0x0800c81d
 800c7d4:	0800c81d 	.word	0x0800c81d
 800c7d8:	0800c81d 	.word	0x0800c81d
 800c7dc:	0800c81d 	.word	0x0800c81d
 800c7e0:	0800c81d 	.word	0x0800c81d
 800c7e4:	0800c81d 	.word	0x0800c81d
 800c7e8:	0800c815 	.word	0x0800c815
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7f2:	e050      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c7f4:	2304      	movs	r3, #4
 800c7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7fa:	e04c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c7fc:	2308      	movs	r3, #8
 800c7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c802:	e048      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c804:	2310      	movs	r3, #16
 800c806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c80a:	e044      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c80c:	2320      	movs	r3, #32
 800c80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c812:	e040      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c814:	2340      	movs	r3, #64	; 0x40
 800c816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c81a:	e03c      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c81c:	2380      	movs	r3, #128	; 0x80
 800c81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c822:	e038      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a71      	ldr	r2, [pc, #452]	; (800c9f0 <UART_SetConfig+0x904>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d130      	bne.n	800c890 <UART_SetConfig+0x7a4>
 800c82e:	4b6f      	ldr	r3, [pc, #444]	; (800c9ec <UART_SetConfig+0x900>)
 800c830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b05      	cmp	r3, #5
 800c838:	d826      	bhi.n	800c888 <UART_SetConfig+0x79c>
 800c83a:	a201      	add	r2, pc, #4	; (adr r2, 800c840 <UART_SetConfig+0x754>)
 800c83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c840:	0800c859 	.word	0x0800c859
 800c844:	0800c861 	.word	0x0800c861
 800c848:	0800c869 	.word	0x0800c869
 800c84c:	0800c871 	.word	0x0800c871
 800c850:	0800c879 	.word	0x0800c879
 800c854:	0800c881 	.word	0x0800c881
 800c858:	2302      	movs	r3, #2
 800c85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85e:	e01a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c860:	2304      	movs	r3, #4
 800c862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c866:	e016      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c868:	2308      	movs	r3, #8
 800c86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c86e:	e012      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c870:	2310      	movs	r3, #16
 800c872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c876:	e00e      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c878:	2320      	movs	r3, #32
 800c87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c87e:	e00a      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c880:	2340      	movs	r3, #64	; 0x40
 800c882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c886:	e006      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c888:	2380      	movs	r3, #128	; 0x80
 800c88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c88e:	e002      	b.n	800c896 <UART_SetConfig+0x7aa>
 800c890:	2380      	movs	r3, #128	; 0x80
 800c892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a55      	ldr	r2, [pc, #340]	; (800c9f0 <UART_SetConfig+0x904>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	f040 80f0 	bne.w	800ca82 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c8a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8a6:	2b20      	cmp	r3, #32
 800c8a8:	dc46      	bgt.n	800c938 <UART_SetConfig+0x84c>
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	db75      	blt.n	800c99a <UART_SetConfig+0x8ae>
 800c8ae:	3b02      	subs	r3, #2
 800c8b0:	2b1e      	cmp	r3, #30
 800c8b2:	d872      	bhi.n	800c99a <UART_SetConfig+0x8ae>
 800c8b4:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <UART_SetConfig+0x7d0>)
 800c8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ba:	bf00      	nop
 800c8bc:	0800c93f 	.word	0x0800c93f
 800c8c0:	0800c99b 	.word	0x0800c99b
 800c8c4:	0800c947 	.word	0x0800c947
 800c8c8:	0800c99b 	.word	0x0800c99b
 800c8cc:	0800c99b 	.word	0x0800c99b
 800c8d0:	0800c99b 	.word	0x0800c99b
 800c8d4:	0800c957 	.word	0x0800c957
 800c8d8:	0800c99b 	.word	0x0800c99b
 800c8dc:	0800c99b 	.word	0x0800c99b
 800c8e0:	0800c99b 	.word	0x0800c99b
 800c8e4:	0800c99b 	.word	0x0800c99b
 800c8e8:	0800c99b 	.word	0x0800c99b
 800c8ec:	0800c99b 	.word	0x0800c99b
 800c8f0:	0800c99b 	.word	0x0800c99b
 800c8f4:	0800c967 	.word	0x0800c967
 800c8f8:	0800c99b 	.word	0x0800c99b
 800c8fc:	0800c99b 	.word	0x0800c99b
 800c900:	0800c99b 	.word	0x0800c99b
 800c904:	0800c99b 	.word	0x0800c99b
 800c908:	0800c99b 	.word	0x0800c99b
 800c90c:	0800c99b 	.word	0x0800c99b
 800c910:	0800c99b 	.word	0x0800c99b
 800c914:	0800c99b 	.word	0x0800c99b
 800c918:	0800c99b 	.word	0x0800c99b
 800c91c:	0800c99b 	.word	0x0800c99b
 800c920:	0800c99b 	.word	0x0800c99b
 800c924:	0800c99b 	.word	0x0800c99b
 800c928:	0800c99b 	.word	0x0800c99b
 800c92c:	0800c99b 	.word	0x0800c99b
 800c930:	0800c99b 	.word	0x0800c99b
 800c934:	0800c98d 	.word	0x0800c98d
 800c938:	2b40      	cmp	r3, #64	; 0x40
 800c93a:	d02a      	beq.n	800c992 <UART_SetConfig+0x8a6>
 800c93c:	e02d      	b.n	800c99a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c93e:	f7fd fc39 	bl	800a1b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c942:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c944:	e02f      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c946:	f107 0314 	add.w	r3, r7, #20
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fd fc48 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c954:	e027      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c956:	f107 0308 	add.w	r3, r7, #8
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fd fd94 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c964:	e01f      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c966:	4b21      	ldr	r3, [pc, #132]	; (800c9ec <UART_SetConfig+0x900>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d009      	beq.n	800c986 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c972:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <UART_SetConfig+0x900>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	08db      	lsrs	r3, r3, #3
 800c978:	f003 0303 	and.w	r3, r3, #3
 800c97c:	4a1d      	ldr	r2, [pc, #116]	; (800c9f4 <UART_SetConfig+0x908>)
 800c97e:	fa22 f303 	lsr.w	r3, r2, r3
 800c982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c984:	e00f      	b.n	800c9a6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c986:	4b1b      	ldr	r3, [pc, #108]	; (800c9f4 <UART_SetConfig+0x908>)
 800c988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c98a:	e00c      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c98c:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <UART_SetConfig+0x90c>)
 800c98e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c990:	e009      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c998:	e005      	b.n	800c9a6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c99a:	2300      	movs	r3, #0
 800c99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c9a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 81e6 	beq.w	800cd7a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b2:	4a12      	ldr	r2, [pc, #72]	; (800c9fc <UART_SetConfig+0x910>)
 800c9b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	4413      	add	r3, r2
 800c9cc:	6a3a      	ldr	r2, [r7, #32]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d305      	bcc.n	800c9de <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9d8:	6a3a      	ldr	r2, [r7, #32]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d910      	bls.n	800ca00 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c9e4:	e1c9      	b.n	800cd7a <UART_SetConfig+0xc8e>
 800c9e6:	bf00      	nop
 800c9e8:	40011c00 	.word	0x40011c00
 800c9ec:	58024400 	.word	0x58024400
 800c9f0:	58000c00 	.word	0x58000c00
 800c9f4:	03d09000 	.word	0x03d09000
 800c9f8:	003d0900 	.word	0x003d0900
 800c9fc:	08011a28 	.word	0x08011a28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	4618      	mov	r0, r3
 800ca04:	f04f 0100 	mov.w	r1, #0
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	4ac1      	ldr	r2, [pc, #772]	; (800cd14 <UART_SetConfig+0xc28>)
 800ca0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	f7f3 fc7a 	bl	8000310 <__aeabi_uldivmod>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4610      	mov	r0, r2
 800ca22:	4619      	mov	r1, r3
 800ca24:	f04f 0200 	mov.w	r2, #0
 800ca28:	f04f 0300 	mov.w	r3, #0
 800ca2c:	020b      	lsls	r3, r1, #8
 800ca2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca32:	0202      	lsls	r2, r0, #8
 800ca34:	6879      	ldr	r1, [r7, #4]
 800ca36:	6849      	ldr	r1, [r1, #4]
 800ca38:	0849      	lsrs	r1, r1, #1
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	f04f 0100 	mov.w	r1, #0
 800ca40:	1814      	adds	r4, r2, r0
 800ca42:	eb43 0501 	adc.w	r5, r3, r1
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	4620      	mov	r0, r4
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7f3 fc5c 	bl	8000310 <__aeabi_uldivmod>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca66:	d308      	bcc.n	800ca7a <UART_SetConfig+0x98e>
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca6e:	d204      	bcs.n	800ca7a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca76:	60da      	str	r2, [r3, #12]
 800ca78:	e17f      	b.n	800cd7a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca80:	e17b      	b.n	800cd7a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	69db      	ldr	r3, [r3, #28]
 800ca86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca8a:	f040 80bd 	bne.w	800cc08 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ca8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca92:	2b20      	cmp	r3, #32
 800ca94:	dc48      	bgt.n	800cb28 <UART_SetConfig+0xa3c>
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	db7b      	blt.n	800cb92 <UART_SetConfig+0xaa6>
 800ca9a:	2b20      	cmp	r3, #32
 800ca9c:	d879      	bhi.n	800cb92 <UART_SetConfig+0xaa6>
 800ca9e:	a201      	add	r2, pc, #4	; (adr r2, 800caa4 <UART_SetConfig+0x9b8>)
 800caa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa4:	0800cb2f 	.word	0x0800cb2f
 800caa8:	0800cb37 	.word	0x0800cb37
 800caac:	0800cb93 	.word	0x0800cb93
 800cab0:	0800cb93 	.word	0x0800cb93
 800cab4:	0800cb3f 	.word	0x0800cb3f
 800cab8:	0800cb93 	.word	0x0800cb93
 800cabc:	0800cb93 	.word	0x0800cb93
 800cac0:	0800cb93 	.word	0x0800cb93
 800cac4:	0800cb4f 	.word	0x0800cb4f
 800cac8:	0800cb93 	.word	0x0800cb93
 800cacc:	0800cb93 	.word	0x0800cb93
 800cad0:	0800cb93 	.word	0x0800cb93
 800cad4:	0800cb93 	.word	0x0800cb93
 800cad8:	0800cb93 	.word	0x0800cb93
 800cadc:	0800cb93 	.word	0x0800cb93
 800cae0:	0800cb93 	.word	0x0800cb93
 800cae4:	0800cb5f 	.word	0x0800cb5f
 800cae8:	0800cb93 	.word	0x0800cb93
 800caec:	0800cb93 	.word	0x0800cb93
 800caf0:	0800cb93 	.word	0x0800cb93
 800caf4:	0800cb93 	.word	0x0800cb93
 800caf8:	0800cb93 	.word	0x0800cb93
 800cafc:	0800cb93 	.word	0x0800cb93
 800cb00:	0800cb93 	.word	0x0800cb93
 800cb04:	0800cb93 	.word	0x0800cb93
 800cb08:	0800cb93 	.word	0x0800cb93
 800cb0c:	0800cb93 	.word	0x0800cb93
 800cb10:	0800cb93 	.word	0x0800cb93
 800cb14:	0800cb93 	.word	0x0800cb93
 800cb18:	0800cb93 	.word	0x0800cb93
 800cb1c:	0800cb93 	.word	0x0800cb93
 800cb20:	0800cb93 	.word	0x0800cb93
 800cb24:	0800cb85 	.word	0x0800cb85
 800cb28:	2b40      	cmp	r3, #64	; 0x40
 800cb2a:	d02e      	beq.n	800cb8a <UART_SetConfig+0xa9e>
 800cb2c:	e031      	b.n	800cb92 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb2e:	f7fb fff7 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800cb32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb34:	e033      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb36:	f7fc f809 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800cb3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb3c:	e02f      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb3e:	f107 0314 	add.w	r3, r7, #20
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fd fb4c 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb4c:	e027      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fd fc98 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb5c:	e01f      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb5e:	4b6e      	ldr	r3, [pc, #440]	; (800cd18 <UART_SetConfig+0xc2c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0320 	and.w	r3, r3, #32
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb6a:	4b6b      	ldr	r3, [pc, #428]	; (800cd18 <UART_SetConfig+0xc2c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	08db      	lsrs	r3, r3, #3
 800cb70:	f003 0303 	and.w	r3, r3, #3
 800cb74:	4a69      	ldr	r2, [pc, #420]	; (800cd1c <UART_SetConfig+0xc30>)
 800cb76:	fa22 f303 	lsr.w	r3, r2, r3
 800cb7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb7c:	e00f      	b.n	800cb9e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800cb7e:	4b67      	ldr	r3, [pc, #412]	; (800cd1c <UART_SetConfig+0xc30>)
 800cb80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb82:	e00c      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb84:	4b66      	ldr	r3, [pc, #408]	; (800cd20 <UART_SetConfig+0xc34>)
 800cb86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb88:	e009      	b.n	800cb9e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb90:	e005      	b.n	800cb9e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cb9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f000 80ea 	beq.w	800cd7a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbaa:	4a5a      	ldr	r2, [pc, #360]	; (800cd14 <UART_SetConfig+0xc28>)
 800cbac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb8:	005a      	lsls	r2, r3, #1
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	441a      	add	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbce:	2b0f      	cmp	r3, #15
 800cbd0:	d916      	bls.n	800cc00 <UART_SetConfig+0xb14>
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd8:	d212      	bcs.n	800cc00 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	f023 030f 	bic.w	r3, r3, #15
 800cbe2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	085b      	lsrs	r3, r3, #1
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f003 0307 	and.w	r3, r3, #7
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbfc:	60da      	str	r2, [r3, #12]
 800cbfe:	e0bc      	b.n	800cd7a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cc06:	e0b8      	b.n	800cd7a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	dc4b      	bgt.n	800cca8 <UART_SetConfig+0xbbc>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f2c0 8087 	blt.w	800cd24 <UART_SetConfig+0xc38>
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	f200 8084 	bhi.w	800cd24 <UART_SetConfig+0xc38>
 800cc1c:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <UART_SetConfig+0xb38>)
 800cc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc22:	bf00      	nop
 800cc24:	0800ccaf 	.word	0x0800ccaf
 800cc28:	0800ccb7 	.word	0x0800ccb7
 800cc2c:	0800cd25 	.word	0x0800cd25
 800cc30:	0800cd25 	.word	0x0800cd25
 800cc34:	0800ccbf 	.word	0x0800ccbf
 800cc38:	0800cd25 	.word	0x0800cd25
 800cc3c:	0800cd25 	.word	0x0800cd25
 800cc40:	0800cd25 	.word	0x0800cd25
 800cc44:	0800cccf 	.word	0x0800cccf
 800cc48:	0800cd25 	.word	0x0800cd25
 800cc4c:	0800cd25 	.word	0x0800cd25
 800cc50:	0800cd25 	.word	0x0800cd25
 800cc54:	0800cd25 	.word	0x0800cd25
 800cc58:	0800cd25 	.word	0x0800cd25
 800cc5c:	0800cd25 	.word	0x0800cd25
 800cc60:	0800cd25 	.word	0x0800cd25
 800cc64:	0800ccdf 	.word	0x0800ccdf
 800cc68:	0800cd25 	.word	0x0800cd25
 800cc6c:	0800cd25 	.word	0x0800cd25
 800cc70:	0800cd25 	.word	0x0800cd25
 800cc74:	0800cd25 	.word	0x0800cd25
 800cc78:	0800cd25 	.word	0x0800cd25
 800cc7c:	0800cd25 	.word	0x0800cd25
 800cc80:	0800cd25 	.word	0x0800cd25
 800cc84:	0800cd25 	.word	0x0800cd25
 800cc88:	0800cd25 	.word	0x0800cd25
 800cc8c:	0800cd25 	.word	0x0800cd25
 800cc90:	0800cd25 	.word	0x0800cd25
 800cc94:	0800cd25 	.word	0x0800cd25
 800cc98:	0800cd25 	.word	0x0800cd25
 800cc9c:	0800cd25 	.word	0x0800cd25
 800cca0:	0800cd25 	.word	0x0800cd25
 800cca4:	0800cd05 	.word	0x0800cd05
 800cca8:	2b40      	cmp	r3, #64	; 0x40
 800ccaa:	d02e      	beq.n	800cd0a <UART_SetConfig+0xc1e>
 800ccac:	e03a      	b.n	800cd24 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccae:	f7fb ff37 	bl	8008b20 <HAL_RCC_GetPCLK1Freq>
 800ccb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ccb4:	e03c      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccb6:	f7fb ff49 	bl	8008b4c <HAL_RCC_GetPCLK2Freq>
 800ccba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ccbc:	e038      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccbe:	f107 0314 	add.w	r3, r7, #20
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fd fa8c 	bl	800a1e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cccc:	e030      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccce:	f107 0308 	add.w	r3, r7, #8
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fd fbd8 	bl	800a488 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccdc:	e028      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccde:	4b0e      	ldr	r3, [pc, #56]	; (800cd18 <UART_SetConfig+0xc2c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0320 	and.w	r3, r3, #32
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d009      	beq.n	800ccfe <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccea:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <UART_SetConfig+0xc2c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	08db      	lsrs	r3, r3, #3
 800ccf0:	f003 0303 	and.w	r3, r3, #3
 800ccf4:	4a09      	ldr	r2, [pc, #36]	; (800cd1c <UART_SetConfig+0xc30>)
 800ccf6:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccfc:	e018      	b.n	800cd30 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ccfe:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <UART_SetConfig+0xc30>)
 800cd00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd02:	e015      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd04:	4b06      	ldr	r3, [pc, #24]	; (800cd20 <UART_SetConfig+0xc34>)
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd08:	e012      	b.n	800cd30 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cd10:	e00e      	b.n	800cd30 <UART_SetConfig+0xc44>
 800cd12:	bf00      	nop
 800cd14:	08011a28 	.word	0x08011a28
 800cd18:	58024400 	.word	0x58024400
 800cd1c:	03d09000 	.word	0x03d09000
 800cd20:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cd2e:	bf00      	nop
    }

    if (pclk != 0U)
 800cd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d021      	beq.n	800cd7a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3a:	4a1a      	ldr	r2, [pc, #104]	; (800cda4 <UART_SetConfig+0xcb8>)
 800cd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	441a      	add	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	2b0f      	cmp	r3, #15
 800cd5e:	d909      	bls.n	800cd74 <UART_SetConfig+0xc88>
 800cd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd66:	d205      	bcs.n	800cd74 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	60da      	str	r2, [r3, #12]
 800cd72:	e002      	b.n	800cd7a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3738      	adds	r7, #56	; 0x38
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bdb0      	pop	{r4, r5, r7, pc}
 800cda2:	bf00      	nop
 800cda4:	08011a28 	.word	0x08011a28

0800cda8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00a      	beq.n	800cdd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	f003 0302 	and.w	r3, r3, #2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00a      	beq.n	800cdf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	f003 0304 	and.w	r3, r3, #4
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00a      	beq.n	800ce16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1a:	f003 0308 	and.w	r3, r3, #8
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3c:	f003 0310 	and.w	r3, r3, #16
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00a      	beq.n	800ce5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5e:	f003 0320 	and.w	r3, r3, #32
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00a      	beq.n	800ce7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	430a      	orrs	r2, r1
 800ce7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d01a      	beq.n	800cebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea6:	d10a      	bne.n	800cebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	430a      	orrs	r2, r1
 800cebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	430a      	orrs	r2, r1
 800cede:	605a      	str	r2, [r3, #4]
  }
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af02      	add	r7, sp, #8
 800cef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cefc:	f7f5 fdd0 	bl	8002aa0 <HAL_GetTick>
 800cf00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 0308 	and.w	r3, r3, #8
 800cf0c:	2b08      	cmp	r3, #8
 800cf0e:	d10e      	bne.n	800cf2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f82f 	bl	800cf82 <UART_WaitOnFlagUntilTimeout>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e025      	b.n	800cf7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b04      	cmp	r3, #4
 800cf3a:	d10e      	bne.n	800cf5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f819 	bl	800cf82 <UART_WaitOnFlagUntilTimeout>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e00f      	b.n	800cf7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2220      	movs	r2, #32
 800cf5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b09c      	sub	sp, #112	; 0x70
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	603b      	str	r3, [r7, #0]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf92:	e0a9      	b.n	800d0e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9a:	f000 80a5 	beq.w	800d0e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf9e:	f7f5 fd7f 	bl	8002aa0 <HAL_GetTick>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d302      	bcc.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cfae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d140      	bne.n	800d036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfbc:	e853 3f00 	ldrex	r3, [r3]
 800cfc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cfc8:	667b      	str	r3, [r7, #100]	; 0x64
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfda:	e841 2300 	strex	r3, r2, [r1]
 800cfde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1e6      	bne.n	800cfb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3308      	adds	r3, #8
 800cfec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff0:	e853 3f00 	ldrex	r3, [r3]
 800cff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	f023 0301 	bic.w	r3, r3, #1
 800cffc:	663b      	str	r3, [r7, #96]	; 0x60
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3308      	adds	r3, #8
 800d004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d006:	64ba      	str	r2, [r7, #72]	; 0x48
 800d008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d00e:	e841 2300 	strex	r3, r2, [r1]
 800d012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1e5      	bne.n	800cfe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2220      	movs	r2, #32
 800d026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d032:	2303      	movs	r3, #3
 800d034:	e069      	b.n	800d10a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0304 	and.w	r3, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	d051      	beq.n	800d0e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d052:	d149      	bne.n	800d0e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d05c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	e853 3f00 	ldrex	r3, [r3]
 800d06a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d072:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	461a      	mov	r2, r3
 800d07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d07c:	637b      	str	r3, [r7, #52]	; 0x34
 800d07e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d084:	e841 2300 	strex	r3, r2, [r1]
 800d088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1e6      	bne.n	800d05e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3308      	adds	r3, #8
 800d096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	e853 3f00 	ldrex	r3, [r3]
 800d09e:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	f023 0301 	bic.w	r3, r3, #1
 800d0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	3308      	adds	r3, #8
 800d0ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0b0:	623a      	str	r2, [r7, #32]
 800d0b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b4:	69f9      	ldr	r1, [r7, #28]
 800d0b6:	6a3a      	ldr	r2, [r7, #32]
 800d0b8:	e841 2300 	strex	r3, r2, [r1]
 800d0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1e5      	bne.n	800d090 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2220      	movs	r2, #32
 800d0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e010      	b.n	800d10a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	69da      	ldr	r2, [r3, #28]
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	bf0c      	ite	eq
 800d0f8:	2301      	moveq	r3, #1
 800d0fa:	2300      	movne	r3, #0
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	461a      	mov	r2, r3
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	429a      	cmp	r2, r3
 800d104:	f43f af46 	beq.w	800cf94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3770      	adds	r7, #112	; 0x70
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d112:	b480      	push	{r7}
 800d114:	b085      	sub	sp, #20
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d120:	2b01      	cmp	r3, #1
 800d122:	d101      	bne.n	800d128 <HAL_UARTEx_DisableFifoMode+0x16>
 800d124:	2302      	movs	r3, #2
 800d126:	e027      	b.n	800d178 <HAL_UARTEx_DisableFifoMode+0x66>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2224      	movs	r2, #36	; 0x24
 800d134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f022 0201 	bic.w	r2, r2, #1
 800d14e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d156:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d194:	2b01      	cmp	r3, #1
 800d196:	d101      	bne.n	800d19c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d198:	2302      	movs	r3, #2
 800d19a:	e02d      	b.n	800d1f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2224      	movs	r2, #36	; 0x24
 800d1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f022 0201 	bic.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	430a      	orrs	r2, r1
 800d1d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f84f 	bl	800d27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d214:	2302      	movs	r3, #2
 800d216:	e02d      	b.n	800d274 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2224      	movs	r2, #36	; 0x24
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f022 0201 	bic.w	r2, r2, #1
 800d23e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	430a      	orrs	r2, r1
 800d252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f811 	bl	800d27c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2220      	movs	r2, #32
 800d266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d108      	bne.n	800d29e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2201      	movs	r2, #1
 800d298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d29c:	e031      	b.n	800d302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d29e:	2310      	movs	r3, #16
 800d2a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	0e5b      	lsrs	r3, r3, #25
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 0307 	and.w	r3, r3, #7
 800d2b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	0f5b      	lsrs	r3, r3, #29
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	f003 0307 	and.w	r3, r3, #7
 800d2c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2c6:	7bbb      	ldrb	r3, [r7, #14]
 800d2c8:	7b3a      	ldrb	r2, [r7, #12]
 800d2ca:	4911      	ldr	r1, [pc, #68]	; (800d310 <UARTEx_SetNbDataToProcess+0x94>)
 800d2cc:	5c8a      	ldrb	r2, [r1, r2]
 800d2ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2d2:	7b3a      	ldrb	r2, [r7, #12]
 800d2d4:	490f      	ldr	r1, [pc, #60]	; (800d314 <UARTEx_SetNbDataToProcess+0x98>)
 800d2d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	7b7a      	ldrb	r2, [r7, #13]
 800d2e8:	4909      	ldr	r1, [pc, #36]	; (800d310 <UARTEx_SetNbDataToProcess+0x94>)
 800d2ea:	5c8a      	ldrb	r2, [r1, r2]
 800d2ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2f0:	7b7a      	ldrb	r2, [r7, #13]
 800d2f2:	4908      	ldr	r1, [pc, #32]	; (800d314 <UARTEx_SetNbDataToProcess+0x98>)
 800d2f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d302:	bf00      	nop
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	08011a40 	.word	0x08011a40
 800d314:	08011a48 	.word	0x08011a48

0800d318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d318:	b084      	sub	sp, #16
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	f107 001c 	add.w	r0, r7, #28
 800d326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d120      	bne.n	800d372 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	4b2a      	ldr	r3, [pc, #168]	; (800d3ec <USB_CoreInit+0xd4>)
 800d342:	4013      	ands	r3, r2
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d356:	2b01      	cmp	r3, #1
 800d358:	d105      	bne.n	800d366 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f001 fb4e 	bl	800ea08 <USB_CoreReset>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]
 800d370:	e01a      	b.n	800d3a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fb42 	bl	800ea08 <USB_CoreReset>
 800d384:	4603      	mov	r3, r0
 800d386:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d106      	bne.n	800d39c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	639a      	str	r2, [r3, #56]	; 0x38
 800d39a:	e005      	b.n	800d3a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d116      	bne.n	800d3dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3bc:	4b0c      	ldr	r3, [pc, #48]	; (800d3f0 <USB_CoreInit+0xd8>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	f043 0206 	orr.w	r2, r3, #6
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	f043 0220 	orr.w	r2, r3, #32
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3e8:	b004      	add	sp, #16
 800d3ea:	4770      	bx	lr
 800d3ec:	ffbdffbf 	.word	0xffbdffbf
 800d3f0:	03ee0000 	.word	0x03ee0000

0800d3f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	4613      	mov	r3, r2
 800d400:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d402:	79fb      	ldrb	r3, [r7, #7]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d165      	bne.n	800d4d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	4a41      	ldr	r2, [pc, #260]	; (800d510 <USB_SetTurnaroundTime+0x11c>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d906      	bls.n	800d41e <USB_SetTurnaroundTime+0x2a>
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	4a40      	ldr	r2, [pc, #256]	; (800d514 <USB_SetTurnaroundTime+0x120>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d202      	bcs.n	800d41e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d418:	230f      	movs	r3, #15
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	e062      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	4a3c      	ldr	r2, [pc, #240]	; (800d514 <USB_SetTurnaroundTime+0x120>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d306      	bcc.n	800d434 <USB_SetTurnaroundTime+0x40>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	4a3b      	ldr	r2, [pc, #236]	; (800d518 <USB_SetTurnaroundTime+0x124>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d202      	bcs.n	800d434 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d42e:	230e      	movs	r3, #14
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e057      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4a38      	ldr	r2, [pc, #224]	; (800d518 <USB_SetTurnaroundTime+0x124>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d306      	bcc.n	800d44a <USB_SetTurnaroundTime+0x56>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	4a37      	ldr	r2, [pc, #220]	; (800d51c <USB_SetTurnaroundTime+0x128>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d202      	bcs.n	800d44a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d444:	230d      	movs	r3, #13
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	e04c      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	4a33      	ldr	r2, [pc, #204]	; (800d51c <USB_SetTurnaroundTime+0x128>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d306      	bcc.n	800d460 <USB_SetTurnaroundTime+0x6c>
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	4a32      	ldr	r2, [pc, #200]	; (800d520 <USB_SetTurnaroundTime+0x12c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d802      	bhi.n	800d460 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d45a:	230c      	movs	r3, #12
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	e041      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	4a2f      	ldr	r2, [pc, #188]	; (800d520 <USB_SetTurnaroundTime+0x12c>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d906      	bls.n	800d476 <USB_SetTurnaroundTime+0x82>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	4a2e      	ldr	r2, [pc, #184]	; (800d524 <USB_SetTurnaroundTime+0x130>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d802      	bhi.n	800d476 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d470:	230b      	movs	r3, #11
 800d472:	617b      	str	r3, [r7, #20]
 800d474:	e036      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	4a2a      	ldr	r2, [pc, #168]	; (800d524 <USB_SetTurnaroundTime+0x130>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d906      	bls.n	800d48c <USB_SetTurnaroundTime+0x98>
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	4a29      	ldr	r2, [pc, #164]	; (800d528 <USB_SetTurnaroundTime+0x134>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d802      	bhi.n	800d48c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d486:	230a      	movs	r3, #10
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e02b      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	4a26      	ldr	r2, [pc, #152]	; (800d528 <USB_SetTurnaroundTime+0x134>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d906      	bls.n	800d4a2 <USB_SetTurnaroundTime+0xae>
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	4a25      	ldr	r2, [pc, #148]	; (800d52c <USB_SetTurnaroundTime+0x138>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d202      	bcs.n	800d4a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d49c:	2309      	movs	r3, #9
 800d49e:	617b      	str	r3, [r7, #20]
 800d4a0:	e020      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	4a21      	ldr	r2, [pc, #132]	; (800d52c <USB_SetTurnaroundTime+0x138>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d306      	bcc.n	800d4b8 <USB_SetTurnaroundTime+0xc4>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4a20      	ldr	r2, [pc, #128]	; (800d530 <USB_SetTurnaroundTime+0x13c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d802      	bhi.n	800d4b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d4b2:	2308      	movs	r3, #8
 800d4b4:	617b      	str	r3, [r7, #20]
 800d4b6:	e015      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	4a1d      	ldr	r2, [pc, #116]	; (800d530 <USB_SetTurnaroundTime+0x13c>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d906      	bls.n	800d4ce <USB_SetTurnaroundTime+0xda>
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	4a1c      	ldr	r2, [pc, #112]	; (800d534 <USB_SetTurnaroundTime+0x140>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d202      	bcs.n	800d4ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d4c8:	2307      	movs	r3, #7
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	e00a      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d4ce:	2306      	movs	r3, #6
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	e007      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d102      	bne.n	800d4e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d4da:	2309      	movs	r3, #9
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	e001      	b.n	800d4e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d4e0:	2309      	movs	r3, #9
 800d4e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68da      	ldr	r2, [r3, #12]
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	029b      	lsls	r3, r3, #10
 800d4f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d4fc:	431a      	orrs	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	371c      	adds	r7, #28
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	00d8acbf 	.word	0x00d8acbf
 800d514:	00e4e1c0 	.word	0x00e4e1c0
 800d518:	00f42400 	.word	0x00f42400
 800d51c:	01067380 	.word	0x01067380
 800d520:	011a499f 	.word	0x011a499f
 800d524:	01312cff 	.word	0x01312cff
 800d528:	014ca43f 	.word	0x014ca43f
 800d52c:	016e3600 	.word	0x016e3600
 800d530:	01a6ab1f 	.word	0x01a6ab1f
 800d534:	01e84800 	.word	0x01e84800

0800d538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f043 0201 	orr.w	r2, r3, #1
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	370c      	adds	r7, #12
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	f023 0201 	bic.w	r2, r3, #1
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d588:	2300      	movs	r3, #0
 800d58a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d115      	bne.n	800d5ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7f5 fa84 	bl	8002ab8 <HAL_Delay>
      ms++;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f001 f995 	bl	800e8e6 <USB_GetMode>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d01e      	beq.n	800d600 <USB_SetCurrentMode+0x84>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b31      	cmp	r3, #49	; 0x31
 800d5c6:	d9f0      	bls.n	800d5aa <USB_SetCurrentMode+0x2e>
 800d5c8:	e01a      	b.n	800d600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5ca:	78fb      	ldrb	r3, [r7, #3]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d115      	bne.n	800d5fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d5dc:	2001      	movs	r0, #1
 800d5de:	f7f5 fa6b 	bl	8002ab8 <HAL_Delay>
      ms++;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 f97c 	bl	800e8e6 <USB_GetMode>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <USB_SetCurrentMode+0x84>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b31      	cmp	r3, #49	; 0x31
 800d5f8:	d9f0      	bls.n	800d5dc <USB_SetCurrentMode+0x60>
 800d5fa:	e001      	b.n	800d600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e005      	b.n	800d60c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2b32      	cmp	r3, #50	; 0x32
 800d604:	d101      	bne.n	800d60a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e000      	b.n	800d60c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d614:	b084      	sub	sp, #16
 800d616:	b580      	push	{r7, lr}
 800d618:	b086      	sub	sp, #24
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d62e:	2300      	movs	r3, #0
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	e009      	b.n	800d648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	3340      	adds	r3, #64	; 0x40
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3301      	adds	r3, #1
 800d646:	613b      	str	r3, [r7, #16]
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2b0e      	cmp	r3, #14
 800d64c:	d9f2      	bls.n	800d634 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11c      	bne.n	800d68e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d662:	f043 0302 	orr.w	r3, r3, #2
 800d666:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	e005      	b.n	800d69a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	680b      	ldr	r3, [r1, #0]
 800d6b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d10c      	bne.n	800d6da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d104      	bne.n	800d6d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f961 	bl	800d990 <USB_SetDevSpeed>
 800d6ce:	e008      	b.n	800d6e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f95c 	bl	800d990 <USB_SetDevSpeed>
 800d6d8:	e003      	b.n	800d6e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d6da:	2103      	movs	r1, #3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f957 	bl	800d990 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d6e2:	2110      	movs	r1, #16
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f8f3 	bl	800d8d0 <USB_FlushTxFifo>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f91d 	bl	800d934 <USB_FlushRxFifo>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d001      	beq.n	800d704 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d70a:	461a      	mov	r2, r3
 800d70c:	2300      	movs	r3, #0
 800d70e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d716:	461a      	mov	r2, r3
 800d718:	2300      	movs	r3, #0
 800d71a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d722:	461a      	mov	r2, r3
 800d724:	2300      	movs	r3, #0
 800d726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d728:	2300      	movs	r3, #0
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	e043      	b.n	800d7b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	015a      	lsls	r2, r3, #5
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	4413      	add	r3, r2
 800d736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d744:	d118      	bne.n	800d778 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10a      	bne.n	800d762 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	015a      	lsls	r2, r3, #5
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4413      	add	r3, r2
 800d754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d758:	461a      	mov	r2, r3
 800d75a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	e013      	b.n	800d78a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	015a      	lsls	r2, r3, #5
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	4413      	add	r3, r2
 800d76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76e:	461a      	mov	r2, r3
 800d770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	e008      	b.n	800d78a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	015a      	lsls	r2, r3, #5
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4413      	add	r3, r2
 800d780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d784:	461a      	mov	r2, r3
 800d786:	2300      	movs	r3, #0
 800d788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	015a      	lsls	r2, r3, #5
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	4413      	add	r3, r2
 800d792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d796:	461a      	mov	r2, r3
 800d798:	2300      	movs	r3, #0
 800d79a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d7ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	613b      	str	r3, [r7, #16]
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d3b7      	bcc.n	800d72e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7be:	2300      	movs	r3, #0
 800d7c0:	613b      	str	r3, [r7, #16]
 800d7c2:	e043      	b.n	800d84c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7da:	d118      	bne.n	800d80e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	015a      	lsls	r2, r3, #5
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	e013      	b.n	800d820 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d804:	461a      	mov	r2, r3
 800d806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	e008      	b.n	800d820 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	4413      	add	r3, r2
 800d816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81a:	461a      	mov	r2, r3
 800d81c:	2300      	movs	r3, #0
 800d81e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d82c:	461a      	mov	r2, r3
 800d82e:	2300      	movs	r3, #0
 800d830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	015a      	lsls	r2, r3, #5
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4413      	add	r3, r2
 800d83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83e:	461a      	mov	r2, r3
 800d840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	3301      	adds	r3, #1
 800d84a:	613b      	str	r3, [r7, #16]
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	429a      	cmp	r2, r3
 800d852:	d3b7      	bcc.n	800d7c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d105      	bne.n	800d888 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	f043 0210 	orr.w	r2, r3, #16
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	699a      	ldr	r2, [r3, #24]
 800d88c:	4b0e      	ldr	r3, [pc, #56]	; (800d8c8 <USB_DevInit+0x2b4>)
 800d88e:	4313      	orrs	r3, r2
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d896:	2b00      	cmp	r3, #0
 800d898:	d005      	beq.n	800d8a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	f043 0208 	orr.w	r2, r3, #8
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d105      	bne.n	800d8b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	699a      	ldr	r2, [r3, #24]
 800d8b0:	4b06      	ldr	r3, [pc, #24]	; (800d8cc <USB_DevInit+0x2b8>)
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8c4:	b004      	add	sp, #16
 800d8c6:	4770      	bx	lr
 800d8c8:	803c3800 	.word	0x803c3800
 800d8cc:	40000004 	.word	0x40000004

0800d8d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	4a12      	ldr	r2, [pc, #72]	; (800d930 <USB_FlushTxFifo+0x60>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d901      	bls.n	800d8ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	e01a      	b.n	800d924 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	daf3      	bge.n	800d8de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	019b      	lsls	r3, r3, #6
 800d8fe:	f043 0220 	orr.w	r2, r3, #32
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3301      	adds	r3, #1
 800d90a:	60fb      	str	r3, [r7, #12]
 800d90c:	4a08      	ldr	r2, [pc, #32]	; (800d930 <USB_FlushTxFifo+0x60>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d901      	bls.n	800d916 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800d912:	2303      	movs	r3, #3
 800d914:	e006      	b.n	800d924 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	f003 0320 	and.w	r3, r3, #32
 800d91e:	2b20      	cmp	r3, #32
 800d920:	d0f1      	beq.n	800d906 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	00030d40 	.word	0x00030d40

0800d934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3301      	adds	r3, #1
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	4a11      	ldr	r2, [pc, #68]	; (800d98c <USB_FlushRxFifo+0x58>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d901      	bls.n	800d950 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e017      	b.n	800d980 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	2b00      	cmp	r3, #0
 800d956:	daf3      	bge.n	800d940 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d958:	2300      	movs	r3, #0
 800d95a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2210      	movs	r2, #16
 800d960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3301      	adds	r3, #1
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	4a08      	ldr	r2, [pc, #32]	; (800d98c <USB_FlushRxFifo+0x58>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d901      	bls.n	800d972 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800d96e:	2303      	movs	r3, #3
 800d970:	e006      	b.n	800d980 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	f003 0310 	and.w	r3, r3, #16
 800d97a:	2b10      	cmp	r3, #16
 800d97c:	d0f1      	beq.n	800d962 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	00030d40 	.word	0x00030d40

0800d990 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	68f9      	ldr	r1, [r7, #12]
 800d9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b087      	sub	sp, #28
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 0306 	and.w	r3, r3, #6
 800d9da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75fb      	strb	r3, [r7, #23]
 800d9e6:	e00a      	b.n	800d9fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d002      	beq.n	800d9f4 <USB_GetDevSpeed+0x32>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b06      	cmp	r3, #6
 800d9f2:	d102      	bne.n	800d9fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	75fb      	strb	r3, [r7, #23]
 800d9f8:	e001      	b.n	800d9fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d9fa:	230f      	movs	r3, #15
 800d9fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800da00:	4618      	mov	r0, r3
 800da02:	371c      	adds	r7, #28
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d139      	bne.n	800da9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2e:	69da      	ldr	r2, [r3, #28]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	2101      	movs	r1, #1
 800da3a:	fa01 f303 	lsl.w	r3, r1, r3
 800da3e:	b29b      	uxth	r3, r3
 800da40:	68f9      	ldr	r1, [r7, #12]
 800da42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da46:	4313      	orrs	r3, r2
 800da48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	015a      	lsls	r2, r3, #5
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	4413      	add	r3, r2
 800da52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d153      	bne.n	800db08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	015a      	lsls	r2, r3, #5
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4413      	add	r3, r2
 800da68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	78db      	ldrb	r3, [r3, #3]
 800da7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	059b      	lsls	r3, r3, #22
 800da82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800da84:	431a      	orrs	r2, r3
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	0159      	lsls	r1, r3, #5
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	440b      	add	r3, r1
 800da8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da92:	4619      	mov	r1, r3
 800da94:	4b20      	ldr	r3, [pc, #128]	; (800db18 <USB_ActivateEndpoint+0x10c>)
 800da96:	4313      	orrs	r3, r2
 800da98:	600b      	str	r3, [r1, #0]
 800da9a:	e035      	b.n	800db08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daa2:	69da      	ldr	r2, [r3, #28]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	f003 030f 	and.w	r3, r3, #15
 800daac:	2101      	movs	r1, #1
 800daae:	fa01 f303 	lsl.w	r3, r1, r3
 800dab2:	041b      	lsls	r3, r3, #16
 800dab4:	68f9      	ldr	r1, [r7, #12]
 800dab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800daba:	4313      	orrs	r3, r2
 800dabc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	015a      	lsls	r2, r3, #5
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	4413      	add	r3, r2
 800dac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d119      	bne.n	800db08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	015a      	lsls	r2, r3, #5
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	4413      	add	r3, r2
 800dadc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	78db      	ldrb	r3, [r3, #3]
 800daee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800daf0:	430b      	orrs	r3, r1
 800daf2:	431a      	orrs	r2, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	0159      	lsls	r1, r3, #5
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	440b      	add	r3, r1
 800dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db00:	4619      	mov	r1, r3
 800db02:	4b05      	ldr	r3, [pc, #20]	; (800db18 <USB_ActivateEndpoint+0x10c>)
 800db04:	4313      	orrs	r3, r2
 800db06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	10008000 	.word	0x10008000

0800db1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d161      	bne.n	800dbfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db4e:	d11f      	bne.n	800db90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	015a      	lsls	r2, r3, #5
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	4413      	add	r3, r2
 800db58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	0151      	lsls	r1, r2, #5
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	440a      	add	r2, r1
 800db66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	0151      	lsls	r1, r2, #5
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	440a      	add	r2, r1
 800db86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	f003 030f 	and.w	r3, r3, #15
 800dba0:	2101      	movs	r1, #1
 800dba2:	fa01 f303 	lsl.w	r3, r1, r3
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	68f9      	ldr	r1, [r7, #12]
 800dbac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbba:	69da      	ldr	r2, [r3, #28]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	f003 030f 	and.w	r3, r3, #15
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	fa01 f303 	lsl.w	r3, r1, r3
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	43db      	mvns	r3, r3
 800dbce:	68f9      	ldr	r1, [r7, #12]
 800dbd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4413      	add	r3, r2
 800dbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	0159      	lsls	r1, r3, #5
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	440b      	add	r3, r1
 800dbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4b35      	ldr	r3, [pc, #212]	; (800dccc <USB_DeactivateEndpoint+0x1b0>)
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	600b      	str	r3, [r1, #0]
 800dbfa:	e060      	b.n	800dcbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	015a      	lsls	r2, r3, #5
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	4413      	add	r3, r2
 800dc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc12:	d11f      	bne.n	800dc54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	015a      	lsls	r2, r3, #5
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68ba      	ldr	r2, [r7, #8]
 800dc24:	0151      	lsls	r1, r2, #5
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	440a      	add	r2, r1
 800dc2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	0151      	lsls	r1, r2, #5
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	440a      	add	r2, r1
 800dc4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	f003 030f 	and.w	r3, r3, #15
 800dc64:	2101      	movs	r1, #1
 800dc66:	fa01 f303 	lsl.w	r3, r1, r3
 800dc6a:	041b      	lsls	r3, r3, #16
 800dc6c:	43db      	mvns	r3, r3
 800dc6e:	68f9      	ldr	r1, [r7, #12]
 800dc70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc74:	4013      	ands	r3, r2
 800dc76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7e:	69da      	ldr	r2, [r3, #28]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	f003 030f 	and.w	r3, r3, #15
 800dc88:	2101      	movs	r1, #1
 800dc8a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc8e:	041b      	lsls	r3, r3, #16
 800dc90:	43db      	mvns	r3, r3
 800dc92:	68f9      	ldr	r1, [r7, #12]
 800dc94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc98:	4013      	ands	r3, r2
 800dc9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	015a      	lsls	r2, r3, #5
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	0159      	lsls	r1, r3, #5
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	440b      	add	r3, r1
 800dcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4b05      	ldr	r3, [pc, #20]	; (800dcd0 <USB_DeactivateEndpoint+0x1b4>)
 800dcba:	4013      	ands	r3, r2
 800dcbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	ec337800 	.word	0xec337800
 800dcd0:	eff37800 	.word	0xeff37800

0800dcd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08a      	sub	sp, #40	; 0x28
 800dcd8:	af02      	add	r7, sp, #8
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4613      	mov	r3, r2
 800dce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	785b      	ldrb	r3, [r3, #1]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	f040 8163 	bne.w	800dfbc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d132      	bne.n	800dd64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd0a:	691a      	ldr	r2, [r3, #16]
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	0159      	lsls	r1, r3, #5
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	440b      	add	r3, r1
 800dd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd18:	4619      	mov	r1, r3
 800dd1a:	4ba5      	ldr	r3, [pc, #660]	; (800dfb0 <USB_EPStartXfer+0x2dc>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	0151      	lsls	r1, r2, #5
 800dd32:	69fa      	ldr	r2, [r7, #28]
 800dd34:	440a      	add	r2, r1
 800dd36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	015a      	lsls	r2, r3, #5
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	4413      	add	r3, r2
 800dd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4c:	691a      	ldr	r2, [r3, #16]
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	0159      	lsls	r1, r3, #5
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	440b      	add	r3, r1
 800dd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4b95      	ldr	r3, [pc, #596]	; (800dfb4 <USB_EPStartXfer+0x2e0>)
 800dd5e:	4013      	ands	r3, r2
 800dd60:	610b      	str	r3, [r1, #16]
 800dd62:	e074      	b.n	800de4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	0159      	lsls	r1, r3, #5
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	440b      	add	r3, r1
 800dd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4b8c      	ldr	r3, [pc, #560]	; (800dfb4 <USB_EPStartXfer+0x2e0>)
 800dd82:	4013      	ands	r3, r2
 800dd84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	015a      	lsls	r2, r3, #5
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd92:	691a      	ldr	r2, [r3, #16]
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	0159      	lsls	r1, r3, #5
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	440b      	add	r3, r1
 800dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dda0:	4619      	mov	r1, r3
 800dda2:	4b83      	ldr	r3, [pc, #524]	; (800dfb0 <USB_EPStartXfer+0x2dc>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	6959      	ldr	r1, [r3, #20]
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	440b      	add	r3, r1
 800ddc0:	1e59      	subs	r1, r3, #1
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ddca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ddcc:	4b7a      	ldr	r3, [pc, #488]	; (800dfb8 <USB_EPStartXfer+0x2e4>)
 800ddce:	400b      	ands	r3, r1
 800ddd0:	69b9      	ldr	r1, [r7, #24]
 800ddd2:	0148      	lsls	r0, r1, #5
 800ddd4:	69f9      	ldr	r1, [r7, #28]
 800ddd6:	4401      	add	r1, r0
 800ddd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dddc:	4313      	orrs	r3, r2
 800ddde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	015a      	lsls	r2, r3, #5
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	4413      	add	r3, r2
 800dde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddec:	691a      	ldr	r2, [r3, #16]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddf6:	69b9      	ldr	r1, [r7, #24]
 800ddf8:	0148      	lsls	r0, r1, #5
 800ddfa:	69f9      	ldr	r1, [r7, #28]
 800ddfc:	4401      	add	r1, r0
 800ddfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800de02:	4313      	orrs	r3, r2
 800de04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	78db      	ldrb	r3, [r3, #3]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d11f      	bne.n	800de4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	015a      	lsls	r2, r3, #5
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	4413      	add	r3, r2
 800de16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	69ba      	ldr	r2, [r7, #24]
 800de1e:	0151      	lsls	r1, r2, #5
 800de20:	69fa      	ldr	r2, [r7, #28]
 800de22:	440a      	add	r2, r1
 800de24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800de2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	015a      	lsls	r2, r3, #5
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	4413      	add	r3, r2
 800de36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	69ba      	ldr	r2, [r7, #24]
 800de3e:	0151      	lsls	r1, r2, #5
 800de40:	69fa      	ldr	r2, [r7, #28]
 800de42:	440a      	add	r2, r1
 800de44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d14b      	bne.n	800deec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d009      	beq.n	800de70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	015a      	lsls	r2, r3, #5
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	4413      	add	r3, r2
 800de64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de68:	461a      	mov	r2, r3
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	78db      	ldrb	r3, [r3, #3]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d128      	bne.n	800deca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de84:	2b00      	cmp	r3, #0
 800de86:	d110      	bne.n	800deaa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	e00f      	b.n	800deca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	69ba      	ldr	r2, [r7, #24]
 800deba:	0151      	lsls	r1, r2, #5
 800debc:	69fa      	ldr	r2, [r7, #28]
 800debe:	440a      	add	r2, r1
 800dec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dec8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	015a      	lsls	r2, r3, #5
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	4413      	add	r3, r2
 800ded2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	0151      	lsls	r1, r2, #5
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	440a      	add	r2, r1
 800dee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dee4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	e133      	b.n	800e154 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	69ba      	ldr	r2, [r7, #24]
 800defc:	0151      	lsls	r1, r2, #5
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	440a      	add	r2, r1
 800df02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	78db      	ldrb	r3, [r3, #3]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d015      	beq.n	800df40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 811b 	beq.w	800e154 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	f003 030f 	and.w	r3, r3, #15
 800df2e:	2101      	movs	r1, #1
 800df30:	fa01 f303 	lsl.w	r3, r1, r3
 800df34:	69f9      	ldr	r1, [r7, #28]
 800df36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df3a:	4313      	orrs	r3, r2
 800df3c:	634b      	str	r3, [r1, #52]	; 0x34
 800df3e:	e109      	b.n	800e154 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d110      	bne.n	800df72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	015a      	lsls	r2, r3, #5
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	4413      	add	r3, r2
 800df58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	0151      	lsls	r1, r2, #5
 800df62:	69fa      	ldr	r2, [r7, #28]
 800df64:	440a      	add	r2, r1
 800df66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	e00f      	b.n	800df92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800df72:	69bb      	ldr	r3, [r7, #24]
 800df74:	015a      	lsls	r2, r3, #5
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	4413      	add	r3, r2
 800df7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	69ba      	ldr	r2, [r7, #24]
 800df82:	0151      	lsls	r1, r2, #5
 800df84:	69fa      	ldr	r2, [r7, #28]
 800df86:	440a      	add	r2, r1
 800df88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	68d9      	ldr	r1, [r3, #12]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	781a      	ldrb	r2, [r3, #0]
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	b298      	uxth	r0, r3
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f000 fa38 	bl	800e41c <USB_WritePacket>
 800dfac:	e0d2      	b.n	800e154 <USB_EPStartXfer+0x480>
 800dfae:	bf00      	nop
 800dfb0:	e007ffff 	.word	0xe007ffff
 800dfb4:	fff80000 	.word	0xfff80000
 800dfb8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc8:	691a      	ldr	r2, [r3, #16]
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	0159      	lsls	r1, r3, #5
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	440b      	add	r3, r1
 800dfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4b61      	ldr	r3, [pc, #388]	; (800e160 <USB_EPStartXfer+0x48c>)
 800dfda:	4013      	ands	r3, r2
 800dfdc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfea:	691a      	ldr	r2, [r3, #16]
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	0159      	lsls	r1, r3, #5
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	440b      	add	r3, r1
 800dff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff8:	4619      	mov	r1, r3
 800dffa:	4b5a      	ldr	r3, [pc, #360]	; (800e164 <USB_EPStartXfer+0x490>)
 800dffc:	4013      	ands	r3, r2
 800dffe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d123      	bne.n	800e050 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e014:	691a      	ldr	r2, [r3, #16]
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	689b      	ldr	r3, [r3, #8]
 800e01a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e01e:	69b9      	ldr	r1, [r7, #24]
 800e020:	0148      	lsls	r0, r1, #5
 800e022:	69f9      	ldr	r1, [r7, #28]
 800e024:	4401      	add	r1, r0
 800e026:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e02a:	4313      	orrs	r3, r2
 800e02c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	015a      	lsls	r2, r3, #5
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	4413      	add	r3, r2
 800e036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e03a:	691b      	ldr	r3, [r3, #16]
 800e03c:	69ba      	ldr	r2, [r7, #24]
 800e03e:	0151      	lsls	r1, r2, #5
 800e040:	69fa      	ldr	r2, [r7, #28]
 800e042:	440a      	add	r2, r1
 800e044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e04c:	6113      	str	r3, [r2, #16]
 800e04e:	e033      	b.n	800e0b8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	695a      	ldr	r2, [r3, #20]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	4413      	add	r3, r2
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	fbb2 f3f3 	udiv	r3, r2, r3
 800e064:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e072:	691a      	ldr	r2, [r3, #16]
 800e074:	8afb      	ldrh	r3, [r7, #22]
 800e076:	04d9      	lsls	r1, r3, #19
 800e078:	4b3b      	ldr	r3, [pc, #236]	; (800e168 <USB_EPStartXfer+0x494>)
 800e07a:	400b      	ands	r3, r1
 800e07c:	69b9      	ldr	r1, [r7, #24]
 800e07e:	0148      	lsls	r0, r1, #5
 800e080:	69f9      	ldr	r1, [r7, #28]
 800e082:	4401      	add	r1, r0
 800e084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e088:	4313      	orrs	r3, r2
 800e08a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e08c:	69bb      	ldr	r3, [r7, #24]
 800e08e:	015a      	lsls	r2, r3, #5
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	4413      	add	r3, r2
 800e094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	8af9      	ldrh	r1, [r7, #22]
 800e0a0:	fb01 f303 	mul.w	r3, r1, r3
 800e0a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0a8:	69b9      	ldr	r1, [r7, #24]
 800e0aa:	0148      	lsls	r0, r1, #5
 800e0ac:	69f9      	ldr	r1, [r7, #28]
 800e0ae:	4401      	add	r1, r0
 800e0b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d10d      	bne.n	800e0da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d009      	beq.n	800e0da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	68d9      	ldr	r1, [r3, #12]
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0d6:	460a      	mov	r2, r1
 800e0d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	78db      	ldrb	r3, [r3, #3]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d128      	bne.n	800e134 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d110      	bne.n	800e114 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	015a      	lsls	r2, r3, #5
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	69ba      	ldr	r2, [r7, #24]
 800e102:	0151      	lsls	r1, r2, #5
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	440a      	add	r2, r1
 800e108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e10c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e110:	6013      	str	r3, [r2, #0]
 800e112:	e00f      	b.n	800e134 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	015a      	lsls	r2, r3, #5
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	4413      	add	r3, r2
 800e11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	69ba      	ldr	r2, [r7, #24]
 800e124:	0151      	lsls	r1, r2, #5
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	440a      	add	r2, r1
 800e12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e12e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e132:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	015a      	lsls	r2, r3, #5
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	4413      	add	r3, r2
 800e13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	69ba      	ldr	r2, [r7, #24]
 800e144:	0151      	lsls	r1, r2, #5
 800e146:	69fa      	ldr	r2, [r7, #28]
 800e148:	440a      	add	r2, r1
 800e14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e14e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	fff80000 	.word	0xfff80000
 800e164:	e007ffff 	.word	0xe007ffff
 800e168:	1ff80000 	.word	0x1ff80000

0800e16c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b087      	sub	sp, #28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	785b      	ldrb	r3, [r3, #1]
 800e188:	2b01      	cmp	r3, #1
 800e18a:	f040 80cd 	bne.w	800e328 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	695b      	ldr	r3, [r3, #20]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d132      	bne.n	800e1fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	015a      	lsls	r2, r3, #5
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	4413      	add	r3, r2
 800e19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1a2:	691a      	ldr	r2, [r3, #16]
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	0159      	lsls	r1, r3, #5
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	440b      	add	r3, r1
 800e1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4b98      	ldr	r3, [pc, #608]	; (800e414 <USB_EP0StartXfer+0x2a8>)
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	0151      	lsls	r1, r2, #5
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	440a      	add	r2, r1
 800e1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e1d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e4:	691a      	ldr	r2, [r3, #16]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	0159      	lsls	r1, r3, #5
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	440b      	add	r3, r1
 800e1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	4b88      	ldr	r3, [pc, #544]	; (800e418 <USB_EP0StartXfer+0x2ac>)
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	610b      	str	r3, [r1, #16]
 800e1fa:	e04e      	b.n	800e29a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	015a      	lsls	r2, r3, #5
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	4413      	add	r3, r2
 800e204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e208:	691a      	ldr	r2, [r3, #16]
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	0159      	lsls	r1, r3, #5
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	440b      	add	r3, r1
 800e212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e216:	4619      	mov	r1, r3
 800e218:	4b7f      	ldr	r3, [pc, #508]	; (800e418 <USB_EP0StartXfer+0x2ac>)
 800e21a:	4013      	ands	r3, r2
 800e21c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	015a      	lsls	r2, r3, #5
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	4413      	add	r3, r2
 800e226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	0159      	lsls	r1, r3, #5
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	440b      	add	r3, r1
 800e234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e238:	4619      	mov	r1, r3
 800e23a:	4b76      	ldr	r3, [pc, #472]	; (800e414 <USB_EP0StartXfer+0x2a8>)
 800e23c:	4013      	ands	r3, r2
 800e23e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	695a      	ldr	r2, [r3, #20]
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d903      	bls.n	800e254 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	689a      	ldr	r2, [r3, #8]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	015a      	lsls	r2, r3, #5
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	4413      	add	r3, r2
 800e25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	693a      	ldr	r2, [r7, #16]
 800e264:	0151      	lsls	r1, r2, #5
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	440a      	add	r2, r1
 800e26a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	015a      	lsls	r2, r3, #5
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	4413      	add	r3, r2
 800e27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e280:	691a      	ldr	r2, [r3, #16]
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e28a:	6939      	ldr	r1, [r7, #16]
 800e28c:	0148      	lsls	r0, r1, #5
 800e28e:	6979      	ldr	r1, [r7, #20]
 800e290:	4401      	add	r1, r0
 800e292:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e296:	4313      	orrs	r3, r2
 800e298:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d11e      	bne.n	800e2de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d009      	beq.n	800e2bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	015a      	lsls	r2, r3, #5
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	693a      	ldr	r2, [r7, #16]
 800e2cc:	0151      	lsls	r1, r2, #5
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	440a      	add	r2, r1
 800e2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	e092      	b.n	800e404 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	015a      	lsls	r2, r3, #5
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	0151      	lsls	r1, r2, #5
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	440a      	add	r2, r1
 800e2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e2fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d07e      	beq.n	800e404 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e30c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	f003 030f 	and.w	r3, r3, #15
 800e316:	2101      	movs	r1, #1
 800e318:	fa01 f303 	lsl.w	r3, r1, r3
 800e31c:	6979      	ldr	r1, [r7, #20]
 800e31e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e322:	4313      	orrs	r3, r2
 800e324:	634b      	str	r3, [r1, #52]	; 0x34
 800e326:	e06d      	b.n	800e404 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e334:	691a      	ldr	r2, [r3, #16]
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	0159      	lsls	r1, r3, #5
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	440b      	add	r3, r1
 800e33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e342:	4619      	mov	r1, r3
 800e344:	4b34      	ldr	r3, [pc, #208]	; (800e418 <USB_EP0StartXfer+0x2ac>)
 800e346:	4013      	ands	r3, r2
 800e348:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	015a      	lsls	r2, r3, #5
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	4413      	add	r3, r2
 800e352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	0159      	lsls	r1, r3, #5
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	440b      	add	r3, r1
 800e360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e364:	4619      	mov	r1, r3
 800e366:	4b2b      	ldr	r3, [pc, #172]	; (800e414 <USB_EP0StartXfer+0x2a8>)
 800e368:	4013      	ands	r3, r2
 800e36a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d003      	beq.n	800e37c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	689a      	ldr	r2, [r3, #8]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	015a      	lsls	r2, r3, #5
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	4413      	add	r3, r2
 800e384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	0151      	lsls	r1, r2, #5
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	440a      	add	r2, r1
 800e392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e39a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a8:	691a      	ldr	r2, [r3, #16]
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e3b2:	6939      	ldr	r1, [r7, #16]
 800e3b4:	0148      	lsls	r0, r1, #5
 800e3b6:	6979      	ldr	r1, [r7, #20]
 800e3b8:	4401      	add	r1, r0
 800e3ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d10d      	bne.n	800e3e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d009      	beq.n	800e3e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	68d9      	ldr	r1, [r3, #12]
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e0:	460a      	mov	r2, r1
 800e3e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	015a      	lsls	r2, r3, #5
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	0151      	lsls	r1, r2, #5
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	440a      	add	r2, r1
 800e3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e404:	2300      	movs	r3, #0
}
 800e406:	4618      	mov	r0, r3
 800e408:	371c      	adds	r7, #28
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	e007ffff 	.word	0xe007ffff
 800e418:	fff80000 	.word	0xfff80000

0800e41c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b089      	sub	sp, #36	; 0x24
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	4611      	mov	r1, r2
 800e428:	461a      	mov	r2, r3
 800e42a:	460b      	mov	r3, r1
 800e42c:	71fb      	strb	r3, [r7, #7]
 800e42e:	4613      	mov	r3, r2
 800e430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e43a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d123      	bne.n	800e48a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e442:	88bb      	ldrh	r3, [r7, #4]
 800e444:	3303      	adds	r3, #3
 800e446:	089b      	lsrs	r3, r3, #2
 800e448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e44a:	2300      	movs	r3, #0
 800e44c:	61bb      	str	r3, [r7, #24]
 800e44e:	e018      	b.n	800e482 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	031a      	lsls	r2, r3, #12
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	4413      	add	r3, r2
 800e458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e45c:	461a      	mov	r2, r3
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	3301      	adds	r3, #1
 800e468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	3301      	adds	r3, #1
 800e46e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	3301      	adds	r3, #1
 800e474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	3301      	adds	r3, #1
 800e47a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	3301      	adds	r3, #1
 800e480:	61bb      	str	r3, [r7, #24]
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	429a      	cmp	r2, r3
 800e488:	d3e2      	bcc.n	800e450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3724      	adds	r7, #36	; 0x24
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e498:	b480      	push	{r7}
 800e49a:	b08b      	sub	sp, #44	; 0x2c
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	60b9      	str	r1, [r7, #8]
 800e4a2:	4613      	mov	r3, r2
 800e4a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e4ae:	88fb      	ldrh	r3, [r7, #6]
 800e4b0:	089b      	lsrs	r3, r3, #2
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e4b6:	88fb      	ldrh	r3, [r7, #6]
 800e4b8:	f003 0303 	and.w	r3, r3, #3
 800e4bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e4be:	2300      	movs	r3, #0
 800e4c0:	623b      	str	r3, [r7, #32]
 800e4c2:	e014      	b.n	800e4ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	3301      	adds	r3, #1
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	3301      	adds	r3, #1
 800e4e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e4e8:	6a3b      	ldr	r3, [r7, #32]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	623b      	str	r3, [r7, #32]
 800e4ee:	6a3a      	ldr	r2, [r7, #32]
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d3e6      	bcc.n	800e4c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e4f6:	8bfb      	ldrh	r3, [r7, #30]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01e      	beq.n	800e53a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e506:	461a      	mov	r2, r3
 800e508:	f107 0310 	add.w	r3, r7, #16
 800e50c:	6812      	ldr	r2, [r2, #0]
 800e50e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	fa22 f303 	lsr.w	r3, r2, r3
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e520:	701a      	strb	r2, [r3, #0]
      i++;
 800e522:	6a3b      	ldr	r3, [r7, #32]
 800e524:	3301      	adds	r3, #1
 800e526:	623b      	str	r3, [r7, #32]
      pDest++;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	3301      	adds	r3, #1
 800e52c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e52e:	8bfb      	ldrh	r3, [r7, #30]
 800e530:	3b01      	subs	r3, #1
 800e532:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e534:	8bfb      	ldrh	r3, [r7, #30]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1ea      	bne.n	800e510 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	372c      	adds	r7, #44	; 0x2c
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	785b      	ldrb	r3, [r3, #1]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d12c      	bne.n	800e5be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	015a      	lsls	r2, r3, #5
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	4413      	add	r3, r2
 800e56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	db12      	blt.n	800e59c <USB_EPSetStall+0x54>
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00f      	beq.n	800e59c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	4413      	add	r3, r2
 800e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68ba      	ldr	r2, [r7, #8]
 800e58c:	0151      	lsls	r1, r2, #5
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	440a      	add	r2, r1
 800e592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e59a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	015a      	lsls	r2, r3, #5
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	0151      	lsls	r1, r2, #5
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	440a      	add	r2, r1
 800e5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	e02b      	b.n	800e616 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	db12      	blt.n	800e5f6 <USB_EPSetStall+0xae>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00f      	beq.n	800e5f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	0151      	lsls	r1, r2, #5
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	440a      	add	r2, r1
 800e5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e5f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68ba      	ldr	r2, [r7, #8]
 800e606:	0151      	lsls	r1, r2, #5
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	440a      	add	r2, r1
 800e60c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e614:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3714      	adds	r7, #20
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d128      	bne.n	800e692 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	0151      	lsls	r1, r2, #5
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	440a      	add	r2, r1
 800e656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e65a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e65e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	78db      	ldrb	r3, [r3, #3]
 800e664:	2b03      	cmp	r3, #3
 800e666:	d003      	beq.n	800e670 <USB_EPClearStall+0x4c>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	78db      	ldrb	r3, [r3, #3]
 800e66c:	2b02      	cmp	r3, #2
 800e66e:	d138      	bne.n	800e6e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	015a      	lsls	r2, r3, #5
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	0151      	lsls	r1, r2, #5
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	440a      	add	r2, r1
 800e686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e68a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	e027      	b.n	800e6e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	015a      	lsls	r2, r3, #5
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68ba      	ldr	r2, [r7, #8]
 800e6a2:	0151      	lsls	r1, r2, #5
 800e6a4:	68fa      	ldr	r2, [r7, #12]
 800e6a6:	440a      	add	r2, r1
 800e6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e6b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	78db      	ldrb	r3, [r3, #3]
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	d003      	beq.n	800e6c2 <USB_EPClearStall+0x9e>
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	78db      	ldrb	r3, [r3, #3]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d10f      	bne.n	800e6e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	015a      	lsls	r2, r3, #5
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	0151      	lsls	r1, r2, #5
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	440a      	add	r2, r1
 800e6d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e70e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e712:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	011b      	lsls	r3, r3, #4
 800e720:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e724:	68f9      	ldr	r1, [r7, #12]
 800e726:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e72a:	4313      	orrs	r3, r2
 800e72c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3714      	adds	r7, #20
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e756:	f023 0303 	bic.w	r3, r3, #3
 800e75a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e76a:	f023 0302 	bic.w	r3, r3, #2
 800e76e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e77e:	b480      	push	{r7}
 800e780:	b085      	sub	sp, #20
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e798:	f023 0303 	bic.w	r3, r3, #3
 800e79c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	699b      	ldr	r3, [r3, #24]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b085      	sub	sp, #20
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e802:	69db      	ldr	r3, [r3, #28]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	4013      	ands	r3, r2
 800e808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	0c1b      	lsrs	r3, r3, #16
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b085      	sub	sp, #20
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e82c:	699b      	ldr	r3, [r3, #24]
 800e82e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e836:	69db      	ldr	r3, [r3, #28]
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	4013      	ands	r3, r2
 800e83c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	b29b      	uxth	r3, r3
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e84e:	b480      	push	{r7}
 800e850:	b085      	sub	sp, #20
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	460b      	mov	r3, r1
 800e858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e85e:	78fb      	ldrb	r3, [r7, #3]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	4013      	ands	r3, r2
 800e87a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e87c:	68bb      	ldr	r3, [r7, #8]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b087      	sub	sp, #28
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	460b      	mov	r3, r1
 800e894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	f003 030f 	and.w	r3, r3, #15
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e8ba:	01db      	lsls	r3, r3, #7
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e8c4:	78fb      	ldrb	r3, [r7, #3]
 800e8c6:	015a      	lsls	r2, r3, #5
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	693a      	ldr	r2, [r7, #16]
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e8d8:	68bb      	ldr	r3, [r7, #8]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e8e6:	b480      	push	{r7}
 800e8e8:	b083      	sub	sp, #12
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	f003 0301 	and.w	r3, r3, #1
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
	...

0800e904 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e904:	b480      	push	{r7}
 800e906:	b085      	sub	sp, #20
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e91e:	4619      	mov	r1, r3
 800e920:	4b09      	ldr	r3, [pc, #36]	; (800e948 <USB_ActivateSetup+0x44>)
 800e922:	4013      	ands	r3, r2
 800e924:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	fffff800 	.word	0xfffff800

0800e94c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b087      	sub	sp, #28
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	460b      	mov	r3, r1
 800e956:	607a      	str	r2, [r7, #4]
 800e958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	333c      	adds	r3, #60	; 0x3c
 800e962:	3304      	adds	r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	4a26      	ldr	r2, [pc, #152]	; (800ea04 <USB_EP0_OutStart+0xb8>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d90a      	bls.n	800e986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e97c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e980:	d101      	bne.n	800e986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	e037      	b.n	800e9f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e98c:	461a      	mov	r2, r3
 800e98e:	2300      	movs	r3, #0
 800e990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	697a      	ldr	r2, [r7, #20]
 800e9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9b4:	f043 0318 	orr.w	r3, r3, #24
 800e9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e9cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e9ce:	7afb      	ldrb	r3, [r7, #11]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d10f      	bne.n	800e9f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9da:	461a      	mov	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	697a      	ldr	r2, [r7, #20]
 800e9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e9f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	371c      	adds	r7, #28
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop
 800ea04:	4f54300a 	.word	0x4f54300a

0800ea08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3301      	adds	r3, #1
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	4a13      	ldr	r2, [pc, #76]	; (800ea68 <USB_CoreReset+0x60>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d901      	bls.n	800ea24 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ea20:	2303      	movs	r3, #3
 800ea22:	e01a      	b.n	800ea5a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	daf3      	bge.n	800ea14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	f043 0201 	orr.w	r2, r3, #1
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	60fb      	str	r3, [r7, #12]
 800ea42:	4a09      	ldr	r2, [pc, #36]	; (800ea68 <USB_CoreReset+0x60>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d901      	bls.n	800ea4c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e006      	b.n	800ea5a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	f003 0301 	and.w	r3, r3, #1
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d0f1      	beq.n	800ea3c <USB_CoreReset+0x34>

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3714      	adds	r7, #20
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	00030d40 	.word	0x00030d40

0800ea6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ea7c:	f002 f900 	bl	8010c80 <USBD_static_malloc>
 800ea80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d105      	bne.n	800ea94 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea90:	2302      	movs	r3, #2
 800ea92:	e066      	b.n	800eb62 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7c1b      	ldrb	r3, [r3, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d119      	bne.n	800ead8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eaa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	2181      	movs	r1, #129	; 0x81
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f001 ffc4 	bl	8010a3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eabc:	2202      	movs	r2, #2
 800eabe:	2101      	movs	r1, #1
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f001 ffba 	bl	8010a3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2210      	movs	r2, #16
 800ead2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ead6:	e016      	b.n	800eb06 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	2202      	movs	r2, #2
 800eadc:	2181      	movs	r1, #129	; 0x81
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f001 ffab 	bl	8010a3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eaea:	2340      	movs	r3, #64	; 0x40
 800eaec:	2202      	movs	r2, #2
 800eaee:	2101      	movs	r1, #1
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f001 ffa2 	bl	8010a3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2210      	movs	r2, #16
 800eb02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eb06:	2308      	movs	r3, #8
 800eb08:	2203      	movs	r2, #3
 800eb0a:	2182      	movs	r1, #130	; 0x82
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f001 ff94 	bl	8010a3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2201      	movs	r2, #1
 800eb16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	7c1b      	ldrb	r3, [r3, #16]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d109      	bne.n	800eb50 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb46:	2101      	movs	r1, #1
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f002 f865 	bl	8010c18 <USBD_LL_PrepareReceive>
 800eb4e:	e007      	b.n	800eb60 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb56:	2340      	movs	r3, #64	; 0x40
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f002 f85c 	bl	8010c18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb60:	2300      	movs	r3, #0
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b082      	sub	sp, #8
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	6078      	str	r0, [r7, #4]
 800eb72:	460b      	mov	r3, r1
 800eb74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eb76:	2181      	movs	r1, #129	; 0x81
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f001 ff84 	bl	8010a86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb84:	2101      	movs	r1, #1
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f001 ff7d 	bl	8010a86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb94:	2182      	movs	r1, #130	; 0x82
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f001 ff75 	bl	8010a86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00e      	beq.n	800ebd4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f002 f868 	bl	8010c9c <USBD_static_free>
    pdev->pClassData = NULL;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d101      	bne.n	800ec08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ec04:	2303      	movs	r3, #3
 800ec06:	e0af      	b.n	800ed68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d03f      	beq.n	800ec94 <USBD_CDC_Setup+0xb4>
 800ec14:	2b20      	cmp	r3, #32
 800ec16:	f040 809f 	bne.w	800ed58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	88db      	ldrh	r3, [r3, #6]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d02e      	beq.n	800ec80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	b25b      	sxtb	r3, r3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	da16      	bge.n	800ec5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ec38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	88d2      	ldrh	r2, [r2, #6]
 800ec3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	88db      	ldrh	r3, [r3, #6]
 800ec44:	2b07      	cmp	r3, #7
 800ec46:	bf28      	it	cs
 800ec48:	2307      	movcs	r3, #7
 800ec4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	89fa      	ldrh	r2, [r7, #14]
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f001 fae9 	bl	801022a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ec58:	e085      	b.n	800ed66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	785a      	ldrb	r2, [r3, #1]
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	88db      	ldrh	r3, [r3, #6]
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ec70:	6939      	ldr	r1, [r7, #16]
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	88db      	ldrh	r3, [r3, #6]
 800ec76:	461a      	mov	r2, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 fb02 	bl	8010282 <USBD_CtlPrepareRx>
      break;
 800ec7e:	e072      	b.n	800ed66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	7850      	ldrb	r0, [r2, #1]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	6839      	ldr	r1, [r7, #0]
 800ec90:	4798      	blx	r3
      break;
 800ec92:	e068      	b.n	800ed66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	785b      	ldrb	r3, [r3, #1]
 800ec98:	2b0b      	cmp	r3, #11
 800ec9a:	d852      	bhi.n	800ed42 <USBD_CDC_Setup+0x162>
 800ec9c:	a201      	add	r2, pc, #4	; (adr r2, 800eca4 <USBD_CDC_Setup+0xc4>)
 800ec9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca2:	bf00      	nop
 800eca4:	0800ecd5 	.word	0x0800ecd5
 800eca8:	0800ed51 	.word	0x0800ed51
 800ecac:	0800ed43 	.word	0x0800ed43
 800ecb0:	0800ed43 	.word	0x0800ed43
 800ecb4:	0800ed43 	.word	0x0800ed43
 800ecb8:	0800ed43 	.word	0x0800ed43
 800ecbc:	0800ed43 	.word	0x0800ed43
 800ecc0:	0800ed43 	.word	0x0800ed43
 800ecc4:	0800ed43 	.word	0x0800ed43
 800ecc8:	0800ed43 	.word	0x0800ed43
 800eccc:	0800ecff 	.word	0x0800ecff
 800ecd0:	0800ed29 	.word	0x0800ed29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b03      	cmp	r3, #3
 800ecde:	d107      	bne.n	800ecf0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ece0:	f107 030a 	add.w	r3, r7, #10
 800ece4:	2202      	movs	r2, #2
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f001 fa9e 	bl	801022a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ecee:	e032      	b.n	800ed56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f001 fa28 	bl	8010148 <USBD_CtlError>
            ret = USBD_FAIL;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	75fb      	strb	r3, [r7, #23]
          break;
 800ecfc:	e02b      	b.n	800ed56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d107      	bne.n	800ed1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ed0a:	f107 030d 	add.w	r3, r7, #13
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f001 fa89 	bl	801022a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed18:	e01d      	b.n	800ed56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ed1a:	6839      	ldr	r1, [r7, #0]
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 fa13 	bl	8010148 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed22:	2303      	movs	r3, #3
 800ed24:	75fb      	strb	r3, [r7, #23]
          break;
 800ed26:	e016      	b.n	800ed56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b03      	cmp	r3, #3
 800ed32:	d00f      	beq.n	800ed54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fa06 	bl	8010148 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ed40:	e008      	b.n	800ed54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f001 f9ff 	bl	8010148 <USBD_CtlError>
          ret = USBD_FAIL;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ed4e:	e002      	b.n	800ed56 <USBD_CDC_Setup+0x176>
          break;
 800ed50:	bf00      	nop
 800ed52:	e008      	b.n	800ed66 <USBD_CDC_Setup+0x186>
          break;
 800ed54:	bf00      	nop
      }
      break;
 800ed56:	e006      	b.n	800ed66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 f9f4 	bl	8010148 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed60:	2303      	movs	r3, #3
 800ed62:	75fb      	strb	r3, [r7, #23]
      break;
 800ed64:	bf00      	nop
  }

  return (uint8_t)ret;
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ed82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d101      	bne.n	800ed92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e04f      	b.n	800ee32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed9a:	78fa      	ldrb	r2, [r7, #3]
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	440b      	add	r3, r1
 800eda8:	3318      	adds	r3, #24
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d029      	beq.n	800ee04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800edb0:	78fa      	ldrb	r2, [r7, #3]
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	3318      	adds	r3, #24
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	78f9      	ldrb	r1, [r7, #3]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	460b      	mov	r3, r1
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	1a5b      	subs	r3, r3, r1
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4403      	add	r3, r0
 800edd0:	3344      	adds	r3, #68	; 0x44
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	fbb2 f1f3 	udiv	r1, r2, r3
 800edd8:	fb03 f301 	mul.w	r3, r3, r1
 800eddc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d110      	bne.n	800ee04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ede2:	78fa      	ldrb	r2, [r7, #3]
 800ede4:	6879      	ldr	r1, [r7, #4]
 800ede6:	4613      	mov	r3, r2
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	4413      	add	r3, r2
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	440b      	add	r3, r1
 800edf0:	3318      	adds	r3, #24
 800edf2:	2200      	movs	r2, #0
 800edf4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800edf6:	78f9      	ldrb	r1, [r7, #3]
 800edf8:	2300      	movs	r3, #0
 800edfa:	2200      	movs	r2, #0
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f001 feea 	bl	8010bd6 <USBD_LL_Transmit>
 800ee02:	e015      	b.n	800ee30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ee2c:	78fa      	ldrb	r2, [r7, #3]
 800ee2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	460b      	mov	r3, r1
 800ee44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d101      	bne.n	800ee5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	e015      	b.n	800ee88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ee5c:	78fb      	ldrb	r3, [r7, #3]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f001 fefa 	bl	8010c5a <USBD_LL_GetRxDataSize>
 800ee66:	4602      	mov	r2, r0
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ee82:	4611      	mov	r1, r2
 800ee84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e01b      	b.n	800eee2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d015      	beq.n	800eee0 <USBD_CDC_EP0_RxReady+0x50>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eeba:	2bff      	cmp	r3, #255	; 0xff
 800eebc:	d010      	beq.n	800eee0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800eecc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eed4:	b292      	uxth	r2, r2
 800eed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	22ff      	movs	r2, #255	; 0xff
 800eedc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2243      	movs	r2, #67	; 0x43
 800eef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eefa:	4b03      	ldr	r3, [pc, #12]	; (800ef08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr
 800ef08:	240000ac 	.word	0x240000ac

0800ef0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2243      	movs	r2, #67	; 0x43
 800ef18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ef1a:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	24000068 	.word	0x24000068

0800ef2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2243      	movs	r2, #67	; 0x43
 800ef38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ef3a:	4b03      	ldr	r3, [pc, #12]	; (800ef48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	240000f0 	.word	0x240000f0

0800ef4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	220a      	movs	r2, #10
 800ef58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef5a:	4b03      	ldr	r3, [pc, #12]	; (800ef68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	24000024 	.word	0x24000024

0800ef6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d101      	bne.n	800ef80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef7c:	2303      	movs	r3, #3
 800ef7e:	e004      	b.n	800ef8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef94:	4770      	bx	lr

0800ef96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b087      	sub	sp, #28
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	60f8      	str	r0, [r7, #12]
 800ef9e:	60b9      	str	r1, [r7, #8]
 800efa0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efa8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800efb0:	2303      	movs	r3, #3
 800efb2:	e008      	b.n	800efc6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	371c      	adds	r7, #28
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b085      	sub	sp, #20
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efe2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d101      	bne.n	800efee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800efea:	2303      	movs	r3, #3
 800efec:	e004      	b.n	800eff8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3714      	adds	r7, #20
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d101      	bne.n	800f022 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f01e:	2303      	movs	r3, #3
 800f020:	e016      	b.n	800f050 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	7c1b      	ldrb	r3, [r3, #16]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d109      	bne.n	800f03e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f030:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f034:	2101      	movs	r1, #1
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f001 fdee 	bl	8010c18 <USBD_LL_PrepareReceive>
 800f03c:	e007      	b.n	800f04e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f044:	2340      	movs	r3, #64	; 0x40
 800f046:	2101      	movs	r1, #1
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f001 fde5 	bl	8010c18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	4613      	mov	r3, r2
 800f064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f06c:	2303      	movs	r3, #3
 800f06e:	e01f      	b.n	800f0b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2200      	movs	r2, #0
 800f074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d003      	beq.n	800f096 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	79fa      	ldrb	r2, [r7, #7]
 800f0a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f001 fc57 	bl	8010958 <USBD_LL_Init>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3718      	adds	r7, #24
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f0cc:	2303      	movs	r3, #3
 800f0ce:	e016      	b.n	800f0fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00b      	beq.n	800f0fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	f107 020e 	add.w	r2, r7, #14
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	4798      	blx	r3
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f001 fc78 	bl	8010a04 <USBD_LL_Start>
 800f114:	4603      	mov	r3, r0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}

0800f11e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f11e:	b480      	push	{r7}
 800f120:	b083      	sub	sp, #12
 800f122:	af00      	add	r7, sp, #0
 800f124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f140:	2303      	movs	r3, #3
 800f142:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d009      	beq.n	800f162 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	78fa      	ldrb	r2, [r7, #3]
 800f158:	4611      	mov	r1, r2
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	4798      	blx	r3
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f162:	7bfb      	ldrb	r3, [r7, #15]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	460b      	mov	r3, r1
 800f176:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d007      	beq.n	800f192 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	78fa      	ldrb	r2, [r7, #3]
 800f18c:	4611      	mov	r1, r2
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	4798      	blx	r3
  }

  return USBD_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 ff90 	bl	80100d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f1d0:	f003 031f 	and.w	r3, r3, #31
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d01a      	beq.n	800f20e <USBD_LL_SetupStage+0x72>
 800f1d8:	2b02      	cmp	r3, #2
 800f1da:	d822      	bhi.n	800f222 <USBD_LL_SetupStage+0x86>
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <USBD_LL_SetupStage+0x4a>
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d00a      	beq.n	800f1fa <USBD_LL_SetupStage+0x5e>
 800f1e4:	e01d      	b.n	800f222 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 fa62 	bl	800f6b8 <USBD_StdDevReq>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f8:	e020      	b.n	800f23c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f200:	4619      	mov	r1, r3
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fac6 	bl	800f794 <USBD_StdItfReq>
 800f208:	4603      	mov	r3, r0
 800f20a:	73fb      	strb	r3, [r7, #15]
      break;
 800f20c:	e016      	b.n	800f23c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fb05 	bl	800f826 <USBD_StdEPReq>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73fb      	strb	r3, [r7, #15]
      break;
 800f220:	e00c      	b.n	800f23c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	4619      	mov	r1, r3
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f001 fc47 	bl	8010ac4 <USBD_LL_StallEP>
 800f236:	4603      	mov	r3, r0
 800f238:	73fb      	strb	r3, [r7, #15]
      break;
 800f23a:	bf00      	nop
  }

  return ret;
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b086      	sub	sp, #24
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	60f8      	str	r0, [r7, #12]
 800f24e:	460b      	mov	r3, r1
 800f250:	607a      	str	r2, [r7, #4]
 800f252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f254:	7afb      	ldrb	r3, [r7, #11]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d138      	bne.n	800f2cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d14a      	bne.n	800f302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	689a      	ldr	r2, [r3, #8]
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	429a      	cmp	r2, r3
 800f276:	d913      	bls.n	800f2a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	689a      	ldr	r2, [r3, #8]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	1ad2      	subs	r2, r2, r3
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	68da      	ldr	r2, [r3, #12]
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	4293      	cmp	r3, r2
 800f290:	bf28      	it	cs
 800f292:	4613      	movcs	r3, r2
 800f294:	461a      	mov	r2, r3
 800f296:	6879      	ldr	r1, [r7, #4]
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f001 f80f 	bl	80102bc <USBD_CtlContinueRx>
 800f29e:	e030      	b.n	800f302 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	2b03      	cmp	r3, #3
 800f2aa:	d10b      	bne.n	800f2c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d005      	beq.n	800f2c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f001 f80a 	bl	80102de <USBD_CtlSendStatus>
 800f2ca:	e01a      	b.n	800f302 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	d114      	bne.n	800f302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2de:	699b      	ldr	r3, [r3, #24]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00e      	beq.n	800f302 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	7afa      	ldrb	r2, [r7, #11]
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	4798      	blx	r3
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f2fe:	7dfb      	ldrb	r3, [r7, #23]
 800f300:	e000      	b.n	800f304 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	460b      	mov	r3, r1
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f31a:	7afb      	ldrb	r3, [r7, #11]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d16b      	bne.n	800f3f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	3314      	adds	r3, #20
 800f324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d156      	bne.n	800f3de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	689a      	ldr	r2, [r3, #8]
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d914      	bls.n	800f366 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	689a      	ldr	r2, [r3, #8]
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	1ad2      	subs	r2, r2, r3
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	461a      	mov	r2, r3
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f000 ff84 	bl	8010260 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f358:	2300      	movs	r3, #0
 800f35a:	2200      	movs	r2, #0
 800f35c:	2100      	movs	r1, #0
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f001 fc5a 	bl	8010c18 <USBD_LL_PrepareReceive>
 800f364:	e03b      	b.n	800f3de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	68da      	ldr	r2, [r3, #12]
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d11c      	bne.n	800f3ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d316      	bcc.n	800f3ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f388:	429a      	cmp	r2, r3
 800f38a:	d20f      	bcs.n	800f3ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f38c:	2200      	movs	r2, #0
 800f38e:	2100      	movs	r1, #0
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f000 ff65 	bl	8010260 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f39e:	2300      	movs	r3, #0
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f001 fc37 	bl	8010c18 <USBD_LL_PrepareReceive>
 800f3aa:	e018      	b.n	800f3de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b03      	cmp	r3, #3
 800f3b6:	d10b      	bne.n	800f3d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3d0:	2180      	movs	r1, #128	; 0x80
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f001 fb76 	bl	8010ac4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f000 ff93 	bl	8010304 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d122      	bne.n	800f42e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f7ff fe98 	bl	800f11e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f3f6:	e01a      	b.n	800f42e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	2b03      	cmp	r3, #3
 800f402:	d114      	bne.n	800f42e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00e      	beq.n	800f42e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f416:	695b      	ldr	r3, [r3, #20]
 800f418:	7afa      	ldrb	r2, [r7, #11]
 800f41a:	4611      	mov	r1, r2
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	4798      	blx	r3
 800f420:	4603      	mov	r3, r0
 800f422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f424:	7dfb      	ldrb	r3, [r7, #23]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
 800f42c:	e000      	b.n	800f430 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f468:	2303      	movs	r3, #3
 800f46a:	e02f      	b.n	800f4cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00f      	beq.n	800f496 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d009      	beq.n	800f496 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	6852      	ldr	r2, [r2, #4]
 800f48e:	b2d2      	uxtb	r2, r2
 800f490:	4611      	mov	r1, r2
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f496:	2340      	movs	r3, #64	; 0x40
 800f498:	2200      	movs	r2, #0
 800f49a:	2100      	movs	r1, #0
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f001 facc 	bl	8010a3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2240      	movs	r2, #64	; 0x40
 800f4ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4b2:	2340      	movs	r3, #64	; 0x40
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2180      	movs	r1, #128	; 0x80
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f001 fabe 	bl	8010a3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2240      	movs	r2, #64	; 0x40
 800f4c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f4ca:	2300      	movs	r3, #0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	78fa      	ldrb	r2, [r7, #3]
 800f4e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f502:	b2da      	uxtb	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2204      	movs	r2, #4
 800f50e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	370c      	adds	r7, #12
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b04      	cmp	r3, #4
 800f532:	d106      	bne.n	800f542 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f562:	2303      	movs	r3, #3
 800f564:	e012      	b.n	800f58c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d10b      	bne.n	800f58a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f578:	69db      	ldr	r3, [r3, #28]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d005      	beq.n	800f58a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f584:	69db      	ldr	r3, [r3, #28]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	460b      	mov	r3, r1
 800f59e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f5aa:	2303      	movs	r3, #3
 800f5ac:	e014      	b.n	800f5d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5b4:	b2db      	uxtb	r3, r3
 800f5b6:	2b03      	cmp	r3, #3
 800f5b8:	d10d      	bne.n	800f5d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d007      	beq.n	800f5d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	78fa      	ldrb	r2, [r7, #3]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d101      	bne.n	800f5fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e014      	b.n	800f624 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f600:	b2db      	uxtb	r3, r3
 800f602:	2b03      	cmp	r3, #3
 800f604:	d10d      	bne.n	800f622 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d007      	beq.n	800f622 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61a:	78fa      	ldrb	r2, [r7, #3]
 800f61c:	4611      	mov	r1, r2
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2201      	movs	r2, #1
 800f64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d009      	beq.n	800f670 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	6852      	ldr	r2, [r2, #4]
 800f668:	b2d2      	uxtb	r2, r2
 800f66a:	4611      	mov	r1, r2
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	4798      	blx	r3
  }

  return USBD_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}

0800f67a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f67a:	b480      	push	{r7}
 800f67c:	b087      	sub	sp, #28
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	3301      	adds	r3, #1
 800f690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f698:	8a3b      	ldrh	r3, [r7, #16]
 800f69a:	021b      	lsls	r3, r3, #8
 800f69c:	b21a      	sxth	r2, r3
 800f69e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	b21b      	sxth	r3, r3
 800f6a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f6a8:	89fb      	ldrh	r3, [r7, #14]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	371c      	adds	r7, #28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
	...

0800f6b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6ce:	2b40      	cmp	r3, #64	; 0x40
 800f6d0:	d005      	beq.n	800f6de <USBD_StdDevReq+0x26>
 800f6d2:	2b40      	cmp	r3, #64	; 0x40
 800f6d4:	d853      	bhi.n	800f77e <USBD_StdDevReq+0xc6>
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00b      	beq.n	800f6f2 <USBD_StdDevReq+0x3a>
 800f6da:	2b20      	cmp	r3, #32
 800f6dc:	d14f      	bne.n	800f77e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	6839      	ldr	r1, [r7, #0]
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	4798      	blx	r3
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f6f0:	e04a      	b.n	800f788 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	785b      	ldrb	r3, [r3, #1]
 800f6f6:	2b09      	cmp	r3, #9
 800f6f8:	d83b      	bhi.n	800f772 <USBD_StdDevReq+0xba>
 800f6fa:	a201      	add	r2, pc, #4	; (adr r2, 800f700 <USBD_StdDevReq+0x48>)
 800f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f700:	0800f755 	.word	0x0800f755
 800f704:	0800f769 	.word	0x0800f769
 800f708:	0800f773 	.word	0x0800f773
 800f70c:	0800f75f 	.word	0x0800f75f
 800f710:	0800f773 	.word	0x0800f773
 800f714:	0800f733 	.word	0x0800f733
 800f718:	0800f729 	.word	0x0800f729
 800f71c:	0800f773 	.word	0x0800f773
 800f720:	0800f74b 	.word	0x0800f74b
 800f724:	0800f73d 	.word	0x0800f73d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f728:	6839      	ldr	r1, [r7, #0]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f000 f9de 	bl	800faec <USBD_GetDescriptor>
          break;
 800f730:	e024      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f732:	6839      	ldr	r1, [r7, #0]
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 fb43 	bl	800fdc0 <USBD_SetAddress>
          break;
 800f73a:	e01f      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 fb82 	bl	800fe48 <USBD_SetConfig>
 800f744:	4603      	mov	r3, r0
 800f746:	73fb      	strb	r3, [r7, #15]
          break;
 800f748:	e018      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fc21 	bl	800ff94 <USBD_GetConfig>
          break;
 800f752:	e013      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fc52 	bl	8010000 <USBD_GetStatus>
          break;
 800f75c:	e00e      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f75e:	6839      	ldr	r1, [r7, #0]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fc81 	bl	8010068 <USBD_SetFeature>
          break;
 800f766:	e009      	b.n	800f77c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fc90 	bl	8010090 <USBD_ClrFeature>
          break;
 800f770:	e004      	b.n	800f77c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 fce7 	bl	8010148 <USBD_CtlError>
          break;
 800f77a:	bf00      	nop
      }
      break;
 800f77c:	e004      	b.n	800f788 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fce1 	bl	8010148 <USBD_CtlError>
      break;
 800f786:	bf00      	nop
  }

  return ret;
 800f788:	7bfb      	ldrb	r3, [r7, #15]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop

0800f794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f7aa:	2b40      	cmp	r3, #64	; 0x40
 800f7ac:	d005      	beq.n	800f7ba <USBD_StdItfReq+0x26>
 800f7ae:	2b40      	cmp	r3, #64	; 0x40
 800f7b0:	d82f      	bhi.n	800f812 <USBD_StdItfReq+0x7e>
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <USBD_StdItfReq+0x26>
 800f7b6:	2b20      	cmp	r3, #32
 800f7b8:	d12b      	bne.n	800f812 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d81d      	bhi.n	800f804 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	889b      	ldrh	r3, [r3, #4]
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d813      	bhi.n	800f7fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	4798      	blx	r3
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	88db      	ldrh	r3, [r3, #6]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d110      	bne.n	800f80e <USBD_StdItfReq+0x7a>
 800f7ec:	7bfb      	ldrb	r3, [r7, #15]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d10d      	bne.n	800f80e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fd73 	bl	80102de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f7f8:	e009      	b.n	800f80e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fca3 	bl	8010148 <USBD_CtlError>
          break;
 800f802:	e004      	b.n	800f80e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fc9e 	bl	8010148 <USBD_CtlError>
          break;
 800f80c:	e000      	b.n	800f810 <USBD_StdItfReq+0x7c>
          break;
 800f80e:	bf00      	nop
      }
      break;
 800f810:	e004      	b.n	800f81c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 fc97 	bl	8010148 <USBD_CtlError>
      break;
 800f81a:	bf00      	nop
  }

  return ret;
 800f81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f826:	b580      	push	{r7, lr}
 800f828:	b084      	sub	sp, #16
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	889b      	ldrh	r3, [r3, #4]
 800f838:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f842:	2b40      	cmp	r3, #64	; 0x40
 800f844:	d007      	beq.n	800f856 <USBD_StdEPReq+0x30>
 800f846:	2b40      	cmp	r3, #64	; 0x40
 800f848:	f200 8145 	bhi.w	800fad6 <USBD_StdEPReq+0x2b0>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00c      	beq.n	800f86a <USBD_StdEPReq+0x44>
 800f850:	2b20      	cmp	r3, #32
 800f852:	f040 8140 	bne.w	800fad6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	4798      	blx	r3
 800f864:	4603      	mov	r3, r0
 800f866:	73fb      	strb	r3, [r7, #15]
      break;
 800f868:	e13a      	b.n	800fae0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	785b      	ldrb	r3, [r3, #1]
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d007      	beq.n	800f882 <USBD_StdEPReq+0x5c>
 800f872:	2b03      	cmp	r3, #3
 800f874:	f300 8129 	bgt.w	800faca <USBD_StdEPReq+0x2a4>
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d07f      	beq.n	800f97c <USBD_StdEPReq+0x156>
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d03c      	beq.n	800f8fa <USBD_StdEPReq+0xd4>
 800f880:	e123      	b.n	800faca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d002      	beq.n	800f894 <USBD_StdEPReq+0x6e>
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d016      	beq.n	800f8c0 <USBD_StdEPReq+0x9a>
 800f892:	e02c      	b.n	800f8ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00d      	beq.n	800f8b6 <USBD_StdEPReq+0x90>
 800f89a:	7bbb      	ldrb	r3, [r7, #14]
 800f89c:	2b80      	cmp	r3, #128	; 0x80
 800f89e:	d00a      	beq.n	800f8b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 f90d 	bl	8010ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8aa:	2180      	movs	r1, #128	; 0x80
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f001 f909 	bl	8010ac4 <USBD_LL_StallEP>
 800f8b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8b4:	e020      	b.n	800f8f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fc45 	bl	8010148 <USBD_CtlError>
              break;
 800f8be:	e01b      	b.n	800f8f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	885b      	ldrh	r3, [r3, #2]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d10e      	bne.n	800f8e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00b      	beq.n	800f8e6 <USBD_StdEPReq+0xc0>
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	2b80      	cmp	r3, #128	; 0x80
 800f8d2:	d008      	beq.n	800f8e6 <USBD_StdEPReq+0xc0>
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	88db      	ldrh	r3, [r3, #6]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d104      	bne.n	800f8e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f001 f8ef 	bl	8010ac4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 fcf9 	bl	80102de <USBD_CtlSendStatus>

              break;
 800f8ec:	e004      	b.n	800f8f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f000 fc29 	bl	8010148 <USBD_CtlError>
              break;
 800f8f6:	bf00      	nop
          }
          break;
 800f8f8:	e0ec      	b.n	800fad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b02      	cmp	r3, #2
 800f904:	d002      	beq.n	800f90c <USBD_StdEPReq+0xe6>
 800f906:	2b03      	cmp	r3, #3
 800f908:	d016      	beq.n	800f938 <USBD_StdEPReq+0x112>
 800f90a:	e030      	b.n	800f96e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00d      	beq.n	800f92e <USBD_StdEPReq+0x108>
 800f912:	7bbb      	ldrb	r3, [r7, #14]
 800f914:	2b80      	cmp	r3, #128	; 0x80
 800f916:	d00a      	beq.n	800f92e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f918:	7bbb      	ldrb	r3, [r7, #14]
 800f91a:	4619      	mov	r1, r3
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f001 f8d1 	bl	8010ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f922:	2180      	movs	r1, #128	; 0x80
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f001 f8cd 	bl	8010ac4 <USBD_LL_StallEP>
 800f92a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f92c:	e025      	b.n	800f97a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fc09 	bl	8010148 <USBD_CtlError>
              break;
 800f936:	e020      	b.n	800f97a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	885b      	ldrh	r3, [r3, #2]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d11b      	bne.n	800f978 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f940:	7bbb      	ldrb	r3, [r7, #14]
 800f942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f946:	2b00      	cmp	r3, #0
 800f948:	d004      	beq.n	800f954 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f94a:	7bbb      	ldrb	r3, [r7, #14]
 800f94c:	4619      	mov	r1, r3
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f001 f8d7 	bl	8010b02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 fcc2 	bl	80102de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	6839      	ldr	r1, [r7, #0]
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	4798      	blx	r3
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f96c:	e004      	b.n	800f978 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f96e:	6839      	ldr	r1, [r7, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 fbe9 	bl	8010148 <USBD_CtlError>
              break;
 800f976:	e000      	b.n	800f97a <USBD_StdEPReq+0x154>
              break;
 800f978:	bf00      	nop
          }
          break;
 800f97a:	e0ab      	b.n	800fad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f982:	b2db      	uxtb	r3, r3
 800f984:	2b02      	cmp	r3, #2
 800f986:	d002      	beq.n	800f98e <USBD_StdEPReq+0x168>
 800f988:	2b03      	cmp	r3, #3
 800f98a:	d032      	beq.n	800f9f2 <USBD_StdEPReq+0x1cc>
 800f98c:	e097      	b.n	800fabe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d007      	beq.n	800f9a4 <USBD_StdEPReq+0x17e>
 800f994:	7bbb      	ldrb	r3, [r7, #14]
 800f996:	2b80      	cmp	r3, #128	; 0x80
 800f998:	d004      	beq.n	800f9a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 fbd3 	bl	8010148 <USBD_CtlError>
                break;
 800f9a2:	e091      	b.n	800fac8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	da0b      	bge.n	800f9c4 <USBD_StdEPReq+0x19e>
 800f9ac:	7bbb      	ldrb	r3, [r7, #14]
 800f9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	009b      	lsls	r3, r3, #2
 800f9ba:	3310      	adds	r3, #16
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	4413      	add	r3, r2
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	e00b      	b.n	800f9dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
 800f9c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4413      	add	r3, r2
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	4413      	add	r3, r2
 800f9da:	3304      	adds	r3, #4
 800f9dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2202      	movs	r2, #2
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 fc1d 	bl	801022a <USBD_CtlSendData>
              break;
 800f9f0:	e06a      	b.n	800fac8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f9f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	da11      	bge.n	800fa1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9fa:	7bbb      	ldrb	r3, [r7, #14]
 800f9fc:	f003 020f 	and.w	r2, r3, #15
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	4613      	mov	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	4413      	add	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	440b      	add	r3, r1
 800fa0c:	3324      	adds	r3, #36	; 0x24
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d117      	bne.n	800fa44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa14:	6839      	ldr	r1, [r7, #0]
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 fb96 	bl	8010148 <USBD_CtlError>
                  break;
 800fa1c:	e054      	b.n	800fac8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa1e:	7bbb      	ldrb	r3, [r7, #14]
 800fa20:	f003 020f 	and.w	r2, r3, #15
 800fa24:	6879      	ldr	r1, [r7, #4]
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	440b      	add	r3, r1
 800fa30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d104      	bne.n	800fa44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fb83 	bl	8010148 <USBD_CtlError>
                  break;
 800fa42:	e041      	b.n	800fac8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	da0b      	bge.n	800fa64 <USBD_StdEPReq+0x23e>
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa52:	4613      	mov	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	3310      	adds	r3, #16
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	4413      	add	r3, r2
 800fa60:	3304      	adds	r3, #4
 800fa62:	e00b      	b.n	800fa7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa64:	7bbb      	ldrb	r3, [r7, #14]
 800fa66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	4413      	add	r3, r2
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa7e:	7bbb      	ldrb	r3, [r7, #14]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <USBD_StdEPReq+0x264>
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	2b80      	cmp	r3, #128	; 0x80
 800fa88:	d103      	bne.n	800fa92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	e00e      	b.n	800fab0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f001 f852 	bl	8010b40 <USBD_LL_IsStallEP>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	2201      	movs	r2, #1
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	e002      	b.n	800fab0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	2202      	movs	r2, #2
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 fbb7 	bl	801022a <USBD_CtlSendData>
              break;
 800fabc:	e004      	b.n	800fac8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 fb41 	bl	8010148 <USBD_CtlError>
              break;
 800fac6:	bf00      	nop
          }
          break;
 800fac8:	e004      	b.n	800fad4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fb3b 	bl	8010148 <USBD_CtlError>
          break;
 800fad2:	bf00      	nop
      }
      break;
 800fad4:	e004      	b.n	800fae0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fb35 	bl	8010148 <USBD_CtlError>
      break;
 800fade:	bf00      	nop
  }

  return ret;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
	...

0800faec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800faf6:	2300      	movs	r3, #0
 800faf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fafe:	2300      	movs	r3, #0
 800fb00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	885b      	ldrh	r3, [r3, #2]
 800fb06:	0a1b      	lsrs	r3, r3, #8
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	2b06      	cmp	r3, #6
 800fb0e:	f200 8128 	bhi.w	800fd62 <USBD_GetDescriptor+0x276>
 800fb12:	a201      	add	r2, pc, #4	; (adr r2, 800fb18 <USBD_GetDescriptor+0x2c>)
 800fb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb18:	0800fb35 	.word	0x0800fb35
 800fb1c:	0800fb4d 	.word	0x0800fb4d
 800fb20:	0800fb8d 	.word	0x0800fb8d
 800fb24:	0800fd63 	.word	0x0800fd63
 800fb28:	0800fd63 	.word	0x0800fd63
 800fb2c:	0800fd03 	.word	0x0800fd03
 800fb30:	0800fd2f 	.word	0x0800fd2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	7c12      	ldrb	r2, [r2, #16]
 800fb40:	f107 0108 	add.w	r1, r7, #8
 800fb44:	4610      	mov	r0, r2
 800fb46:	4798      	blx	r3
 800fb48:	60f8      	str	r0, [r7, #12]
      break;
 800fb4a:	e112      	b.n	800fd72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	7c1b      	ldrb	r3, [r3, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10d      	bne.n	800fb70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb5c:	f107 0208 	add.w	r2, r7, #8
 800fb60:	4610      	mov	r0, r2
 800fb62:	4798      	blx	r3
 800fb64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	2202      	movs	r2, #2
 800fb6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb6e:	e100      	b.n	800fd72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb78:	f107 0208 	add.w	r2, r7, #8
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	4798      	blx	r3
 800fb80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3301      	adds	r3, #1
 800fb86:	2202      	movs	r2, #2
 800fb88:	701a      	strb	r2, [r3, #0]
      break;
 800fb8a:	e0f2      	b.n	800fd72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	885b      	ldrh	r3, [r3, #2]
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	2b05      	cmp	r3, #5
 800fb94:	f200 80ac 	bhi.w	800fcf0 <USBD_GetDescriptor+0x204>
 800fb98:	a201      	add	r2, pc, #4	; (adr r2, 800fba0 <USBD_GetDescriptor+0xb4>)
 800fb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9e:	bf00      	nop
 800fba0:	0800fbb9 	.word	0x0800fbb9
 800fba4:	0800fbed 	.word	0x0800fbed
 800fba8:	0800fc21 	.word	0x0800fc21
 800fbac:	0800fc55 	.word	0x0800fc55
 800fbb0:	0800fc89 	.word	0x0800fc89
 800fbb4:	0800fcbd 	.word	0x0800fcbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00b      	beq.n	800fbdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	7c12      	ldrb	r2, [r2, #16]
 800fbd0:	f107 0108 	add.w	r1, r7, #8
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	4798      	blx	r3
 800fbd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbda:	e091      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fab2 	bl	8010148 <USBD_CtlError>
            err++;
 800fbe4:	7afb      	ldrb	r3, [r7, #11]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	72fb      	strb	r3, [r7, #11]
          break;
 800fbea:	e089      	b.n	800fd00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbf2:	689b      	ldr	r3, [r3, #8]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbfe:	689b      	ldr	r3, [r3, #8]
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	7c12      	ldrb	r2, [r2, #16]
 800fc04:	f107 0108 	add.w	r1, r7, #8
 800fc08:	4610      	mov	r0, r2
 800fc0a:	4798      	blx	r3
 800fc0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc0e:	e077      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc10:	6839      	ldr	r1, [r7, #0]
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 fa98 	bl	8010148 <USBD_CtlError>
            err++;
 800fc18:	7afb      	ldrb	r3, [r7, #11]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc1e:	e06f      	b.n	800fd00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00b      	beq.n	800fc44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	7c12      	ldrb	r2, [r2, #16]
 800fc38:	f107 0108 	add.w	r1, r7, #8
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	4798      	blx	r3
 800fc40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc42:	e05d      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc44:	6839      	ldr	r1, [r7, #0]
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fa7e 	bl	8010148 <USBD_CtlError>
            err++;
 800fc4c:	7afb      	ldrb	r3, [r7, #11]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	72fb      	strb	r3, [r7, #11]
          break;
 800fc52:	e055      	b.n	800fd00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00b      	beq.n	800fc78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc66:	691b      	ldr	r3, [r3, #16]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	7c12      	ldrb	r2, [r2, #16]
 800fc6c:	f107 0108 	add.w	r1, r7, #8
 800fc70:	4610      	mov	r0, r2
 800fc72:	4798      	blx	r3
 800fc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc76:	e043      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fc78:	6839      	ldr	r1, [r7, #0]
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 fa64 	bl	8010148 <USBD_CtlError>
            err++;
 800fc80:	7afb      	ldrb	r3, [r7, #11]
 800fc82:	3301      	adds	r3, #1
 800fc84:	72fb      	strb	r3, [r7, #11]
          break;
 800fc86:	e03b      	b.n	800fd00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc8e:	695b      	ldr	r3, [r3, #20]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00b      	beq.n	800fcac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc9a:	695b      	ldr	r3, [r3, #20]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	7c12      	ldrb	r2, [r2, #16]
 800fca0:	f107 0108 	add.w	r1, r7, #8
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
 800fca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcaa:	e029      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 fa4a 	bl	8010148 <USBD_CtlError>
            err++;
 800fcb4:	7afb      	ldrb	r3, [r7, #11]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	72fb      	strb	r3, [r7, #11]
          break;
 800fcba:	e021      	b.n	800fd00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcc2:	699b      	ldr	r3, [r3, #24]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00b      	beq.n	800fce0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	7c12      	ldrb	r2, [r2, #16]
 800fcd4:	f107 0108 	add.w	r1, r7, #8
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
 800fcdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcde:	e00f      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fa30 	bl	8010148 <USBD_CtlError>
            err++;
 800fce8:	7afb      	ldrb	r3, [r7, #11]
 800fcea:	3301      	adds	r3, #1
 800fcec:	72fb      	strb	r3, [r7, #11]
          break;
 800fcee:	e007      	b.n	800fd00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fcf0:	6839      	ldr	r1, [r7, #0]
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fa28 	bl	8010148 <USBD_CtlError>
          err++;
 800fcf8:	7afb      	ldrb	r3, [r7, #11]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fcfe:	bf00      	nop
      }
      break;
 800fd00:	e037      	b.n	800fd72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7c1b      	ldrb	r3, [r3, #16]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d109      	bne.n	800fd1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd12:	f107 0208 	add.w	r2, r7, #8
 800fd16:	4610      	mov	r0, r2
 800fd18:	4798      	blx	r3
 800fd1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd1c:	e029      	b.n	800fd72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fa11 	bl	8010148 <USBD_CtlError>
        err++;
 800fd26:	7afb      	ldrb	r3, [r7, #11]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	72fb      	strb	r3, [r7, #11]
      break;
 800fd2c:	e021      	b.n	800fd72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	7c1b      	ldrb	r3, [r3, #16]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d10d      	bne.n	800fd52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd3e:	f107 0208 	add.w	r2, r7, #8
 800fd42:	4610      	mov	r0, r2
 800fd44:	4798      	blx	r3
 800fd46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	2207      	movs	r2, #7
 800fd4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd50:	e00f      	b.n	800fd72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fd52:	6839      	ldr	r1, [r7, #0]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 f9f7 	bl	8010148 <USBD_CtlError>
        err++;
 800fd5a:	7afb      	ldrb	r3, [r7, #11]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd60:	e007      	b.n	800fd72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fd62:	6839      	ldr	r1, [r7, #0]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 f9ef 	bl	8010148 <USBD_CtlError>
      err++;
 800fd6a:	7afb      	ldrb	r3, [r7, #11]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd70:	bf00      	nop
  }

  if (err != 0U)
 800fd72:	7afb      	ldrb	r3, [r7, #11]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d11e      	bne.n	800fdb6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	88db      	ldrh	r3, [r3, #6]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d016      	beq.n	800fdae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fd80:	893b      	ldrh	r3, [r7, #8]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00e      	beq.n	800fda4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	88da      	ldrh	r2, [r3, #6]
 800fd8a:	893b      	ldrh	r3, [r7, #8]
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	bf28      	it	cs
 800fd90:	4613      	movcs	r3, r2
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd96:	893b      	ldrh	r3, [r7, #8]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	68f9      	ldr	r1, [r7, #12]
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa44 	bl	801022a <USBD_CtlSendData>
 800fda2:	e009      	b.n	800fdb8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 f9ce 	bl	8010148 <USBD_CtlError>
 800fdac:	e004      	b.n	800fdb8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fa95 	bl	80102de <USBD_CtlSendStatus>
 800fdb4:	e000      	b.n	800fdb8 <USBD_GetDescriptor+0x2cc>
    return;
 800fdb6:	bf00      	nop
  }
}
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop

0800fdc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	889b      	ldrh	r3, [r3, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d131      	bne.n	800fe36 <USBD_SetAddress+0x76>
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	88db      	ldrh	r3, [r3, #6]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d12d      	bne.n	800fe36 <USBD_SetAddress+0x76>
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	885b      	ldrh	r3, [r3, #2]
 800fdde:	2b7f      	cmp	r3, #127	; 0x7f
 800fde0:	d829      	bhi.n	800fe36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	885b      	ldrh	r3, [r3, #2]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b03      	cmp	r3, #3
 800fdf8:	d104      	bne.n	800fe04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 f9a3 	bl	8010148 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe02:	e01d      	b.n	800fe40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	7bfa      	ldrb	r2, [r7, #15]
 800fe08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	4619      	mov	r1, r3
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 fec1 	bl	8010b98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fa61 	bl	80102de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe1c:	7bfb      	ldrb	r3, [r7, #15]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d004      	beq.n	800fe2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2202      	movs	r2, #2
 800fe26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe2a:	e009      	b.n	800fe40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe34:	e004      	b.n	800fe40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe36:	6839      	ldr	r1, [r7, #0]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f985 	bl	8010148 <USBD_CtlError>
  }
}
 800fe3e:	bf00      	nop
 800fe40:	bf00      	nop
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	885b      	ldrh	r3, [r3, #2]
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	4b4c      	ldr	r3, [pc, #304]	; (800ff90 <USBD_SetConfig+0x148>)
 800fe5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe60:	4b4b      	ldr	r3, [pc, #300]	; (800ff90 <USBD_SetConfig+0x148>)
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d905      	bls.n	800fe74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe68:	6839      	ldr	r1, [r7, #0]
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 f96c 	bl	8010148 <USBD_CtlError>
    return USBD_FAIL;
 800fe70:	2303      	movs	r3, #3
 800fe72:	e088      	b.n	800ff86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d002      	beq.n	800fe86 <USBD_SetConfig+0x3e>
 800fe80:	2b03      	cmp	r3, #3
 800fe82:	d025      	beq.n	800fed0 <USBD_SetConfig+0x88>
 800fe84:	e071      	b.n	800ff6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe86:	4b42      	ldr	r3, [pc, #264]	; (800ff90 <USBD_SetConfig+0x148>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d01c      	beq.n	800fec8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fe8e:	4b40      	ldr	r3, [pc, #256]	; (800ff90 <USBD_SetConfig+0x148>)
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe98:	4b3d      	ldr	r3, [pc, #244]	; (800ff90 <USBD_SetConfig+0x148>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff f948 	bl	800f134 <USBD_SetClassConfig>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d004      	beq.n	800feb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f949 	bl	8010148 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800feb6:	e065      	b.n	800ff84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 fa10 	bl	80102de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2203      	movs	r2, #3
 800fec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fec6:	e05d      	b.n	800ff84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fa08 	bl	80102de <USBD_CtlSendStatus>
      break;
 800fece:	e059      	b.n	800ff84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fed0:	4b2f      	ldr	r3, [pc, #188]	; (800ff90 <USBD_SetConfig+0x148>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d112      	bne.n	800fefe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2202      	movs	r2, #2
 800fedc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fee0:	4b2b      	ldr	r3, [pc, #172]	; (800ff90 <USBD_SetConfig+0x148>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800feea:	4b29      	ldr	r3, [pc, #164]	; (800ff90 <USBD_SetConfig+0x148>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	4619      	mov	r1, r3
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f7ff f93b 	bl	800f16c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 f9f1 	bl	80102de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fefc:	e042      	b.n	800ff84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fefe:	4b24      	ldr	r3, [pc, #144]	; (800ff90 <USBD_SetConfig+0x148>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d02a      	beq.n	800ff62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	4619      	mov	r1, r3
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff f929 	bl	800f16c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff1a:	4b1d      	ldr	r3, [pc, #116]	; (800ff90 <USBD_SetConfig+0x148>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff24:	4b1a      	ldr	r3, [pc, #104]	; (800ff90 <USBD_SetConfig+0x148>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff f902 	bl	800f134 <USBD_SetClassConfig>
 800ff30:	4603      	mov	r3, r0
 800ff32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00f      	beq.n	800ff5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ff3a:	6839      	ldr	r1, [r7, #0]
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f903 	bl	8010148 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7ff f90e 	bl	800f16c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2202      	movs	r2, #2
 800ff54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ff58:	e014      	b.n	800ff84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f9bf 	bl	80102de <USBD_CtlSendStatus>
      break;
 800ff60:	e010      	b.n	800ff84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f9bb 	bl	80102de <USBD_CtlSendStatus>
      break;
 800ff68:	e00c      	b.n	800ff84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ff6a:	6839      	ldr	r1, [r7, #0]
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 f8eb 	bl	8010148 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff72:	4b07      	ldr	r3, [pc, #28]	; (800ff90 <USBD_SetConfig+0x148>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff f8f7 	bl	800f16c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff7e:	2303      	movs	r3, #3
 800ff80:	73fb      	strb	r3, [r7, #15]
      break;
 800ff82:	bf00      	nop
  }

  return ret;
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	240001b4 	.word	0x240001b4

0800ff94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	88db      	ldrh	r3, [r3, #6]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d004      	beq.n	800ffb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 f8cd 	bl	8010148 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ffae:	e023      	b.n	800fff8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	dc02      	bgt.n	800ffc2 <USBD_GetConfig+0x2e>
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	dc03      	bgt.n	800ffc8 <USBD_GetConfig+0x34>
 800ffc0:	e015      	b.n	800ffee <USBD_GetConfig+0x5a>
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d00b      	beq.n	800ffde <USBD_GetConfig+0x4a>
 800ffc6:	e012      	b.n	800ffee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	3308      	adds	r3, #8
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 f927 	bl	801022a <USBD_CtlSendData>
        break;
 800ffdc:	e00c      	b.n	800fff8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f91f 	bl	801022a <USBD_CtlSendData>
        break;
 800ffec:	e004      	b.n	800fff8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f8a9 	bl	8010148 <USBD_CtlError>
        break;
 800fff6:	bf00      	nop
}
 800fff8:	bf00      	nop
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010010:	b2db      	uxtb	r3, r3
 8010012:	3b01      	subs	r3, #1
 8010014:	2b02      	cmp	r3, #2
 8010016:	d81e      	bhi.n	8010056 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	88db      	ldrh	r3, [r3, #6]
 801001c:	2b02      	cmp	r3, #2
 801001e:	d004      	beq.n	801002a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f890 	bl	8010148 <USBD_CtlError>
        break;
 8010028:	e01a      	b.n	8010060 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2201      	movs	r2, #1
 801002e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010036:	2b00      	cmp	r3, #0
 8010038:	d005      	beq.n	8010046 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	f043 0202 	orr.w	r2, r3, #2
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	330c      	adds	r3, #12
 801004a:	2202      	movs	r2, #2
 801004c:	4619      	mov	r1, r3
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 f8eb 	bl	801022a <USBD_CtlSendData>
      break;
 8010054:	e004      	b.n	8010060 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f875 	bl	8010148 <USBD_CtlError>
      break;
 801005e:	bf00      	nop
  }
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b082      	sub	sp, #8
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	885b      	ldrh	r3, [r3, #2]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d106      	bne.n	8010088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 f92b 	bl	80102de <USBD_CtlSendStatus>
  }
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	3b01      	subs	r3, #1
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d80b      	bhi.n	80100c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	885b      	ldrh	r3, [r3, #2]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d10c      	bne.n	80100ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f910 	bl	80102de <USBD_CtlSendStatus>
      }
      break;
 80100be:	e004      	b.n	80100ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 f840 	bl	8010148 <USBD_CtlError>
      break;
 80100c8:	e000      	b.n	80100cc <USBD_ClrFeature+0x3c>
      break;
 80100ca:	bf00      	nop
  }
}
 80100cc:	bf00      	nop
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	781a      	ldrb	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	3301      	adds	r3, #1
 80100ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	781a      	ldrb	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3301      	adds	r3, #1
 80100fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100fe:	68f8      	ldr	r0, [r7, #12]
 8010100:	f7ff fabb 	bl	800f67a <SWAPBYTE>
 8010104:	4603      	mov	r3, r0
 8010106:	461a      	mov	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3301      	adds	r3, #1
 8010110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3301      	adds	r3, #1
 8010116:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010118:	68f8      	ldr	r0, [r7, #12]
 801011a:	f7ff faae 	bl	800f67a <SWAPBYTE>
 801011e:	4603      	mov	r3, r0
 8010120:	461a      	mov	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3301      	adds	r3, #1
 801012a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	3301      	adds	r3, #1
 8010130:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f7ff faa1 	bl	800f67a <SWAPBYTE>
 8010138:	4603      	mov	r3, r0
 801013a:	461a      	mov	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	80da      	strh	r2, [r3, #6]
}
 8010140:	bf00      	nop
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010152:	2180      	movs	r1, #128	; 0x80
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fcb5 	bl	8010ac4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801015a:	2100      	movs	r1, #0
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fcb1 	bl	8010ac4 <USBD_LL_StallEP>
}
 8010162:	bf00      	nop
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b086      	sub	sp, #24
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010176:	2300      	movs	r3, #0
 8010178:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d036      	beq.n	80101ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010184:	6938      	ldr	r0, [r7, #16]
 8010186:	f000 f836 	bl	80101f6 <USBD_GetLen>
 801018a:	4603      	mov	r3, r0
 801018c:	3301      	adds	r3, #1
 801018e:	b29b      	uxth	r3, r3
 8010190:	005b      	lsls	r3, r3, #1
 8010192:	b29a      	uxth	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010198:	7dfb      	ldrb	r3, [r7, #23]
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	4413      	add	r3, r2
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	7812      	ldrb	r2, [r2, #0]
 80101a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80101a4:	7dfb      	ldrb	r3, [r7, #23]
 80101a6:	3301      	adds	r3, #1
 80101a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80101aa:	7dfb      	ldrb	r3, [r7, #23]
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	4413      	add	r3, r2
 80101b0:	2203      	movs	r2, #3
 80101b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80101b4:	7dfb      	ldrb	r3, [r7, #23]
 80101b6:	3301      	adds	r3, #1
 80101b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80101ba:	e013      	b.n	80101e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80101bc:	7dfb      	ldrb	r3, [r7, #23]
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	4413      	add	r3, r2
 80101c2:	693a      	ldr	r2, [r7, #16]
 80101c4:	7812      	ldrb	r2, [r2, #0]
 80101c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	3301      	adds	r3, #1
 80101cc:	613b      	str	r3, [r7, #16]
    idx++;
 80101ce:	7dfb      	ldrb	r3, [r7, #23]
 80101d0:	3301      	adds	r3, #1
 80101d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	4413      	add	r3, r2
 80101da:	2200      	movs	r2, #0
 80101dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	3301      	adds	r3, #1
 80101e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1e7      	bne.n	80101bc <USBD_GetString+0x52>
 80101ec:	e000      	b.n	80101f0 <USBD_GetString+0x86>
    return;
 80101ee:	bf00      	nop
  }
}
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101f6:	b480      	push	{r7}
 80101f8:	b085      	sub	sp, #20
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101fe:	2300      	movs	r3, #0
 8010200:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010206:	e005      	b.n	8010214 <USBD_GetLen+0x1e>
  {
    len++;
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	3301      	adds	r3, #1
 801020c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	3301      	adds	r3, #1
 8010212:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1f5      	bne.n	8010208 <USBD_GetLen+0x12>
  }

  return len;
 801021c:	7bfb      	ldrb	r3, [r7, #15]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3714      	adds	r7, #20
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	60f8      	str	r0, [r7, #12]
 8010232:	60b9      	str	r1, [r7, #8]
 8010234:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2202      	movs	r2, #2
 801023a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	2100      	movs	r1, #0
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 fcc0 	bl	8010bd6 <USBD_LL_Transmit>

  return USBD_OK;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	2100      	movs	r1, #0
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f000 fcaf 	bl	8010bd6 <USBD_LL_Transmit>

  return USBD_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b084      	sub	sp, #16
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	60b9      	str	r1, [r7, #8]
 801028c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2203      	movs	r2, #3
 8010292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	2100      	movs	r1, #0
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f000 fcb3 	bl	8010c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102b2:	2300      	movs	r3, #0
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68ba      	ldr	r2, [r7, #8]
 80102cc:	2100      	movs	r1, #0
 80102ce:	68f8      	ldr	r0, [r7, #12]
 80102d0:	f000 fca2 	bl	8010c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102d4:	2300      	movs	r3, #0
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2204      	movs	r2, #4
 80102ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102ee:	2300      	movs	r3, #0
 80102f0:	2200      	movs	r2, #0
 80102f2:	2100      	movs	r1, #0
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f000 fc6e 	bl	8010bd6 <USBD_LL_Transmit>

  return USBD_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2205      	movs	r2, #5
 8010310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010314:	2300      	movs	r3, #0
 8010316:	2200      	movs	r2, #0
 8010318:	2100      	movs	r1, #0
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 fc7c 	bl	8010c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
	...

0801032c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010330:	2201      	movs	r2, #1
 8010332:	4913      	ldr	r1, [pc, #76]	; (8010380 <MX_USB_DEVICE_Init+0x54>)
 8010334:	4813      	ldr	r0, [pc, #76]	; (8010384 <MX_USB_DEVICE_Init+0x58>)
 8010336:	f7fe fe8f 	bl	800f058 <USBD_Init>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d001      	beq.n	8010344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010340:	f7f1 fca8 	bl	8001c94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8010344:	4910      	ldr	r1, [pc, #64]	; (8010388 <MX_USB_DEVICE_Init+0x5c>)
 8010346:	480f      	ldr	r0, [pc, #60]	; (8010384 <MX_USB_DEVICE_Init+0x58>)
 8010348:	f7fe feb6 	bl	800f0b8 <USBD_RegisterClass>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d001      	beq.n	8010356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010352:	f7f1 fc9f 	bl	8001c94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8010356:	490d      	ldr	r1, [pc, #52]	; (801038c <MX_USB_DEVICE_Init+0x60>)
 8010358:	480a      	ldr	r0, [pc, #40]	; (8010384 <MX_USB_DEVICE_Init+0x58>)
 801035a:	f7fe fe07 	bl	800ef6c <USBD_CDC_RegisterInterface>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010364:	f7f1 fc96 	bl	8001c94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010368:	4806      	ldr	r0, [pc, #24]	; (8010384 <MX_USB_DEVICE_Init+0x58>)
 801036a:	f7fe fecc 	bl	800f106 <USBD_Start>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010374:	f7f1 fc8e 	bl	8001c94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010378:	f7f7 fcb6 	bl	8007ce8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801037c:	bf00      	nop
 801037e:	bd80      	pop	{r7, pc}
 8010380:	24000148 	.word	0x24000148
 8010384:	24000bb4 	.word	0x24000bb4
 8010388:	24000030 	.word	0x24000030
 801038c:	24000134 	.word	0x24000134

08010390 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8010394:	2200      	movs	r2, #0
 8010396:	4905      	ldr	r1, [pc, #20]	; (80103ac <CDC_Init_HS+0x1c>)
 8010398:	4805      	ldr	r0, [pc, #20]	; (80103b0 <CDC_Init_HS+0x20>)
 801039a:	f7fe fdfc 	bl	800ef96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801039e:	4905      	ldr	r1, [pc, #20]	; (80103b4 <CDC_Init_HS+0x24>)
 80103a0:	4803      	ldr	r0, [pc, #12]	; (80103b0 <CDC_Init_HS+0x20>)
 80103a2:	f7fe fe16 	bl	800efd2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80103a6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	24001684 	.word	0x24001684
 80103b0:	24000bb4 	.word	0x24000bb4
 80103b4:	24000e84 	.word	0x24000e84

080103b8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80103b8:	b480      	push	{r7}
 80103ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80103bc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80103be:	4618      	mov	r0, r3
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	4603      	mov	r3, r0
 80103d0:	6039      	str	r1, [r7, #0]
 80103d2:	71fb      	strb	r3, [r7, #7]
 80103d4:	4613      	mov	r3, r2
 80103d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80103d8:	79fb      	ldrb	r3, [r7, #7]
 80103da:	2b23      	cmp	r3, #35	; 0x23
 80103dc:	d84a      	bhi.n	8010474 <CDC_Control_HS+0xac>
 80103de:	a201      	add	r2, pc, #4	; (adr r2, 80103e4 <CDC_Control_HS+0x1c>)
 80103e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e4:	08010475 	.word	0x08010475
 80103e8:	08010475 	.word	0x08010475
 80103ec:	08010475 	.word	0x08010475
 80103f0:	08010475 	.word	0x08010475
 80103f4:	08010475 	.word	0x08010475
 80103f8:	08010475 	.word	0x08010475
 80103fc:	08010475 	.word	0x08010475
 8010400:	08010475 	.word	0x08010475
 8010404:	08010475 	.word	0x08010475
 8010408:	08010475 	.word	0x08010475
 801040c:	08010475 	.word	0x08010475
 8010410:	08010475 	.word	0x08010475
 8010414:	08010475 	.word	0x08010475
 8010418:	08010475 	.word	0x08010475
 801041c:	08010475 	.word	0x08010475
 8010420:	08010475 	.word	0x08010475
 8010424:	08010475 	.word	0x08010475
 8010428:	08010475 	.word	0x08010475
 801042c:	08010475 	.word	0x08010475
 8010430:	08010475 	.word	0x08010475
 8010434:	08010475 	.word	0x08010475
 8010438:	08010475 	.word	0x08010475
 801043c:	08010475 	.word	0x08010475
 8010440:	08010475 	.word	0x08010475
 8010444:	08010475 	.word	0x08010475
 8010448:	08010475 	.word	0x08010475
 801044c:	08010475 	.word	0x08010475
 8010450:	08010475 	.word	0x08010475
 8010454:	08010475 	.word	0x08010475
 8010458:	08010475 	.word	0x08010475
 801045c:	08010475 	.word	0x08010475
 8010460:	08010475 	.word	0x08010475
 8010464:	08010475 	.word	0x08010475
 8010468:	08010475 	.word	0x08010475
 801046c:	08010475 	.word	0x08010475
 8010470:	08010475 	.word	0x08010475
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010474:	bf00      	nop
  }

  return (USBD_OK);
 8010476:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010478:	4618      	mov	r0, r3
 801047a:	370c      	adds	r7, #12
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	4805      	ldr	r0, [pc, #20]	; (80104a8 <CDC_Receive_HS+0x24>)
 8010492:	f7fe fd9e 	bl	800efd2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8010496:	4804      	ldr	r0, [pc, #16]	; (80104a8 <CDC_Receive_HS+0x24>)
 8010498:	f7fe fdb4 	bl	800f004 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801049c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	24000bb4 	.word	0x24000bb4

080104ac <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	4613      	mov	r3, r2
 80104b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80104ba:	2300      	movs	r3, #0
 80104bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80104be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	371c      	adds	r7, #28
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
	...

080104d0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	4603      	mov	r3, r0
 80104d8:	6039      	str	r1, [r7, #0]
 80104da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	2212      	movs	r2, #18
 80104e0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80104e2:	4b03      	ldr	r3, [pc, #12]	; (80104f0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	370c      	adds	r7, #12
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr
 80104f0:	24000164 	.word	0x24000164

080104f4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	4603      	mov	r3, r0
 80104fc:	6039      	str	r1, [r7, #0]
 80104fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2204      	movs	r2, #4
 8010504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010506:	4b03      	ldr	r3, [pc, #12]	; (8010514 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	24000178 	.word	0x24000178

08010518 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	4603      	mov	r3, r0
 8010520:	6039      	str	r1, [r7, #0]
 8010522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d105      	bne.n	8010536 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	4907      	ldr	r1, [pc, #28]	; (801054c <USBD_HS_ProductStrDescriptor+0x34>)
 801052e:	4808      	ldr	r0, [pc, #32]	; (8010550 <USBD_HS_ProductStrDescriptor+0x38>)
 8010530:	f7ff fe1b 	bl	801016a <USBD_GetString>
 8010534:	e004      	b.n	8010540 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010536:	683a      	ldr	r2, [r7, #0]
 8010538:	4904      	ldr	r1, [pc, #16]	; (801054c <USBD_HS_ProductStrDescriptor+0x34>)
 801053a:	4805      	ldr	r0, [pc, #20]	; (8010550 <USBD_HS_ProductStrDescriptor+0x38>)
 801053c:	f7ff fe15 	bl	801016a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010540:	4b02      	ldr	r3, [pc, #8]	; (801054c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	24001e84 	.word	0x24001e84
 8010550:	080119c8 	.word	0x080119c8

08010554 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	6039      	str	r1, [r7, #0]
 801055e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010560:	683a      	ldr	r2, [r7, #0]
 8010562:	4904      	ldr	r1, [pc, #16]	; (8010574 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010564:	4804      	ldr	r0, [pc, #16]	; (8010578 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010566:	f7ff fe00 	bl	801016a <USBD_GetString>
  return USBD_StrDesc;
 801056a:	4b02      	ldr	r3, [pc, #8]	; (8010574 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801056c:	4618      	mov	r0, r3
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	24001e84 	.word	0x24001e84
 8010578:	080119e0 	.word	0x080119e0

0801057c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	4603      	mov	r3, r0
 8010584:	6039      	str	r1, [r7, #0]
 8010586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	221a      	movs	r2, #26
 801058c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801058e:	f000 f843 	bl	8010618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010592:	4b02      	ldr	r3, [pc, #8]	; (801059c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	2400017c 	.word	0x2400017c

080105a0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	4603      	mov	r3, r0
 80105a8:	6039      	str	r1, [r7, #0]
 80105aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80105ac:	79fb      	ldrb	r3, [r7, #7]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d105      	bne.n	80105be <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	4907      	ldr	r1, [pc, #28]	; (80105d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80105b6:	4808      	ldr	r0, [pc, #32]	; (80105d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80105b8:	f7ff fdd7 	bl	801016a <USBD_GetString>
 80105bc:	e004      	b.n	80105c8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80105be:	683a      	ldr	r2, [r7, #0]
 80105c0:	4904      	ldr	r1, [pc, #16]	; (80105d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80105c2:	4805      	ldr	r0, [pc, #20]	; (80105d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80105c4:	f7ff fdd1 	bl	801016a <USBD_GetString>
  }
  return USBD_StrDesc;
 80105c8:	4b02      	ldr	r3, [pc, #8]	; (80105d4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	24001e84 	.word	0x24001e84
 80105d8:	080119f4 	.word	0x080119f4

080105dc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d105      	bne.n	80105fa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	4907      	ldr	r1, [pc, #28]	; (8010610 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80105f2:	4808      	ldr	r0, [pc, #32]	; (8010614 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80105f4:	f7ff fdb9 	bl	801016a <USBD_GetString>
 80105f8:	e004      	b.n	8010604 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	4904      	ldr	r1, [pc, #16]	; (8010610 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80105fe:	4805      	ldr	r0, [pc, #20]	; (8010614 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010600:	f7ff fdb3 	bl	801016a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010604:	4b02      	ldr	r3, [pc, #8]	; (8010610 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	24001e84 	.word	0x24001e84
 8010614:	08011a00 	.word	0x08011a00

08010618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801061e:	4b0f      	ldr	r3, [pc, #60]	; (801065c <Get_SerialNum+0x44>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010624:	4b0e      	ldr	r3, [pc, #56]	; (8010660 <Get_SerialNum+0x48>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801062a:	4b0e      	ldr	r3, [pc, #56]	; (8010664 <Get_SerialNum+0x4c>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4413      	add	r3, r2
 8010636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d009      	beq.n	8010652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801063e:	2208      	movs	r2, #8
 8010640:	4909      	ldr	r1, [pc, #36]	; (8010668 <Get_SerialNum+0x50>)
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f000 f814 	bl	8010670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010648:	2204      	movs	r2, #4
 801064a:	4908      	ldr	r1, [pc, #32]	; (801066c <Get_SerialNum+0x54>)
 801064c:	68b8      	ldr	r0, [r7, #8]
 801064e:	f000 f80f 	bl	8010670 <IntToUnicode>
  }
}
 8010652:	bf00      	nop
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	1ff1e800 	.word	0x1ff1e800
 8010660:	1ff1e804 	.word	0x1ff1e804
 8010664:	1ff1e808 	.word	0x1ff1e808
 8010668:	2400017e 	.word	0x2400017e
 801066c:	2400018e 	.word	0x2400018e

08010670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	4613      	mov	r3, r2
 801067c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801067e:	2300      	movs	r3, #0
 8010680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010682:	2300      	movs	r3, #0
 8010684:	75fb      	strb	r3, [r7, #23]
 8010686:	e027      	b.n	80106d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	0f1b      	lsrs	r3, r3, #28
 801068c:	2b09      	cmp	r3, #9
 801068e:	d80b      	bhi.n	80106a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	0f1b      	lsrs	r3, r3, #28
 8010694:	b2da      	uxtb	r2, r3
 8010696:	7dfb      	ldrb	r3, [r7, #23]
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	4619      	mov	r1, r3
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	440b      	add	r3, r1
 80106a0:	3230      	adds	r2, #48	; 0x30
 80106a2:	b2d2      	uxtb	r2, r2
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	e00a      	b.n	80106be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	0f1b      	lsrs	r3, r3, #28
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	7dfb      	ldrb	r3, [r7, #23]
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4619      	mov	r1, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	440b      	add	r3, r1
 80106b8:	3237      	adds	r2, #55	; 0x37
 80106ba:	b2d2      	uxtb	r2, r2
 80106bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	011b      	lsls	r3, r3, #4
 80106c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	3301      	adds	r3, #1
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	4413      	add	r3, r2
 80106ce:	2200      	movs	r2, #0
 80106d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80106d2:	7dfb      	ldrb	r3, [r7, #23]
 80106d4:	3301      	adds	r3, #1
 80106d6:	75fb      	strb	r3, [r7, #23]
 80106d8:	7dfa      	ldrb	r2, [r7, #23]
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d3d3      	bcc.n	8010688 <IntToUnicode+0x18>
  }
}
 80106e0:	bf00      	nop
 80106e2:	bf00      	nop
 80106e4:	371c      	adds	r7, #28
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
	...

080106f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b0b0      	sub	sp, #192	; 0xc0
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80106f8:	f107 030c 	add.w	r3, r7, #12
 80106fc:	22b4      	movs	r2, #180	; 0xb4
 80106fe:	2100      	movs	r1, #0
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fb25 	bl	8010d50 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a18      	ldr	r2, [pc, #96]	; (801076c <HAL_PCD_MspInit+0x7c>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d129      	bne.n	8010764 <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010714:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010716:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801071a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801071e:	f107 030c 	add.w	r3, r7, #12
 8010722:	4618      	mov	r0, r3
 8010724:	f7f8 fa28 	bl	8008b78 <HAL_RCCEx_PeriphCLKConfig>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d001      	beq.n	8010732 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 801072e:	f7f1 fab1 	bl	8001c94 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010732:	f7f7 fad9 	bl	8007ce8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010736:	4b0e      	ldr	r3, [pc, #56]	; (8010770 <HAL_PCD_MspInit+0x80>)
 8010738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801073c:	4a0c      	ldr	r2, [pc, #48]	; (8010770 <HAL_PCD_MspInit+0x80>)
 801073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010746:	4b0a      	ldr	r3, [pc, #40]	; (8010770 <HAL_PCD_MspInit+0x80>)
 8010748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010750:	60bb      	str	r3, [r7, #8]
 8010752:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010754:	2200      	movs	r2, #0
 8010756:	2100      	movs	r1, #0
 8010758:	204d      	movs	r0, #77	; 0x4d
 801075a:	f7f3 fff4 	bl	8004746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801075e:	204d      	movs	r0, #77	; 0x4d
 8010760:	f7f4 f80b 	bl	800477a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010764:	bf00      	nop
 8010766:	37c0      	adds	r7, #192	; 0xc0
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	40040000 	.word	0x40040000
 8010770:	58024400 	.word	0x58024400

08010774 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010788:	4619      	mov	r1, r3
 801078a:	4610      	mov	r0, r2
 801078c:	f7fe fd06 	bl	800f19c <USBD_LL_SetupStage>
}
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80107aa:	78fa      	ldrb	r2, [r7, #3]
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	4613      	mov	r3, r2
 80107b0:	00db      	lsls	r3, r3, #3
 80107b2:	1a9b      	subs	r3, r3, r2
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	440b      	add	r3, r1
 80107b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	78fb      	ldrb	r3, [r7, #3]
 80107c0:	4619      	mov	r1, r3
 80107c2:	f7fe fd40 	bl	800f246 <USBD_LL_DataOutStage>
}
 80107c6:	bf00      	nop
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b082      	sub	sp, #8
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
 80107d6:	460b      	mov	r3, r1
 80107d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80107e0:	78fa      	ldrb	r2, [r7, #3]
 80107e2:	6879      	ldr	r1, [r7, #4]
 80107e4:	4613      	mov	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	1a9b      	subs	r3, r3, r2
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	440b      	add	r3, r1
 80107ee:	3348      	adds	r3, #72	; 0x48
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	78fb      	ldrb	r3, [r7, #3]
 80107f4:	4619      	mov	r1, r3
 80107f6:	f7fe fd89 	bl	800f30c <USBD_LL_DataInStage>
}
 80107fa:	bf00      	nop
 80107fc:	3708      	adds	r7, #8
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010810:	4618      	mov	r0, r3
 8010812:	f7fe fe9d 	bl	800f550 <USBD_LL_SOF>
}
 8010816:	bf00      	nop
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b084      	sub	sp, #16
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010826:	2301      	movs	r3, #1
 8010828:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d102      	bne.n	8010838 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010832:	2300      	movs	r3, #0
 8010834:	73fb      	strb	r3, [r7, #15]
 8010836:	e008      	b.n	801084a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	2b02      	cmp	r3, #2
 801083e:	d102      	bne.n	8010846 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010840:	2301      	movs	r3, #1
 8010842:	73fb      	strb	r3, [r7, #15]
 8010844:	e001      	b.n	801084a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010846:	f7f1 fa25 	bl	8001c94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010850:	7bfa      	ldrb	r2, [r7, #15]
 8010852:	4611      	mov	r1, r2
 8010854:	4618      	mov	r0, r3
 8010856:	f7fe fe3d 	bl	800f4d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010860:	4618      	mov	r0, r3
 8010862:	f7fe fde9 	bl	800f438 <USBD_LL_Reset>
}
 8010866:	bf00      	nop
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
	...

08010870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801087e:	4618      	mov	r0, r3
 8010880:	f7fe fe38 	bl	800f4f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	6812      	ldr	r2, [r2, #0]
 8010892:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010896:	f043 0301 	orr.w	r3, r3, #1
 801089a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6a1b      	ldr	r3, [r3, #32]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d005      	beq.n	80108b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108a4:	4b04      	ldr	r3, [pc, #16]	; (80108b8 <HAL_PCD_SuspendCallback+0x48>)
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	4a03      	ldr	r2, [pc, #12]	; (80108b8 <HAL_PCD_SuspendCallback+0x48>)
 80108aa:	f043 0306 	orr.w	r3, r3, #6
 80108ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80108b0:	bf00      	nop
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	e000ed00 	.word	0xe000ed00

080108bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fe28 	bl	800f520 <USBD_LL_Resume>
}
 80108d0:	bf00      	nop
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	460b      	mov	r3, r1
 80108e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80108ea:	78fa      	ldrb	r2, [r7, #3]
 80108ec:	4611      	mov	r1, r2
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fe fe76 	bl	800f5e0 <USBD_LL_IsoOUTIncomplete>
}
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	460b      	mov	r3, r1
 8010906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801090e:	78fa      	ldrb	r2, [r7, #3]
 8010910:	4611      	mov	r1, r2
 8010912:	4618      	mov	r0, r3
 8010914:	f7fe fe3e 	bl	800f594 <USBD_LL_IsoINIncomplete>
}
 8010918:	bf00      	nop
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe fe7c 	bl	800f62c <USBD_LL_DevConnected>
}
 8010934:	bf00      	nop
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801094a:	4618      	mov	r0, r3
 801094c:	f7fe fe79 	bl	800f642 <USBD_LL_DevDisconnected>
}
 8010950:	bf00      	nop
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d143      	bne.n	80109f0 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010968:	4a24      	ldr	r2, [pc, #144]	; (80109fc <USBD_LL_Init+0xa4>)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4a22      	ldr	r2, [pc, #136]	; (80109fc <USBD_LL_Init+0xa4>)
 8010974:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010978:	4b20      	ldr	r3, [pc, #128]	; (80109fc <USBD_LL_Init+0xa4>)
 801097a:	4a21      	ldr	r2, [pc, #132]	; (8010a00 <USBD_LL_Init+0xa8>)
 801097c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801097e:	4b1f      	ldr	r3, [pc, #124]	; (80109fc <USBD_LL_Init+0xa4>)
 8010980:	2209      	movs	r2, #9
 8010982:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8010984:	4b1d      	ldr	r3, [pc, #116]	; (80109fc <USBD_LL_Init+0xa4>)
 8010986:	2202      	movs	r2, #2
 8010988:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801098a:	4b1c      	ldr	r3, [pc, #112]	; (80109fc <USBD_LL_Init+0xa4>)
 801098c:	2200      	movs	r2, #0
 801098e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010990:	4b1a      	ldr	r3, [pc, #104]	; (80109fc <USBD_LL_Init+0xa4>)
 8010992:	2202      	movs	r2, #2
 8010994:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010996:	4b19      	ldr	r3, [pc, #100]	; (80109fc <USBD_LL_Init+0xa4>)
 8010998:	2200      	movs	r2, #0
 801099a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801099c:	4b17      	ldr	r3, [pc, #92]	; (80109fc <USBD_LL_Init+0xa4>)
 801099e:	2200      	movs	r2, #0
 80109a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80109a2:	4b16      	ldr	r3, [pc, #88]	; (80109fc <USBD_LL_Init+0xa4>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 80109a8:	4b14      	ldr	r3, [pc, #80]	; (80109fc <USBD_LL_Init+0xa4>)
 80109aa:	2201      	movs	r2, #1
 80109ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80109ae:	4b13      	ldr	r3, [pc, #76]	; (80109fc <USBD_LL_Init+0xa4>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80109b4:	4b11      	ldr	r3, [pc, #68]	; (80109fc <USBD_LL_Init+0xa4>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80109ba:	4b10      	ldr	r3, [pc, #64]	; (80109fc <USBD_LL_Init+0xa4>)
 80109bc:	2200      	movs	r2, #0
 80109be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80109c0:	480e      	ldr	r0, [pc, #56]	; (80109fc <USBD_LL_Init+0xa4>)
 80109c2:	f7f5 ff88 	bl	80068d6 <HAL_PCD_Init>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d001      	beq.n	80109d0 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 80109cc:	f7f1 f962 	bl	8001c94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80109d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109d4:	4809      	ldr	r0, [pc, #36]	; (80109fc <USBD_LL_Init+0xa4>)
 80109d6:	f7f7 f90c 	bl	8007bf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80109da:	2280      	movs	r2, #128	; 0x80
 80109dc:	2100      	movs	r1, #0
 80109de:	4807      	ldr	r0, [pc, #28]	; (80109fc <USBD_LL_Init+0xa4>)
 80109e0:	f7f7 f8c0 	bl	8007b64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80109e4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80109e8:	2101      	movs	r1, #1
 80109ea:	4804      	ldr	r0, [pc, #16]	; (80109fc <USBD_LL_Init+0xa4>)
 80109ec:	f7f7 f8ba 	bl	8007b64 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3708      	adds	r7, #8
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	24002084 	.word	0x24002084
 8010a00:	40040000 	.word	0x40040000

08010a04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7f6 f87f 	bl	8006b1e <HAL_PCD_Start>
 8010a20:	4603      	mov	r3, r0
 8010a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f000 f942 	bl	8010cb0 <USBD_Get_USB_Status>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3710      	adds	r7, #16
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	4608      	mov	r0, r1
 8010a44:	4611      	mov	r1, r2
 8010a46:	461a      	mov	r2, r3
 8010a48:	4603      	mov	r3, r0
 8010a4a:	70fb      	strb	r3, [r7, #3]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	70bb      	strb	r3, [r7, #2]
 8010a50:	4613      	mov	r3, r2
 8010a52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a62:	78bb      	ldrb	r3, [r7, #2]
 8010a64:	883a      	ldrh	r2, [r7, #0]
 8010a66:	78f9      	ldrb	r1, [r7, #3]
 8010a68:	f7f6 fc84 	bl	8007374 <HAL_PCD_EP_Open>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a70:	7bfb      	ldrb	r3, [r7, #15]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f000 f91c 	bl	8010cb0 <USBD_Get_USB_Status>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3710      	adds	r7, #16
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b084      	sub	sp, #16
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	460b      	mov	r3, r1
 8010a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a92:	2300      	movs	r3, #0
 8010a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a96:	2300      	movs	r3, #0
 8010a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010aa0:	78fa      	ldrb	r2, [r7, #3]
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7f6 fccd 	bl	8007444 <HAL_PCD_EP_Close>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aae:	7bfb      	ldrb	r3, [r7, #15]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f000 f8fd 	bl	8010cb0 <USBD_Get_USB_Status>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	460b      	mov	r3, r1
 8010ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ade:	78fa      	ldrb	r2, [r7, #3]
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f6 fda5 	bl	8007632 <HAL_PCD_EP_SetStall>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010aec:	7bfb      	ldrb	r3, [r7, #15]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 f8de 	bl	8010cb0 <USBD_Get_USB_Status>
 8010af4:	4603      	mov	r3, r0
 8010af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b12:	2300      	movs	r3, #0
 8010b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b1c:	78fa      	ldrb	r2, [r7, #3]
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7f6 fdea 	bl	80076fa <HAL_PCD_EP_ClrStall>
 8010b26:	4603      	mov	r3, r0
 8010b28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b2a:	7bfb      	ldrb	r3, [r7, #15]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 f8bf 	bl	8010cb0 <USBD_Get_USB_Status>
 8010b32:	4603      	mov	r3, r0
 8010b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	460b      	mov	r3, r1
 8010b4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	da0b      	bge.n	8010b74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b5c:	78fb      	ldrb	r3, [r7, #3]
 8010b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b62:	68f9      	ldr	r1, [r7, #12]
 8010b64:	4613      	mov	r3, r2
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	1a9b      	subs	r3, r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	440b      	add	r3, r1
 8010b6e:	333e      	adds	r3, #62	; 0x3e
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	e00b      	b.n	8010b8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b74:	78fb      	ldrb	r3, [r7, #3]
 8010b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b7a:	68f9      	ldr	r1, [r7, #12]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	1a9b      	subs	r3, r3, r2
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	440b      	add	r3, r1
 8010b86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bb2:	78fa      	ldrb	r2, [r7, #3]
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7f6 fbb7 	bl	800732a <HAL_PCD_SetAddress>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f000 f874 	bl	8010cb0 <USBD_Get_USB_Status>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b086      	sub	sp, #24
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	60f8      	str	r0, [r7, #12]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
 8010be2:	460b      	mov	r3, r1
 8010be4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be6:	2300      	movs	r3, #0
 8010be8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bea:	2300      	movs	r3, #0
 8010bec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010bf4:	7af9      	ldrb	r1, [r7, #11]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	f7f6 fcd0 	bl	800759e <HAL_PCD_EP_Transmit>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c02:	7dfb      	ldrb	r3, [r7, #23]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 f853 	bl	8010cb0 <USBD_Get_USB_Status>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3718      	adds	r7, #24
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	607a      	str	r2, [r7, #4]
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	460b      	mov	r3, r1
 8010c26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c36:	7af9      	ldrb	r1, [r7, #11]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	f7f6 fc4c 	bl	80074d8 <HAL_PCD_EP_Receive>
 8010c40:	4603      	mov	r3, r0
 8010c42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 f832 	bl	8010cb0 <USBD_Get_USB_Status>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b082      	sub	sp, #8
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	460b      	mov	r3, r1
 8010c64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c6c:	78fa      	ldrb	r2, [r7, #3]
 8010c6e:	4611      	mov	r1, r2
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7f6 fc7c 	bl	800756e <HAL_PCD_EP_GetRxCount>
 8010c76:	4603      	mov	r3, r0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c88:	4b03      	ldr	r3, [pc, #12]	; (8010c98 <USBD_static_malloc+0x18>)
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	370c      	adds	r7, #12
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	240001b8 	.word	0x240001b8

08010c9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]

}
 8010ca4:	bf00      	nop
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010cbe:	79fb      	ldrb	r3, [r7, #7]
 8010cc0:	2b03      	cmp	r3, #3
 8010cc2:	d817      	bhi.n	8010cf4 <USBD_Get_USB_Status+0x44>
 8010cc4:	a201      	add	r2, pc, #4	; (adr r2, 8010ccc <USBD_Get_USB_Status+0x1c>)
 8010cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cca:	bf00      	nop
 8010ccc:	08010cdd 	.word	0x08010cdd
 8010cd0:	08010ce3 	.word	0x08010ce3
 8010cd4:	08010ce9 	.word	0x08010ce9
 8010cd8:	08010cef 	.word	0x08010cef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce0:	e00b      	b.n	8010cfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ce2:	2303      	movs	r3, #3
 8010ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ce6:	e008      	b.n	8010cfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	73fb      	strb	r3, [r7, #15]
    break;
 8010cec:	e005      	b.n	8010cfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010cee:	2303      	movs	r3, #3
 8010cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8010cf2:	e002      	b.n	8010cfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010cf4:	2303      	movs	r3, #3
 8010cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8010cf8:	bf00      	nop
  }
  return usb_status;
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr

08010d08 <__libc_init_array>:
 8010d08:	b570      	push	{r4, r5, r6, lr}
 8010d0a:	4d0d      	ldr	r5, [pc, #52]	; (8010d40 <__libc_init_array+0x38>)
 8010d0c:	4c0d      	ldr	r4, [pc, #52]	; (8010d44 <__libc_init_array+0x3c>)
 8010d0e:	1b64      	subs	r4, r4, r5
 8010d10:	10a4      	asrs	r4, r4, #2
 8010d12:	2600      	movs	r6, #0
 8010d14:	42a6      	cmp	r6, r4
 8010d16:	d109      	bne.n	8010d2c <__libc_init_array+0x24>
 8010d18:	4d0b      	ldr	r5, [pc, #44]	; (8010d48 <__libc_init_array+0x40>)
 8010d1a:	4c0c      	ldr	r4, [pc, #48]	; (8010d4c <__libc_init_array+0x44>)
 8010d1c:	f000 fe46 	bl	80119ac <_init>
 8010d20:	1b64      	subs	r4, r4, r5
 8010d22:	10a4      	asrs	r4, r4, #2
 8010d24:	2600      	movs	r6, #0
 8010d26:	42a6      	cmp	r6, r4
 8010d28:	d105      	bne.n	8010d36 <__libc_init_array+0x2e>
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d30:	4798      	blx	r3
 8010d32:	3601      	adds	r6, #1
 8010d34:	e7ee      	b.n	8010d14 <__libc_init_array+0xc>
 8010d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d3a:	4798      	blx	r3
 8010d3c:	3601      	adds	r6, #1
 8010d3e:	e7f2      	b.n	8010d26 <__libc_init_array+0x1e>
 8010d40:	08011c30 	.word	0x08011c30
 8010d44:	08011c30 	.word	0x08011c30
 8010d48:	08011c30 	.word	0x08011c30
 8010d4c:	08011c34 	.word	0x08011c34

08010d50 <memset>:
 8010d50:	4402      	add	r2, r0
 8010d52:	4603      	mov	r3, r0
 8010d54:	4293      	cmp	r3, r2
 8010d56:	d100      	bne.n	8010d5a <memset+0xa>
 8010d58:	4770      	bx	lr
 8010d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d5e:	e7f9      	b.n	8010d54 <memset+0x4>

08010d60 <cos>:
 8010d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d62:	eeb0 7b40 	vmov.f64	d7, d0
 8010d66:	ee17 3a90 	vmov	r3, s15
 8010d6a:	4a1f      	ldr	r2, [pc, #124]	; (8010de8 <cos+0x88>)
 8010d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d70:	4293      	cmp	r3, r2
 8010d72:	dc04      	bgt.n	8010d7e <cos+0x1e>
 8010d74:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010de0 <cos+0x80>
 8010d78:	f000 f9c2 	bl	8011100 <__kernel_cos>
 8010d7c:	e004      	b.n	8010d88 <cos+0x28>
 8010d7e:	4a1b      	ldr	r2, [pc, #108]	; (8010dec <cos+0x8c>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	dd04      	ble.n	8010d8e <cos+0x2e>
 8010d84:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010d88:	b005      	add	sp, #20
 8010d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d8e:	4668      	mov	r0, sp
 8010d90:	f000 f876 	bl	8010e80 <__ieee754_rem_pio2>
 8010d94:	f000 0003 	and.w	r0, r0, #3
 8010d98:	2801      	cmp	r0, #1
 8010d9a:	d007      	beq.n	8010dac <cos+0x4c>
 8010d9c:	2802      	cmp	r0, #2
 8010d9e:	d00e      	beq.n	8010dbe <cos+0x5e>
 8010da0:	b9a0      	cbnz	r0, 8010dcc <cos+0x6c>
 8010da2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010da6:	ed9d 0b00 	vldr	d0, [sp]
 8010daa:	e7e5      	b.n	8010d78 <cos+0x18>
 8010dac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010db0:	ed9d 0b00 	vldr	d0, [sp]
 8010db4:	f000 fc90 	bl	80116d8 <__kernel_sin>
 8010db8:	eeb1 0b40 	vneg.f64	d0, d0
 8010dbc:	e7e4      	b.n	8010d88 <cos+0x28>
 8010dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc2:	ed9d 0b00 	vldr	d0, [sp]
 8010dc6:	f000 f99b 	bl	8011100 <__kernel_cos>
 8010dca:	e7f5      	b.n	8010db8 <cos+0x58>
 8010dcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dd0:	ed9d 0b00 	vldr	d0, [sp]
 8010dd4:	2001      	movs	r0, #1
 8010dd6:	f000 fc7f 	bl	80116d8 <__kernel_sin>
 8010dda:	e7d5      	b.n	8010d88 <cos+0x28>
 8010ddc:	f3af 8000 	nop.w
	...
 8010de8:	3fe921fb 	.word	0x3fe921fb
 8010dec:	7fefffff 	.word	0x7fefffff

08010df0 <sin>:
 8010df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010df2:	eeb0 7b40 	vmov.f64	d7, d0
 8010df6:	ee17 3a90 	vmov	r3, s15
 8010dfa:	4a1f      	ldr	r2, [pc, #124]	; (8010e78 <sin+0x88>)
 8010dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e00:	4293      	cmp	r3, r2
 8010e02:	dc05      	bgt.n	8010e10 <sin+0x20>
 8010e04:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010e70 <sin+0x80>
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f000 fc65 	bl	80116d8 <__kernel_sin>
 8010e0e:	e004      	b.n	8010e1a <sin+0x2a>
 8010e10:	4a1a      	ldr	r2, [pc, #104]	; (8010e7c <sin+0x8c>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	dd04      	ble.n	8010e20 <sin+0x30>
 8010e16:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010e1a:	b005      	add	sp, #20
 8010e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e20:	4668      	mov	r0, sp
 8010e22:	f000 f82d 	bl	8010e80 <__ieee754_rem_pio2>
 8010e26:	f000 0003 	and.w	r0, r0, #3
 8010e2a:	2801      	cmp	r0, #1
 8010e2c:	d008      	beq.n	8010e40 <sin+0x50>
 8010e2e:	2802      	cmp	r0, #2
 8010e30:	d00d      	beq.n	8010e4e <sin+0x5e>
 8010e32:	b9b0      	cbnz	r0, 8010e62 <sin+0x72>
 8010e34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e38:	ed9d 0b00 	vldr	d0, [sp]
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	e7e4      	b.n	8010e0a <sin+0x1a>
 8010e40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e44:	ed9d 0b00 	vldr	d0, [sp]
 8010e48:	f000 f95a 	bl	8011100 <__kernel_cos>
 8010e4c:	e7e5      	b.n	8010e1a <sin+0x2a>
 8010e4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e52:	ed9d 0b00 	vldr	d0, [sp]
 8010e56:	2001      	movs	r0, #1
 8010e58:	f000 fc3e 	bl	80116d8 <__kernel_sin>
 8010e5c:	eeb1 0b40 	vneg.f64	d0, d0
 8010e60:	e7db      	b.n	8010e1a <sin+0x2a>
 8010e62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e66:	ed9d 0b00 	vldr	d0, [sp]
 8010e6a:	f000 f949 	bl	8011100 <__kernel_cos>
 8010e6e:	e7f5      	b.n	8010e5c <sin+0x6c>
	...
 8010e78:	3fe921fb 	.word	0x3fe921fb
 8010e7c:	7fefffff 	.word	0x7fefffff

08010e80 <__ieee754_rem_pio2>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	eeb0 7b40 	vmov.f64	d7, d0
 8010e86:	ee17 5a90 	vmov	r5, s15
 8010e8a:	4b97      	ldr	r3, [pc, #604]	; (80110e8 <__ieee754_rem_pio2+0x268>)
 8010e8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e90:	429e      	cmp	r6, r3
 8010e92:	b088      	sub	sp, #32
 8010e94:	4604      	mov	r4, r0
 8010e96:	dc07      	bgt.n	8010ea8 <__ieee754_rem_pio2+0x28>
 8010e98:	2200      	movs	r2, #0
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	ed84 0b00 	vstr	d0, [r4]
 8010ea0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	e01b      	b.n	8010ee0 <__ieee754_rem_pio2+0x60>
 8010ea8:	4b90      	ldr	r3, [pc, #576]	; (80110ec <__ieee754_rem_pio2+0x26c>)
 8010eaa:	429e      	cmp	r6, r3
 8010eac:	dc3b      	bgt.n	8010f26 <__ieee754_rem_pio2+0xa6>
 8010eae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010eb2:	2d00      	cmp	r5, #0
 8010eb4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80110a8 <__ieee754_rem_pio2+0x228>
 8010eb8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010ebc:	dd19      	ble.n	8010ef2 <__ieee754_rem_pio2+0x72>
 8010ebe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010ec2:	429e      	cmp	r6, r3
 8010ec4:	d00e      	beq.n	8010ee4 <__ieee754_rem_pio2+0x64>
 8010ec6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80110b0 <__ieee754_rem_pio2+0x230>
 8010eca:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010ece:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010ed2:	ed84 5b00 	vstr	d5, [r4]
 8010ed6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010eda:	ed84 7b02 	vstr	d7, [r4, #8]
 8010ede:	2001      	movs	r0, #1
 8010ee0:	b008      	add	sp, #32
 8010ee2:	bd70      	pop	{r4, r5, r6, pc}
 8010ee4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80110b8 <__ieee754_rem_pio2+0x238>
 8010ee8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010eec:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80110c0 <__ieee754_rem_pio2+0x240>
 8010ef0:	e7eb      	b.n	8010eca <__ieee754_rem_pio2+0x4a>
 8010ef2:	429e      	cmp	r6, r3
 8010ef4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010ef8:	d00e      	beq.n	8010f18 <__ieee754_rem_pio2+0x98>
 8010efa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80110b0 <__ieee754_rem_pio2+0x230>
 8010efe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010f02:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010f06:	ed84 5b00 	vstr	d5, [r4]
 8010f0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f12:	ed84 7b02 	vstr	d7, [r4, #8]
 8010f16:	e7e3      	b.n	8010ee0 <__ieee754_rem_pio2+0x60>
 8010f18:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80110b8 <__ieee754_rem_pio2+0x238>
 8010f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010f20:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80110c0 <__ieee754_rem_pio2+0x240>
 8010f24:	e7eb      	b.n	8010efe <__ieee754_rem_pio2+0x7e>
 8010f26:	4b72      	ldr	r3, [pc, #456]	; (80110f0 <__ieee754_rem_pio2+0x270>)
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	dc6e      	bgt.n	801100a <__ieee754_rem_pio2+0x18a>
 8010f2c:	f000 fc2c 	bl	8011788 <fabs>
 8010f30:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010f34:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80110c8 <__ieee754_rem_pio2+0x248>
 8010f38:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010f3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010f40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010f44:	ee17 0a90 	vmov	r0, s15
 8010f48:	eeb1 4b45 	vneg.f64	d4, d5
 8010f4c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80110a8 <__ieee754_rem_pio2+0x228>
 8010f50:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010f54:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80110b0 <__ieee754_rem_pio2+0x230>
 8010f58:	281f      	cmp	r0, #31
 8010f5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010f5e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010f62:	dc08      	bgt.n	8010f76 <__ieee754_rem_pio2+0xf6>
 8010f64:	4b63      	ldr	r3, [pc, #396]	; (80110f4 <__ieee754_rem_pio2+0x274>)
 8010f66:	1e42      	subs	r2, r0, #1
 8010f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f6c:	42b3      	cmp	r3, r6
 8010f6e:	d002      	beq.n	8010f76 <__ieee754_rem_pio2+0xf6>
 8010f70:	ed84 6b00 	vstr	d6, [r4]
 8010f74:	e024      	b.n	8010fc0 <__ieee754_rem_pio2+0x140>
 8010f76:	ee16 3a90 	vmov	r3, s13
 8010f7a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010f7e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010f82:	2b10      	cmp	r3, #16
 8010f84:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010f88:	ddf2      	ble.n	8010f70 <__ieee754_rem_pio2+0xf0>
 8010f8a:	eeb0 6b40 	vmov.f64	d6, d0
 8010f8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80110b8 <__ieee754_rem_pio2+0x238>
 8010f92:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010f96:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010f9a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010f9e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80110c0 <__ieee754_rem_pio2+0x240>
 8010fa2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010fa6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010faa:	ee13 3a90 	vmov	r3, s7
 8010fae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	2b31      	cmp	r3, #49	; 0x31
 8010fb6:	dc17      	bgt.n	8010fe8 <__ieee754_rem_pio2+0x168>
 8010fb8:	eeb0 0b46 	vmov.f64	d0, d6
 8010fbc:	ed84 3b00 	vstr	d3, [r4]
 8010fc0:	ed94 6b00 	vldr	d6, [r4]
 8010fc4:	2d00      	cmp	r5, #0
 8010fc6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010fca:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010fce:	ed84 7b02 	vstr	d7, [r4, #8]
 8010fd2:	da85      	bge.n	8010ee0 <__ieee754_rem_pio2+0x60>
 8010fd4:	eeb1 6b46 	vneg.f64	d6, d6
 8010fd8:	ed84 6b00 	vstr	d6, [r4]
 8010fdc:	eeb1 7b47 	vneg.f64	d7, d7
 8010fe0:	4240      	negs	r0, r0
 8010fe2:	ed84 7b02 	vstr	d7, [r4, #8]
 8010fe6:	e77b      	b.n	8010ee0 <__ieee754_rem_pio2+0x60>
 8010fe8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80110d0 <__ieee754_rem_pio2+0x250>
 8010fec:	eeb0 0b46 	vmov.f64	d0, d6
 8010ff0:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010ff4:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010ff8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80110d8 <__ieee754_rem_pio2+0x258>
 8010ffc:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011000:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011004:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011008:	e7b2      	b.n	8010f70 <__ieee754_rem_pio2+0xf0>
 801100a:	4b3b      	ldr	r3, [pc, #236]	; (80110f8 <__ieee754_rem_pio2+0x278>)
 801100c:	429e      	cmp	r6, r3
 801100e:	dd06      	ble.n	801101e <__ieee754_rem_pio2+0x19e>
 8011010:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011014:	ed80 7b02 	vstr	d7, [r0, #8]
 8011018:	ed80 7b00 	vstr	d7, [r0]
 801101c:	e742      	b.n	8010ea4 <__ieee754_rem_pio2+0x24>
 801101e:	1532      	asrs	r2, r6, #20
 8011020:	ee10 0a10 	vmov	r0, s0
 8011024:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8011028:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801102c:	ec41 0b17 	vmov	d7, r0, r1
 8011030:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011034:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80110e0 <__ieee754_rem_pio2+0x260>
 8011038:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801103c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011040:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011044:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011048:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801104c:	a902      	add	r1, sp, #8
 801104e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011052:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011056:	ed8d 6b04 	vstr	d6, [sp, #16]
 801105a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801105e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011062:	2603      	movs	r6, #3
 8011064:	4608      	mov	r0, r1
 8011066:	ed91 7b04 	vldr	d7, [r1, #16]
 801106a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011072:	4633      	mov	r3, r6
 8011074:	f1a1 0108 	sub.w	r1, r1, #8
 8011078:	f106 36ff 	add.w	r6, r6, #4294967295
 801107c:	d0f3      	beq.n	8011066 <__ieee754_rem_pio2+0x1e6>
 801107e:	491f      	ldr	r1, [pc, #124]	; (80110fc <__ieee754_rem_pio2+0x27c>)
 8011080:	9101      	str	r1, [sp, #4]
 8011082:	2102      	movs	r1, #2
 8011084:	9100      	str	r1, [sp, #0]
 8011086:	4621      	mov	r1, r4
 8011088:	f000 f8a6 	bl	80111d8 <__kernel_rem_pio2>
 801108c:	2d00      	cmp	r5, #0
 801108e:	f6bf af27 	bge.w	8010ee0 <__ieee754_rem_pio2+0x60>
 8011092:	ed94 7b00 	vldr	d7, [r4]
 8011096:	eeb1 7b47 	vneg.f64	d7, d7
 801109a:	ed84 7b00 	vstr	d7, [r4]
 801109e:	ed94 7b02 	vldr	d7, [r4, #8]
 80110a2:	e79b      	b.n	8010fdc <__ieee754_rem_pio2+0x15c>
 80110a4:	f3af 8000 	nop.w
 80110a8:	54400000 	.word	0x54400000
 80110ac:	3ff921fb 	.word	0x3ff921fb
 80110b0:	1a626331 	.word	0x1a626331
 80110b4:	3dd0b461 	.word	0x3dd0b461
 80110b8:	1a600000 	.word	0x1a600000
 80110bc:	3dd0b461 	.word	0x3dd0b461
 80110c0:	2e037073 	.word	0x2e037073
 80110c4:	3ba3198a 	.word	0x3ba3198a
 80110c8:	6dc9c883 	.word	0x6dc9c883
 80110cc:	3fe45f30 	.word	0x3fe45f30
 80110d0:	2e000000 	.word	0x2e000000
 80110d4:	3ba3198a 	.word	0x3ba3198a
 80110d8:	252049c1 	.word	0x252049c1
 80110dc:	397b839a 	.word	0x397b839a
 80110e0:	00000000 	.word	0x00000000
 80110e4:	41700000 	.word	0x41700000
 80110e8:	3fe921fb 	.word	0x3fe921fb
 80110ec:	4002d97b 	.word	0x4002d97b
 80110f0:	413921fb 	.word	0x413921fb
 80110f4:	08011a50 	.word	0x08011a50
 80110f8:	7fefffff 	.word	0x7fefffff
 80110fc:	08011ad0 	.word	0x08011ad0

08011100 <__kernel_cos>:
 8011100:	ee10 1a90 	vmov	r1, s1
 8011104:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801110c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8011110:	da05      	bge.n	801111e <__kernel_cos+0x1e>
 8011112:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011116:	ee17 3a90 	vmov	r3, s15
 801111a:	2b00      	cmp	r3, #0
 801111c:	d03d      	beq.n	801119a <__kernel_cos+0x9a>
 801111e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8011122:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80111a0 <__kernel_cos+0xa0>
 8011126:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80111a8 <__kernel_cos+0xa8>
 801112a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801112e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80111b0 <__kernel_cos+0xb0>
 8011132:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011136:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80111b8 <__kernel_cos+0xb8>
 801113a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801113e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80111c0 <__kernel_cos+0xc0>
 8011142:	4b23      	ldr	r3, [pc, #140]	; (80111d0 <__kernel_cos+0xd0>)
 8011144:	eea6 7b03 	vfma.f64	d7, d6, d3
 8011148:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80111c8 <__kernel_cos+0xc8>
 801114c:	4299      	cmp	r1, r3
 801114e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8011152:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011156:	ee26 5b03 	vmul.f64	d5, d6, d3
 801115a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801115e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8011162:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011166:	dc04      	bgt.n	8011172 <__kernel_cos+0x72>
 8011168:	ee37 6b46 	vsub.f64	d6, d7, d6
 801116c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011170:	4770      	bx	lr
 8011172:	4b18      	ldr	r3, [pc, #96]	; (80111d4 <__kernel_cos+0xd4>)
 8011174:	4299      	cmp	r1, r3
 8011176:	dc0d      	bgt.n	8011194 <__kernel_cos+0x94>
 8011178:	2200      	movs	r2, #0
 801117a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801117e:	ec43 2b15 	vmov	d5, r2, r3
 8011182:	ee34 0b45 	vsub.f64	d0, d4, d5
 8011186:	ee37 7b45 	vsub.f64	d7, d7, d5
 801118a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801118e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011192:	4770      	bx	lr
 8011194:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011198:	e7f3      	b.n	8011182 <__kernel_cos+0x82>
 801119a:	eeb0 0b44 	vmov.f64	d0, d4
 801119e:	4770      	bx	lr
 80111a0:	be8838d4 	.word	0xbe8838d4
 80111a4:	bda8fae9 	.word	0xbda8fae9
 80111a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80111ac:	3e21ee9e 	.word	0x3e21ee9e
 80111b0:	809c52ad 	.word	0x809c52ad
 80111b4:	be927e4f 	.word	0xbe927e4f
 80111b8:	19cb1590 	.word	0x19cb1590
 80111bc:	3efa01a0 	.word	0x3efa01a0
 80111c0:	16c15177 	.word	0x16c15177
 80111c4:	bf56c16c 	.word	0xbf56c16c
 80111c8:	5555554c 	.word	0x5555554c
 80111cc:	3fa55555 	.word	0x3fa55555
 80111d0:	3fd33332 	.word	0x3fd33332
 80111d4:	3fe90000 	.word	0x3fe90000

080111d8 <__kernel_rem_pio2>:
 80111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	ed2d 8b06 	vpush	{d8-d10}
 80111e0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80111e4:	469b      	mov	fp, r3
 80111e6:	460f      	mov	r7, r1
 80111e8:	4bcf      	ldr	r3, [pc, #828]	; (8011528 <__kernel_rem_pio2+0x350>)
 80111ea:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80111ec:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80111f0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80111f4:	9000      	str	r0, [sp, #0]
 80111f6:	f112 0f14 	cmn.w	r2, #20
 80111fa:	bfa8      	it	ge
 80111fc:	2318      	movge	r3, #24
 80111fe:	f10b 31ff 	add.w	r1, fp, #4294967295
 8011202:	bfb8      	it	lt
 8011204:	2300      	movlt	r3, #0
 8011206:	f06f 0417 	mvn.w	r4, #23
 801120a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8011510 <__kernel_rem_pio2+0x338>
 801120e:	bfa4      	itt	ge
 8011210:	f1a2 0a03 	subge.w	sl, r2, #3
 8011214:	fb9a f3f3 	sdivge	r3, sl, r3
 8011218:	fb03 4404 	mla	r4, r3, r4, r4
 801121c:	1a5d      	subs	r5, r3, r1
 801121e:	4414      	add	r4, r2
 8011220:	eb09 0601 	add.w	r6, r9, r1
 8011224:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8011228:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801122c:	2200      	movs	r2, #0
 801122e:	42b2      	cmp	r2, r6
 8011230:	dd12      	ble.n	8011258 <__kernel_rem_pio2+0x80>
 8011232:	aa18      	add	r2, sp, #96	; 0x60
 8011234:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011238:	460e      	mov	r6, r1
 801123a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801123e:	f1cb 0a01 	rsb	sl, fp, #1
 8011242:	eb0a 0006 	add.w	r0, sl, r6
 8011246:	4581      	cmp	r9, r0
 8011248:	db25      	blt.n	8011296 <__kernel_rem_pio2+0xbe>
 801124a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8011510 <__kernel_rem_pio2+0x338>
 801124e:	f8dd e000 	ldr.w	lr, [sp]
 8011252:	4615      	mov	r5, r2
 8011254:	2000      	movs	r0, #0
 8011256:	e015      	b.n	8011284 <__kernel_rem_pio2+0xac>
 8011258:	42d5      	cmn	r5, r2
 801125a:	d409      	bmi.n	8011270 <__kernel_rem_pio2+0x98>
 801125c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011260:	ee07 0a90 	vmov	s15, r0
 8011264:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011268:	eca8 7b02 	vstmia	r8!, {d7}
 801126c:	3201      	adds	r2, #1
 801126e:	e7de      	b.n	801122e <__kernel_rem_pio2+0x56>
 8011270:	eeb0 7b46 	vmov.f64	d7, d6
 8011274:	e7f8      	b.n	8011268 <__kernel_rem_pio2+0x90>
 8011276:	ecbe 5b02 	vldmia	lr!, {d5}
 801127a:	ed95 6b00 	vldr	d6, [r5]
 801127e:	3001      	adds	r0, #1
 8011280:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011284:	4288      	cmp	r0, r1
 8011286:	f1a5 0508 	sub.w	r5, r5, #8
 801128a:	ddf4      	ble.n	8011276 <__kernel_rem_pio2+0x9e>
 801128c:	eca8 7b02 	vstmia	r8!, {d7}
 8011290:	3208      	adds	r2, #8
 8011292:	3601      	adds	r6, #1
 8011294:	e7d5      	b.n	8011242 <__kernel_rem_pio2+0x6a>
 8011296:	aa04      	add	r2, sp, #16
 8011298:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8011518 <__kernel_rem_pio2+0x340>
 801129c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8011520 <__kernel_rem_pio2+0x348>
 80112a0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80112a4:	9201      	str	r2, [sp, #4]
 80112a6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80112aa:	464e      	mov	r6, r9
 80112ac:	ab90      	add	r3, sp, #576	; 0x240
 80112ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112b2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80112b6:	ab04      	add	r3, sp, #16
 80112b8:	4618      	mov	r0, r3
 80112ba:	4632      	mov	r2, r6
 80112bc:	2a00      	cmp	r2, #0
 80112be:	dc4e      	bgt.n	801135e <__kernel_rem_pio2+0x186>
 80112c0:	4620      	mov	r0, r4
 80112c2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80112c6:	f000 fadf 	bl	8011888 <scalbn>
 80112ca:	eeb0 8b40 	vmov.f64	d8, d0
 80112ce:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80112d2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80112d6:	f000 fa63 	bl	80117a0 <floor>
 80112da:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80112de:	eea0 8b47 	vfms.f64	d8, d0, d7
 80112e2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80112e6:	2c00      	cmp	r4, #0
 80112e8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80112ec:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80112f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80112f4:	ee17 8a90 	vmov	r8, s15
 80112f8:	dd46      	ble.n	8011388 <__kernel_rem_pio2+0x1b0>
 80112fa:	1e70      	subs	r0, r6, #1
 80112fc:	aa04      	add	r2, sp, #16
 80112fe:	f1c4 0c18 	rsb	ip, r4, #24
 8011302:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8011306:	fa45 f20c 	asr.w	r2, r5, ip
 801130a:	4490      	add	r8, r2
 801130c:	fa02 f20c 	lsl.w	r2, r2, ip
 8011310:	1aad      	subs	r5, r5, r2
 8011312:	aa04      	add	r2, sp, #16
 8011314:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8011318:	f1c4 0217 	rsb	r2, r4, #23
 801131c:	4115      	asrs	r5, r2
 801131e:	2d00      	cmp	r5, #0
 8011320:	dd41      	ble.n	80113a6 <__kernel_rem_pio2+0x1ce>
 8011322:	f04f 0c00 	mov.w	ip, #0
 8011326:	f108 0801 	add.w	r8, r8, #1
 801132a:	4660      	mov	r0, ip
 801132c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011330:	4566      	cmp	r6, ip
 8011332:	dc69      	bgt.n	8011408 <__kernel_rem_pio2+0x230>
 8011334:	2c00      	cmp	r4, #0
 8011336:	dd03      	ble.n	8011340 <__kernel_rem_pio2+0x168>
 8011338:	2c01      	cmp	r4, #1
 801133a:	d076      	beq.n	801142a <__kernel_rem_pio2+0x252>
 801133c:	2c02      	cmp	r4, #2
 801133e:	d07f      	beq.n	8011440 <__kernel_rem_pio2+0x268>
 8011340:	2d02      	cmp	r5, #2
 8011342:	d130      	bne.n	80113a6 <__kernel_rem_pio2+0x1ce>
 8011344:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011348:	ee30 8b48 	vsub.f64	d8, d0, d8
 801134c:	b358      	cbz	r0, 80113a6 <__kernel_rem_pio2+0x1ce>
 801134e:	4620      	mov	r0, r4
 8011350:	9102      	str	r1, [sp, #8]
 8011352:	f000 fa99 	bl	8011888 <scalbn>
 8011356:	9902      	ldr	r1, [sp, #8]
 8011358:	ee38 8b40 	vsub.f64	d8, d8, d0
 801135c:	e023      	b.n	80113a6 <__kernel_rem_pio2+0x1ce>
 801135e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011362:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011366:	3a01      	subs	r2, #1
 8011368:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801136c:	ad68      	add	r5, sp, #416	; 0x1a0
 801136e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011372:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011376:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801137a:	eca0 0a01 	vstmia	r0!, {s0}
 801137e:	ed95 0b00 	vldr	d0, [r5]
 8011382:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011386:	e799      	b.n	80112bc <__kernel_rem_pio2+0xe4>
 8011388:	d105      	bne.n	8011396 <__kernel_rem_pio2+0x1be>
 801138a:	1e72      	subs	r2, r6, #1
 801138c:	a804      	add	r0, sp, #16
 801138e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8011392:	15ed      	asrs	r5, r5, #23
 8011394:	e7c3      	b.n	801131e <__kernel_rem_pio2+0x146>
 8011396:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801139a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a2:	da2f      	bge.n	8011404 <__kernel_rem_pio2+0x22c>
 80113a4:	2500      	movs	r5, #0
 80113a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80113aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ae:	f040 8087 	bne.w	80114c0 <__kernel_rem_pio2+0x2e8>
 80113b2:	1e73      	subs	r3, r6, #1
 80113b4:	4618      	mov	r0, r3
 80113b6:	f04f 0c00 	mov.w	ip, #0
 80113ba:	4548      	cmp	r0, r9
 80113bc:	da47      	bge.n	801144e <__kernel_rem_pio2+0x276>
 80113be:	f1bc 0f00 	cmp.w	ip, #0
 80113c2:	d070      	beq.n	80114a6 <__kernel_rem_pio2+0x2ce>
 80113c4:	aa04      	add	r2, sp, #16
 80113c6:	3c18      	subs	r4, #24
 80113c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80113cc:	2a00      	cmp	r2, #0
 80113ce:	d075      	beq.n	80114bc <__kernel_rem_pio2+0x2e4>
 80113d0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80113d4:	4620      	mov	r0, r4
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	f000 fa56 	bl	8011888 <scalbn>
 80113dc:	9b00      	ldr	r3, [sp, #0]
 80113de:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011518 <__kernel_rem_pio2+0x340>
 80113e2:	461a      	mov	r2, r3
 80113e4:	2a00      	cmp	r2, #0
 80113e6:	f280 80ac 	bge.w	8011542 <__kernel_rem_pio2+0x36a>
 80113ea:	4619      	mov	r1, r3
 80113ec:	2000      	movs	r0, #0
 80113ee:	2900      	cmp	r1, #0
 80113f0:	f2c0 80cd 	blt.w	801158e <__kernel_rem_pio2+0x3b6>
 80113f4:	aa68      	add	r2, sp, #416	; 0x1a0
 80113f6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80113fa:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011510 <__kernel_rem_pio2+0x338>
 80113fe:	4e4b      	ldr	r6, [pc, #300]	; (801152c <__kernel_rem_pio2+0x354>)
 8011400:	2200      	movs	r2, #0
 8011402:	e0b8      	b.n	8011576 <__kernel_rem_pio2+0x39e>
 8011404:	2502      	movs	r5, #2
 8011406:	e78c      	b.n	8011322 <__kernel_rem_pio2+0x14a>
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	b948      	cbnz	r0, 8011420 <__kernel_rem_pio2+0x248>
 801140c:	b11a      	cbz	r2, 8011416 <__kernel_rem_pio2+0x23e>
 801140e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	2201      	movs	r2, #1
 8011416:	f10c 0c01 	add.w	ip, ip, #1
 801141a:	3304      	adds	r3, #4
 801141c:	4610      	mov	r0, r2
 801141e:	e787      	b.n	8011330 <__kernel_rem_pio2+0x158>
 8011420:	ebae 0202 	sub.w	r2, lr, r2
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	4602      	mov	r2, r0
 8011428:	e7f5      	b.n	8011416 <__kernel_rem_pio2+0x23e>
 801142a:	1e72      	subs	r2, r6, #1
 801142c:	ab04      	add	r3, sp, #16
 801142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011432:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011436:	f10d 0c10 	add.w	ip, sp, #16
 801143a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 801143e:	e77f      	b.n	8011340 <__kernel_rem_pio2+0x168>
 8011440:	1e72      	subs	r2, r6, #1
 8011442:	ab04      	add	r3, sp, #16
 8011444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011448:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801144c:	e7f3      	b.n	8011436 <__kernel_rem_pio2+0x25e>
 801144e:	aa04      	add	r2, sp, #16
 8011450:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011454:	3801      	subs	r0, #1
 8011456:	ea4c 0c02 	orr.w	ip, ip, r2
 801145a:	e7ae      	b.n	80113ba <__kernel_rem_pio2+0x1e2>
 801145c:	3001      	adds	r0, #1
 801145e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011462:	2a00      	cmp	r2, #0
 8011464:	d0fa      	beq.n	801145c <__kernel_rem_pio2+0x284>
 8011466:	eb06 020b 	add.w	r2, r6, fp
 801146a:	ad18      	add	r5, sp, #96	; 0x60
 801146c:	1c73      	adds	r3, r6, #1
 801146e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011472:	4406      	add	r6, r0
 8011474:	429e      	cmp	r6, r3
 8011476:	f6ff af19 	blt.w	80112ac <__kernel_rem_pio2+0xd4>
 801147a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801147e:	9d00      	ldr	r5, [sp, #0]
 8011480:	ee07 0a90 	vmov	s15, r0
 8011484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011488:	2000      	movs	r0, #0
 801148a:	eca2 7b02 	vstmia	r2!, {d7}
 801148e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011510 <__kernel_rem_pio2+0x338>
 8011492:	4694      	mov	ip, r2
 8011494:	4288      	cmp	r0, r1
 8011496:	dd09      	ble.n	80114ac <__kernel_rem_pio2+0x2d4>
 8011498:	a868      	add	r0, sp, #416	; 0x1a0
 801149a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801149e:	ed80 7b00 	vstr	d7, [r0]
 80114a2:	3301      	adds	r3, #1
 80114a4:	e7e6      	b.n	8011474 <__kernel_rem_pio2+0x29c>
 80114a6:	9b01      	ldr	r3, [sp, #4]
 80114a8:	2001      	movs	r0, #1
 80114aa:	e7d8      	b.n	801145e <__kernel_rem_pio2+0x286>
 80114ac:	ecb5 5b02 	vldmia	r5!, {d5}
 80114b0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80114b4:	3001      	adds	r0, #1
 80114b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114ba:	e7eb      	b.n	8011494 <__kernel_rem_pio2+0x2bc>
 80114bc:	3b01      	subs	r3, #1
 80114be:	e781      	b.n	80113c4 <__kernel_rem_pio2+0x1ec>
 80114c0:	4260      	negs	r0, r4
 80114c2:	eeb0 0b48 	vmov.f64	d0, d8
 80114c6:	f000 f9df 	bl	8011888 <scalbn>
 80114ca:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8011520 <__kernel_rem_pio2+0x348>
 80114ce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80114d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d6:	db2b      	blt.n	8011530 <__kernel_rem_pio2+0x358>
 80114d8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8011518 <__kernel_rem_pio2+0x340>
 80114dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 80114e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80114e4:	aa04      	add	r2, sp, #16
 80114e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80114ea:	eea5 0b46 	vfms.f64	d0, d5, d6
 80114ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80114f2:	a904      	add	r1, sp, #16
 80114f4:	ee10 3a10 	vmov	r3, s0
 80114f8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80114fc:	ee17 2a10 	vmov	r2, s14
 8011500:	1c73      	adds	r3, r6, #1
 8011502:	3418      	adds	r4, #24
 8011504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011508:	e762      	b.n	80113d0 <__kernel_rem_pio2+0x1f8>
 801150a:	bf00      	nop
 801150c:	f3af 8000 	nop.w
	...
 801151c:	3e700000 	.word	0x3e700000
 8011520:	00000000 	.word	0x00000000
 8011524:	41700000 	.word	0x41700000
 8011528:	08011c18 	.word	0x08011c18
 801152c:	08011bd8 	.word	0x08011bd8
 8011530:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011534:	aa04      	add	r2, sp, #16
 8011536:	ee10 3a10 	vmov	r3, s0
 801153a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801153e:	4633      	mov	r3, r6
 8011540:	e746      	b.n	80113d0 <__kernel_rem_pio2+0x1f8>
 8011542:	a804      	add	r0, sp, #16
 8011544:	a968      	add	r1, sp, #416	; 0x1a0
 8011546:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801154a:	9000      	str	r0, [sp, #0]
 801154c:	ee07 0a90 	vmov	s15, r0
 8011550:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011558:	3a01      	subs	r2, #1
 801155a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801155e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011562:	ed81 7b00 	vstr	d7, [r1]
 8011566:	e73d      	b.n	80113e4 <__kernel_rem_pio2+0x20c>
 8011568:	ecb6 5b02 	vldmia	r6!, {d5}
 801156c:	ecb4 6b02 	vldmia	r4!, {d6}
 8011570:	3201      	adds	r2, #1
 8011572:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011576:	454a      	cmp	r2, r9
 8011578:	dc01      	bgt.n	801157e <__kernel_rem_pio2+0x3a6>
 801157a:	4290      	cmp	r0, r2
 801157c:	daf4      	bge.n	8011568 <__kernel_rem_pio2+0x390>
 801157e:	aa40      	add	r2, sp, #256	; 0x100
 8011580:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011584:	ed82 7b00 	vstr	d7, [r2]
 8011588:	3901      	subs	r1, #1
 801158a:	3001      	adds	r0, #1
 801158c:	e72f      	b.n	80113ee <__kernel_rem_pio2+0x216>
 801158e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011590:	2a02      	cmp	r2, #2
 8011592:	dc0a      	bgt.n	80115aa <__kernel_rem_pio2+0x3d2>
 8011594:	2a00      	cmp	r2, #0
 8011596:	dc5a      	bgt.n	801164e <__kernel_rem_pio2+0x476>
 8011598:	d039      	beq.n	801160e <__kernel_rem_pio2+0x436>
 801159a:	f008 0007 	and.w	r0, r8, #7
 801159e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80115a2:	ecbd 8b06 	vpop	{d8-d10}
 80115a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115aa:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80115ac:	2a03      	cmp	r2, #3
 80115ae:	d1f4      	bne.n	801159a <__kernel_rem_pio2+0x3c2>
 80115b0:	aa40      	add	r2, sp, #256	; 0x100
 80115b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80115b6:	4611      	mov	r1, r2
 80115b8:	4618      	mov	r0, r3
 80115ba:	2800      	cmp	r0, #0
 80115bc:	f1a1 0108 	sub.w	r1, r1, #8
 80115c0:	dc52      	bgt.n	8011668 <__kernel_rem_pio2+0x490>
 80115c2:	4619      	mov	r1, r3
 80115c4:	2901      	cmp	r1, #1
 80115c6:	f1a2 0208 	sub.w	r2, r2, #8
 80115ca:	dc5d      	bgt.n	8011688 <__kernel_rem_pio2+0x4b0>
 80115cc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80116d0 <__kernel_rem_pio2+0x4f8>
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	dc69      	bgt.n	80116a8 <__kernel_rem_pio2+0x4d0>
 80115d4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80115d8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80115dc:	2d00      	cmp	r5, #0
 80115de:	d16c      	bne.n	80116ba <__kernel_rem_pio2+0x4e2>
 80115e0:	ed87 5b00 	vstr	d5, [r7]
 80115e4:	ed87 6b02 	vstr	d6, [r7, #8]
 80115e8:	ed87 7b04 	vstr	d7, [r7, #16]
 80115ec:	e7d5      	b.n	801159a <__kernel_rem_pio2+0x3c2>
 80115ee:	aa40      	add	r2, sp, #256	; 0x100
 80115f0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80115f4:	ed92 6b00 	vldr	d6, [r2]
 80115f8:	3b01      	subs	r3, #1
 80115fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80115fe:	2b00      	cmp	r3, #0
 8011600:	daf5      	bge.n	80115ee <__kernel_rem_pio2+0x416>
 8011602:	b10d      	cbz	r5, 8011608 <__kernel_rem_pio2+0x430>
 8011604:	eeb1 7b47 	vneg.f64	d7, d7
 8011608:	ed87 7b00 	vstr	d7, [r7]
 801160c:	e7c5      	b.n	801159a <__kernel_rem_pio2+0x3c2>
 801160e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80116d0 <__kernel_rem_pio2+0x4f8>
 8011612:	e7f4      	b.n	80115fe <__kernel_rem_pio2+0x426>
 8011614:	a940      	add	r1, sp, #256	; 0x100
 8011616:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801161a:	ed91 7b00 	vldr	d7, [r1]
 801161e:	3a01      	subs	r2, #1
 8011620:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011624:	2a00      	cmp	r2, #0
 8011626:	daf5      	bge.n	8011614 <__kernel_rem_pio2+0x43c>
 8011628:	b1ad      	cbz	r5, 8011656 <__kernel_rem_pio2+0x47e>
 801162a:	eeb1 7b46 	vneg.f64	d7, d6
 801162e:	ed87 7b00 	vstr	d7, [r7]
 8011632:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8011636:	a942      	add	r1, sp, #264	; 0x108
 8011638:	2201      	movs	r2, #1
 801163a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801163e:	4293      	cmp	r3, r2
 8011640:	da0c      	bge.n	801165c <__kernel_rem_pio2+0x484>
 8011642:	b10d      	cbz	r5, 8011648 <__kernel_rem_pio2+0x470>
 8011644:	eeb1 7b47 	vneg.f64	d7, d7
 8011648:	ed87 7b02 	vstr	d7, [r7, #8]
 801164c:	e7a5      	b.n	801159a <__kernel_rem_pio2+0x3c2>
 801164e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80116d0 <__kernel_rem_pio2+0x4f8>
 8011652:	461a      	mov	r2, r3
 8011654:	e7e6      	b.n	8011624 <__kernel_rem_pio2+0x44c>
 8011656:	eeb0 7b46 	vmov.f64	d7, d6
 801165a:	e7e8      	b.n	801162e <__kernel_rem_pio2+0x456>
 801165c:	ecb1 6b02 	vldmia	r1!, {d6}
 8011660:	3201      	adds	r2, #1
 8011662:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011666:	e7ea      	b.n	801163e <__kernel_rem_pio2+0x466>
 8011668:	ed91 7b00 	vldr	d7, [r1]
 801166c:	ed91 5b02 	vldr	d5, [r1, #8]
 8011670:	3801      	subs	r0, #1
 8011672:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011676:	ee37 7b46 	vsub.f64	d7, d7, d6
 801167a:	ed81 6b00 	vstr	d6, [r1]
 801167e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011682:	ed81 7b02 	vstr	d7, [r1, #8]
 8011686:	e798      	b.n	80115ba <__kernel_rem_pio2+0x3e2>
 8011688:	ed92 7b00 	vldr	d7, [r2]
 801168c:	ed92 5b02 	vldr	d5, [r2, #8]
 8011690:	3901      	subs	r1, #1
 8011692:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011696:	ee37 7b46 	vsub.f64	d7, d7, d6
 801169a:	ed82 6b00 	vstr	d6, [r2]
 801169e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80116a2:	ed82 7b02 	vstr	d7, [r2, #8]
 80116a6:	e78d      	b.n	80115c4 <__kernel_rem_pio2+0x3ec>
 80116a8:	aa40      	add	r2, sp, #256	; 0x100
 80116aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80116ae:	ed92 6b00 	vldr	d6, [r2]
 80116b2:	3b01      	subs	r3, #1
 80116b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80116b8:	e78a      	b.n	80115d0 <__kernel_rem_pio2+0x3f8>
 80116ba:	eeb1 5b45 	vneg.f64	d5, d5
 80116be:	eeb1 6b46 	vneg.f64	d6, d6
 80116c2:	ed87 5b00 	vstr	d5, [r7]
 80116c6:	eeb1 7b47 	vneg.f64	d7, d7
 80116ca:	ed87 6b02 	vstr	d6, [r7, #8]
 80116ce:	e78b      	b.n	80115e8 <__kernel_rem_pio2+0x410>
	...

080116d8 <__kernel_sin>:
 80116d8:	ee10 3a90 	vmov	r3, s1
 80116dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116e0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80116e4:	da04      	bge.n	80116f0 <__kernel_sin+0x18>
 80116e6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80116ea:	ee17 3a90 	vmov	r3, s15
 80116ee:	b35b      	cbz	r3, 8011748 <__kernel_sin+0x70>
 80116f0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80116f4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80116f8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011750 <__kernel_sin+0x78>
 80116fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011758 <__kernel_sin+0x80>
 8011700:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011704:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011760 <__kernel_sin+0x88>
 8011708:	eea4 7b06 	vfma.f64	d7, d4, d6
 801170c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011768 <__kernel_sin+0x90>
 8011710:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011714:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011770 <__kernel_sin+0x98>
 8011718:	eea4 7b06 	vfma.f64	d7, d4, d6
 801171c:	b930      	cbnz	r0, 801172c <__kernel_sin+0x54>
 801171e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011778 <__kernel_sin+0xa0>
 8011722:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011726:	eea4 0b05 	vfma.f64	d0, d4, d5
 801172a:	4770      	bx	lr
 801172c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011730:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011734:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011738:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801173c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011780 <__kernel_sin+0xa8>
 8011740:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011744:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	f3af 8000 	nop.w
 8011750:	5acfd57c 	.word	0x5acfd57c
 8011754:	3de5d93a 	.word	0x3de5d93a
 8011758:	8a2b9ceb 	.word	0x8a2b9ceb
 801175c:	be5ae5e6 	.word	0xbe5ae5e6
 8011760:	57b1fe7d 	.word	0x57b1fe7d
 8011764:	3ec71de3 	.word	0x3ec71de3
 8011768:	19c161d5 	.word	0x19c161d5
 801176c:	bf2a01a0 	.word	0xbf2a01a0
 8011770:	1110f8a6 	.word	0x1110f8a6
 8011774:	3f811111 	.word	0x3f811111
 8011778:	55555549 	.word	0x55555549
 801177c:	bfc55555 	.word	0xbfc55555
 8011780:	55555549 	.word	0x55555549
 8011784:	3fc55555 	.word	0x3fc55555

08011788 <fabs>:
 8011788:	ec51 0b10 	vmov	r0, r1, d0
 801178c:	ee10 2a10 	vmov	r2, s0
 8011790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011794:	ec43 2b10 	vmov	d0, r2, r3
 8011798:	4770      	bx	lr
 801179a:	0000      	movs	r0, r0
 801179c:	0000      	movs	r0, r0
	...

080117a0 <floor>:
 80117a0:	ee10 1a90 	vmov	r1, s1
 80117a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80117a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80117ac:	2b13      	cmp	r3, #19
 80117ae:	b530      	push	{r4, r5, lr}
 80117b0:	ee10 0a10 	vmov	r0, s0
 80117b4:	ee10 5a10 	vmov	r5, s0
 80117b8:	dc31      	bgt.n	801181e <floor+0x7e>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	da15      	bge.n	80117ea <floor+0x4a>
 80117be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011878 <floor+0xd8>
 80117c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80117c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80117ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ce:	dd07      	ble.n	80117e0 <floor+0x40>
 80117d0:	2900      	cmp	r1, #0
 80117d2:	da4e      	bge.n	8011872 <floor+0xd2>
 80117d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80117d8:	4318      	orrs	r0, r3
 80117da:	d001      	beq.n	80117e0 <floor+0x40>
 80117dc:	4928      	ldr	r1, [pc, #160]	; (8011880 <floor+0xe0>)
 80117de:	2000      	movs	r0, #0
 80117e0:	460b      	mov	r3, r1
 80117e2:	4602      	mov	r2, r0
 80117e4:	ec43 2b10 	vmov	d0, r2, r3
 80117e8:	e020      	b.n	801182c <floor+0x8c>
 80117ea:	4a26      	ldr	r2, [pc, #152]	; (8011884 <floor+0xe4>)
 80117ec:	411a      	asrs	r2, r3
 80117ee:	ea01 0402 	and.w	r4, r1, r2
 80117f2:	4304      	orrs	r4, r0
 80117f4:	d01a      	beq.n	801182c <floor+0x8c>
 80117f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011878 <floor+0xd8>
 80117fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80117fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011806:	ddeb      	ble.n	80117e0 <floor+0x40>
 8011808:	2900      	cmp	r1, #0
 801180a:	bfbe      	ittt	lt
 801180c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011810:	fa40 f303 	asrlt.w	r3, r0, r3
 8011814:	18c9      	addlt	r1, r1, r3
 8011816:	ea21 0102 	bic.w	r1, r1, r2
 801181a:	2000      	movs	r0, #0
 801181c:	e7e0      	b.n	80117e0 <floor+0x40>
 801181e:	2b33      	cmp	r3, #51	; 0x33
 8011820:	dd05      	ble.n	801182e <floor+0x8e>
 8011822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011826:	d101      	bne.n	801182c <floor+0x8c>
 8011828:	ee30 0b00 	vadd.f64	d0, d0, d0
 801182c:	bd30      	pop	{r4, r5, pc}
 801182e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011832:	f04f 32ff 	mov.w	r2, #4294967295
 8011836:	40e2      	lsrs	r2, r4
 8011838:	4202      	tst	r2, r0
 801183a:	d0f7      	beq.n	801182c <floor+0x8c>
 801183c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011878 <floor+0xd8>
 8011840:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184c:	ddc8      	ble.n	80117e0 <floor+0x40>
 801184e:	2900      	cmp	r1, #0
 8011850:	da02      	bge.n	8011858 <floor+0xb8>
 8011852:	2b14      	cmp	r3, #20
 8011854:	d103      	bne.n	801185e <floor+0xbe>
 8011856:	3101      	adds	r1, #1
 8011858:	ea20 0002 	bic.w	r0, r0, r2
 801185c:	e7c0      	b.n	80117e0 <floor+0x40>
 801185e:	2401      	movs	r4, #1
 8011860:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011864:	fa04 f303 	lsl.w	r3, r4, r3
 8011868:	4418      	add	r0, r3
 801186a:	42a8      	cmp	r0, r5
 801186c:	bf38      	it	cc
 801186e:	1909      	addcc	r1, r1, r4
 8011870:	e7f2      	b.n	8011858 <floor+0xb8>
 8011872:	2000      	movs	r0, #0
 8011874:	4601      	mov	r1, r0
 8011876:	e7b3      	b.n	80117e0 <floor+0x40>
 8011878:	8800759c 	.word	0x8800759c
 801187c:	7e37e43c 	.word	0x7e37e43c
 8011880:	bff00000 	.word	0xbff00000
 8011884:	000fffff 	.word	0x000fffff

08011888 <scalbn>:
 8011888:	b082      	sub	sp, #8
 801188a:	ed8d 0b00 	vstr	d0, [sp]
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011894:	b9a2      	cbnz	r2, 80118c0 <scalbn+0x38>
 8011896:	9a00      	ldr	r2, [sp, #0]
 8011898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801189c:	4313      	orrs	r3, r2
 801189e:	d03a      	beq.n	8011916 <scalbn+0x8e>
 80118a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011978 <scalbn+0xf0>
 80118a4:	4b40      	ldr	r3, [pc, #256]	; (80119a8 <scalbn+0x120>)
 80118a6:	ee20 7b07 	vmul.f64	d7, d0, d7
 80118aa:	4298      	cmp	r0, r3
 80118ac:	ed8d 7b00 	vstr	d7, [sp]
 80118b0:	da11      	bge.n	80118d6 <scalbn+0x4e>
 80118b2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011980 <scalbn+0xf8>
 80118b6:	ed9d 6b00 	vldr	d6, [sp]
 80118ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80118be:	e007      	b.n	80118d0 <scalbn+0x48>
 80118c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80118c4:	428a      	cmp	r2, r1
 80118c6:	d10a      	bne.n	80118de <scalbn+0x56>
 80118c8:	ed9d 7b00 	vldr	d7, [sp]
 80118cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80118d0:	ed8d 7b00 	vstr	d7, [sp]
 80118d4:	e01f      	b.n	8011916 <scalbn+0x8e>
 80118d6:	9b01      	ldr	r3, [sp, #4]
 80118d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80118dc:	3a36      	subs	r2, #54	; 0x36
 80118de:	4402      	add	r2, r0
 80118e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80118e4:	428a      	cmp	r2, r1
 80118e6:	dd0a      	ble.n	80118fe <scalbn+0x76>
 80118e8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011988 <scalbn+0x100>
 80118ec:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011990 <scalbn+0x108>
 80118f0:	eeb0 6b47 	vmov.f64	d6, d7
 80118f4:	9b01      	ldr	r3, [sp, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80118fc:	e7dd      	b.n	80118ba <scalbn+0x32>
 80118fe:	2a00      	cmp	r2, #0
 8011900:	dd0d      	ble.n	801191e <scalbn+0x96>
 8011902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801190a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801190e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011912:	e9cd 0100 	strd	r0, r1, [sp]
 8011916:	ed9d 0b00 	vldr	d0, [sp]
 801191a:	b002      	add	sp, #8
 801191c:	4770      	bx	lr
 801191e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011922:	da18      	bge.n	8011956 <scalbn+0xce>
 8011924:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011928:	4298      	cmp	r0, r3
 801192a:	9b01      	ldr	r3, [sp, #4]
 801192c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011930:	dd09      	ble.n	8011946 <scalbn+0xbe>
 8011932:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011988 <scalbn+0x100>
 8011936:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011990 <scalbn+0x108>
 801193a:	eeb0 6b47 	vmov.f64	d6, d7
 801193e:	2b00      	cmp	r3, #0
 8011940:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011944:	e7b9      	b.n	80118ba <scalbn+0x32>
 8011946:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011980 <scalbn+0xf8>
 801194a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011998 <scalbn+0x110>
 801194e:	eeb0 6b47 	vmov.f64	d6, d7
 8011952:	2b00      	cmp	r3, #0
 8011954:	e7f4      	b.n	8011940 <scalbn+0xb8>
 8011956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801195a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801195e:	3236      	adds	r2, #54	; 0x36
 8011960:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011964:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011968:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80119a0 <scalbn+0x118>
 801196c:	ec41 0b17 	vmov	d7, r0, r1
 8011970:	e7a3      	b.n	80118ba <scalbn+0x32>
 8011972:	bf00      	nop
 8011974:	f3af 8000 	nop.w
 8011978:	00000000 	.word	0x00000000
 801197c:	43500000 	.word	0x43500000
 8011980:	c2f8f359 	.word	0xc2f8f359
 8011984:	01a56e1f 	.word	0x01a56e1f
 8011988:	8800759c 	.word	0x8800759c
 801198c:	7e37e43c 	.word	0x7e37e43c
 8011990:	8800759c 	.word	0x8800759c
 8011994:	fe37e43c 	.word	0xfe37e43c
 8011998:	c2f8f359 	.word	0xc2f8f359
 801199c:	81a56e1f 	.word	0x81a56e1f
 80119a0:	00000000 	.word	0x00000000
 80119a4:	3c900000 	.word	0x3c900000
 80119a8:	ffff3cb0 	.word	0xffff3cb0

080119ac <_init>:
 80119ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ae:	bf00      	nop
 80119b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119b2:	bc08      	pop	{r3}
 80119b4:	469e      	mov	lr, r3
 80119b6:	4770      	bx	lr

080119b8 <_fini>:
 80119b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ba:	bf00      	nop
 80119bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119be:	bc08      	pop	{r3}
 80119c0:	469e      	mov	lr, r3
 80119c2:	4770      	bx	lr
